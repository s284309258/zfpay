2020-04-24 09:32:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-24 09:32:21 -Shutting down ExecutorService 'taskScheduler'
2020-04-24 09:32:21 -Shutting down ExecutorService 'getAsyncExecutor'
2020-04-24 09:32:21 -Shutting down Quartz Scheduler
2020-04-24 09:32:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-04-24 09:32:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-24 09:32:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-04-24 09:32:21 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-04-24 09:32:21 -HikariPool-1 - Shutdown initiated...
2020-04-24 09:32:21 -HikariPool-1 - Shutdown completed.
2020-04-24 17:14:15 -Starting LongEcologicalApplication on PC-201905161910 with PID 8980 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-24 17:14:15 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-24 17:14:15 -No active profile set, falling back to default profiles: default
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:14:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-24 17:14:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-24 17:14:16 -Finished Spring Data repository scanning in 41ms. Found 0 repository interfaces.
2020-04-24 17:14:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-24 17:14:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-24 17:14:16 -Finished Spring Data repository scanning in 17ms. Found 0 repository interfaces.
2020-04-24 17:14:17 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$19c7d06b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-24 17:14:17 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$144bb50b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-24 17:14:17 -Tomcat initialized with port(s): 8080 (http)
2020-04-24 17:14:17 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-24 17:14:17 -Starting service [Tomcat]
2020-04-24 17:14:17 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-24 17:14:17 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-24 17:14:17 -Initializing Spring embedded WebApplicationContext
2020-04-24 17:14:17 -Root WebApplicationContext: initialization completed in 2331 ms
2020-04-24 17:14:18 -Filter xssFilter was not registered (disabled)
2020-04-24 17:14:18 -HikariPool-1 - Starting...
2020-04-24 17:14:18 -HikariPool-1 - Start completed.
2020-04-24 17:14:18 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-24 17:14:18 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-24 17:14:18 -HHH000206: hibernate.properties not found
2020-04-24 17:14:18 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-24 17:14:19 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-24 17:14:19 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-24 17:14:19 -Using default implementation for ThreadExecutor
2020-04-24 17:14:19 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-24 17:14:19 -Quartz Scheduler v.2.3.0 created.
2020-04-24 17:14:19 -RAMJobStore initialized.
2020-04-24 17:14:19 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-24 17:14:19 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-24 17:14:19 -Quartz scheduler version: 2.3.0
2020-04-24 17:14:19 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@554566a8
2020-04-24 17:14:20 -STAET TaskExecutorConfig
2020-04-24 17:14:20 -Initializing ExecutorService
2020-04-24 17:14:20 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-24 17:14:20 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-24 17:14:20 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-24 17:14:21 -Initializing ExecutorService 'taskScheduler'
2020-04-24 17:14:21 -Starting Quartz Scheduler now
2020-04-24 17:14:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-24 17:14:21 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-24 17:14:21 -Using a shared selector for servlet write/read
2020-04-24 17:14:21 -Failed to start component [Connector[HTTP/1.1-8080]]
org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1001)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:259)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:197)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.startWebServer(ServletWebServerApplicationContext.java:311)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:164)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.BindException: Address already in use: bind
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:433)
	at sun.nio.ch.Net.bind(Net.java:425)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:236)
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)
	at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1067)
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1149)
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:561)
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:998)
	... 14 common frames omitted
2020-04-24 17:14:21 -Pausing ProtocolHandler ["http-nio-8080"]
2020-04-24 17:14:21 -Stopping service [Tomcat]
2020-04-24 17:14:21 -The stop() method was called on component [StandardServer[-1]] after stop() had already been called. The second call will be ignored.
2020-04-24 17:14:21 -Stopping ProtocolHandler ["http-nio-8080"]
2020-04-24 17:14:21 -Destroying ProtocolHandler ["http-nio-8080"]
2020-04-24 17:14:21 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-24 17:14:21 -

***************************
APPLICATION FAILED TO START
***************************

Description:

The Tomcat connector configured to listen on port 8080 failed to start. The port may already be in use or the connector may be misconfigured.

Action:

Verify the connector's configuration, identify and stop any process that's listening on port 8080, or configure this application to listen on another port.

2020-04-24 17:14:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-24 17:14:21 -Shutting down ExecutorService 'taskScheduler'
2020-04-24 17:14:21 -Shutting down ExecutorService 'getAsyncExecutor'
2020-04-24 17:14:21 -Shutting down Quartz Scheduler
2020-04-24 17:14:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-04-24 17:14:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-24 17:14:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-04-24 17:14:21 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-04-24 17:14:21 -HikariPool-1 - Shutdown initiated...
2020-04-24 17:14:21 -HikariPool-1 - Shutdown completed.
2020-04-24 17:23:50 -Starting LongEcologicalApplication on PC-201905161910 with PID 11092 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-24 17:23:50 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-24 17:23:50 -No active profile set, falling back to default profiles: default
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 17:23:51 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-24 17:23:51 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-24 17:23:51 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-04-24 17:23:51 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-24 17:23:51 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-24 17:23:51 -Finished Spring Data repository scanning in 17ms. Found 0 repository interfaces.
2020-04-24 17:23:51 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$bb8f8dd2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-24 17:23:51 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b6137272] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-24 17:23:52 -Tomcat initialized with port(s): 8080 (http)
2020-04-24 17:23:52 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-24 17:23:52 -Starting service [Tomcat]
2020-04-24 17:23:52 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-24 17:23:52 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-24 17:23:52 -Initializing Spring embedded WebApplicationContext
2020-04-24 17:23:52 -Root WebApplicationContext: initialization completed in 1824 ms
2020-04-24 17:23:52 -Filter xssFilter was not registered (disabled)
2020-04-24 17:23:52 -HikariPool-1 - Starting...
2020-04-24 17:23:52 -HikariPool-1 - Start completed.
2020-04-24 17:23:52 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-24 17:23:52 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-24 17:23:52 -HHH000206: hibernate.properties not found
2020-04-24 17:23:52 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-24 17:23:53 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-24 17:23:53 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-24 17:23:53 -Using default implementation for ThreadExecutor
2020-04-24 17:23:53 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-24 17:23:53 -Quartz Scheduler v.2.3.0 created.
2020-04-24 17:23:53 -RAMJobStore initialized.
2020-04-24 17:23:53 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-24 17:23:53 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-24 17:23:53 -Quartz scheduler version: 2.3.0
2020-04-24 17:23:53 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@72b2c5ed
2020-04-24 17:23:53 -STAET TaskExecutorConfig
2020-04-24 17:23:53 -Initializing ExecutorService
2020-04-24 17:23:53 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-24 17:23:54 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-24 17:23:54 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-24 17:23:54 -Initializing ExecutorService 'taskScheduler'
2020-04-24 17:23:54 -Starting Quartz Scheduler now
2020-04-24 17:23:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-24 17:23:54 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-24 17:23:54 -Using a shared selector for servlet write/read
2020-04-24 17:23:55 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-24 17:23:55 -Started LongEcologicalApplication in 5.199 seconds (JVM running for 6.047)
2020-04-24 17:25:20 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-24 17:25:20 -Initializing Servlet 'dispatcherServlet'
2020-04-24 17:25:20 -Completed initialization in 22 ms
2020-04-24 17:25:21 -此处进行解密+验签+身份验证
2020-04-24 17:25:21 -此处进行解密+验签+身份验证
2020-04-24 17:25:21 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-24 17:25:21 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-24 17:25:21 -Starting without optional epoll library
2020-04-24 17:25:21 -Starting without optional kqueue library
2020-04-24 17:25:22 -解密：
2020-04-24 17:25:22 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 17:25:22 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 17:25:22 -==> Parameters: 04(String), 04(String)
2020-04-24 17:25:22 -<==      Total: 1
2020-04-24 17:25:22 -耗时 : 455
2020-04-24 17:25:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-24 17:25:23 -耗时 : 1607
2020-04-24 17:25:23 -此处进行解密+验签+身份验证
2020-04-24 17:25:23 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"E57C05346F6D899CFC494491034F57CB","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|QGPD4Q40L8CO1Z31Q4NX68HK59RSHHCJ"}
2020-04-24 17:25:23 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 17:25:23 -token值=======181|QGPD4Q40L8CO1Z31Q4NX68HK59RSHHCJ
2020-04-24 17:25:23 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-24 17:25:23 -==> Parameters: 181(String)
2020-04-24 17:25:23 -<==      Total: 1
2020-04-24 17:25:23 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 17:25:23 -==> Parameters: 26(String)
2020-04-24 17:25:23 -<==      Total: 1
2020-04-24 17:25:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 17:25:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 17:25:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 17:25:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 17:25:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 17:25:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 17:25:23 -耗时 : 93
2020-04-24 17:25:25 -此处进行解密+验签+身份验证
2020-04-24 17:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:25 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 17:25:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 17:25:25 -==> Parameters: 181(String)
2020-04-24 17:25:25 -<==      Total: 1
2020-04-24 17:25:25 -耗时 : 6
2020-04-24 17:25:26 -此处进行解密+验签+身份验证
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 17:25:26 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 17:25:26 -==> Parameters: 181(String)
2020-04-24 17:25:26 -此处进行解密+验签+身份验证
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:26 -<==      Total: 2
2020-04-24 17:25:26 -耗时 : 83
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:26 -此处进行解密+验签+身份验证
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:26 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 17:25:26 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 17:25:26 -==> Parameters: 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -此处进行解密+验签+身份验证
2020-04-24 17:25:26 -耗时 : 3
2020-04-24 17:25:26 -解密：
2020-04-24 17:25:26 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 17:25:26 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 17:25:26 -==> Parameters: 01(String), 01(String)
2020-04-24 17:25:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 17:25:26 -<==      Total: 4
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 17:25:26 -耗时 : 2
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 17:25:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:25:26 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:26 -此处进行解密+验签+身份验证
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:26 -此处进行解密+验签+身份验证
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 17:25:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 17:25:26 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 17:25:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:25:26 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:26 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 17:25:26 -==> Parameters: 
2020-04-24 17:25:26 -<==      Total: 3
2020-04-24 17:25:26 -耗时 : 9
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 17:25:26 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 2
2020-04-24 17:25:26 -<==      Total: 2
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 17:25:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 17:25:26 -<==    Updates: 2
2020-04-24 17:25:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 17:25:26 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:26 -<==    Updates: 2
2020-04-24 17:25:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 17:25:26 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 17:25:26 -<==    Updates: 1
2020-04-24 17:25:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 17:25:26 -==> Parameters: 
2020-04-24 17:25:26 -<==    Updates: 1
2020-04-24 17:25:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 17:25:26 -==> Parameters: 
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 17:25:26 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 17:25:26 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 17:25:26 -<==    Updates: 1
2020-04-24 17:25:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:25:26 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 17:25:26 -<==    Updates: 1
2020-04-24 17:25:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:25:26 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 17:25:26 -<==    Updates: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -耗时 : 165
2020-04-24 17:25:26 -<==    Updates: 1
2020-04-24 17:25:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:26 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 17:25:26 -<==      Total: 1
2020-04-24 17:25:26 -耗时 : 213
2020-04-24 17:25:34 -此处进行解密+验签+身份验证
2020-04-24 17:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-24 17:25:34 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-24 17:25:34 -==> Parameters: 10(String)
2020-04-24 17:25:34 -<==      Total: 1
2020-04-24 17:25:34 -耗时 : 6
2020-04-24 17:25:37 -此处进行解密+验签+身份验证
2020-04-24 17:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:37 -此处进行解密+验签+身份验证
2020-04-24 17:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:37 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 17:25:37 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-24 17:25:37 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-24 17:25:37 -==> Parameters: 181(String)
2020-04-24 17:25:37 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 17:25:37 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:38 -<==      Total: 1164
2020-04-24 17:25:38 -耗时 : 1157
2020-04-24 17:25:38 -<==      Total: 1599
2020-04-24 17:25:38 -耗时 : 1497
2020-04-24 17:25:40 -此处进行解密+验签+身份验证
2020-04-24 17:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 17:25:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 17:25:40 -==> Parameters: 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -耗时 : 3
2020-04-24 17:25:40 -此处进行解密+验签+身份验证
2020-04-24 17:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 17:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 17:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 17:25:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:25:40 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:40 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 2
2020-04-24 17:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 17:25:40 -<==    Updates: 2
2020-04-24 17:25:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 17:25:40 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:40 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:40 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 17:25:40 -<==    Updates: 1
2020-04-24 17:25:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 17:25:40 -==> Parameters: 
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:40 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:40 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 17:25:40 -<==    Updates: 1
2020-04-24 17:25:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:25:40 -==> Parameters: 181(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:40 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:25:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 17:25:40 -<==    Updates: 1
2020-04-24 17:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:25:40 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 17:25:40 -<==      Total: 1
2020-04-24 17:25:40 -耗时 : 155
2020-04-24 17:25:42 -此处进行解密+验签+身份验证
2020-04-24 17:25:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-24 17:25:42 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-24 17:25:42 -==> Parameters: 1(String), 181(String), collegeFlag(String)
2020-04-24 17:25:42 -<==    Updates: 1
2020-04-24 17:25:42 -耗时 : 528
2020-04-24 17:25:42 -此处进行解密+验签+身份验证
2020-04-24 17:25:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:42 -请求地址 : http://192.168.191.1:8080/api/sys/moneylockercollege/getMoneyLockerCollegeList
2020-04-24 17:25:42 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,cacheKey:zfpay_sys_money_locker_college_list_0
2020-04-24 17:25:42 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,has cacheKey:zfpay_sys_money_locker_college_list_0 , return
2020-04-24 17:25:42 -耗时 : 7
2020-04-24 17:25:51 -此处进行解密+验签+身份验证
2020-04-24 17:25:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:25:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:25:51 -请求地址 : http://192.168.191.1:8080/api/sys/moneylockercollege/getMoneyLockerCollegeDetail
2020-04-24 17:25:51 -Map com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeDetail(Map) enable cache service,cacheKey:zfpay_sys_money_locker_college_43
2020-04-24 17:25:51 -Map com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeDetail(Map) enable cache service,has cacheKey:zfpay_sys_money_locker_college_43 , return
2020-04-24 17:25:51 -耗时 : 3
2020-04-24 17:26:10 -此处进行解密+验签+身份验证
2020-04-24 17:26:10 -此处进行解密+验签+身份验证
2020-04-24 17:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 17:26:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 17:26:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 17:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 17:26:10 -==> Parameters: 181(String)
2020-04-24 17:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -耗时 : 2
2020-04-24 17:26:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:26:10 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 2
2020-04-24 17:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 17:26:10 -<==    Updates: 2
2020-04-24 17:26:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 17:26:10 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:10 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 17:26:10 -<==    Updates: 1
2020-04-24 17:26:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 17:26:10 -==> Parameters: 
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:10 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:10 -==> Parameters: 0(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 17:26:10 -<==    Updates: 1
2020-04-24 17:26:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:26:10 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:10 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 17:26:10 -<==    Updates: 1
2020-04-24 17:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:10 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 17:26:10 -<==      Total: 1
2020-04-24 17:26:10 -耗时 : 69
2020-04-24 17:26:16 -此处进行解密+验签+身份验证
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-24 17:26:16 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-24 17:26:16 -==> Parameters: 181(String)
2020-04-24 17:26:16 -<==      Total: 1
2020-04-24 17:26:16 -耗时 : 4
2020-04-24 17:26:16 -此处进行解密+验签+身份验证
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-24 17:26:16 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-24 17:26:16 -==> Parameters: 181(String), 202004(String)
2020-04-24 17:26:16 -<==      Total: 1
2020-04-24 17:26:16 -耗时 : 10
2020-04-24 17:26:16 -此处进行解密+验签+身份验证
2020-04-24 17:26:16 -此处进行解密+验签+身份验证
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-24 17:26:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-24 17:26:16 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-24 17:26:16 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-24 17:26:16 -==> Parameters: 181(String), 202004(String)
2020-04-24 17:26:16 -==> Parameters: 181(String), 202004(String)
2020-04-24 17:26:16 -<==      Total: 1
2020-04-24 17:26:16 -耗时 : 9
2020-04-24 17:26:16 -<==      Total: 1
2020-04-24 17:26:16 -耗时 : 9
2020-04-24 17:26:18 -此处进行解密+验签+身份验证
2020-04-24 17:26:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:18 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitMposList
2020-04-24 17:26:18 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, mer_name, trans_amount, trans_type, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_share_benefit_record WHERE user_id = ? and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-04-24 17:26:18 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-24 17:26:21 -<==      Total: 0
2020-04-24 17:26:21 -耗时 : 3214
2020-04-24 17:26:23 -此处进行解密+验签+身份验证
2020-04-24 17:26:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 17:26:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 17:26:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 17:26:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:26:23 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:23 -此处进行解密+验签+身份验证
2020-04-24 17:26:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 17:26:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 17:26:23 -==> Parameters: 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -耗时 : 20
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:23 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 2
2020-04-24 17:26:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:23 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 17:26:23 -<==    Updates: 2
2020-04-24 17:26:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 17:26:23 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:23 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:23 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 17:26:23 -<==    Updates: 1
2020-04-24 17:26:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 17:26:23 -==> Parameters: 
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:23 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:23 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 17:26:23 -<==    Updates: 1
2020-04-24 17:26:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:26:23 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:23 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:23 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 17:26:23 -<==    Updates: 1
2020-04-24 17:26:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:23 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 17:26:23 -<==      Total: 1
2020-04-24 17:26:23 -耗时 : 178
2020-04-24 17:26:26 -此处进行解密+验签+身份验证
2020-04-24 17:26:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:26 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-24 17:26:26 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-24 17:26:26 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-24 17:26:26 -<==      Total: 1
2020-04-24 17:26:26 -耗时 : 35
2020-04-24 17:26:28 -此处进行解密+验签+身份验证
2020-04-24 17:26:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 17:26:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 17:26:28 -==> Parameters: 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -耗时 : 1
2020-04-24 17:26:28 -此处进行解密+验签+身份验证
2020-04-24 17:26:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 17:26:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 17:26:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 17:26:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 17:26:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 17:26:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:26:28 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:28 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 2
2020-04-24 17:26:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 17:26:28 -<==    Updates: 2
2020-04-24 17:26:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 17:26:28 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:28 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:28 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 17:26:28 -<==    Updates: 1
2020-04-24 17:26:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 17:26:28 -==> Parameters: 
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:28 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:28 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 17:26:28 -<==    Updates: 1
2020-04-24 17:26:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 17:26:28 -==> Parameters: 181(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:28 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 17:26:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 17:26:28 -<==    Updates: 1
2020-04-24 17:26:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 17:26:28 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 17:26:28 -<==      Total: 1
2020-04-24 17:26:28 -耗时 : 72
2020-04-24 18:13:44 -Starting LongEcologicalApplication on PC-201905161910 with PID 14192 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-24 18:13:44 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-24 18:13:44 -No active profile set, falling back to default profiles: default
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:45 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-24 18:13:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-24 18:13:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-24 18:13:46 -Finished Spring Data repository scanning in 73ms. Found 0 repository interfaces.
2020-04-24 18:13:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-24 18:13:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-24 18:13:46 -Finished Spring Data repository scanning in 66ms. Found 0 repository interfaces.
2020-04-24 18:13:46 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c63deddb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-24 18:13:46 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c0c1d27b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-24 18:13:47 -Tomcat initialized with port(s): 8080 (http)
2020-04-24 18:13:47 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-24 18:13:47 -Starting service [Tomcat]
2020-04-24 18:13:47 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-24 18:13:47 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-24 18:13:48 -Initializing Spring embedded WebApplicationContext
2020-04-24 18:13:48 -Root WebApplicationContext: initialization completed in 3494 ms
2020-04-24 18:13:48 -Filter xssFilter was not registered (disabled)
2020-04-24 18:13:48 -HikariPool-1 - Starting...
2020-04-24 18:13:49 -HikariPool-1 - Start completed.
2020-04-24 18:13:49 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-24 18:13:50 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-24 18:13:50 -HHH000206: hibernate.properties not found
2020-04-24 18:13:50 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-24 18:13:50 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-24 18:13:50 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-24 18:13:51 -Using default implementation for ThreadExecutor
2020-04-24 18:13:51 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-24 18:13:51 -Quartz Scheduler v.2.3.0 created.
2020-04-24 18:13:51 -RAMJobStore initialized.
2020-04-24 18:13:51 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-24 18:13:51 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-24 18:13:51 -Quartz scheduler version: 2.3.0
2020-04-24 18:13:51 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4e8598d9
2020-04-24 18:13:51 -STAET TaskExecutorConfig
2020-04-24 18:13:51 -Initializing ExecutorService
2020-04-24 18:13:51 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-24 18:13:52 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-24 18:13:52 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-24 18:13:53 -Initializing ExecutorService 'taskScheduler'
2020-04-24 18:13:53 -Starting Quartz Scheduler now
2020-04-24 18:13:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-24 18:13:53 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-24 18:13:53 -Using a shared selector for servlet write/read
2020-04-24 18:13:53 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-24 18:13:53 -Started LongEcologicalApplication in 9.966 seconds (JVM running for 13.247)
2020-04-24 18:15:13 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-24 18:15:13 -Initializing Servlet 'dispatcherServlet'
2020-04-24 18:15:13 -Completed initialization in 11 ms
2020-04-24 18:15:13 -此处进行解密+验签+身份验证
2020-04-24 18:15:14 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"10B167815B652E64AEED3957D565031D","device_no":"1.1.6","device_type":"android","sys_user_account":"13322990711"}
2020-04-24 18:15:14 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:15:14 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:15:14 -==> Parameters: 13322990711(String)
2020-04-24 18:15:14 -<==      Total: 1
2020-04-24 18:15:14 -耗时 : 619
2020-04-24 18:15:22 -此处进行解密+验签+身份验证
2020-04-24 18:15:22 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"61C7FAB9956A422486F8966071107C3D","device_no":"1.1.6","device_type":"android","sys_user_account":"13322990711"}
2020-04-24 18:15:22 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:15:22 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:15:22 -==> Parameters: 13322990711(String)
2020-04-24 18:15:22 -<==      Total: 1
2020-04-24 18:15:22 -Starting without optional epoll library
2020-04-24 18:15:22 -Starting without optional kqueue library
2020-04-24 18:15:23 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-24 18:15:23 -==> Parameters: android(String), 1.1.6(String), (String), null, 192.168.191.1(String), 20200424(String), 181523(String), 181(Integer)
2020-04-24 18:15:23 -<==    Updates: 1
2020-04-24 18:15:23 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 18:15:23 -==> Parameters: 26(String)
2020-04-24 18:15:23 -<==      Total: 1
2020-04-24 18:15:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:15:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:15:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:15:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:15:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:15:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:15:23 -耗时 : 1027
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:15:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:15:24 -==> Parameters: 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -耗时 : 7
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -解密：
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 18:15:24 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 18:15:24 -==> Parameters: 01(String), 01(String)
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:15:24 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:15:24 -==> Parameters: 181(String)
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:15:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:15:24 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:24 -<==      Total: 4
2020-04-24 18:15:24 -耗时 : 76
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 18:15:24 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 18:15:24 -==> Parameters: 
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:15:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:15:24 -==> Parameters: 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -耗时 : 15
2020-04-24 18:15:24 -此处进行解密+验签+身份验证
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:15:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:15:24 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 3
2020-04-24 18:15:24 -耗时 : 35
2020-04-24 18:15:24 -<==      Total: 2
2020-04-24 18:15:24 -耗时 : 101
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:15:24 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 2
2020-04-24 18:15:24 -<==      Total: 2
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:15:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:15:24 -<==    Updates: 2
2020-04-24 18:15:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:15:24 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:24 -<==    Updates: 2
2020-04-24 18:15:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:15:24 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:15:24 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:15:24 -<==    Updates: 1
2020-04-24 18:15:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:15:24 -==> Parameters: 
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:15:24 -<==    Updates: 1
2020-04-24 18:15:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:15:24 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:15:24 -<==    Updates: 1
2020-04-24 18:15:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:15:24 -==> Parameters: 
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:15:24 -<==    Updates: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -耗时 : 281
2020-04-24 18:15:24 -<==    Updates: 1
2020-04-24 18:15:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:15:24 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:15:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:15:24 -<==    Updates: 1
2020-04-24 18:15:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:15:24 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:15:24 -<==      Total: 1
2020-04-24 18:15:24 -耗时 : 373
2020-04-24 18:15:46 -此处进行解密+验签+身份验证
2020-04-24 18:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-24 18:15:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-24 18:15:46 -此处进行解密+验签+身份验证
2020-04-24 18:15:46 -==> Parameters: 181(String)
2020-04-24 18:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:15:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 18:15:46 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 18:15:46 -==> Parameters: 181(String), 181(String)
2020-04-24 18:15:47 -<==      Total: 1164
2020-04-24 18:15:47 -耗时 : 330
2020-04-24 18:15:47 -<==      Total: 1599
2020-04-24 18:15:47 -耗时 : 578
2020-04-24 18:16:51 -此处进行解密+验签+身份验证
2020-04-24 18:16:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:16:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:16:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-24 18:16:51 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-24 18:16:51 -==> Parameters: 181(String)
2020-04-24 18:16:52 -<==      Total: 1163
2020-04-24 18:16:52 -耗时 : 241
2020-04-24 18:17:03 -此处进行解密+验签+身份验证
2020-04-24 18:17:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:17:03 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:17:03 -==> Parameters: 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -耗时 : 11
2020-04-24 18:17:03 -此处进行解密+验签+身份验证
2020-04-24 18:17:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:03 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:17:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:17:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:17:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:17:03 -==> Parameters: 181(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:03 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 2
2020-04-24 18:17:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:03 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:17:03 -<==    Updates: 2
2020-04-24 18:17:03 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:17:03 -==> Parameters: 181(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:03 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:03 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:17:03 -<==    Updates: 1
2020-04-24 18:17:03 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:17:03 -==> Parameters: 
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:03 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:03 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:17:03 -<==    Updates: 1
2020-04-24 18:17:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:17:03 -==> Parameters: 181(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:03 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:03 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:17:03 -<==    Updates: 1
2020-04-24 18:17:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:03 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:17:03 -<==      Total: 1
2020-04-24 18:17:03 -耗时 : 144
2020-04-24 18:17:07 -此处进行解密+验签+身份验证
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-24 18:17:07 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-24 18:17:07 -==> Parameters: 1(String), 181(String), recallFlag(String)
2020-04-24 18:17:07 -<==    Updates: 1
2020-04-24 18:17:07 -耗时 : 11
2020-04-24 18:17:07 -此处进行解密+验签+身份验证
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:07 -此处进行解密+验签+身份验证
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:07 -此处进行解密+验签+身份验证
2020-04-24 18:17:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:17:07 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:17:07 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:17:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:07 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:07 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:07 -<==      Total: 0
2020-04-24 18:17:07 -耗时 : 3
2020-04-24 18:17:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:17:07 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:17:07 -<==      Total: 0
2020-04-24 18:17:07 -耗时 : 4
2020-04-24 18:17:07 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:07 -<==      Total: 0
2020-04-24 18:17:07 -耗时 : 4
2020-04-24 18:17:08 -此处进行解密+验签+身份验证
2020-04-24 18:17:08 -此处进行解密+验签+身份验证
2020-04-24 18:17:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:08 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:08 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:08 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:08 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:08 -<==      Total: 0
2020-04-24 18:17:08 -<==      Total: 0
2020-04-24 18:17:08 -耗时 : 3
2020-04-24 18:17:08 -耗时 : 3
2020-04-24 18:17:08 -此处进行解密+验签+身份验证
2020-04-24 18:17:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:08 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:08 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:08 -<==      Total: 0
2020-04-24 18:17:08 -耗时 : 5
2020-04-24 18:17:09 -此处进行解密+验签+身份验证
2020-04-24 18:17:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:17:09 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:09 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:09 -<==      Total: 0
2020-04-24 18:17:09 -耗时 : 4
2020-04-24 18:17:09 -此处进行解密+验签+身份验证
2020-04-24 18:17:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:17:09 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:09 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:09 -<==      Total: 0
2020-04-24 18:17:09 -耗时 : 5
2020-04-24 18:17:09 -此处进行解密+验签+身份验证
2020-04-24 18:17:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:17:09 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:09 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:09 -<==      Total: 0
2020-04-24 18:17:09 -耗时 : 3
2020-04-24 18:17:10 -此处进行解密+验签+身份验证
2020-04-24 18:17:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:10 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:10 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:10 -<==      Total: 0
2020-04-24 18:17:10 -耗时 : 2
2020-04-24 18:17:10 -此处进行解密+验签+身份验证
2020-04-24 18:17:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:10 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:10 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:10 -<==      Total: 0
2020-04-24 18:17:10 -耗时 : 2
2020-04-24 18:17:10 -此处进行解密+验签+身份验证
2020-04-24 18:17:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:10 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:10 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:10 -<==      Total: 0
2020-04-24 18:17:10 -耗时 : 2
2020-04-24 18:17:11 -此处进行解密+验签+身份验证
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:17:11 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:11 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:11 -此处进行解密+验签+身份验证
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:17:11 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:11 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:11 -此处进行解密+验签+身份验证
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:17:11 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:11 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:11 -<==      Total: 0
2020-04-24 18:17:11 -<==      Total: 0
2020-04-24 18:17:11 -耗时 : 38
2020-04-24 18:17:11 -<==      Total: 0
2020-04-24 18:17:11 -耗时 : 49
2020-04-24 18:17:11 -耗时 : 57
2020-04-24 18:17:11 -此处进行解密+验签+身份验证
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:11 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:11 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:11 -<==      Total: 0
2020-04-24 18:17:11 -耗时 : 2
2020-04-24 18:17:11 -此处进行解密+验签+身份验证
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:11 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:11 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:11 -<==      Total: 0
2020-04-24 18:17:11 -耗时 : 3
2020-04-24 18:17:11 -此处进行解密+验签+身份验证
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:17:11 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:17:11 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:11 -<==      Total: 0
2020-04-24 18:17:11 -耗时 : 3
2020-04-24 18:17:12 -此处进行解密+验签+身份验证
2020-04-24 18:17:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:17:12 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:12 -==> Parameters: 181(String), 00(String)
2020-04-24 18:17:12 -此处进行解密+验签+身份验证
2020-04-24 18:17:12 -<==      Total: 0
2020-04-24 18:17:12 -耗时 : 4
2020-04-24 18:17:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:12 -此处进行解密+验签+身份验证
2020-04-24 18:17:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:17:12 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:17:12 -==> Parameters: 181(String), 08(String)
2020-04-24 18:17:12 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:17:12 -==> Parameters: 181(String), 09(String)
2020-04-24 18:17:12 -<==      Total: 0
2020-04-24 18:17:12 -<==      Total: 0
2020-04-24 18:17:12 -耗时 : 3
2020-04-24 18:17:12 -耗时 : 4
2020-04-24 18:17:18 -此处进行解密+验签+身份验证
2020-04-24 18:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:17:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:17:18 -==> Parameters: 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -耗时 : 1
2020-04-24 18:17:18 -此处进行解密+验签+身份验证
2020-04-24 18:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:17:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:17:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:17:18 -==> Parameters: 181(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:18 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 2
2020-04-24 18:17:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:18 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:17:18 -<==    Updates: 2
2020-04-24 18:17:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:17:18 -==> Parameters: 181(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:18 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:18 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:17:18 -<==    Updates: 1
2020-04-24 18:17:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:17:18 -==> Parameters: 
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:18 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:18 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:17:18 -<==    Updates: 1
2020-04-24 18:17:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:17:18 -==> Parameters: 181(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:18 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:17:18 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:17:18 -<==    Updates: 1
2020-04-24 18:17:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:17:18 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:17:18 -<==      Total: 1
2020-04-24 18:17:18 -耗时 : 67
2020-04-24 18:21:36 -此处进行解密+验签+身份验证
2020-04-24 18:21:36 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-24 18:21:36 -token值=======181|1MKH1JZI6WGHHJQI8CQF2NCC71MW9S13
2020-04-24 18:21:36 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-24 18:21:36 -==> Parameters: null, 181(String)
2020-04-24 18:21:36 -<==    Updates: 1
2020-04-24 18:21:36 -耗时 : 32
2020-04-24 18:22:07 -此处进行解密+验签+身份验证
2020-04-24 18:22:07 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"F94E2CA27D236D2372C99D7C682FD287","device_no":"1.1.6","device_type":"android","sys_user_account":"13715278397"}
2020-04-24 18:22:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:22:07 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:22:07 -==> Parameters: 13715278397(String)
2020-04-24 18:22:07 -<==      Total: 1
2020-04-24 18:22:07 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-24 18:22:07 -==> Parameters: android(String), 1.1.6(String), (String), null, 192.168.191.1(String), 20200424(String), 182207(String), 1926(Integer)
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 18:22:08 -==> Parameters: 26(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:22:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:22:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:22:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:22:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:22:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:22:08 -耗时 : 70
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:08 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-04-24 18:22:08 -==> Parameters: 1926(String)
2020-04-24 18:22:08 -<==      Total: 0
2020-04-24 18:22:08 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_1926,save content:null
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:22:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:22:08 -==> Parameters: 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -耗时 : 1
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -解密：
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 18:22:08 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 18:22:08 -==> Parameters: 01(String), 01(String)
2020-04-24 18:22:08 -<==      Total: 4
2020-04-24 18:22:08 -耗时 : 12
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1926
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1926 , return
2020-04-24 18:22:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:22:08 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: applyRateFlag(String), 1926(String)
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 2(Integer), 2(Integer), 1926(String), applyRateFlag(String)
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 18:22:08 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 18:22:08 -==> Parameters: 1926(String)
2020-04-24 18:22:08 -<==      Total: 2
2020-04-24 18:22:08 -耗时 : 4
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:22:08 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: recallFlag(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 0(Integer), 0(Integer), 1926(String), recallFlag(String)
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:22:08 -==> Parameters: 
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: collegeFlag(String), 1926(String)
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1926
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1926 , return
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:22:08 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 25(Integer), 25(Integer), 1926(String), collegeFlag(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -此处进行解密+验签+身份验证
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: applyRateFlag(String), 1926(String)
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:22:08 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: cardFlag(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 2(Integer), 2(Integer), 1926(String), applyRateFlag(String)
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 18:22:08 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 18:22:08 -==> Parameters: 
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 2(Integer), 2(Integer), 1926(String), cardFlag(String)
2020-04-24 18:22:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:22:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:22:08 -==> Parameters: 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -耗时 : 2
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:22:08 -<==      Total: 3
2020-04-24 18:22:08 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:08 -耗时 : 7
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: recallFlag(String), 1926(String)
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: appImgFlag(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 0(Integer), 0(Integer), 1926(String), recallFlag(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -耗时 : 66
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:22:08 -==> Parameters: 
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: collegeFlag(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 25(Integer), 25(Integer), 1926(String), collegeFlag(String)
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:22:08 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: cardFlag(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:08 -==> Parameters: 2(Integer), 2(Integer), 1926(String), cardFlag(String)
2020-04-24 18:22:08 -<==    Updates: 1
2020-04-24 18:22:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:08 -==> Parameters: appImgFlag(String), 1926(String)
2020-04-24 18:22:08 -<==      Total: 1
2020-04-24 18:22:08 -耗时 : 74
2020-04-24 18:22:42 -此处进行解密+验签+身份验证
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-24 18:22:42 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-24 18:22:42 -==> Parameters: 1(String), 1926(String), recallFlag(String)
2020-04-24 18:22:42 -此处进行解密+验签+身份验证
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:22:42 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:22:42 -==> Parameters: 1926(String), 00(String)
2020-04-24 18:22:42 -<==      Total: 0
2020-04-24 18:22:42 -耗时 : 2
2020-04-24 18:22:42 -<==    Updates: 1
2020-04-24 18:22:42 -耗时 : 37
2020-04-24 18:22:42 -此处进行解密+验签+身份验证
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:42 -此处进行解密+验签+身份验证
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:22:42 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:22:42 -==> Parameters: 1926(String), 09(String)
2020-04-24 18:22:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:22:42 -<==      Total: 0
2020-04-24 18:22:42 -耗时 : 2
2020-04-24 18:22:42 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:22:42 -==> Parameters: 1926(String), 08(String)
2020-04-24 18:22:42 -<==      Total: 0
2020-04-24 18:22:42 -耗时 : 2
2020-04-24 18:22:44 -此处进行解密+验签+身份验证
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:22:44 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:22:44 -==> Parameters: 1926(String), 09(String)
2020-04-24 18:22:44 -<==      Total: 0
2020-04-24 18:22:44 -耗时 : 4
2020-04-24 18:22:44 -此处进行解密+验签+身份验证
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:22:44 -此处进行解密+验签+身份验证
2020-04-24 18:22:44 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:22:44 -==> Parameters: 1926(String), 08(String)
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:22:44 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:22:44 -<==      Total: 0
2020-04-24 18:22:44 -耗时 : 3
2020-04-24 18:22:44 -==> Parameters: 1926(String), 00(String)
2020-04-24 18:22:44 -<==      Total: 0
2020-04-24 18:22:44 -耗时 : 3
2020-04-24 18:22:44 -此处进行解密+验签+身份验证
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:22:44 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:22:44 -==> Parameters: 1926(String), 00(String)
2020-04-24 18:22:44 -<==      Total: 0
2020-04-24 18:22:44 -耗时 : 3
2020-04-24 18:22:44 -此处进行解密+验签+身份验证
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:44 -此处进行解密+验签+身份验证
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:22:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:44 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:22:44 -==> Parameters: 1926(String), 08(String)
2020-04-24 18:22:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:22:44 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:22:44 -<==      Total: 0
2020-04-24 18:22:44 -==> Parameters: 1926(String), 09(String)
2020-04-24 18:22:44 -耗时 : 1
2020-04-24 18:22:44 -<==      Total: 0
2020-04-24 18:22:44 -耗时 : 1
2020-04-24 18:22:45 -此处进行解密+验签+身份验证
2020-04-24 18:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:45 -此处进行解密+验签+身份验证
2020-04-24 18:22:45 -此处进行解密+验签+身份验证
2020-04-24 18:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:22:45 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:45 -==> Parameters: 1926(String), 09(String)
2020-04-24 18:22:45 -<==      Total: 0
2020-04-24 18:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:45 -耗时 : 1
2020-04-24 18:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:22:45 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:22:45 -==> Parameters: 1926(String), 00(String)
2020-04-24 18:22:45 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:22:45 -==> Parameters: 1926(String), 08(String)
2020-04-24 18:22:45 -<==      Total: 0
2020-04-24 18:22:45 -耗时 : 1
2020-04-24 18:22:45 -<==      Total: 0
2020-04-24 18:22:45 -耗时 : 3
2020-04-24 18:22:46 -此处进行解密+验签+身份验证
2020-04-24 18:22:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:22:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1926
2020-04-24 18:22:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1926 , return
2020-04-24 18:22:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:22:46 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:46 -==> Parameters: applyRateFlag(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:46 -==> Parameters: 2(Integer), 2(Integer), 1926(String), applyRateFlag(String)
2020-04-24 18:22:46 -此处进行解密+验签+身份验证
2020-04-24 18:22:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1926
2020-04-24 18:22:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1926 , return
2020-04-24 18:22:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:22:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:22:46 -==> Parameters: 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -耗时 : 1
2020-04-24 18:22:46 -<==    Updates: 1
2020-04-24 18:22:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:22:46 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:46 -==> Parameters: recallFlag(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:46 -==> Parameters: 0(Integer), 0(Integer), 1926(String), recallFlag(String)
2020-04-24 18:22:46 -<==    Updates: 1
2020-04-24 18:22:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:22:46 -==> Parameters: 
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:46 -==> Parameters: collegeFlag(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:46 -==> Parameters: 25(Integer), 25(Integer), 1926(String), collegeFlag(String)
2020-04-24 18:22:46 -<==    Updates: 1
2020-04-24 18:22:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:22:46 -==> Parameters: 1926(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:46 -==> Parameters: cardFlag(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:22:46 -==> Parameters: 2(Integer), 2(Integer), 1926(String), cardFlag(String)
2020-04-24 18:22:46 -<==    Updates: 1
2020-04-24 18:22:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:22:46 -==> Parameters: appImgFlag(String), 1926(String)
2020-04-24 18:22:46 -<==      Total: 1
2020-04-24 18:22:46 -耗时 : 81
2020-04-24 18:22:50 -此处进行解密+验签+身份验证
2020-04-24 18:22:50 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-24 18:22:50 -token值=======1926|WLF0BJJ5SRPRM8I8KSPC8MM2LILNFR0V
2020-04-24 18:22:50 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-24 18:22:50 -==> Parameters: null, 1926(String)
2020-04-24 18:22:50 -<==    Updates: 1
2020-04-24 18:22:50 -耗时 : 31
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"61C7FAB9956A422486F8966071107C3D","device_no":"1.1.6","device_type":"android","sys_user_account":"13322990711"}
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:23:02 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:23:02 -==> Parameters: 13322990711(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-24 18:23:02 -==> Parameters: android(String), 1.1.6(String), (String), null, 192.168.191.1(String), 20200424(String), 182302(String), 181(Integer)
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 18:23:02 -==> Parameters: 26(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:23:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:23:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:23:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:23:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:23:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:23:02 -耗时 : 22
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:23:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:23:02 -==> Parameters: 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -耗时 : 2
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -解密：
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 18:23:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 18:23:02 -==> Parameters: 01(String), 01(String)
2020-04-24 18:23:02 -<==      Total: 4
2020-04-24 18:23:02 -耗时 : 2
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 18:23:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 18:23:02 -==> Parameters: 181(String)
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:02 -<==      Total: 2
2020-04-24 18:23:02 -耗时 : 2
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 18:23:02 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 18:23:02 -==> Parameters: 
2020-04-24 18:23:02 -<==      Total: 3
2020-04-24 18:23:02 -耗时 : 1
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:23:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:23:02 -==> Parameters: 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -耗时 : 1
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:23:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:23:02 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:02 -此处进行解密+验签+身份验证
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:23:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:23:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:23:02 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 2
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 2
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:23:02 -<==    Updates: 2
2020-04-24 18:23:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:23:02 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:23:02 -<==    Updates: 2
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:23:02 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:23:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:23:02 -==> Parameters: 
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:23:02 -==> Parameters: 
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:23:02 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:23:02 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -耗时 : 60
2020-04-24 18:23:02 -<==    Updates: 1
2020-04-24 18:23:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:02 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:23:02 -<==      Total: 1
2020-04-24 18:23:02 -耗时 : 63
2020-04-24 18:23:10 -此处进行解密+验签+身份验证
2020-04-24 18:23:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:23:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:23:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:23:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:23:10 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 2
2020-04-24 18:23:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:23:10 -<==    Updates: 2
2020-04-24 18:23:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:23:10 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:10 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:23:10 -<==    Updates: 1
2020-04-24 18:23:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:23:10 -==> Parameters: 
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:10 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:10 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:23:10 -<==    Updates: 1
2020-04-24 18:23:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:23:10 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:10 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:23:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:23:10 -<==    Updates: 1
2020-04-24 18:23:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:23:10 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:23:10 -<==      Total: 1
2020-04-24 18:23:10 -耗时 : 55
2020-04-24 18:23:11 -此处进行解密+验签+身份验证
2020-04-24 18:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-24 18:23:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-24 18:23:11 -==> Parameters: 181(String)
2020-04-24 18:23:11 -此处进行解密+验签+身份验证
2020-04-24 18:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 18:23:11 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 18:23:11 -==> Parameters: 181(String), 181(String)
2020-04-24 18:23:11 -<==      Total: 1164
2020-04-24 18:23:11 -耗时 : 147
2020-04-24 18:23:12 -<==      Total: 1599
2020-04-24 18:23:12 -耗时 : 407
2020-04-24 18:23:13 -此处进行解密+验签+身份验证
2020-04-24 18:23:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-24 18:23:13 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-24 18:23:13 -==> Parameters: 181(String)
2020-04-24 18:23:14 -<==      Total: 1163
2020-04-24 18:23:14 -耗时 : 219
2020-04-24 18:23:27 -此处进行解密+验签+身份验证
2020-04-24 18:23:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-04-24 18:23:27 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-04-24 18:23:27 -==> Parameters: 181(String)
2020-04-24 18:23:27 -此处进行解密+验签+身份验证
2020-04-24 18:23:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:23:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:23:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-04-24 18:23:27 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-04-24 18:23:27 -==> Parameters: 181(String), M351846173306(String)
2020-04-24 18:23:27 -<==      Total: 144
2020-04-24 18:23:27 -耗时 : 60
2020-04-24 18:23:27 -<==      Total: 1
2020-04-24 18:23:27 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-04-24 18:23:27 -==> Parameters: 
2020-04-24 18:23:27 -<==      Total: 101
2020-04-24 18:23:27 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-24 18:23:27 -==> Parameters: M351846173306(String)
2020-04-24 18:23:27 -<==      Total: 1
2020-04-24 18:23:27 -耗时 : 168
2020-04-24 18:25:25 -此处进行解密+验签+身份验证
2020-04-24 18:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:25:25 -此处进行解密+验签+身份验证
2020-04-24 18:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:25:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:25:25 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:25:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:25:25 -==> Parameters: 181(String)
2020-04-24 18:25:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:25:25 -==> Parameters: 181(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -耗时 : 6
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:25:25 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 2
2020-04-24 18:25:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:25:25 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:25:25 -<==    Updates: 2
2020-04-24 18:25:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:25:25 -==> Parameters: 181(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:25:25 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:25:25 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:25:25 -<==    Updates: 1
2020-04-24 18:25:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:25:25 -==> Parameters: 
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:25:25 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:25:25 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:25:25 -<==    Updates: 1
2020-04-24 18:25:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:25:25 -==> Parameters: 181(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:25:25 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:25:25 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:25:25 -<==    Updates: 1
2020-04-24 18:25:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:25:25 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:25:25 -<==      Total: 1
2020-04-24 18:25:25 -耗时 : 112
2020-04-24 18:25:32 -此处进行解密+验签+身份验证
2020-04-24 18:25:32 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-24 18:25:32 -token值=======181|D77AKPDISN03XQGW7ZQFHCM1TCWN88FM
2020-04-24 18:25:32 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-24 18:25:32 -==> Parameters: null, 181(String)
2020-04-24 18:25:32 -<==    Updates: 1
2020-04-24 18:25:32 -耗时 : 7
2020-04-24 18:25:45 -此处进行解密+验签+身份验证
2020-04-24 18:25:45 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"BC33A3FACC1E038AD4A3D9C842E192FF","device_no":"1.1.6","device_type":"android","sys_user_account":"15296017722"}
2020-04-24 18:25:45 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:25:45 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:25:45 -==> Parameters: 15296017722(String)
2020-04-24 18:25:45 -<==      Total: 1
2020-04-24 18:25:45 -耗时 : 62
2020-04-24 18:28:46 -此处进行解密+验签+身份验证
2020-04-24 18:28:46 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"BC33A3FACC1E038AD4A3D9C842E192FF","device_no":"1.1.6","device_type":"android","sys_user_account":"15296017722"}
2020-04-24 18:28:46 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:28:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:28:46 -==> Parameters: 15296017722(String)
2020-04-24 18:28:46 -<==      Total: 1
2020-04-24 18:28:46 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-24 18:28:46 -==> Parameters: android(String), 1.1.6(String), (String), null, 192.168.191.1(String), 20200424(String), 182846(String), 70(Integer)
2020-04-24 18:28:46 -<==    Updates: 1
2020-04-24 18:28:46 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 18:28:46 -==> Parameters: 26(String)
2020-04-24 18:28:46 -<==      Total: 1
2020-04-24 18:28:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:28:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:28:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:28:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:28:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:28:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:28:46 -耗时 : 37
2020-04-24 18:28:46 -此处进行解密+验签+身份验证
2020-04-24 18:28:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:28:46 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-04-24 18:28:46 -==> Parameters: 70(String)
2020-04-24 18:28:46 -<==      Total: 0
2020-04-24 18:28:46 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_70,save content:null
2020-04-24 18:28:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:28:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:28:46 -==> Parameters: 70(String)
2020-04-24 18:28:46 -<==      Total: 1
2020-04-24 18:28:46 -耗时 : 1
2020-04-24 18:28:46 -此处进行解密+验签+身份验证
2020-04-24 18:28:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:28:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:28:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:28:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:28:46 -==> Parameters: 70(String)
2020-04-24 18:28:46 -此处进行解密+验签+身份验证
2020-04-24 18:28:46 -解密：
2020-04-24 18:28:46 -<==      Total: 1
2020-04-24 18:28:46 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 18:28:46 -耗时 : 4
2020-04-24 18:28:46 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 18:28:46 -==> Parameters: 01(String), 01(String)
2020-04-24 18:28:46 -此处进行解密+验签+身份验证
2020-04-24 18:28:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:28:46 -<==      Total: 4
2020-04-24 18:28:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:28:46 -耗时 : 4
2020-04-24 18:28:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 18:28:46 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 18:28:46 -==> Parameters: 70(String)
2020-04-24 18:28:46 -<==      Total: 2
2020-04-24 18:28:46 -耗时 : 6
2020-04-24 18:28:47 -此处进行解密+验签+身份验证
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:28:47 -此处进行解密+验签+身份验证
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:28:47 -此处进行解密+验签+身份验证
2020-04-24 18:28:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:28:47 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-04-24 18:28:47 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 18:28:47 -==> Parameters: 70(String)
2020-04-24 18:28:47 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 18:28:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:28:47 -==> Parameters: 
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-24 18:28:47 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-04-24 18:28:47 -==> Parameters: 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -<==      Total: 3
2020-04-24 18:28:47 -耗时 : 4
2020-04-24 18:28:47 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_70,save content:{referer_id=181, parent_chain=181, user_tel=15296017722, id_card=450322198810074023, real_name=唐双弟, algebra=2, cre_date=20181105, cre_time=201728, login_password=e2e2b7dcaaf2334da7bd396be5064bd4, manager_id=26, pay_password=a7bdc1612295f4a6faa48ad8ba8e4826, id=70, auth_status=09, status=0}
2020-04-24 18:28:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:28:47 -==> Parameters: 70(String), 70(String)
2020-04-24 18:28:47 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_70,save content:{referer_id=181, parent_chain=181, user_tel=15296017722, id_card=450322198810074023, real_name=唐双弟, algebra=2, cre_date=20181105, cre_time=201728, login_password=e2e2b7dcaaf2334da7bd396be5064bd4, manager_id=26, pay_password=a7bdc1612295f4a6faa48ad8ba8e4826, id=70, auth_status=09, status=0}
2020-04-24 18:28:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:28:47 -==> Parameters: 70(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 0
2020-04-24 18:28:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-04-24 18:28:47 -==> Parameters: 70(String), applyRateFlag(String), 0(Integer), 0(Integer), 26(String)
2020-04-24 18:28:47 -<==      Total: 0
2020-04-24 18:28:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-04-24 18:28:47 -==> Parameters: 70(String), applyRateFlag(String), 0(Integer), 0(Integer), 26(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:28:47 -==> Parameters: 70(String), 70(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:28:47 -==> Parameters: 70(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: recallFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 0
2020-04-24 18:28:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-04-24 18:28:47 -==> Parameters: 70(String), recallFlag(String), 0(Integer), 1(Integer), 26(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: recallFlag(String), 70(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:28:47 -==> Parameters: 
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: collegeFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 0
2020-04-24 18:28:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-04-24 18:28:47 -==> Parameters: 70(String), collegeFlag(String), 0(Integer), 25(Integer), 26(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:28:47 -==> Parameters: 70(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:28:47 -==> Parameters: cardFlag(String), 70(String)
2020-04-24 18:28:47 -==> Parameters: 1(Integer), 1(Integer), 70(String), recallFlag(String)
2020-04-24 18:28:47 -<==      Total: 0
2020-04-24 18:28:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-04-24 18:28:47 -==> Parameters: 70(String), cardFlag(String), 0(Integer), 0(Integer), 26(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: appImgFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 0
2020-04-24 18:28:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-04-24 18:28:47 -==> Parameters: 70(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:28:47 -==> Parameters: 
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: collegeFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:28:47 -==> Parameters: 25(Integer), 25(Integer), 70(String), collegeFlag(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -耗时 : 218
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:28:47 -==> Parameters: 70(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: cardFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:28:47 -==> Parameters: 0(Integer), 0(Integer), 70(String), cardFlag(String)
2020-04-24 18:28:47 -<==    Updates: 1
2020-04-24 18:28:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:28:47 -==> Parameters: appImgFlag(String), 70(String)
2020-04-24 18:28:47 -<==      Total: 1
2020-04-24 18:28:47 -耗时 : 311
2020-04-24 18:29:06 -此处进行解密+验签+身份验证
2020-04-24 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:29:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-24 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-24 18:29:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:06 -==> Parameters: 70(String), 70(String)
2020-04-24 18:29:06 -<==      Total: 1
2020-04-24 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:06 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-24 18:29:06 -<==      Total: 2
2020-04-24 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:06 -==> Parameters: 0(Integer), 0(Integer), 70(String), applyRateFlag(String)
2020-04-24 18:29:06 -<==    Updates: 2
2020-04-24 18:29:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:29:06 -==> Parameters: 70(String), 70(String)
2020-04-24 18:29:06 -<==      Total: 1
2020-04-24 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:06 -==> Parameters: recallFlag(String), 70(String)
2020-04-24 18:29:06 -<==      Total: 1
2020-04-24 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:06 -==> Parameters: 1(Integer), 1(Integer), 70(String), recallFlag(String)
2020-04-24 18:29:06 -<==    Updates: 1
2020-04-24 18:29:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:29:06 -==> Parameters: 
2020-04-24 18:29:06 -<==      Total: 1
2020-04-24 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:06 -==> Parameters: collegeFlag(String), 70(String)
2020-04-24 18:29:06 -<==      Total: 1
2020-04-24 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:06 -==> Parameters: 25(Integer), 25(Integer), 70(String), collegeFlag(String)
2020-04-24 18:29:07 -<==    Updates: 1
2020-04-24 18:29:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:07 -==> Parameters: 70(String), 70(String)
2020-04-24 18:29:07 -<==      Total: 1
2020-04-24 18:29:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:07 -==> Parameters: cardFlag(String), 70(String)
2020-04-24 18:29:07 -<==      Total: 1
2020-04-24 18:29:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:07 -==> Parameters: 0(Integer), 0(Integer), 70(String), cardFlag(String)
2020-04-24 18:29:07 -<==    Updates: 1
2020-04-24 18:29:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:07 -==> Parameters: appImgFlag(String), 70(String)
2020-04-24 18:29:07 -<==      Total: 1
2020-04-24 18:29:07 -耗时 : 80
2020-04-24 18:29:12 -此处进行解密+验签+身份验证
2020-04-24 18:29:12 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-24 18:29:12 -token值=======70|PCXQT2Y61RW57MRBAD4X9MVAW8LRKPJ6
2020-04-24 18:29:12 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-24 18:29:12 -==> Parameters: null, 70(String)
2020-04-24 18:29:12 -<==    Updates: 1
2020-04-24 18:29:12 -耗时 : 30
2020-04-24 18:29:27 -此处进行解密+验签+身份验证
2020-04-24 18:29:27 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"61C7FAB9956A422486F8966071107C3D","device_no":"1.1.6","device_type":"android","sys_user_account":"13322990711"}
2020-04-24 18:29:27 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:29:27 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:29:27 -==> Parameters: 13322990711(String)
2020-04-24 18:29:27 -<==      Total: 1
2020-04-24 18:29:27 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-24 18:29:27 -==> Parameters: android(String), 1.1.6(String), (String), null, 192.168.191.1(String), 20200424(String), 182927(String), 181(Integer)
2020-04-24 18:29:27 -<==    Updates: 1
2020-04-24 18:29:27 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 18:29:27 -==> Parameters: 26(String)
2020-04-24 18:29:27 -<==      Total: 1
2020-04-24 18:29:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:29:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:29:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:29:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:29:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:29:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:29:27 -耗时 : 341
2020-04-24 18:29:27 -此处进行解密+验签+身份验证
2020-04-24 18:29:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:29:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:29:27 -==> Parameters: 181(String)
2020-04-24 18:29:27 -<==      Total: 1
2020-04-24 18:29:27 -耗时 : 2
2020-04-24 18:29:28 -此处进行解密+验签+身份验证
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:28 -此处进行解密+验签+身份验证
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:28 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 18:29:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:29:28 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 18:29:28 -==> Parameters: 
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:29:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:28 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 3
2020-04-24 18:29:28 -耗时 : 3
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:29:28 -此处进行解密+验签+身份验证
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:29:28 -<==      Total: 2
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:29:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:29:28 -==> Parameters: 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -耗时 : 1
2020-04-24 18:29:28 -此处进行解密+验签+身份验证
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:28 -此处进行解密+验签+身份验证
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:28 -解密：
2020-04-24 18:29:28 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 18:29:28 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 18:29:28 -==> Parameters: 01(String), 01(String)
2020-04-24 18:29:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 18:29:28 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 18:29:28 -==> Parameters: 181(String)
2020-04-24 18:29:28 -<==      Total: 2
2020-04-24 18:29:28 -<==      Total: 4
2020-04-24 18:29:28 -耗时 : 1
2020-04-24 18:29:28 -耗时 : 2
2020-04-24 18:29:28 -<==    Updates: 2
2020-04-24 18:29:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:29:28 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:29:28 -<==    Updates: 1
2020-04-24 18:29:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:29:28 -==> Parameters: 
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:29:28 -<==    Updates: 1
2020-04-24 18:29:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:28 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:29:28 -<==    Updates: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -耗时 : 60
2020-04-24 18:29:28 -此处进行解密+验签+身份验证
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:29:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:29:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:28 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 2
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:29:28 -<==    Updates: 2
2020-04-24 18:29:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:29:28 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:29:28 -<==    Updates: 1
2020-04-24 18:29:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:29:28 -==> Parameters: 
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:29:28 -<==    Updates: 1
2020-04-24 18:29:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:28 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:29:28 -<==    Updates: 1
2020-04-24 18:29:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:28 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:29:28 -<==      Total: 1
2020-04-24 18:29:28 -耗时 : 63
2020-04-24 18:29:29 -此处进行解密+验签+身份验证
2020-04-24 18:29:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-24 18:29:29 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-24 18:29:29 -==> Parameters: 181(String)
2020-04-24 18:29:29 -此处进行解密+验签+身份验证
2020-04-24 18:29:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 18:29:29 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 18:29:29 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:30 -<==      Total: 1164
2020-04-24 18:29:30 -耗时 : 164
2020-04-24 18:29:30 -<==      Total: 1599
2020-04-24 18:29:30 -耗时 : 778
2020-04-24 18:29:31 -此处进行解密+验签+身份验证
2020-04-24 18:29:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-24 18:29:31 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-24 18:29:31 -==> Parameters: 181(String)
2020-04-24 18:29:31 -<==      Total: 1163
2020-04-24 18:29:31 -耗时 : 224
2020-04-24 18:29:36 -此处进行解密+验签+身份验证
2020-04-24 18:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:29:36 -此处进行解密+验签+身份验证
2020-04-24 18:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:36 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:29:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:29:37 -==> Parameters: 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -耗时 : 25
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:37 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 2
2020-04-24 18:29:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:29:37 -<==    Updates: 2
2020-04-24 18:29:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:29:37 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:37 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:37 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:29:37 -<==    Updates: 1
2020-04-24 18:29:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:29:37 -==> Parameters: 
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:37 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:37 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:29:37 -<==    Updates: 1
2020-04-24 18:29:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:29:37 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:37 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:29:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:29:37 -<==    Updates: 1
2020-04-24 18:29:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:29:37 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:29:37 -<==      Total: 1
2020-04-24 18:29:37 -耗时 : 138
2020-04-24 18:29:39 -此处进行解密+验签+身份验证
2020-04-24 18:29:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-24 18:29:39 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-24 18:29:39 -==> Parameters: 181(String)
2020-04-24 18:29:39 -此处进行解密+验签+身份验证
2020-04-24 18:29:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 18:29:39 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 18:29:39 -==> Parameters: 181(String), 181(String)
2020-04-24 18:29:39 -<==      Total: 1164
2020-04-24 18:29:39 -耗时 : 132
2020-04-24 18:29:40 -<==      Total: 1599
2020-04-24 18:29:40 -耗时 : 484
2020-04-24 18:29:52 -此处进行解密+验签+身份验证
2020-04-24 18:29:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-04-24 18:29:52 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-04-24 18:29:52 -==> Parameters: 181(String)
2020-04-24 18:29:52 -此处进行解密+验签+身份验证
2020-04-24 18:29:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:29:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:29:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-04-24 18:29:52 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-04-24 18:29:52 -==> Parameters: 181(String), M351846173306(String)
2020-04-24 18:29:52 -<==      Total: 144
2020-04-24 18:29:52 -耗时 : 42
2020-04-24 18:29:52 -<==      Total: 1
2020-04-24 18:29:52 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-04-24 18:29:52 -==> Parameters: 
2020-04-24 18:29:52 -<==      Total: 101
2020-04-24 18:29:52 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-24 18:29:52 -==> Parameters: M351846173306(String)
2020-04-24 18:29:52 -<==      Total: 1
2020-04-24 18:29:52 -耗时 : 122
2020-04-24 18:30:03 -此处进行解密+验签+身份验证
2020-04-24 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationMpos
2020-04-24 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-24 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-24 18:30:03 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) 
2020-04-24 18:30:03 -==> Parameters: 181(String), M351846173306,M351846173307,M351846173308(String), 0.490(String), 0.290(String), 0.000(String), 0.000(String)
2020-04-24 18:30:03 -<==      Total: 1
2020-04-24 18:30:03 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_mpos_info where user_id=? and sn in ( ? , ? , ? ) 
2020-04-24 18:30:03 -==> Parameters: 181(String), M351846173306(String), M351846173307(String), M351846173308(String)
2020-04-24 18:30:03 -<==      Total: 1
2020-04-24 18:30:03 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where module_type=3 and isuse=1 and sn in ( ? , ? , ? ) 
2020-04-24 18:30:03 -==> Parameters: M351846173306(String), M351846173307(String), M351846173308(String)
2020-04-24 18:30:03 -<==      Total: 1
2020-04-24 18:30:03 -==>  Preparing: INSERT INTO t_user_mpos_info ( user_id, sn, card_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, cre_date, cre_time, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ? FROM t_user_mpos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-04-24 18:30:03 -==> Parameters: 70(String), 0.490(String), 0.290(String), 0.000(String), 0.000(String), 20200424(String), 183003(String), 1(String), 181(String), M351846173306,M351846173307,M351846173308(String), 70(String)
2020-04-24 18:30:03 -<==    Updates: 3
2020-04-24 18:30:03 -==>  Preparing: UPDATE t_user_mpos_info SET card_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-04-24 18:30:03 -==> Parameters: 0.490(String), 0.290(String), 0.000(String), 0.000(String), 20200424(String), 183003(String), 70(String), M351846173306,M351846173307,M351846173308(String)
2020-04-24 18:30:03 -<==    Updates: 0
2020-04-24 18:30:03 -==>  Preparing: UPDATE t_user_mpos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-04-24 18:30:03 -==> Parameters: 20200424(String), 183003(String), 181(String), M351846173306,M351846173307,M351846173308(String)
2020-04-24 18:30:03 -<==    Updates: 3
2020-04-24 18:30:03 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) 
2020-04-24 18:30:03 -==> Parameters: 181_20200424183003(String), M351846173306(String), 70(String), MPOS(String), 2020-04-24 18:30:03(String), 181(String), 181_20200424183003(String), M351846173307(String), 70(String), MPOS(String), 2020-04-24 18:30:03(String), 181(String), 181_20200424183003(String), M351846173308(String), 70(String), MPOS(String), 2020-04-24 18:30:03(String), 181(String)
2020-04-24 18:30:03 -<==    Updates: 3
2020-04-24 18:30:03 -耗时 : 555
2020-04-24 18:30:03 -此处进行解密+验签+身份验证
2020-04-24 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-24 18:30:03 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-24 18:30:03 -==> Parameters: 181(String)
2020-04-24 18:30:04 -此处进行解密+验签+身份验证
2020-04-24 18:30:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 18:30:04 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 18:30:04 -==> Parameters: 181(String), 181(String)
2020-04-24 18:30:04 -<==      Total: 1161
2020-04-24 18:30:04 -耗时 : 76
2020-04-24 18:30:04 -<==      Total: 1602
2020-04-24 18:30:04 -耗时 : 466
2020-04-24 18:30:11 -此处进行解密+验签+身份验证
2020-04-24 18:30:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-24 18:30:11 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-24 18:30:11 -==> Parameters: 181(String)
2020-04-24 18:30:12 -<==      Total: 1160
2020-04-24 18:30:12 -耗时 : 242
2020-04-24 18:30:20 -此处进行解密+验签+身份验证
2020-04-24 18:30:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/recallMpos
2020-04-24 18:30:20 -==>  Preparing: INSERT INTO t_user_mpos_recall_record_info ( send_user_id, acce_user_id, sn, cre_date, cre_time ) SELECT ?, user_id, sn, ?, ? FROM t_user_mpos_info WHERE state_status = '1' AND FIND_IN_SET(sn, ?) AND user_id in (select id from t_user_info where referer_id = ?) 
2020-04-24 18:30:20 -==> Parameters: 181(String), 20200424(String), 183020(String), M351846171801,M351846171802(String), 181(String)
2020-04-24 18:30:20 -<==    Updates: 2
2020-04-24 18:30:20 -==>  Preparing: select * from t_user_mpos_info where sn in ( ? , ? ) and state_status='1' 
2020-04-24 18:30:20 -==> Parameters: M351846171801(String), M351846171802(String)
2020-04-24 18:30:20 -<==      Total: 2
2020-04-24 18:30:20 -==>  Preparing: update t_news_read_state set read_flag=? where user_id in ( ? , ? ) and news_type=? 
2020-04-24 18:30:20 -==> Parameters: 0(String), 234(Integer), 234(Integer), recallFlag(String)
2020-04-24 18:30:20 -<==    Updates: 2
2020-04-24 18:30:20 -耗时 : 238
2020-04-24 18:30:20 -此处进行解密+验签+身份验证
2020-04-24 18:30:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-24 18:30:20 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-24 18:30:20 -==> Parameters: 181(String), 181(String)
2020-04-24 18:30:21 -<==      Total: 1600
2020-04-24 18:30:21 -耗时 : 525
2020-04-24 18:30:23 -此处进行解密+验签+身份验证
2020-04-24 18:30:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:30:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:30:23 -==> Parameters: 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -耗时 : 1
2020-04-24 18:30:23 -此处进行解密+验签+身份验证
2020-04-24 18:30:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-24 18:30:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-24 18:30:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:30:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-24 18:30:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-24 18:30:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:30:23 -==> Parameters: 181(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:23 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 2
2020-04-24 18:30:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:23 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-24 18:30:23 -<==    Updates: 2
2020-04-24 18:30:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:30:23 -==> Parameters: 181(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:23 -==> Parameters: recallFlag(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:23 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-24 18:30:23 -<==    Updates: 1
2020-04-24 18:30:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:30:23 -==> Parameters: 
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:23 -==> Parameters: collegeFlag(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:23 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-24 18:30:23 -<==    Updates: 1
2020-04-24 18:30:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:30:23 -==> Parameters: 181(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:23 -==> Parameters: cardFlag(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:23 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-24 18:30:23 -<==    Updates: 1
2020-04-24 18:30:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:23 -==> Parameters: appImgFlag(String), 181(String)
2020-04-24 18:30:23 -<==      Total: 1
2020-04-24 18:30:23 -耗时 : 130
2020-04-24 18:30:28 -此处进行解密+验签+身份验证
2020-04-24 18:30:28 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-24 18:30:28 -token值=======181|09M2XK760Z0ECVZ3H99DITZSQX3XO0Q1
2020-04-24 18:30:28 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-24 18:30:28 -==> Parameters: null, 181(String)
2020-04-24 18:30:28 -<==    Updates: 1
2020-04-24 18:30:28 -耗时 : 8
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"BC33A3FACC1E038AD4A3D9C842E192FF","device_no":"1.1.6","device_type":"android","sys_user_account":"15296017722"}
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-24 18:30:50 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-24 18:30:50 -==> Parameters: 15296017722(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-24 18:30:50 -==> Parameters: android(String), 1.1.6(String), (String), null, 192.168.191.1(String), 20200424(String), 183050(String), 70(Integer)
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-24 18:30:50 -==> Parameters: 26(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:30:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:30:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:30:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:30:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-24 18:30:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-24 18:30:50 -耗时 : 35
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:30:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:30:50 -==> Parameters: 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -耗时 : 1
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -解密：
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-24 18:30:50 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-24 18:30:50 -==> Parameters: 01(String), 01(String)
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-24 18:30:50 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-24 18:30:50 -==> Parameters: 70(String)
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-24 18:30:50 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-24 18:30:50 -==> Parameters: 
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-24 18:30:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-24 18:30:50 -==> Parameters: 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -耗时 : 3
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-24 18:30:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:30:50 -==> Parameters: 70(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 4
2020-04-24 18:30:50 -<==      Total: 3
2020-04-24 18:30:50 -耗时 : 22
2020-04-24 18:30:50 -耗时 : 37
2020-04-24 18:30:50 -<==      Total: 2
2020-04-24 18:30:50 -耗时 : 30
2020-04-24 18:30:50 -<==      Total: 2
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 0(Integer), 0(Integer), 70(String), applyRateFlag(String)
2020-04-24 18:30:50 -<==    Updates: 2
2020-04-24 18:30:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:30:50 -==> Parameters: 70(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: recallFlag(String), 70(String)
2020-04-24 18:30:50 -此处进行解密+验签+身份验证
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 1(Integer), 1(Integer), 70(String), recallFlag(String)
2020-04-24 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-24 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-24 18:30:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:30:50 -==> Parameters: 70(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:30:50 -==> Parameters: 
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -<==      Total: 2
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: collegeFlag(String), 70(String)
2020-04-24 18:30:50 -==> Parameters: 0(Integer), 0(Integer), 70(String), applyRateFlag(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 25(Integer), 25(Integer), 70(String), collegeFlag(String)
2020-04-24 18:30:50 -<==    Updates: 2
2020-04-24 18:30:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-24 18:30:50 -==> Parameters: 70(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: recallFlag(String), 70(String)
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:30:50 -==> Parameters: 70(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: cardFlag(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 1(Integer), 1(Integer), 70(String), recallFlag(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 0(Integer), 0(Integer), 70(String), cardFlag(String)
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-24 18:30:50 -==> Parameters: 
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: collegeFlag(String), 70(String)
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: appImgFlag(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 25(Integer), 25(Integer), 70(String), collegeFlag(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -耗时 : 65
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-24 18:30:50 -==> Parameters: 70(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: cardFlag(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-24 18:30:50 -==> Parameters: 0(Integer), 0(Integer), 70(String), cardFlag(String)
2020-04-24 18:30:50 -<==    Updates: 1
2020-04-24 18:30:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-24 18:30:50 -==> Parameters: appImgFlag(String), 70(String)
2020-04-24 18:30:50 -<==      Total: 1
2020-04-24 18:30:50 -耗时 : 66
2020-04-24 18:30:54 -此处进行解密+验签+身份验证
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:54 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-24 18:30:54 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-24 18:30:54 -==> Parameters: 1(String), 70(String), recallFlag(String)
2020-04-24 18:30:54 -<==    Updates: 1
2020-04-24 18:30:54 -耗时 : 41
2020-04-24 18:30:54 -此处进行解密+验签+身份验证
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:30:54 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:30:54 -==> Parameters: 70(String), 00(String)
2020-04-24 18:30:54 -<==      Total: 0
2020-04-24 18:30:54 -耗时 : 1
2020-04-24 18:30:54 -此处进行解密+验签+身份验证
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:30:54 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:30:54 -==> Parameters: 70(String), 09(String)
2020-04-24 18:30:54 -<==      Total: 0
2020-04-24 18:30:54 -耗时 : 2
2020-04-24 18:30:54 -此处进行解密+验签+身份验证
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-24 18:30:54 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-24 18:30:54 -==> Parameters: 70(String), 08(String)
2020-04-24 18:30:54 -<==      Total: 0
2020-04-24 18:30:54 -耗时 : 2
2020-04-24 18:30:56 -此处进行解密+验签+身份验证
2020-04-24 18:30:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:56 -此处进行解密+验签+身份验证
2020-04-24 18:30:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:30:56 -此处进行解密+验签+身份验证
2020-04-24 18:30:56 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:30:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:30:56 -==> Parameters: 70(String), 00(String)
2020-04-24 18:30:56 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:30:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:56 -==> Parameters: 70(String), 09(String)
2020-04-24 18:30:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-04-24 18:30:56 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:30:56 -==> Parameters: 70(String), 08(String)
2020-04-24 18:30:56 -<==      Total: 0
2020-04-24 18:30:56 -耗时 : 3
2020-04-24 18:30:56 -<==      Total: 0
2020-04-24 18:30:56 -耗时 : 3
2020-04-24 18:30:56 -<==      Total: 0
2020-04-24 18:30:56 -耗时 : 3
2020-04-24 18:30:57 -此处进行解密+验签+身份验证
2020-04-24 18:30:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:30:57 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:30:57 -==> Parameters: 70(String), 00(String)
2020-04-24 18:30:57 -<==      Total: 1
2020-04-24 18:30:57 -耗时 : 1
2020-04-24 18:30:57 -此处进行解密+验签+身份验证
2020-04-24 18:30:57 -此处进行解密+验签+身份验证
2020-04-24 18:30:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:30:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:30:57 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:30:57 -==> Parameters: 70(String), 09(String)
2020-04-24 18:30:57 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:30:57 -==> Parameters: 70(String), 08(String)
2020-04-24 18:30:57 -<==      Total: 0
2020-04-24 18:30:57 -<==      Total: 0
2020-04-24 18:30:57 -耗时 : 1
2020-04-24 18:30:57 -耗时 : 1
2020-04-24 18:30:59 -此处进行解密+验签+身份验证
2020-04-24 18:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:30:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:30:59 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:30:59 -==> Parameters: 70(String), 00(String)
2020-04-24 18:30:59 -<==      Total: 0
2020-04-24 18:30:59 -耗时 : 4
2020-04-24 18:30:59 -此处进行解密+验签+身份验证
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:31:00 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:31:00 -==> Parameters: 70(String), 08(String)
2020-04-24 18:31:00 -<==      Total: 0
2020-04-24 18:31:00 -耗时 : 1
2020-04-24 18:31:00 -此处进行解密+验签+身份验证
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-04-24 18:31:00 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-04-24 18:31:00 -==> Parameters: 70(String), 09(String)
2020-04-24 18:31:00 -<==      Total: 0
2020-04-24 18:31:00 -耗时 : 1
2020-04-24 18:31:00 -此处进行解密+验签+身份验证
2020-04-24 18:31:00 -此处进行解密+验签+身份验证
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:31:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:31:00 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:31:00 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:31:00 -==> Parameters: 70(String), 00(String)
2020-04-24 18:31:00 -==> Parameters: 70(String), 08(String)
2020-04-24 18:31:00 -<==      Total: 0
2020-04-24 18:31:00 -<==      Total: 1
2020-04-24 18:31:00 -耗时 : 1
2020-04-24 18:31:00 -耗时 : 1
2020-04-24 18:31:00 -此处进行解密+验签+身份验证
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:31:00 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:31:00 -==> Parameters: 70(String), 09(String)
2020-04-24 18:31:00 -<==      Total: 0
2020-04-24 18:31:00 -耗时 : 2
2020-04-24 18:31:11 -此处进行解密+验签+身份验证
2020-04-24 18:31:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/dealRecallTraditionalPos
2020-04-24 18:31:11 -==>  Preparing: UPDATE t_user_trapos_recall_record_info SET status = ?, up_date = ?, up_time = ? WHERE acce_user_id = ? and find_in_set(id, ?) and status = '00' 
2020-04-24 18:31:11 -==> Parameters: 09(String), 20200424(String), 183111(String), 70(String), 698(String)
2020-04-24 18:31:11 -<==    Updates: 1
2020-04-24 18:31:11 -==>  Preparing: UPDATE t_user_traditional_pos_info t SET t.state_status = '1', t.up_date = ?, t.up_time = ? WHERE t.state_status = '0' and EXISTS (select 1 from t_user_trapos_recall_record_info t1 where find_in_set(t1.id, ?) and t1.send_user_id = t.user_id and t1.sn = t.sn ) 
2020-04-24 18:31:11 -==> Parameters: 20200424(String), 183111(String), 698(String)
2020-04-24 18:31:15 -<==    Updates: 1
2020-04-24 18:31:15 -==>  Preparing: UPDATE t_user_traditional_pos_info t SET t.state_status = '0', t.del = '1', t.up_date = ?, t.up_time = ? WHERE t.state_status = '1' and EXISTS (select 1 from t_user_trapos_recall_record_info t1 where find_in_set(t1.id, ?) and t1.acce_user_id = t.user_id and t1.sn = t.sn ) 
2020-04-24 18:31:15 -==> Parameters: 20200424(String), 183111(String), 698(String)
2020-04-24 18:31:17 -<==    Updates: 1
2020-04-24 18:31:17 -==>  Preparing: delete from t_user_pos_batch_allocate where sn in(select sn from t_user_trapos_recall_record_info where FIND_IN_SET(id,?) ) and user_id=? 
2020-04-24 18:31:17 -==> Parameters: 698(String), 70(String)
2020-04-24 18:31:23 -<==    Updates: 1
2020-04-24 18:31:23 -耗时 : 11559
2020-04-24 18:31:23 -此处进行解密+验签+身份验证
2020-04-24 18:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:31:23 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:31:23 -==> Parameters: 70(String), 09(String)
2020-04-24 18:31:23 -<==      Total: 1
2020-04-24 18:31:23 -耗时 : 2
2020-04-24 18:31:23 -此处进行解密+验签+身份验证
2020-04-24 18:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:23 -此处进行解密+验签+身份验证
2020-04-24 18:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-24 18:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-24 18:31:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:31:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-04-24 18:31:23 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:31:23 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-04-24 18:31:23 -==> Parameters: 70(String), 00(String)
2020-04-24 18:31:23 -==> Parameters: 70(String), 08(String)
2020-04-24 18:31:23 -<==      Total: 0
2020-04-24 18:31:23 -<==      Total: 0
2020-04-24 18:31:23 -耗时 : 1
2020-04-24 18:31:23 -耗时 : 1
