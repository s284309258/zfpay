2020-03-23 09:42:39 -Starting LongEcologicalApplication on PC-201905161910 with PID 9840 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 09:42:39 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 09:42:39 -No active profile set, falling back to default profiles: default
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 09:42:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 09:42:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 09:42:40 -Finished Spring Data repository scanning in 149ms. Found 0 repository interfaces.
2020-03-23 09:42:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 09:42:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 09:42:40 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-23 09:42:41 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b4ee0541] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 09:42:41 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$af71e9e1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 09:42:42 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 09:42:42 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 09:42:42 -Starting service [Tomcat]
2020-03-23 09:42:42 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 09:42:42 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 09:42:42 -Initializing Spring embedded WebApplicationContext
2020-03-23 09:42:42 -Root WebApplicationContext: initialization completed in 3037 ms
2020-03-23 09:42:42 -Filter xssFilter was not registered (disabled)
2020-03-23 09:42:42 -HikariPool-1 - Starting...
2020-03-23 09:42:43 -HikariPool-1 - Start completed.
2020-03-23 09:42:43 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 09:42:43 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 09:42:43 -HHH000206: hibernate.properties not found
2020-03-23 09:42:43 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 09:42:43 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 09:42:44 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 09:42:44 -Using default implementation for ThreadExecutor
2020-03-23 09:42:44 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 09:42:44 -Quartz Scheduler v.2.3.0 created.
2020-03-23 09:42:44 -RAMJobStore initialized.
2020-03-23 09:42:44 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 09:42:44 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 09:42:44 -Quartz scheduler version: 2.3.0
2020-03-23 09:42:44 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3f2ae973
2020-03-23 09:42:45 -STAET TaskExecutorConfig
2020-03-23 09:42:45 -Initializing ExecutorService
2020-03-23 09:42:45 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 09:42:45 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 09:42:45 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 09:42:46 -Initializing ExecutorService 'taskScheduler'
2020-03-23 09:42:46 -Starting Quartz Scheduler now
2020-03-23 09:42:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 09:42:46 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 09:42:46 -Using a shared selector for servlet write/read
2020-03-23 09:42:46 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 09:42:46 -Started LongEcologicalApplication in 8.094 seconds (JVM running for 10.726)
2020-03-23 10:32:00 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 10:32:00 -Initializing Servlet 'dispatcherServlet'
2020-03-23 10:32:00 -Completed initialization in 55 ms
2020-03-23 10:32:00 -此处进行解密+验签+身份验证
2020-03-23 10:32:00 -此处进行解密+验签+身份验证
2020-03-23 10:32:01 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-23 10:32:01 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-23 10:32:01 -Starting without optional epoll library
2020-03-23 10:32:01 -Starting without optional kqueue library
2020-03-23 10:32:01 -解密：
2020-03-23 10:32:01 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6a20fee1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5e447057 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@57b956e9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3a836d09 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@534915e2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2ef20114 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@33e1043d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@122bdc6d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@9562dcf (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@37927750 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:32:01 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-23 10:32:01 -==> Parameters: 04(String), 04(String)
2020-03-23 10:32:01 -<==      Total: 1
2020-03-23 10:32:01 -耗时 : 145
2020-03-23 10:32:01 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-23 10:32:01 -耗时 : 979
2020-03-23 10:32:02 -此处进行解密+验签+身份验证
2020-03-23 10:32:02 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"0B2A5D288EF0C5D63CD81554D3D45CDB","device_no":"1.0.9","device_type":"android","sys_user_account":"","token":"469|408J1ODC31X28GZRHF4I42F1DTG7NENF"}
2020-03-23 10:32:02 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-23 10:32:02 -token值=======469|408J1ODC31X28GZRHF4I42F1DTG7NENF
2020-03-23 10:32:02 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-23 10:32:02 -==> Parameters: 469(String)
2020-03-23 10:32:02 -<==      Total: 1
2020-03-23 10:32:02 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-23 10:32:02 -==> Parameters: 25(String)
2020-03-23 10:32:02 -<==      Total: 1
2020-03-23 10:32:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:32:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:32:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:32:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:32:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:32:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:32:02 -耗时 : 102
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:32:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:05 -==> Parameters: 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -耗时 : 20
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -解密：
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-23 10:32:05 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-23 10:32:05 -==> Parameters: 01(String), 01(String)
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:05 -<==      Total: 4
2020-03-23 10:32:05 -耗时 : 9
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-23 10:32:05 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-23 10:32:05 -==> Parameters: 469(String)
2020-03-23 10:32:05 -<==      Total: 2
2020-03-23 10:32:05 -耗时 : 17
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-23 10:32:05 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-23 10:32:05 -==> Parameters: 
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:05 -<==      Total: 3
2020-03-23 10:32:05 -耗时 : 14
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:05 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:05 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:05 -此处进行解密+验签+身份验证
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:05 -==> Parameters: 
2020-03-23 10:32:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:05 -==> Parameters: 469(String)
2020-03-23 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:05 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:05 -耗时 : 26
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:05 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:05 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:05 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -耗时 : 197
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:05 -==> Parameters: 
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:05 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:05 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:05 -<==    Updates: 1
2020-03-23 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:05 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:05 -<==      Total: 1
2020-03-23 10:32:05 -耗时 : 226
2020-03-23 10:32:13 -此处进行解密+验签+身份验证
2020-03-23 10:32:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-23 10:32:13 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-23 10:32:13 -==> Parameters: 469(String)
2020-03-23 10:32:13 -此处进行解密+验签+身份验证
2020-03-23 10:32:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:13 -<==      Total: 82
2020-03-23 10:32:13 -耗时 : 96
2020-03-23 10:32:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-23 10:32:13 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-23 10:32:13 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:14 -<==      Total: 6
2020-03-23 10:32:14 -耗时 : 267
2020-03-23 10:32:15 -此处进行解密+验签+身份验证
2020-03-23 10:32:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-23 10:32:16 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-23 10:32:16 -==> Parameters: 469(String)
2020-03-23 10:32:16 -<==      Total: 5
2020-03-23 10:32:16 -耗时 : 30
2020-03-23 10:32:17 -此处进行解密+验签+身份验证
2020-03-23 10:32:17 -此处进行解密+验签+身份验证
2020-03-23 10:32:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:32:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:17 -==> Parameters: 469(String)
2020-03-23 10:32:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -耗时 : 13
2020-03-23 10:32:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:17 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:17 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:17 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:17 -<==    Updates: 1
2020-03-23 10:32:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:17 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:17 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:17 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:17 -<==    Updates: 1
2020-03-23 10:32:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:17 -==> Parameters: 
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:17 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:17 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:17 -<==    Updates: 1
2020-03-23 10:32:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:17 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:17 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:17 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:17 -<==    Updates: 1
2020-03-23 10:32:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:17 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:17 -<==      Total: 1
2020-03-23 10:32:17 -耗时 : 159
2020-03-23 10:32:31 -此处进行解密+验签+身份验证
2020-03-23 10:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:32:31 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:31 -==> Parameters: 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -耗时 : 13
2020-03-23 10:32:31 -此处进行解密+验签+身份验证
2020-03-23 10:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:31 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:31 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:31 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:31 -<==    Updates: 1
2020-03-23 10:32:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:31 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:31 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:31 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:31 -<==    Updates: 1
2020-03-23 10:32:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:31 -==> Parameters: 
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:31 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:31 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:31 -<==    Updates: 1
2020-03-23 10:32:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:31 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:31 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:31 -<==      Total: 1
2020-03-23 10:32:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:32 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:32 -<==    Updates: 1
2020-03-23 10:32:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:32 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:32 -<==      Total: 1
2020-03-23 10:32:32 -耗时 : 154
2020-03-23 10:32:34 -此处进行解密+验签+身份验证
2020-03-23 10:32:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:34 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 10:32:35 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 10:32:35 -==> Parameters: 469(String), 10(Integer)
2020-03-23 10:32:35 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 10:32:35 -====> Parameters: 2839(Integer)
2020-03-23 10:32:35 -<====      Total: 3
2020-03-23 10:32:35 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 10:32:35 -====> Parameters: 2332(Integer)
2020-03-23 10:32:35 -<====      Total: 3
2020-03-23 10:32:35 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 10:32:35 -====> Parameters: 1883(Integer)
2020-03-23 10:32:35 -<====      Total: 3
2020-03-23 10:32:35 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 10:32:35 -====> Parameters: 1041(Integer)
2020-03-23 10:32:35 -<====      Total: 3
2020-03-23 10:32:35 -<==      Total: 4
2020-03-23 10:32:35 -耗时 : 85
2020-03-23 10:32:37 -此处进行解密+验签+身份验证
2020-03-23 10:32:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:37 -此处进行解密+验签+身份验证
2020-03-23 10:32:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:32:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:37 -==> Parameters: 469(String)
2020-03-23 10:32:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:37 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -耗时 : 18
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:37 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:37 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:37 -<==    Updates: 1
2020-03-23 10:32:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:37 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:37 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:37 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:37 -<==    Updates: 1
2020-03-23 10:32:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:37 -==> Parameters: 
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:37 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:37 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:37 -<==    Updates: 1
2020-03-23 10:32:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:37 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:37 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:37 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:37 -<==    Updates: 1
2020-03-23 10:32:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:37 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:37 -<==      Total: 1
2020-03-23 10:32:37 -耗时 : 162
2020-03-23 10:32:39 -此处进行解密+验签+身份验证
2020-03-23 10:32:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:39 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:39 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:39 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:39 -<==    Updates: 1
2020-03-23 10:32:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:39 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:39 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:39 -<==    Updates: 1
2020-03-23 10:32:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:39 -==> Parameters: 
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:39 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:39 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:39 -<==    Updates: 1
2020-03-23 10:32:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:39 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:39 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:39 -<==    Updates: 1
2020-03-23 10:32:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:39 -<==      Total: 1
2020-03-23 10:32:39 -耗时 : 143
2020-03-23 10:32:41 -此处进行解密+验签+身份验证
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:41 -此处进行解密+验签+身份验证
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:41 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:41 -此处进行解密+验签+身份验证
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:41 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 10:32:41 -==> Parameters: 469(String)
2020-03-23 10:32:41 -此处进行解密+验签+身份验证
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:41 -<==      Total: 1
2020-03-23 10:32:41 -耗时 : 18
2020-03-23 10:32:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:41 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 10:32:41 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 10:32:41 -==> Parameters: 469(String), 202003(String)
2020-03-23 10:32:41 -<==      Total: 1
2020-03-23 10:32:41 -耗时 : 10
2020-03-23 10:32:41 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:32:41 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 10:32:41 -==> Parameters: 469(String), 202003(String)
2020-03-23 10:32:41 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:32:41 -<==      Total: 1
2020-03-23 10:32:41 -耗时 : 9
2020-03-23 10:32:41 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 10:32:41 -==> Parameters: 469(String), 202003(String)
2020-03-23 10:32:41 -<==      Total: 0
2020-03-23 10:32:41 -耗时 : 17
2020-03-23 10:32:47 -此处进行解密+验签+身份验证
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:47 -此处进行解密+验签+身份验证
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:47 -此处进行解密+验签+身份验证
2020-03-23 10:32:47 -此处进行解密+验签+身份验证
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:47 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:32:47 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:32:47 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:32:47 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:32:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:32:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:32:47 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:32:47 -==> Parameters: 469(String), 09(String)
2020-03-23 10:32:47 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:32:47 -==> Parameters: 469(String), 09(String)
2020-03-23 10:32:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:32:47 -<==      Total: 1
2020-03-23 10:32:47 -耗时 : 23
2020-03-23 10:32:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:32:47 -<==      Total: 1
2020-03-23 10:32:47 -耗时 : 22
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:32:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:32:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:48 -==> Parameters: 469(String)
2020-03-23 10:32:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:48 -==> Parameters: 469(String)
2020-03-23 10:32:48 -<==      Total: 1
2020-03-23 10:32:48 -<==      Total: 1
2020-03-23 10:32:48 -耗时 : 147
2020-03-23 10:32:48 -耗时 : 152
2020-03-23 10:32:51 -此处进行解密+验签+身份验证
2020-03-23 10:32:51 -此处进行解密+验签+身份验证
2020-03-23 10:32:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:32:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:32:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:32:51 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:32:51 -==> Parameters: 469(String)
2020-03-23 10:32:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:32:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:32:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -耗时 : 13
2020-03-23 10:32:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:51 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:51 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:51 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:32:51 -<==    Updates: 1
2020-03-23 10:32:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:32:51 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:51 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:32:51 -<==    Updates: 1
2020-03-23 10:32:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:32:51 -==> Parameters: 
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:51 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:51 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:32:51 -<==    Updates: 1
2020-03-23 10:32:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:32:51 -==> Parameters: 469(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:51 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:32:51 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:32:51 -<==    Updates: 1
2020-03-23 10:32:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:32:51 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:32:51 -<==      Total: 1
2020-03-23 10:32:51 -耗时 : 142
2020-03-23 10:34:18 -此处进行解密+验签+身份验证
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:34:18 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:34:18 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:34:18 -==> Parameters: 469(String), 09(String)
2020-03-23 10:34:18 -此处进行解密+验签+身份验证
2020-03-23 10:34:18 -此处进行解密+验签+身份验证
2020-03-23 10:34:18 -此处进行解密+验签+身份验证
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:34:18 -<==      Total: 1
2020-03-23 10:34:18 -耗时 : 13
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:34:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:34:18 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:34:18 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:34:18 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:34:18 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:34:18 -==> Parameters: 469(String), 09(String)
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:34:18 -<==      Total: 1
2020-03-23 10:34:18 -耗时 : 18
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:34:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:34:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:34:18 -==> Parameters: 469(String)
2020-03-23 10:34:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:34:18 -==> Parameters: 469(String)
2020-03-23 10:34:18 -<==      Total: 1
2020-03-23 10:34:18 -<==      Total: 1
2020-03-23 10:34:18 -耗时 : 92
2020-03-23 10:34:18 -耗时 : 99
2020-03-23 10:34:23 -此处进行解密+验签+身份验证
2020-03-23 10:34:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:34:23 -此处进行解密+验签+身份验证
2020-03-23 10:34:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-23 10:34:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:34:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-23 10:34:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:34:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:34:23 -==> Parameters: 469(String)
2020-03-23 10:34:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:34:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-23 10:34:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -耗时 : 11
2020-03-23 10:34:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:34:23 -==> Parameters: 469(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:34:23 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:34:23 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-23 10:34:23 -<==    Updates: 1
2020-03-23 10:34:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:34:23 -==> Parameters: 469(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:34:23 -==> Parameters: recallFlag(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:34:23 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-23 10:34:23 -<==    Updates: 1
2020-03-23 10:34:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:34:23 -==> Parameters: 
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:34:23 -==> Parameters: collegeFlag(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:34:23 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-23 10:34:23 -<==    Updates: 1
2020-03-23 10:34:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:34:23 -==> Parameters: 469(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:34:23 -==> Parameters: cardFlag(String), 469(String)
2020-03-23 10:34:23 -<==      Total: 1
2020-03-23 10:34:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:34:23 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-23 10:34:23 -<==    Updates: 1
2020-03-23 10:34:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:34:23 -==> Parameters: appImgFlag(String), 469(String)
2020-03-23 10:34:24 -<==      Total: 1
2020-03-23 10:34:24 -耗时 : 145
2020-03-23 10:34:35 -此处进行解密+验签+身份验证
2020-03-23 10:34:35 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-23 10:34:35 -token值=======469|408J1ODC31X28GZRHF4I42F1DTG7NENF
2020-03-23 10:34:35 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-03-23 10:34:35 -==> Parameters: null, 469(String)
2020-03-23 10:34:35 -<==    Updates: 1
2020-03-23 10:34:35 -耗时 : 44
2020-03-23 10:35:45 -此处进行解密+验签+身份验证
2020-03-23 10:35:45 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"30BFEAF2100BB5BE6AB2DCC5E3A4588D","device_no":"1.0.9","device_type":"android","sys_user_account":"18802671616"}
2020-03-23 10:35:45 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-23 10:35:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-23 10:35:46 -==> Parameters: 18802671616(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-23 10:35:46 -==> Parameters: android(String), 1.0.9(String), (String), null, 192.168.191.1(String), 20200323(String), 103546(String), 426(Integer)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-23 10:35:46 -==> Parameters: 25(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:35:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:35:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:35:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:35:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:35:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:35:46 -耗时 : 145
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:35:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:35:46 -==> Parameters: 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -耗时 : 13
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-23 10:35:46 -解密：
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-23 10:35:46 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-23 10:35:46 -==> Parameters: 01(String), 01(String)
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-23 10:35:46 -<==      Total: 4
2020-03-23 10:35:46 -耗时 : 13
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-23 10:35:46 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-23 10:35:46 -==> Parameters: 
2020-03-23 10:35:46 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-23 10:35:46 -==> Parameters: 426(String)
2020-03-23 10:35:46 -<==      Total: 3
2020-03-23 10:35:46 -耗时 : 10
2020-03-23 10:35:46 -<==      Total: 2
2020-03-23 10:35:46 -耗时 : 20
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:35:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:35:46 -==> Parameters: 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -耗时 : 8
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-23 10:35:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:35:46 -==> Parameters: 426(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:35:46 -==> Parameters: 426(String), 426(String)
2020-03-23 10:35:46 -此处进行解密+验签+身份验证
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: recallFlag(String), 426(String)
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-23 10:35:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-23 10:35:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:35:46 -==> Parameters: 
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: collegeFlag(String), 426(String)
2020-03-23 10:35:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:35:46 -==> Parameters: 426(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:35:46 -==> Parameters: 426(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: cardFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:35:46 -==> Parameters: 426(String), 426(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: appImgFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: recallFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -耗时 : 151
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:35:46 -==> Parameters: 
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: collegeFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:35:46 -==> Parameters: 426(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: cardFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:35:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-23 10:35:46 -<==    Updates: 1
2020-03-23 10:35:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:35:46 -==> Parameters: appImgFlag(String), 426(String)
2020-03-23 10:35:46 -<==      Total: 1
2020-03-23 10:35:46 -耗时 : 210
2020-03-23 10:35:59 -此处进行解密+验签+身份验证
2020-03-23 10:35:59 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-23 10:35:59 -token值=======426|S12ZLKCUFQ2YU4HHVECF5EV55OZXETXT
2020-03-23 10:35:59 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-03-23 10:35:59 -==> Parameters: null, 426(String)
2020-03-23 10:35:59 -<==    Updates: 1
2020-03-23 10:35:59 -耗时 : 52
2020-03-23 10:36:21 -此处进行解密+验签+身份验证
2020-03-23 10:36:21 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"182C16810618919B3146586B39D91AA7","device_no":"1.0.9","device_type":"android","sys_user_account":"18824580319"}
2020-03-23 10:36:21 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-23 10:36:21 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-23 10:36:21 -==> Parameters: 18824580319(String)
2020-03-23 10:36:21 -<==      Total: 1
2020-03-23 10:36:21 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-23 10:36:21 -==> Parameters: android(String), 1.0.9(String), (String), null, 192.168.191.1(String), 20200323(String), 103621(String), 571(Integer)
2020-03-23 10:36:21 -<==    Updates: 1
2020-03-23 10:36:21 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-23 10:36:21 -==> Parameters: 25(String)
2020-03-23 10:36:21 -<==      Total: 1
2020-03-23 10:36:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:36:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:36:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:36:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:36:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:36:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:36:21 -耗时 : 94
2020-03-23 10:36:21 -此处进行解密+验签+身份验证
2020-03-23 10:36:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:36:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:36:21 -==> Parameters: 571(String)
2020-03-23 10:36:21 -此处进行解密+验签+身份验证
2020-03-23 10:36:21 -解密：
2020-03-23 10:36:21 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-23 10:36:21 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-23 10:36:21 -==> Parameters: 01(String), 01(String)
2020-03-23 10:36:21 -此处进行解密+验签+身份验证
2020-03-23 10:36:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:21 -<==      Total: 4
2020-03-23 10:36:21 -<==      Total: 1
2020-03-23 10:36:21 -耗时 : 8
2020-03-23 10:36:21 -耗时 : 20
2020-03-23 10:36:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-23 10:36:21 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-23 10:36:21 -==> Parameters: 571(String)
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -耗时 : 9
2020-03-23 10:36:22 -此处进行解密+验签+身份验证
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:22 -此处进行解密+验签+身份验证
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:22 -此处进行解密+验签+身份验证
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:22 -此处进行解密+验签+身份验证
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:36:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:36:22 -==> Parameters: 571(String)
2020-03-23 10:36:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -耗时 : 7
2020-03-23 10:36:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:36:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:36:22 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-23 10:36:22 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-23 10:36:22 -==> Parameters: 
2020-03-23 10:36:22 -<==      Total: 3
2020-03-23 10:36:22 -耗时 : 8
2020-03-23 10:36:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:36:22 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:36:22 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:36:22 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:36:22 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:36:22 -==> Parameters: 
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:36:22 -==> Parameters: 
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:36:22 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:36:22 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -耗时 : 168
2020-03-23 10:36:22 -<==      Total: 2
2020-03-23 10:36:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:22 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:36:22 -<==    Updates: 2
2020-03-23 10:36:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:22 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:36:22 -<==      Total: 1
2020-03-23 10:36:22 -耗时 : 213
2020-03-23 10:36:25 -此处进行解密+验签+身份验证
2020-03-23 10:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:36:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:36:25 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:25 -<==      Total: 1
2020-03-23 10:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:25 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:36:25 -<==      Total: 2
2020-03-23 10:36:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:25 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:36:25 -<==    Updates: 2
2020-03-23 10:36:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:36:25 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:25 -<==      Total: 1
2020-03-23 10:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:25 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:36:25 -<==      Total: 2
2020-03-23 10:36:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:25 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:36:26 -<==    Updates: 2
2020-03-23 10:36:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:36:26 -==> Parameters: 
2020-03-23 10:36:26 -<==      Total: 1
2020-03-23 10:36:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:26 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:36:26 -<==      Total: 2
2020-03-23 10:36:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:26 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:36:26 -<==    Updates: 2
2020-03-23 10:36:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:36:26 -==> Parameters: 571(String), 571(String)
2020-03-23 10:36:26 -<==      Total: 1
2020-03-23 10:36:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:26 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:36:26 -<==      Total: 2
2020-03-23 10:36:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:36:26 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:36:26 -<==    Updates: 2
2020-03-23 10:36:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:36:26 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:36:26 -<==      Total: 1
2020-03-23 10:36:26 -耗时 : 204
2020-03-23 10:36:27 -此处进行解密+验签+身份验证
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 10:36:27 -此处进行解密+验签+身份验证
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:27 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 10:36:27 -==> Parameters: 571(String)
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:27 -<==      Total: 1
2020-03-23 10:36:27 -耗时 : 19
2020-03-23 10:36:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:36:27 -此处进行解密+验签+身份验证
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 10:36:27 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:27 -<==      Total: 1
2020-03-23 10:36:27 -耗时 : 14
2020-03-23 10:36:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 10:36:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 10:36:27 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:36:27 -此处进行解密+验签+身份验证
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:36:27 -<==      Total: 1
2020-03-23 10:36:27 -耗时 : 13
2020-03-23 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:36:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:36:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 10:36:27 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:36:27 -<==      Total: 0
2020-03-23 10:36:27 -耗时 : 10
2020-03-23 10:40:42 -此处进行解密+验签+身份验证
2020-03-23 10:40:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:40:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:40:42 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-23 10:40:42 -此处进行解密+验签+身份验证
2020-03-23 10:40:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:40:42 -耗时 : 15
2020-03-23 10:40:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:40:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-23 10:40:42 -耗时 : 0
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"182C16810618919B3146586B39D91AA7","device_no":"1.0.9","device_type":"android","sys_user_account":"18824580319"}
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-23 10:41:47 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-23 10:41:47 -==> Parameters: 18824580319(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-23 10:41:47 -==> Parameters: android(String), 1.0.9(String), (String), null, 192.168.191.1(String), 20200323(String), 104147(String), 571(Integer)
2020-03-23 10:41:47 -<==    Updates: 1
2020-03-23 10:41:47 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-23 10:41:47 -==> Parameters: 25(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:41:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:41:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:41:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:41:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 10:41:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 10:41:47 -耗时 : 122
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:41:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:41:47 -==> Parameters: 571(String)
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -解密：
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-23 10:41:47 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-23 10:41:47 -==> Parameters: 01(String), 01(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -耗时 : 12
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:41:47 -<==      Total: 4
2020-03-23 10:41:47 -耗时 : 13
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-23 10:41:47 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-23 10:41:47 -==> Parameters: 
2020-03-23 10:41:47 -<==      Total: 3
2020-03-23 10:41:47 -耗时 : 8
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:41:47 -此处进行解密+验签+身份验证
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-23 10:41:47 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-23 10:41:47 -==> Parameters: 571(String)
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -耗时 : 12
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:41:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:41:47 -==> Parameters: 571(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -耗时 : 11
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:41:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:41:47 -==> Parameters: 571(String), 571(String)
2020-03-23 10:41:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:41:47 -==> Parameters: 571(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:47 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:47 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:47 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:47 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:41:47 -<==    Updates: 2
2020-03-23 10:41:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:41:47 -==> Parameters: 571(String), 571(String)
2020-03-23 10:41:47 -<==    Updates: 2
2020-03-23 10:41:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:41:47 -==> Parameters: 571(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:47 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:47 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:47 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:47 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:41:47 -<==    Updates: 2
2020-03-23 10:41:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:41:47 -==> Parameters: 
2020-03-23 10:41:47 -<==    Updates: 2
2020-03-23 10:41:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:41:47 -==> Parameters: 
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:47 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 1
2020-03-23 10:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:47 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:47 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:41:47 -<==      Total: 2
2020-03-23 10:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:47 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:41:47 -<==    Updates: 2
2020-03-23 10:41:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:41:47 -==> Parameters: 571(String), 571(String)
2020-03-23 10:41:48 -<==    Updates: 2
2020-03-23 10:41:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:41:48 -==> Parameters: 571(String), 571(String)
2020-03-23 10:41:48 -<==      Total: 1
2020-03-23 10:41:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:48 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:41:48 -<==      Total: 1
2020-03-23 10:41:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:48 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:41:48 -<==      Total: 2
2020-03-23 10:41:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:48 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:41:48 -<==      Total: 2
2020-03-23 10:41:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:41:48 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:41:48 -<==    Updates: 2
2020-03-23 10:41:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:48 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:41:48 -<==    Updates: 2
2020-03-23 10:41:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:41:48 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:41:48 -<==      Total: 1
2020-03-23 10:41:48 -耗时 : 213
2020-03-23 10:41:48 -<==      Total: 1
2020-03-23 10:41:48 -耗时 : 228
2020-03-23 10:42:00 -此处进行解密+验签+身份验证
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:00 -此处进行解密+验签+身份验证
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:00 -此处进行解密+验签+身份验证
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:00 -此处进行解密+验签+身份验证
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:42:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 10:42:00 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:42:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 10:42:00 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:42:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 10:42:00 -<==      Total: 0
2020-03-23 10:42:00 -耗时 : 14
2020-03-23 10:42:00 -<==      Total: 1
2020-03-23 10:42:00 -耗时 : 20
2020-03-23 10:42:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 10:42:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 10:42:00 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:42:00 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 10:42:00 -==> Parameters: 571(String)
2020-03-23 10:42:00 -<==      Total: 1
2020-03-23 10:42:00 -耗时 : 11
2020-03-23 10:42:00 -<==      Total: 1
2020-03-23 10:42:00 -耗时 : 19
2020-03-23 10:42:40 -此处进行解密+验签+身份验证
2020-03-23 10:42:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:40 -此处进行解密+验签+身份验证
2020-03-23 10:42:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:40 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-23 10:42:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:40 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 10:42:40 -==> Parameters: 202003(String), 571(String)
2020-03-23 10:42:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-23 10:42:40 -<==      Total: 1
2020-03-23 10:42:40 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-23 10:42:40 -==> Parameters: 571(String)
2020-03-23 10:42:40 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-23 10:42:40 -==> Parameters: 571(String)
2020-03-23 10:42:40 -<==      Total: 1
2020-03-23 10:42:40 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-23 10:42:40 -==> Parameters: 571(String), 571(String)
2020-03-23 10:42:40 -<==      Total: 1
2020-03-23 10:42:40 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 10:42:40 -==> Parameters: 202003(String), 571(String)
2020-03-23 10:42:40 -<==      Total: 1
2020-03-23 10:42:40 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-23 10:42:40 -==> Parameters: 571(String)
2020-03-23 10:42:40 -<==      Total: 1
2020-03-23 10:42:40 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 10:42:40 -==> Parameters: 202003(String), 571(String)
2020-03-23 10:42:40 -<==      Total: 1
2020-03-23 10:42:40 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-23 10:42:40 -==> Parameters: 571(String)
2020-03-23 10:42:41 -<==      Total: 0
2020-03-23 10:42:41 -耗时 : 88
2020-03-23 10:42:41 -<==      Total: 1
2020-03-23 10:42:41 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-23 10:42:41 -==> Parameters: 571(String), 571(String)
2020-03-23 10:42:41 -<==      Total: 1
2020-03-23 10:42:41 -耗时 : 232
2020-03-23 10:42:49 -此处进行解密+验签+身份验证
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:49 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 10:42:49 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 10:42:49 -==> Parameters: 571(String)
2020-03-23 10:42:49 -<==      Total: 1
2020-03-23 10:42:49 -耗时 : 12
2020-03-23 10:42:49 -此处进行解密+验签+身份验证
2020-03-23 10:42:49 -此处进行解密+验签+身份验证
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:49 -此处进行解密+验签+身份验证
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:42:49 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 10:42:49 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 10:42:49 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:42:49 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:42:49 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:42:49 -<==      Total: 1
2020-03-23 10:42:49 -耗时 : 8
2020-03-23 10:42:49 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 10:42:49 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 10:42:49 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:42:49 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:42:49 -<==      Total: 0
2020-03-23 10:42:49 -<==      Total: 1
2020-03-23 10:42:49 -耗时 : 18
2020-03-23 10:42:49 -耗时 : 18
2020-03-23 10:52:17 -此处进行解密+验签+身份验证
2020-03-23 10:52:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:52:17 -此处进行解密+验签+身份验证
2020-03-23 10:52:17 -此处进行解密+验签+身份验证
2020-03-23 10:52:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:52:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:52:17 -解密异常：{sign=9E5FC3E25D4B5415BC29E901D8FB7BD7, token=571|V812KNQZDGLFNH5Y03P5ZRPSJ7QQG981}
2020-03-23 10:52:17 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 10:52:17 -耗时 : 0
2020-03-23 10:52:18 -此处进行解密+验签+身份验证
2020-03-23 10:52:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:52:18 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-23 10:52:18 -Reconnected to 120.25.164.176:10379
2020-03-23 10:52:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:52:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:52:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:52:18 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:52:18 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 10:52:18 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@31a0c358 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@57110bed (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3ae3cd8d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6d559aae (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@60c0afe5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@28180c27 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@56bc651 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6fc4905b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@24d08a4d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@32e66fa7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 10:52:18 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 10:52:18 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:52:18 -<==      Total: 0
2020-03-23 10:52:18 -耗时 : 104
2020-03-23 10:52:18 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 10:52:18 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:52:18 -<==      Total: 1
2020-03-23 10:52:18 -耗时 : 114
2020-03-23 10:52:18 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 10:52:18 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:52:18 -<==      Total: 1
2020-03-23 10:52:18 -耗时 : 126
2020-03-23 10:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 10:53:28 -Shutting down ExecutorService 'taskScheduler'
2020-03-23 10:53:28 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-23 10:53:28 -Shutting down Quartz Scheduler
2020-03-23 10:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-23 10:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 10:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-23 10:53:28 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 10:53:28 -HikariPool-1 - Shutdown initiated...
2020-03-23 10:53:28 -HikariPool-1 - Shutdown completed.
2020-03-23 10:53:51 -Starting LongEcologicalApplication on PC-201905161910 with PID 18240 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 10:53:51 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 10:53:51 -No active profile set, falling back to default profiles: default
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:52 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 10:53:53 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 10:53:53 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 10:53:53 -Finished Spring Data repository scanning in 95ms. Found 0 repository interfaces.
2020-03-23 10:53:53 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 10:53:53 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 10:53:53 -Finished Spring Data repository scanning in 98ms. Found 0 repository interfaces.
2020-03-23 10:53:53 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$566c7730] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 10:53:53 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$50f05bd0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 10:53:54 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 10:53:54 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 10:53:54 -Starting service [Tomcat]
2020-03-23 10:53:54 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 10:53:54 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 10:53:54 -Initializing Spring embedded WebApplicationContext
2020-03-23 10:53:54 -Root WebApplicationContext: initialization completed in 3053 ms
2020-03-23 10:53:54 -Filter xssFilter was not registered (disabled)
2020-03-23 10:53:55 -HikariPool-1 - Starting...
2020-03-23 10:53:55 -HikariPool-1 - Start completed.
2020-03-23 10:53:55 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 10:53:55 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 10:53:55 -HHH000206: hibernate.properties not found
2020-03-23 10:53:55 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 10:53:56 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 10:53:56 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 10:53:56 -Using default implementation for ThreadExecutor
2020-03-23 10:53:56 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 10:53:56 -Quartz Scheduler v.2.3.0 created.
2020-03-23 10:53:56 -RAMJobStore initialized.
2020-03-23 10:53:56 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 10:53:56 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 10:53:56 -Quartz scheduler version: 2.3.0
2020-03-23 10:53:56 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6bcdd6e4
2020-03-23 10:53:57 -STAET TaskExecutorConfig
2020-03-23 10:53:57 -Initializing ExecutorService
2020-03-23 10:53:57 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 10:53:57 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 10:53:58 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 10:53:58 -Initializing ExecutorService 'taskScheduler'
2020-03-23 10:53:58 -Starting Quartz Scheduler now
2020-03-23 10:53:58 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 10:53:58 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 10:53:58 -Using a shared selector for servlet write/read
2020-03-23 10:53:58 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 10:53:58 -Started LongEcologicalApplication in 7.57 seconds (JVM running for 8.627)
2020-03-23 10:54:22 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 10:54:22 -Initializing Servlet 'dispatcherServlet'
2020-03-23 10:54:22 -Completed initialization in 12 ms
2020-03-23 10:54:22 -此处进行解密+验签+身份验证
2020-03-23 10:54:22 -此处进行解密+验签+身份验证
2020-03-23 10:54:22 -此处进行解密+验签+身份验证
2020-03-23 10:54:22 -此处进行解密+验签+身份验证
2020-03-23 10:54:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:54:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:54:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:54:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:54:23 -Starting without optional epoll library
2020-03-23 10:54:23 -Starting without optional kqueue library
2020-03-23 10:54:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:54:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:54:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:54:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:54:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 10:54:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:54:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 10:54:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 10:54:23 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 10:54:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 10:54:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 10:54:23 -==> Parameters: 571(String)
2020-03-23 10:54:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 10:54:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:54:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:54:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 10:54:23 -<==      Total: 0
2020-03-23 10:54:23 -耗时 : 65
2020-03-23 10:54:23 -<==      Total: 1
2020-03-23 10:54:23 -耗时 : 69
2020-03-23 10:54:23 -<==      Total: 1
2020-03-23 10:54:23 -耗时 : 69
2020-03-23 10:54:23 -<==      Total: 1
2020-03-23 10:54:23 -耗时 : 71
2020-03-23 10:55:07 -此处进行解密+验签+身份验证
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:07 -此处进行解密+验签+身份验证
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:07 -此处进行解密+验签+身份验证
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:07 -此处进行解密+验签+身份验证
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:07 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:55:07 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:55:07 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:55:07 -==> Parameters: 571(String), 09(String)
2020-03-23 10:55:07 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:55:07 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:55:07 -==> Parameters: 571(String), 09(String)
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:55:07 -<==      Total: 1
2020-03-23 10:55:07 -耗时 : 25
2020-03-23 10:55:07 -<==      Total: 1
2020-03-23 10:55:07 -耗时 : 25
2020-03-23 10:55:07 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:55:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:55:07 -==> Parameters: 571(String)
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:55:07 -<==      Total: 1
2020-03-23 10:55:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:55:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:55:07 -==> Parameters: 571(String)
2020-03-23 10:55:07 -<==      Total: 1
2020-03-23 10:55:07 -耗时 : 133
2020-03-23 10:55:07 -耗时 : 112
2020-03-23 10:55:30 -此处进行解密+验签+身份验证
2020-03-23 10:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:30 -此处进行解密+验签+身份验证
2020-03-23 10:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:55:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:55:30 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:55:30 -==> Parameters: 571(String)
2020-03-23 10:55:30 -<==      Total: 1
2020-03-23 10:55:30 -耗时 : 25
2020-03-23 10:55:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:55:30 -==> Parameters: 571(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 1
2020-03-23 10:55:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:55:30 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 2
2020-03-23 10:55:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:55:30 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:55:30 -<==    Updates: 2
2020-03-23 10:55:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:55:30 -==> Parameters: 571(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 1
2020-03-23 10:55:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:55:30 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 2
2020-03-23 10:55:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:55:30 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:55:30 -<==    Updates: 2
2020-03-23 10:55:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:55:30 -==> Parameters: 
2020-03-23 10:55:30 -<==      Total: 1
2020-03-23 10:55:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:55:30 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 2
2020-03-23 10:55:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:55:30 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:55:30 -<==    Updates: 2
2020-03-23 10:55:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:55:30 -==> Parameters: 571(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 1
2020-03-23 10:55:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:55:30 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 2
2020-03-23 10:55:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:55:30 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:55:30 -<==    Updates: 2
2020-03-23 10:55:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:55:30 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:55:30 -<==      Total: 1
2020-03-23 10:55:30 -耗时 : 165
2020-03-23 10:55:40 -此处进行解密+验签+身份验证
2020-03-23 10:55:40 -此处进行解密+验签+身份验证
2020-03-23 10:55:40 -此处进行解密+验签+身份验证
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:40 -此处进行解密+验签+身份验证
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:55:40 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:55:40 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:55:40 -==> Parameters: 571(String), 09(String)
2020-03-23 10:55:40 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:55:40 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:55:40 -<==      Total: 1
2020-03-23 10:55:40 -耗时 : 12
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:55:40 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:55:40 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:55:40 -==> Parameters: 571(String), 09(String)
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:55:40 -<==      Total: 1
2020-03-23 10:55:40 -耗时 : 15
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:55:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:55:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:55:40 -==> Parameters: 571(String)
2020-03-23 10:55:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:55:40 -==> Parameters: 571(String)
2020-03-23 10:55:40 -<==      Total: 1
2020-03-23 10:55:40 -<==      Total: 1
2020-03-23 10:55:40 -耗时 : 106
2020-03-23 10:55:40 -耗时 : 110
2020-03-23 10:58:25 -此处进行解密+验签+身份验证
2020-03-23 10:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:58:25 -此处进行解密+验签+身份验证
2020-03-23 10:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:58:25 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 10:58:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:58:25 -==> Parameters: 571(String)
2020-03-23 10:58:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 10:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 10:58:25 -<==      Total: 1
2020-03-23 10:58:25 -耗时 : 14
2020-03-23 10:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 10:58:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:58:26 -==> Parameters: 571(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 1
2020-03-23 10:58:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:58:26 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 2
2020-03-23 10:58:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:58:26 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 10:58:26 -<==    Updates: 2
2020-03-23 10:58:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 10:58:26 -==> Parameters: 571(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 1
2020-03-23 10:58:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:58:26 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 2
2020-03-23 10:58:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:58:26 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 10:58:26 -<==    Updates: 2
2020-03-23 10:58:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 10:58:26 -==> Parameters: 
2020-03-23 10:58:26 -<==      Total: 1
2020-03-23 10:58:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:58:26 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 2
2020-03-23 10:58:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:58:26 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 10:58:26 -<==    Updates: 2
2020-03-23 10:58:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 10:58:26 -==> Parameters: 571(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 1
2020-03-23 10:58:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:58:26 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 2
2020-03-23 10:58:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 10:58:26 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 10:58:26 -<==    Updates: 2
2020-03-23 10:58:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 10:58:26 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 10:58:26 -<==      Total: 1
2020-03-23 10:58:26 -耗时 : 137
2020-03-23 10:58:43 -此处进行解密+验签+身份验证
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:58:43 -此处进行解密+验签+身份验证
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:58:43 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:58:43 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:58:43 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:58:43 -==> Parameters: 571(String), 09(String)
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:58:43 -<==      Total: 1
2020-03-23 10:58:43 -耗时 : 13
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:58:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:58:43 -==> Parameters: 571(String)
2020-03-23 10:58:43 -<==      Total: 1
2020-03-23 10:58:43 -此处进行解密+验签+身份验证
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:58:43 -耗时 : 86
2020-03-23 10:58:43 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 10:58:43 -此处进行解密+验签+身份验证
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 10:58:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 10:58:43 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 10:58:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 10:58:43 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 10:58:43 -==> Parameters: 571(String), 09(String)
2020-03-23 10:58:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 10:58:43 -==> Parameters: 571(String)
2020-03-23 10:58:43 -<==      Total: 1
2020-03-23 10:58:43 -<==      Total: 1
2020-03-23 10:58:43 -耗时 : 29
2020-03-23 10:58:43 -耗时 : 91
2020-03-23 11:03:25 -此处进行解密+验签+身份验证
2020-03-23 11:03:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:03:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:03:25 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:03:25 -此处进行解密+验签+身份验证
2020-03-23 11:03:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:03:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:03:25 -==> Parameters: 571(String)
2020-03-23 11:03:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:03:25 -<==      Total: 1
2020-03-23 11:03:25 -耗时 : 12
2020-03-23 11:03:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:03:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:03:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:03:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:03:25 -==> Parameters: 571(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 1
2020-03-23 11:03:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:03:25 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 2
2020-03-23 11:03:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:03:25 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:03:25 -<==    Updates: 2
2020-03-23 11:03:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:03:25 -==> Parameters: 571(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 1
2020-03-23 11:03:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:03:25 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 2
2020-03-23 11:03:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:03:25 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:03:25 -<==    Updates: 2
2020-03-23 11:03:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:03:25 -==> Parameters: 
2020-03-23 11:03:25 -<==      Total: 1
2020-03-23 11:03:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:03:25 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 2
2020-03-23 11:03:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:03:25 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:03:25 -<==    Updates: 2
2020-03-23 11:03:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:03:25 -==> Parameters: 571(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 1
2020-03-23 11:03:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:03:25 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 2
2020-03-23 11:03:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:03:25 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:03:25 -<==    Updates: 2
2020-03-23 11:03:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:03:25 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:03:25 -<==      Total: 1
2020-03-23 11:03:25 -耗时 : 134
2020-03-23 11:03:26 -此处进行解密+验签+身份验证
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:03:26 -此处进行解密+验签+身份验证
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:03:26 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:03:26 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:03:26 -==> Parameters: 571(String)
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:03:26 -<==      Total: 1
2020-03-23 11:03:26 -耗时 : 14
2020-03-23 11:03:26 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:03:26 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:03:26 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:03:26 -<==      Total: 1
2020-03-23 11:03:26 -耗时 : 17
2020-03-23 11:03:26 -此处进行解密+验签+身份验证
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:03:26 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:03:26 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:03:26 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:03:26 -<==      Total: 1
2020-03-23 11:03:26 -耗时 : 20
2020-03-23 11:03:26 -此处进行解密+验签+身份验证
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:03:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:03:26 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:03:26 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:03:26 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:03:26 -<==      Total: 0
2020-03-23 11:03:26 -耗时 : 11
2020-03-23 11:04:04 -此处进行解密+验签+身份验证
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:04 -此处进行解密+验签+身份验证
2020-03-23 11:04:04 -此处进行解密+验签+身份验证
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:04 -此处进行解密+验签+身份验证
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:04 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:04:04 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:04:04 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:04:04 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:04:04 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:04:04 -==> Parameters: 571(String), 09(String)
2020-03-23 11:04:04 -==> Parameters: 571(String), 09(String)
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:04:04 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:04:04 -<==      Total: 1
2020-03-23 11:04:04 -耗时 : 10
2020-03-23 11:04:04 -<==      Total: 1
2020-03-23 11:04:04 -耗时 : 13
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:04:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:04:04 -==> Parameters: 571(String)
2020-03-23 11:04:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:04:04 -<==      Total: 1
2020-03-23 11:04:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:04:04 -==> Parameters: 571(String)
2020-03-23 11:04:04 -<==      Total: 1
2020-03-23 11:04:04 -耗时 : 95
2020-03-23 11:04:04 -耗时 : 97
2020-03-23 11:04:38 -此处进行解密+验签+身份验证
2020-03-23 11:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:38 -此处进行解密+验签+身份验证
2020-03-23 11:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:04:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:04:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:04:38 -==> Parameters: 571(String)
2020-03-23 11:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:04:38 -<==      Total: 1
2020-03-23 11:04:38 -耗时 : 9
2020-03-23 11:04:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:04:38 -==> Parameters: 571(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 1
2020-03-23 11:04:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:04:38 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 2
2020-03-23 11:04:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:04:38 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:04:38 -<==    Updates: 2
2020-03-23 11:04:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:04:38 -==> Parameters: 571(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 1
2020-03-23 11:04:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:04:38 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 2
2020-03-23 11:04:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:04:38 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:04:38 -<==    Updates: 2
2020-03-23 11:04:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:04:38 -==> Parameters: 
2020-03-23 11:04:38 -<==      Total: 1
2020-03-23 11:04:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:04:38 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 2
2020-03-23 11:04:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:04:38 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:04:38 -<==    Updates: 2
2020-03-23 11:04:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:04:38 -==> Parameters: 571(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 1
2020-03-23 11:04:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:04:38 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 2
2020-03-23 11:04:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:04:38 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:04:38 -<==    Updates: 2
2020-03-23 11:04:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:04:38 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:04:38 -<==      Total: 1
2020-03-23 11:04:38 -耗时 : 150
2020-03-23 11:04:40 -此处进行解密+验签+身份验证
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:40 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:04:40 -此处进行解密+验签+身份验证
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:40 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:04:40 -==> Parameters: 571(String)
2020-03-23 11:04:40 -此处进行解密+验签+身份验证
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:40 -<==      Total: 1
2020-03-23 11:04:40 -耗时 : 12
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:40 -此处进行解密+验签+身份验证
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:40 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:04:40 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:04:40 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:04:40 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:04:40 -<==      Total: 1
2020-03-23 11:04:40 -耗时 : 11
2020-03-23 11:04:40 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:04:40 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:04:40 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:04:40 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:04:40 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:04:40 -<==      Total: 1
2020-03-23 11:04:40 -<==      Total: 0
2020-03-23 11:04:40 -耗时 : 19
2020-03-23 11:04:40 -耗时 : 13
2020-03-23 11:04:42 -此处进行解密+验签+身份验证
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:42 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:04:42 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:04:42 -==> Parameters: 571(String)
2020-03-23 11:04:42 -此处进行解密+验签+身份验证
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:42 -<==      Total: 1
2020-03-23 11:04:42 -耗时 : 11
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:42 -此处进行解密+验签+身份验证
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:42 -此处进行解密+验签+身份验证
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:42 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:04:42 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:04:42 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:04:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:42 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:04:42 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:04:42 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:04:42 -<==      Total: 1
2020-03-23 11:04:42 -耗时 : 14
2020-03-23 11:04:42 -<==      Total: 0
2020-03-23 11:04:42 -耗时 : 8
2020-03-23 11:04:42 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:04:42 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:04:42 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:04:42 -<==      Total: 1
2020-03-23 11:04:42 -耗时 : 9
2020-03-23 11:04:50 -此处进行解密+验签+身份验证
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:50 -此处进行解密+验签+身份验证
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:50 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:04:50 -此处进行解密+验签+身份验证
2020-03-23 11:04:50 -此处进行解密+验签+身份验证
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:04:50 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:04:50 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:04:50 -==> Parameters: 571(String), 09(String)
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:04:50 -<==      Total: 1
2020-03-23 11:04:50 -耗时 : 13
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:04:50 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:04:50 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:04:50 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:04:50 -==> Parameters: 571(String), 09(String)
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:04:50 -<==      Total: 1
2020-03-23 11:04:50 -耗时 : 10
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:04:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:04:50 -==> Parameters: 571(String)
2020-03-23 11:04:50 -<==      Total: 1
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:04:50 -耗时 : 90
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:04:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:04:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:04:50 -==> Parameters: 571(String)
2020-03-23 11:04:50 -<==      Total: 1
2020-03-23 11:04:50 -耗时 : 81
2020-03-23 11:09:18 -Starting LongEcologicalApplication on PC-201905161910 with PID 17632 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 11:09:18 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 11:09:18 -No active profile set, falling back to default profiles: default
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:09:19 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:09:19 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:09:19 -Finished Spring Data repository scanning in 62ms. Found 0 repository interfaces.
2020-03-23 11:09:19 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:09:19 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:09:19 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-23 11:09:19 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c949c804] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:09:19 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c3cdaca4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:09:20 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 11:09:20 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 11:09:20 -Starting service [Tomcat]
2020-03-23 11:09:20 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 11:09:20 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 11:09:20 -Initializing Spring embedded WebApplicationContext
2020-03-23 11:09:20 -Root WebApplicationContext: initialization completed in 1926 ms
2020-03-23 11:09:20 -Filter xssFilter was not registered (disabled)
2020-03-23 11:09:20 -HikariPool-1 - Starting...
2020-03-23 11:09:20 -HikariPool-1 - Start completed.
2020-03-23 11:09:20 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 11:09:20 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 11:09:20 -HHH000206: hibernate.properties not found
2020-03-23 11:09:21 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 11:09:21 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 11:09:21 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 11:09:21 -Using default implementation for ThreadExecutor
2020-03-23 11:09:21 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 11:09:21 -Quartz Scheduler v.2.3.0 created.
2020-03-23 11:09:21 -RAMJobStore initialized.
2020-03-23 11:09:21 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 11:09:21 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 11:09:21 -Quartz scheduler version: 2.3.0
2020-03-23 11:09:21 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3ec9f8d
2020-03-23 11:09:22 -STAET TaskExecutorConfig
2020-03-23 11:09:22 -Initializing ExecutorService
2020-03-23 11:09:22 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 11:09:22 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 11:09:22 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 11:09:23 -Initializing ExecutorService 'taskScheduler'
2020-03-23 11:09:23 -Starting Quartz Scheduler now
2020-03-23 11:09:23 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 11:09:23 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 11:09:23 -Using a shared selector for servlet write/read
2020-03-23 11:09:23 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 11:09:23 -Started LongEcologicalApplication in 5.466 seconds (JVM running for 6.699)
2020-03-23 11:10:03 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 11:10:03 -Initializing Servlet 'dispatcherServlet'
2020-03-23 11:10:03 -Completed initialization in 15 ms
2020-03-23 11:10:03 -此处进行解密+验签+身份验证
2020-03-23 11:10:03 -此处进行解密+验签+身份验证
2020-03-23 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:03 -Starting without optional epoll library
2020-03-23 11:10:03 -Starting without optional kqueue library
2020-03-23 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:03 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:10:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:10:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:10:04 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:04 -==> Parameters: 571(String)
2020-03-23 11:10:04 -<==      Total: 1
2020-03-23 11:10:04 -<==      Total: 1
2020-03-23 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:04 -耗时 : 66
2020-03-23 11:10:04 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 2
2020-03-23 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:04 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:10:04 -<==    Updates: 2
2020-03-23 11:10:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:10:04 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 1
2020-03-23 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:04 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 2
2020-03-23 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:04 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:10:04 -<==    Updates: 2
2020-03-23 11:10:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:10:04 -==> Parameters: 
2020-03-23 11:10:04 -<==      Total: 1
2020-03-23 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:04 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 2
2020-03-23 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:04 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:10:04 -<==    Updates: 2
2020-03-23 11:10:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:10:04 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 1
2020-03-23 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:04 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 2
2020-03-23 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:04 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:10:04 -<==    Updates: 2
2020-03-23 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:04 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:10:04 -<==      Total: 1
2020-03-23 11:10:04 -耗时 : 248
2020-03-23 11:10:17 -此处进行解密+验签+身份验证
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:17 -此处进行解密+验签+身份验证
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:17 -此处进行解密+验签+身份验证
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:17 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:10:17 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:10:17 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:10:17 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:10:17 -==> Parameters: 571(String), 09(String)
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:10:17 -<==      Total: 1
2020-03-23 11:10:17 -耗时 : 48
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:10:17 -此处进行解密+验签+身份验证
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:10:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:10:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:17 -==> Parameters: 571(String)
2020-03-23 11:10:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:17 -==> Parameters: 571(String)
2020-03-23 11:10:17 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:10:17 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:10:17 -==> Parameters: 571(String), 09(String)
2020-03-23 11:10:17 -<==      Total: 1
2020-03-23 11:10:17 -<==      Total: 1
2020-03-23 11:10:17 -<==      Total: 1
2020-03-23 11:10:17 -耗时 : 14
2020-03-23 11:10:17 -耗时 : 120
2020-03-23 11:10:17 -耗时 : 118
2020-03-23 11:10:26 -此处进行解密+验签+身份验证
2020-03-23 11:10:26 -此处进行解密+验签+身份验证
2020-03-23 11:10:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:10:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:10:26 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:10:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:10:26 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:26 -==> Parameters: 571(String)
2020-03-23 11:10:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:10:26 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:26 -<==      Total: 1
2020-03-23 11:10:26 -耗时 : 18
2020-03-23 11:10:27 -<==      Total: 1
2020-03-23 11:10:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:27 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 2
2020-03-23 11:10:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:27 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:10:27 -<==    Updates: 2
2020-03-23 11:10:27 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:10:27 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 1
2020-03-23 11:10:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:27 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 2
2020-03-23 11:10:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:27 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:10:27 -<==    Updates: 2
2020-03-23 11:10:27 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:10:27 -==> Parameters: 
2020-03-23 11:10:27 -<==      Total: 1
2020-03-23 11:10:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:27 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 2
2020-03-23 11:10:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:27 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:10:27 -<==    Updates: 2
2020-03-23 11:10:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:10:27 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 1
2020-03-23 11:10:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:27 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 2
2020-03-23 11:10:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:27 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:10:27 -<==    Updates: 2
2020-03-23 11:10:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:27 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:10:27 -<==      Total: 1
2020-03-23 11:10:27 -耗时 : 220
2020-03-23 11:10:33 -此处进行解密+验签+身份验证
2020-03-23 11:10:33 -此处进行解密+验签+身份验证
2020-03-23 11:10:33 -此处进行解密+验签+身份验证
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:33 -此处进行解密+验签+身份验证
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:10:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:10:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:10:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:10:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:10:33 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:10:33 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:10:33 -==> Parameters: 571(String)
2020-03-23 11:10:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:10:33 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:10:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:10:33 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:10:33 -<==      Total: 1
2020-03-23 11:10:33 -耗时 : 13
2020-03-23 11:10:33 -<==      Total: 1
2020-03-23 11:10:33 -耗时 : 23
2020-03-23 11:10:33 -<==      Total: 0
2020-03-23 11:10:33 -耗时 : 21
2020-03-23 11:10:33 -<==      Total: 1
2020-03-23 11:10:33 -耗时 : 18
2020-03-23 11:10:40 -此处进行解密+验签+身份验证
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:40 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:10:40 -此处进行解密+验签+身份验证
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:40 -此处进行解密+验签+身份验证
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:40 -此处进行解密+验签+身份验证
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:10:40 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:10:40 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:10:40 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:10:40 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:10:40 -==> Parameters: 571(String), 09(String)
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:10:40 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:10:40 -==> Parameters: 571(String), 09(String)
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:10:40 -<==      Total: 1
2020-03-23 11:10:40 -耗时 : 14
2020-03-23 11:10:40 -<==      Total: 1
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:10:40 -耗时 : 19
2020-03-23 11:10:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:40 -==> Parameters: 571(String)
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:10:40 -<==      Total: 1
2020-03-23 11:10:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:10:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:40 -==> Parameters: 571(String)
2020-03-23 11:10:40 -耗时 : 70
2020-03-23 11:10:40 -<==      Total: 1
2020-03-23 11:10:40 -耗时 : 59
2020-03-23 11:10:45 -此处进行解密+验签+身份验证
2020-03-23 11:10:45 -此处进行解密+验签+身份验证
2020-03-23 11:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:10:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:10:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:45 -==> Parameters: 571(String)
2020-03-23 11:10:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:10:45 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 1
2020-03-23 11:10:45 -耗时 : 20
2020-03-23 11:10:45 -<==      Total: 1
2020-03-23 11:10:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:45 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 2
2020-03-23 11:10:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:45 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:10:45 -<==    Updates: 2
2020-03-23 11:10:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:10:45 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 1
2020-03-23 11:10:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:45 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 2
2020-03-23 11:10:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:45 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:10:45 -<==    Updates: 2
2020-03-23 11:10:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:10:45 -==> Parameters: 
2020-03-23 11:10:45 -<==      Total: 1
2020-03-23 11:10:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:45 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 2
2020-03-23 11:10:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:45 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:10:45 -<==    Updates: 2
2020-03-23 11:10:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:10:45 -==> Parameters: 571(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 1
2020-03-23 11:10:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:45 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 2
2020-03-23 11:10:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:10:45 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:10:45 -<==    Updates: 2
2020-03-23 11:10:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:10:45 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:10:45 -<==      Total: 1
2020-03-23 11:10:45 -耗时 : 216
2020-03-23 11:10:48 -此处进行解密+验签+身份验证
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:48 -此处进行解密+验签+身份验证
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:48 -此处进行解密+验签+身份验证
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:48 -此处进行解密+验签+身份验证
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:10:48 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:10:48 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:10:48 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:10:48 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:10:48 -==> Parameters: 571(String), 09(String)
2020-03-23 11:10:48 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:10:48 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:10:48 -==> Parameters: 571(String), 09(String)
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:10:48 -<==      Total: 1
2020-03-23 11:10:48 -耗时 : 20
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:10:48 -<==      Total: 1
2020-03-23 11:10:48 -耗时 : 21
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:10:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:10:48 -==> Parameters: 571(String)
2020-03-23 11:10:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:10:48 -<==      Total: 1
2020-03-23 11:10:48 -耗时 : 58
2020-03-23 11:10:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:10:48 -==> Parameters: 571(String)
2020-03-23 11:10:48 -<==      Total: 1
2020-03-23 11:10:48 -耗时 : 69
2020-03-23 11:11:16 -此处进行解密+验签+身份验证
2020-03-23 11:11:16 -解密：{"cash_money":"62978.02","pay_password":"D85F07E069E68BF4A8864FE21640F405","sign":"A54F69C7D2FAAA5AC1040CB7297EBD6E","card_id":"2259","token":"571|V812KNQZDGLFNH5Y03P5ZRPSJ7QQG981"}
2020-03-23 11:11:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:11:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:11:16 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 11:11:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:11:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:11:17 -耗时 : 55
2020-03-23 11:13:07 -Starting LongEcologicalApplication on PC-201905161910 with PID 5860 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 11:13:07 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 11:13:07 -No active profile set, falling back to default profiles: default
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:13:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:13:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:13:08 -Finished Spring Data repository scanning in 91ms. Found 0 repository interfaces.
2020-03-23 11:13:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:13:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:13:08 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-23 11:13:08 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$a5e9e977] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:13:08 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a06dce17] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:13:09 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 11:13:09 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 11:13:09 -Starting service [Tomcat]
2020-03-23 11:13:09 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 11:13:09 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 11:13:09 -Initializing Spring embedded WebApplicationContext
2020-03-23 11:13:09 -Root WebApplicationContext: initialization completed in 2450 ms
2020-03-23 11:13:09 -Filter xssFilter was not registered (disabled)
2020-03-23 11:13:10 -HikariPool-1 - Starting...
2020-03-23 11:13:10 -HikariPool-1 - Start completed.
2020-03-23 11:13:10 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 11:13:10 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 11:13:10 -HHH000206: hibernate.properties not found
2020-03-23 11:13:10 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 11:13:10 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 11:13:11 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 11:13:11 -Using default implementation for ThreadExecutor
2020-03-23 11:13:11 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 11:13:11 -Quartz Scheduler v.2.3.0 created.
2020-03-23 11:13:11 -RAMJobStore initialized.
2020-03-23 11:13:11 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 11:13:11 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 11:13:11 -Quartz scheduler version: 2.3.0
2020-03-23 11:13:11 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@484a5ddd
2020-03-23 11:13:12 -STAET TaskExecutorConfig
2020-03-23 11:13:12 -Initializing ExecutorService
2020-03-23 11:13:12 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 11:13:12 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 11:13:12 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 11:13:12 -Initializing ExecutorService 'taskScheduler'
2020-03-23 11:13:13 -Starting Quartz Scheduler now
2020-03-23 11:13:13 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 11:13:13 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 11:13:13 -Using a shared selector for servlet write/read
2020-03-23 11:13:13 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 11:13:13 -Started LongEcologicalApplication in 7.255 seconds (JVM running for 9.158)
2020-03-23 11:13:34 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 11:13:34 -Initializing Servlet 'dispatcherServlet'
2020-03-23 11:13:34 -Completed initialization in 17 ms
2020-03-23 11:13:34 -此处进行解密+验签+身份验证
2020-03-23 11:13:34 -此处进行解密+验签+身份验证
2020-03-23 11:13:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:13:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:13:34 -Starting without optional epoll library
2020-03-23 11:13:34 -Starting without optional kqueue library
2020-03-23 11:13:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:13:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:13:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:13:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:13:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:13:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:13:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:13:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:13:35 -==> Parameters: 571(String), 571(String)
2020-03-23 11:13:35 -==> Parameters: 571(String)
2020-03-23 11:13:35 -<==      Total: 1
2020-03-23 11:13:35 -<==      Total: 1
2020-03-23 11:13:35 -耗时 : 54
2020-03-23 11:13:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:13:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 2
2020-03-23 11:13:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:13:35 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:13:35 -<==    Updates: 2
2020-03-23 11:13:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:13:35 -==> Parameters: 571(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 1
2020-03-23 11:13:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:13:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 2
2020-03-23 11:13:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:13:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:13:35 -<==    Updates: 2
2020-03-23 11:13:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:13:35 -==> Parameters: 
2020-03-23 11:13:35 -<==      Total: 1
2020-03-23 11:13:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:13:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 2
2020-03-23 11:13:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:13:35 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:13:35 -<==    Updates: 2
2020-03-23 11:13:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:13:35 -==> Parameters: 571(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 1
2020-03-23 11:13:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:13:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 2
2020-03-23 11:13:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:13:35 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:13:35 -<==    Updates: 2
2020-03-23 11:13:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:13:35 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:13:35 -<==      Total: 1
2020-03-23 11:13:35 -耗时 : 200
2020-03-23 11:13:43 -此处进行解密+验签+身份验证
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:13:43 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:13:43 -此处进行解密+验签+身份验证
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:13:43 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:13:43 -此处进行解密+验签+身份验证
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:13:43 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:13:43 -==> Parameters: 571(String), 09(String)
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:13:43 -此处进行解密+验签+身份验证
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:13:43 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:13:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:13:43 -<==      Total: 1
2020-03-23 11:13:43 -耗时 : 48
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:13:43 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:13:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:13:43 -==> Parameters: 571(String)
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:13:43 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:13:43 -==> Parameters: 571(String), 09(String)
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:13:43 -<==      Total: 1
2020-03-23 11:13:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:13:43 -<==      Total: 1
2020-03-23 11:13:43 -耗时 : 13
2020-03-23 11:13:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:13:43 -==> Parameters: 571(String)
2020-03-23 11:13:43 -<==      Total: 1
2020-03-23 11:13:43 -耗时 : 85
2020-03-23 11:13:43 -耗时 : 63
2020-03-23 11:14:46 -此处进行解密+验签+身份验证
2020-03-23 11:14:46 -解密：{"cash_money":"62979.83","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"A35785FD1A51FC75D4579A170DB6C2C2","card_id":"2259","token":"571|V812KNQZDGLFNH5Y03P5ZRPSJ7QQG981"}
2020-03-23 11:14:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:14:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:14:46 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 11:15:39 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 11:15:39 -==> Parameters: 2259(String), 571(String)
2020-03-23 11:15:39 -<==      Total: 1
2020-03-23 11:16:00 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 #and money-?>=today_benefit and real_deduct_money+?>=0 
2020-03-23 11:16:20 -UserCardInfoServiceImpl -- applyCashOper方法处理异常：nested exception is org.apache.ibatis.type.TypeException: Could not set parameters for mapping: ParameterMapping{property='map.deduct_money', mode=IN, javaType=class java.lang.Object, jdbcType=null, numericScale=null, resultMapId='null', jdbcTypeName='null', expression='null'}. Cause: org.apache.ibatis.type.TypeException: Error setting non null for parameter #12 with JdbcType null . Try setting a different JdbcType for this parameter or a different configuration property. Cause: org.apache.ibatis.type.TypeException: Error setting non null for parameter #12 with JdbcType null . Try setting a different JdbcType for this parameter or a different configuration property. Cause: java.sql.SQLException: Parameter index out of range (12 > number of parameters, which is 11).
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy103.updateUserByApplyCash(Unknown Source)
	at com.example.longecological.service.user.impl.UserCashRecordServiceImpl.applyCashOper(UserCashRecordServiceImpl.java:192)
	at com.example.longecological.service.user.impl.UserCashRecordServiceImpl.applyCash(UserCashRecordServiceImpl.java:121)
	at com.example.longecological.service.user.impl.UserCashRecordServiceImpl$$FastClassBySpringCGLIB$$e78edf39.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.user.impl.UserCashRecordServiceImpl$$EnhancerBySpringCGLIB$$583ac767.applyCash(<generated>)
	at com.example.longecological.controller.user.UserCashRecordController.applyCash(UserCashRecordController.java:50)
	at com.example.longecological.controller.user.UserCashRecordController$$FastClassBySpringCGLIB$$6b50b385.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.user.UserCashRecordController$$EnhancerBySpringCGLIB$$6255e6e7.applyCash(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-23 11:16:20 -耗时 : 93611
2020-03-23 11:19:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 11:19:32 -Shutting down ExecutorService 'taskScheduler'
2020-03-23 11:19:32 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-23 11:19:32 -Shutting down Quartz Scheduler
2020-03-23 11:19:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-23 11:19:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 11:19:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-23 11:19:32 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 11:19:32 -HikariPool-1 - Shutdown initiated...
2020-03-23 11:19:32 -HikariPool-1 - Shutdown completed.
2020-03-23 11:20:04 -Starting LongEcologicalApplication on PC-201905161910 with PID 2748 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 11:20:04 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 11:20:04 -No active profile set, falling back to default profiles: default
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:20:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:20:05 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:20:05 -Finished Spring Data repository scanning in 84ms. Found 0 repository interfaces.
2020-03-23 11:20:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:20:05 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:20:06 -Finished Spring Data repository scanning in 80ms. Found 0 repository interfaces.
2020-03-23 11:20:06 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$952a13ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:20:06 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8fadf88c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:20:07 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 11:20:07 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 11:20:07 -Starting service [Tomcat]
2020-03-23 11:20:07 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 11:20:07 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 11:20:07 -Initializing Spring embedded WebApplicationContext
2020-03-23 11:20:07 -Root WebApplicationContext: initialization completed in 2786 ms
2020-03-23 11:20:07 -Filter xssFilter was not registered (disabled)
2020-03-23 11:20:07 -HikariPool-1 - Starting...
2020-03-23 11:20:08 -HikariPool-1 - Start completed.
2020-03-23 11:20:08 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 11:20:08 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 11:20:08 -HHH000206: hibernate.properties not found
2020-03-23 11:20:08 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 11:20:08 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 11:20:08 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 11:20:09 -Using default implementation for ThreadExecutor
2020-03-23 11:20:09 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 11:20:09 -Quartz Scheduler v.2.3.0 created.
2020-03-23 11:20:09 -RAMJobStore initialized.
2020-03-23 11:20:09 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 11:20:09 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 11:20:09 -Quartz scheduler version: 2.3.0
2020-03-23 11:20:09 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3a6b94b6
2020-03-23 11:20:10 -STAET TaskExecutorConfig
2020-03-23 11:20:10 -Initializing ExecutorService
2020-03-23 11:20:10 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 11:20:10 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 11:20:11 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 11:20:11 -Initializing ExecutorService 'taskScheduler'
2020-03-23 11:20:11 -Starting Quartz Scheduler now
2020-03-23 11:20:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 11:20:11 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 11:20:11 -Using a shared selector for servlet write/read
2020-03-23 11:20:12 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 11:20:12 -Started LongEcologicalApplication in 8.291 seconds (JVM running for 9.462)
2020-03-23 11:20:32 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 11:20:32 -Initializing Servlet 'dispatcherServlet'
2020-03-23 11:20:32 -Completed initialization in 11 ms
2020-03-23 11:20:32 -此处进行解密+验签+身份验证
2020-03-23 11:20:32 -此处进行解密+验签+身份验证
2020-03-23 11:20:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:33 -Starting without optional epoll library
2020-03-23 11:20:33 -Starting without optional kqueue library
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:20:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:20:33 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:20:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:20:33 -==> Parameters: 571(String), 571(String)
2020-03-23 11:20:33 -==> Parameters: 571(String)
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -耗时 : 63
2020-03-23 11:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:20:33 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 2
2020-03-23 11:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:20:33 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:20:33 -<==    Updates: 2
2020-03-23 11:20:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:20:33 -==> Parameters: 571(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:20:33 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 2
2020-03-23 11:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:20:33 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:20:33 -<==    Updates: 2
2020-03-23 11:20:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:20:33 -==> Parameters: 
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:20:33 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 2
2020-03-23 11:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:20:33 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:20:33 -<==    Updates: 2
2020-03-23 11:20:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:20:33 -==> Parameters: 571(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:20:33 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 2
2020-03-23 11:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:20:33 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:20:33 -<==    Updates: 2
2020-03-23 11:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:20:33 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -耗时 : 194
2020-03-23 11:20:33 -此处进行解密+验签+身份验证
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:20:33 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:20:33 -==> Parameters: 571(String)
2020-03-23 11:20:33 -<==      Total: 1
2020-03-23 11:20:33 -此处进行解密+验签+身份验证
2020-03-23 11:20:33 -耗时 : 15
2020-03-23 11:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:34 -此处进行解密+验签+身份验证
2020-03-23 11:20:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:20:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:20:34 -此处进行解密+验签+身份验证
2020-03-23 11:20:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:20:34 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:20:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:20:34 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:20:34 -<==      Total: 1
2020-03-23 11:20:34 -耗时 : 37
2020-03-23 11:20:34 -<==      Total: 0
2020-03-23 11:20:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:20:34 -耗时 : 34
2020-03-23 11:20:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:20:34 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:20:34 -<==      Total: 1
2020-03-23 11:20:34 -耗时 : 9
2020-03-23 11:20:47 -此处进行解密+验签+身份验证
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:47 -此处进行解密+验签+身份验证
2020-03-23 11:20:47 -此处进行解密+验签+身份验证
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:47 -此处进行解密+验签+身份验证
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:20:47 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:20:47 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:20:47 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:20:47 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:20:47 -==> Parameters: 571(String), 09(String)
2020-03-23 11:20:47 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:20:47 -==> Parameters: 571(String), 09(String)
2020-03-23 11:20:47 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:20:47 -<==      Total: 1
2020-03-23 11:20:47 -耗时 : 13
2020-03-23 11:20:47 -<==      Total: 1
2020-03-23 11:20:47 -耗时 : 26
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:20:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:20:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:20:47 -==> Parameters: 571(String)
2020-03-23 11:20:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:20:47 -==> Parameters: 571(String)
2020-03-23 11:20:47 -<==      Total: 1
2020-03-23 11:20:47 -<==      Total: 1
2020-03-23 11:20:47 -耗时 : 113
2020-03-23 11:20:47 -耗时 : 112
2020-03-23 11:21:13 -此处进行解密+验签+身份验证
2020-03-23 11:21:14 -解密：{"cash_money":"62982.4","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"CD4F8E18D27DC7B90940D81260689299","card_id":"2259","token":"571|V812KNQZDGLFNH5Y03P5ZRPSJ7QQG981"}
2020-03-23 11:21:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:21:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:21:14 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 11:21:28 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 11:21:28 -==> Parameters: 2259(String), 571(String)
2020-03-23 11:21:28 -<==      Total: 1
2020-03-23 11:21:36 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 and real_deduct_money+?>=0 
2020-03-23 11:21:36 -==> Parameters: 62982.4(String), 0.00(BigDecimal), 0.00(BigDecimal), 06(String), 20200323112132266714(String), 20200323(String), 112133(String), 571(String), 62982.4(String), 0.00(BigDecimal), 0.00(BigDecimal)
2020-03-23 11:21:36 -<==    Updates: 1
2020-03-23 11:21:46 -==>  Preparing: insert into t_user_cash_record ( order_id, user_id, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, account, account_name, id_card, bank_code, bank_name, batch_no, status, cre_date, cre_time) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2020-03-23 11:21:46 -==> Parameters: 20200323112132266714(String), 571(String), 62982.4(String), 58570.6320(BigDecimal), 0.07(BigDecimal), 4408.7680(BigDecimal), 3(BigDecimal), 0.00(BigDecimal), 6226220623038410(String), 曹宇拓(String), 510224197906075230(String), 305584000002(String), 中国民生银行深圳分行(String), 20200323112132498631(String), 00(String), 20200323(String), 112133(String)
2020-03-23 11:21:46 -<==    Updates: 1
2020-03-23 11:21:53 -==>  Preparing: insert into t_user_cash_record_detail ( cash_id, cash_status, note, cre_date, cre_time) values ( ?, ?, ?, ?, ?) 
2020-03-23 11:21:53 -==> Parameters: 3146(Long), 00(String), 申请提现(String), 20200323(String), 112133(String)
2020-03-23 11:21:53 -<==    Updates: 1
2020-03-23 11:22:03 -耗时 : 49686
2020-03-23 11:22:34 -此处进行解密+验签+身份验证
2020-03-23 11:22:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:34 -此处进行解密+验签+身份验证
2020-03-23 11:22:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:22:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:22:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:22:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:22:34 -==> Parameters: 571(String), 571(String)
2020-03-23 11:22:34 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:22:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:22:34 -==> Parameters: 571(String)
2020-03-23 11:22:34 -<==      Total: 1
2020-03-23 11:22:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:22:34 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 1
2020-03-23 11:22:34 -耗时 : 10
2020-03-23 11:22:34 -<==      Total: 2
2020-03-23 11:22:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:22:34 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:22:34 -<==    Updates: 2
2020-03-23 11:22:34 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:22:34 -==> Parameters: 571(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 1
2020-03-23 11:22:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:22:34 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 2
2020-03-23 11:22:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:22:34 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:22:34 -<==    Updates: 2
2020-03-23 11:22:34 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:22:34 -==> Parameters: 
2020-03-23 11:22:34 -<==      Total: 1
2020-03-23 11:22:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:22:34 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 2
2020-03-23 11:22:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:22:34 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:22:34 -<==    Updates: 2
2020-03-23 11:22:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:22:34 -==> Parameters: 571(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 1
2020-03-23 11:22:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:22:34 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 2
2020-03-23 11:22:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:22:34 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:22:34 -<==    Updates: 2
2020-03-23 11:22:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:22:34 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:22:34 -<==      Total: 1
2020-03-23 11:22:34 -耗时 : 163
2020-03-23 11:22:35 -此处进行解密+验签+身份验证
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:35 -此处进行解密+验签+身份验证
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:35 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:22:35 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:22:35 -==> Parameters: 571(String)
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:35 -此处进行解密+验签+身份验证
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:35 -<==      Total: 1
2020-03-23 11:22:35 -耗时 : 11
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:35 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:22:35 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:22:35 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:22:35 -此处进行解密+验签+身份验证
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:35 -<==      Total: 1
2020-03-23 11:22:35 -耗时 : 13
2020-03-23 11:22:35 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:22:35 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:22:35 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:22:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:35 -<==      Total: 0
2020-03-23 11:22:35 -耗时 : 9
2020-03-23 11:22:35 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:22:35 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:22:35 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:22:35 -<==      Total: 1
2020-03-23 11:22:35 -耗时 : 11
2020-03-23 11:22:47 -此处进行解密+验签+身份验证
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:47 -此处进行解密+验签+身份验证
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:47 -此处进行解密+验签+身份验证
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:47 -此处进行解密+验签+身份验证
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:47 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:22:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:47 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:22:47 -==> Parameters: 571(String)
2020-03-23 11:22:47 -<==      Total: 1
2020-03-23 11:22:47 -耗时 : 10
2020-03-23 11:22:47 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:22:47 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:22:47 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:22:47 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:22:47 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:22:47 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:22:47 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:22:47 -<==      Total: 1
2020-03-23 11:22:47 -耗时 : 12
2020-03-23 11:22:47 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:22:47 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:22:47 -<==      Total: 1
2020-03-23 11:22:47 -耗时 : 9
2020-03-23 11:22:47 -<==      Total: 0
2020-03-23 11:22:47 -耗时 : 21
2020-03-23 11:22:58 -此处进行解密+验签+身份验证
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:58 -此处进行解密+验签+身份验证
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:58 -此处进行解密+验签+身份验证
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:58 -此处进行解密+验签+身份验证
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:58 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:22:58 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:22:58 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:22:58 -==> Parameters: 571(String), 09(String)
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:22:58 -<==      Total: 1
2020-03-23 11:22:58 -耗时 : 12
2020-03-23 11:22:58 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:22:58 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:22:58 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:22:58 -==> Parameters: 571(String), 09(String)
2020-03-23 11:22:58 -<==      Total: 1
2020-03-23 11:22:58 -耗时 : 11
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:22:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:22:58 -==> Parameters: 571(String)
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:22:58 -<==      Total: 1
2020-03-23 11:22:58 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:22:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:22:58 -==> Parameters: 571(String)
2020-03-23 11:22:58 -耗时 : 119
2020-03-23 11:22:58 -<==      Total: 1
2020-03-23 11:22:58 -耗时 : 106
2020-03-23 11:22:59 -此处进行解密+验签+身份验证
2020-03-23 11:22:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:22:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:22:59 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 11:22:59 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 11:22:59 -==> Parameters: 571(String), 10(Integer)
2020-03-23 11:22:59 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 11:22:59 -====> Parameters: 3146(Integer)
2020-03-23 11:22:59 -<====      Total: 1
2020-03-23 11:22:59 -<==      Total: 1
2020-03-23 11:22:59 -耗时 : 20
2020-03-23 11:23:08 -此处进行解密+验签+身份验证
2020-03-23 11:23:08 -此处进行解密+验签+身份验证
2020-03-23 11:23:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:08 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:23:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:23:08 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:23:08 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:23:08 -==> Parameters: 571(String), 09(String)
2020-03-23 11:23:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:23:08 -<==      Total: 1
2020-03-23 11:23:08 -耗时 : 10
2020-03-23 11:23:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:23:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:23:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:23:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:23:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:23:08 -==> Parameters: 571(String)
2020-03-23 11:23:08 -<==      Total: 1
2020-03-23 11:23:08 -耗时 : 76
2020-03-23 11:23:09 -此处进行解密+验签+身份验证
2020-03-23 11:23:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:09 -此处进行解密+验签+身份验证
2020-03-23 11:23:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:23:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:23:09 -==> Parameters: 571(String)
2020-03-23 11:23:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:23:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:23:09 -<==      Total: 1
2020-03-23 11:23:09 -耗时 : 13
2020-03-23 11:23:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:23:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:23:09 -==> Parameters: 571(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 1
2020-03-23 11:23:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:09 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 2
2020-03-23 11:23:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:09 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:23:09 -<==    Updates: 2
2020-03-23 11:23:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:23:09 -==> Parameters: 571(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 1
2020-03-23 11:23:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:09 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 2
2020-03-23 11:23:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:09 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:23:09 -<==    Updates: 2
2020-03-23 11:23:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:23:09 -==> Parameters: 
2020-03-23 11:23:09 -<==      Total: 1
2020-03-23 11:23:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:09 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 2
2020-03-23 11:23:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:09 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:23:09 -<==    Updates: 2
2020-03-23 11:23:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:23:09 -==> Parameters: 571(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 1
2020-03-23 11:23:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:09 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 2
2020-03-23 11:23:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:09 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:23:09 -<==    Updates: 2
2020-03-23 11:23:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:09 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:23:09 -<==      Total: 1
2020-03-23 11:23:09 -耗时 : 138
2020-03-23 11:23:23 -此处进行解密+验签+身份验证
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:23 -此处进行解密+验签+身份验证
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:23 -此处进行解密+验签+身份验证
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:23 -此处进行解密+验签+身份验证
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:23:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:23:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:23:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:23 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:23:23 -==> Parameters: 571(String)
2020-03-23 11:23:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:23:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:23 -<==      Total: 1
2020-03-23 11:23:23 -耗时 : 11
2020-03-23 11:23:23 -<==      Total: 1
2020-03-23 11:23:23 -耗时 : 19
2020-03-23 11:23:23 -<==      Total: 0
2020-03-23 11:23:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:23:23 -耗时 : 15
2020-03-23 11:23:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:23 -<==      Total: 1
2020-03-23 11:23:23 -耗时 : 23
2020-03-23 11:23:25 -此处进行解密+验签+身份验证
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:25 -此处进行解密+验签+身份验证
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:25 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:23:25 -此处进行解密+验签+身份验证
2020-03-23 11:23:25 -此处进行解密+验签+身份验证
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:25 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:23:25 -==> Parameters: 571(String)
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:25 -<==      Total: 1
2020-03-23 11:23:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:25 -耗时 : 12
2020-03-23 11:23:25 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:25 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:23:25 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:25 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:23:25 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:25 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:23:25 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:25 -<==      Total: 0
2020-03-23 11:23:25 -耗时 : 11
2020-03-23 11:23:25 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:23:25 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:25 -<==      Total: 1
2020-03-23 11:23:25 -耗时 : 9
2020-03-23 11:23:25 -<==      Total: 1
2020-03-23 11:23:25 -耗时 : 20
2020-03-23 11:23:34 -此处进行解密+验签+身份验证
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:34 -此处进行解密+验签+身份验证
2020-03-23 11:23:34 -此处进行解密+验签+身份验证
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:34 -此处进行解密+验签+身份验证
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:23:34 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:23:34 -==> Parameters: 571(String)
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:34 -<==      Total: 1
2020-03-23 11:23:34 -耗时 : 14
2020-03-23 11:23:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:23:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:23:34 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:23:34 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:34 -<==      Total: 1
2020-03-23 11:23:34 -耗时 : 11
2020-03-23 11:23:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:23:34 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:34 -<==      Total: 0
2020-03-23 11:23:34 -耗时 : 9
2020-03-23 11:23:34 -<==      Total: 1
2020-03-23 11:23:34 -耗时 : 20
2020-03-23 11:23:43 -此处进行解密+验签+身份验证
2020-03-23 11:23:43 -此处进行解密+验签+身份验证
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:43 -此处进行解密+验签+身份验证
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:43 -此处进行解密+验签+身份验证
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:43 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:23:43 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:23:43 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:23:43 -==> Parameters: 571(String), 09(String)
2020-03-23 11:23:43 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:23:43 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:23:43 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:23:43 -==> Parameters: 571(String), 09(String)
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:23:43 -<==      Total: 1
2020-03-23 11:23:43 -<==      Total: 1
2020-03-23 11:23:43 -耗时 : 12
2020-03-23 11:23:43 -耗时 : 20
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:23:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:23:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:23:43 -==> Parameters: 571(String)
2020-03-23 11:23:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:23:43 -==> Parameters: 571(String)
2020-03-23 11:23:43 -<==      Total: 1
2020-03-23 11:23:43 -<==      Total: 1
2020-03-23 11:23:43 -耗时 : 106
2020-03-23 11:23:43 -耗时 : 110
2020-03-23 11:23:57 -此处进行解密+验签+身份验证
2020-03-23 11:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:57 -此处进行解密+验签+身份验证
2020-03-23 11:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:23:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:23:57 -==> Parameters: 571(String)
2020-03-23 11:23:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:23:57 -<==      Total: 1
2020-03-23 11:23:57 -耗时 : 12
2020-03-23 11:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:23:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:23:57 -==> Parameters: 571(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 1
2020-03-23 11:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:57 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 2
2020-03-23 11:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:57 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:23:57 -<==    Updates: 2
2020-03-23 11:23:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:23:57 -==> Parameters: 571(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 1
2020-03-23 11:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:57 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 2
2020-03-23 11:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:23:57 -<==    Updates: 2
2020-03-23 11:23:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:23:57 -==> Parameters: 
2020-03-23 11:23:57 -<==      Total: 1
2020-03-23 11:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:57 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 2
2020-03-23 11:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:57 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:23:57 -<==    Updates: 2
2020-03-23 11:23:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:23:57 -==> Parameters: 571(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 1
2020-03-23 11:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:57 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 2
2020-03-23 11:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:23:57 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:23:57 -<==    Updates: 2
2020-03-23 11:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:23:57 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:23:57 -<==      Total: 1
2020-03-23 11:23:57 -耗时 : 221
2020-03-23 11:23:59 -此处进行解密+验签+身份验证
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:59 -此处进行解密+验签+身份验证
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:59 -此处进行解密+验签+身份验证
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:59 -此处进行解密+验签+身份验证
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:23:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:23:59 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:23:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:23:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:23:59 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:23:59 -==> Parameters: 571(String)
2020-03-23 11:23:59 -<==      Total: 1
2020-03-23 11:23:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:23:59 -耗时 : 12
2020-03-23 11:23:59 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:23:59 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:23:59 -<==      Total: 1
2020-03-23 11:23:59 -耗时 : 10
2020-03-23 11:23:59 -<==      Total: 1
2020-03-23 11:23:59 -耗时 : 20
2020-03-23 11:23:59 -<==      Total: 0
2020-03-23 11:23:59 -耗时 : 22
2020-03-23 11:24:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 11:24:54 -Shutting down ExecutorService 'taskScheduler'
2020-03-23 11:24:54 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-23 11:24:54 -Shutting down Quartz Scheduler
2020-03-23 11:24:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-23 11:24:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 11:24:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-23 11:24:54 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 11:24:54 -HikariPool-1 - Shutdown initiated...
2020-03-23 11:24:54 -HikariPool-1 - Shutdown completed.
2020-03-23 11:28:06 -Starting LongEcologicalApplication on PC-201905161910 with PID 12096 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 11:28:06 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 11:28:07 -No active profile set, falling back to default profiles: default
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:07 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 11:28:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:28:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:28:08 -Finished Spring Data repository scanning in 132ms. Found 0 repository interfaces.
2020-03-23 11:28:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 11:28:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 11:28:08 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-23 11:28:08 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$566c7730] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:28:08 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$50f05bd0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 11:28:09 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 11:28:09 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 11:28:09 -Starting service [Tomcat]
2020-03-23 11:28:09 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 11:28:09 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 11:28:09 -Initializing Spring embedded WebApplicationContext
2020-03-23 11:28:09 -Root WebApplicationContext: initialization completed in 2264 ms
2020-03-23 11:28:09 -Filter xssFilter was not registered (disabled)
2020-03-23 11:28:09 -HikariPool-1 - Starting...
2020-03-23 11:28:09 -HikariPool-1 - Start completed.
2020-03-23 11:28:09 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 11:28:09 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 11:28:09 -HHH000206: hibernate.properties not found
2020-03-23 11:28:10 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 11:28:10 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 11:28:10 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 11:28:10 -Using default implementation for ThreadExecutor
2020-03-23 11:28:10 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 11:28:10 -Quartz Scheduler v.2.3.0 created.
2020-03-23 11:28:10 -RAMJobStore initialized.
2020-03-23 11:28:10 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 11:28:10 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 11:28:10 -Quartz scheduler version: 2.3.0
2020-03-23 11:28:10 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6bcdd6e4
2020-03-23 11:28:11 -STAET TaskExecutorConfig
2020-03-23 11:28:11 -Initializing ExecutorService
2020-03-23 11:28:11 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 11:28:11 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 11:28:11 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 11:28:12 -Initializing ExecutorService 'taskScheduler'
2020-03-23 11:28:12 -Starting Quartz Scheduler now
2020-03-23 11:28:12 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 11:28:12 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 11:28:12 -Using a shared selector for servlet write/read
2020-03-23 11:28:12 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 11:28:12 -Started LongEcologicalApplication in 5.87 seconds (JVM running for 6.841)
2020-03-23 11:28:22 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 11:28:22 -Initializing Servlet 'dispatcherServlet'
2020-03-23 11:28:22 -Completed initialization in 18 ms
2020-03-23 11:28:22 -此处进行解密+验签+身份验证
2020-03-23 11:28:22 -此处进行解密+验签+身份验证
2020-03-23 11:28:22 -此处进行解密+验签+身份验证
2020-03-23 11:28:22 -此处进行解密+验签+身份验证
2020-03-23 11:28:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:22 -Starting without optional epoll library
2020-03-23 11:28:22 -Starting without optional kqueue library
2020-03-23 11:28:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:28:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:28:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:28:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:28:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:28:23 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:28:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:28:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:28:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:28:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:28:23 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:28:23 -==> Parameters: 571(String)
2020-03-23 11:28:23 -<==      Total: 0
2020-03-23 11:28:23 -耗时 : 69
2020-03-23 11:28:23 -<==      Total: 1
2020-03-23 11:28:23 -耗时 : 69
2020-03-23 11:28:23 -<==      Total: 1
2020-03-23 11:28:23 -耗时 : 71
2020-03-23 11:28:23 -<==      Total: 1
2020-03-23 11:28:23 -耗时 : 71
2020-03-23 11:28:27 -此处进行解密+验签+身份验证
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:27 -此处进行解密+验签+身份验证
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:27 -此处进行解密+验签+身份验证
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:27 -此处进行解密+验签+身份验证
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:28:27 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:27 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:28:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:28:27 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:28:27 -==> Parameters: 571(String), 09(String)
2020-03-23 11:28:27 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:28:27 -==> Parameters: 571(String), 09(String)
2020-03-23 11:28:27 -<==      Total: 1
2020-03-23 11:28:27 -耗时 : 16
2020-03-23 11:28:27 -<==      Total: 1
2020-03-23 11:28:27 -耗时 : 13
2020-03-23 11:28:27 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:28:27 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:28:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:28:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:28:27 -==> Parameters: 571(String)
2020-03-23 11:28:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:28:27 -==> Parameters: 571(String)
2020-03-23 11:28:27 -<==      Total: 1
2020-03-23 11:28:27 -<==      Total: 1
2020-03-23 11:28:27 -耗时 : 117
2020-03-23 11:28:27 -耗时 : 116
2020-03-23 11:31:38 -此处进行解密+验签+身份验证
2020-03-23 11:31:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:38 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:31:38 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:31:38 -==> Parameters: 571(String), 09(String)
2020-03-23 11:31:38 -<==      Total: 1
2020-03-23 11:31:38 -耗时 : 13
2020-03-23 11:31:38 -此处进行解密+验签+身份验证
2020-03-23 11:31:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:38 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:31:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:31:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:31:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:31:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:31:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:31:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:31:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:31:38 -==> Parameters: 571(String)
2020-03-23 11:31:38 -<==      Total: 1
2020-03-23 11:31:38 -耗时 : 72
2020-03-23 11:31:41 -此处进行解密+验签+身份验证
2020-03-23 11:31:41 -此处进行解密+验签+身份验证
2020-03-23 11:31:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 11:31:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:31:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 11:31:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:31:41 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:31:41 -==> Parameters: 571(String)
2020-03-23 11:31:41 -<==      Total: 1
2020-03-23 11:31:41 -耗时 : 14
2020-03-23 11:31:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:31:41 -==> Parameters: 571(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 1
2020-03-23 11:31:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:31:41 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 2
2020-03-23 11:31:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:31:41 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 11:31:41 -<==    Updates: 2
2020-03-23 11:31:41 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 11:31:41 -==> Parameters: 571(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 1
2020-03-23 11:31:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:31:41 -==> Parameters: recallFlag(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 2
2020-03-23 11:31:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:31:41 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-23 11:31:41 -<==    Updates: 2
2020-03-23 11:31:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 11:31:41 -==> Parameters: 
2020-03-23 11:31:41 -<==      Total: 1
2020-03-23 11:31:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:31:41 -==> Parameters: collegeFlag(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 2
2020-03-23 11:31:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:31:41 -==> Parameters: 25(Integer), 25(Integer), 571(String), collegeFlag(String)
2020-03-23 11:31:41 -<==    Updates: 2
2020-03-23 11:31:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 11:31:41 -==> Parameters: 571(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 1
2020-03-23 11:31:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:31:41 -==> Parameters: cardFlag(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 2
2020-03-23 11:31:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 11:31:41 -==> Parameters: 1(Integer), 1(Integer), 571(String), cardFlag(String)
2020-03-23 11:31:41 -<==    Updates: 2
2020-03-23 11:31:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 11:31:41 -==> Parameters: appImgFlag(String), 571(String)
2020-03-23 11:31:41 -<==      Total: 1
2020-03-23 11:31:41 -耗时 : 162
2020-03-23 11:31:48 -此处进行解密+验签+身份验证
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:48 -此处进行解密+验签+身份验证
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:31:48 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:31:48 -==> Parameters: 571(String)
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:48 -<==      Total: 1
2020-03-23 11:31:48 -耗时 : 12
2020-03-23 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:31:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:31:48 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:31:48 -此处进行解密+验签+身份验证
2020-03-23 11:31:48 -<==      Total: 1
2020-03-23 11:31:48 -耗时 : 15
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:48 -此处进行解密+验签+身份验证
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:31:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:31:48 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:31:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:31:48 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:31:48 -<==      Total: 0
2020-03-23 11:31:48 -耗时 : 8
2020-03-23 11:31:48 -<==      Total: 1
2020-03-23 11:31:48 -耗时 : 9
2020-03-23 11:32:57 -此处进行解密+验签+身份验证
2020-03-23 11:32:57 -此处进行解密+验签+身份验证
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:57 -此处进行解密+验签+身份验证
2020-03-23 11:32:57 -此处进行解密+验签+身份验证
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:32:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:32:57 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:32:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:32:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:32:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:32:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:32:57 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:32:57 -<==      Total: 0
2020-03-23 11:32:57 -耗时 : 11
2020-03-23 11:32:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:32:57 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:32:57 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:32:57 -==> Parameters: 571(String)
2020-03-23 11:32:57 -<==      Total: 1
2020-03-23 11:32:57 -耗时 : 12
2020-03-23 11:32:57 -<==      Total: 1
2020-03-23 11:32:57 -耗时 : 14
2020-03-23 11:32:57 -<==      Total: 1
2020-03-23 11:32:57 -耗时 : 20
2020-03-23 11:32:59 -此处进行解密+验签+身份验证
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:59 -此处进行解密+验签+身份验证
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:59 -此处进行解密+验签+身份验证
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:59 -此处进行解密+验签+身份验证
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:32:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:32:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:32:59 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:32:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:32:59 -<==      Total: 0
2020-03-23 11:32:59 -耗时 : 10
2020-03-23 11:32:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:32:59 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:32:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:32:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:32:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:32:59 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:32:59 -<==      Total: 1
2020-03-23 11:32:59 -耗时 : 13
2020-03-23 11:32:59 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:32:59 -==> Parameters: 571(String)
2020-03-23 11:32:59 -<==      Total: 1
2020-03-23 11:32:59 -耗时 : 9
2020-03-23 11:32:59 -<==      Total: 1
2020-03-23 11:32:59 -耗时 : 21
2020-03-23 11:33:02 -此处进行解密+验签+身份验证
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 11:33:02 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 11:33:02 -==> Parameters: 571(String)
2020-03-23 11:33:02 -此处进行解密+验签+身份验证
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:02 -此处进行解密+验签+身份验证
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:02 -此处进行解密+验签+身份验证
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:02 -<==      Total: 1
2020-03-23 11:33:02 -耗时 : 14
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:33:02 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 11:33:02 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:33:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 11:33:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 11:33:02 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 11:33:02 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:33:02 -<==      Total: 1
2020-03-23 11:33:02 -耗时 : 13
2020-03-23 11:33:02 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 11:33:02 -==> Parameters: 571(String), 202003(String)
2020-03-23 11:33:02 -<==      Total: 1
2020-03-23 11:33:02 -耗时 : 10
2020-03-23 11:33:02 -<==      Total: 0
2020-03-23 11:33:02 -耗时 : 20
2020-03-23 11:33:06 -此处进行解密+验签+身份验证
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:06 -此处进行解密+验签+身份验证
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:06 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:33:06 -此处进行解密+验签+身份验证
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:06 -此处进行解密+验签+身份验证
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:06 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:33:06 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:33:06 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 11:33:06 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:33:06 -==> Parameters: 571(String), 09(String)
2020-03-23 11:33:06 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 11:33:06 -==> Parameters: 571(String), 09(String)
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 11:33:06 -<==      Total: 1
2020-03-23 11:33:06 -耗时 : 22
2020-03-23 11:33:06 -<==      Total: 1
2020-03-23 11:33:06 -耗时 : 24
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 11:33:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:33:06 -==> Parameters: 571(String)
2020-03-23 11:33:06 -<==      Total: 1
2020-03-23 11:33:06 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 11:33:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 11:33:06 -耗时 : 125
2020-03-23 11:33:06 -==> Parameters: 571(String)
2020-03-23 11:33:06 -<==      Total: 1
2020-03-23 11:33:06 -耗时 : 121
2020-03-23 11:33:21 -此处进行解密+验签+身份验证
2020-03-23 11:33:21 -解密：{"cash_money":"10","pay_password":"5B1B68A9ABF4D2CD155C81A9225FD158","sign":"3C83DA19B2D565054770CCA30015BD2B","card_id":"2259","token":"571|V812KNQZDGLFNH5Y03P5ZRPSJ7QQG981"}
2020-03-23 11:33:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 11:33:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 11:33:21 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 11:33:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 11:33:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 11:33:22 -耗时 : 69
2020-03-23 12:51:32 -此处进行解密+验签+身份验证
2020-03-23 12:51:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 12:51:32 -解密异常：{sign=9E5FC3E25D4B5415BC29E901D8FB7BD7, token=571|V812KNQZDGLFNH5Y03P5ZRPSJ7QQG981}
2020-03-23 12:51:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 12:51:32 -耗时 : 0
2020-03-23 12:51:32 -此处进行解密+验签+身份验证
2020-03-23 12:51:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 12:51:32 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-23 12:51:32 -Reconnected to 120.25.164.176:10379
2020-03-23 12:51:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-23 12:51:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 12:51:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-23 12:51:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@11e2bd5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@43774438 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4415696a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3425b2be (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3654b20d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4ffb767b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@20ca18d7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@39e3ee32 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2a34e7d9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3ee8144a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 12:51:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 12:51:32 -==> Parameters: 571(String), 571(String)
2020-03-23 12:51:32 -<==      Total: 1
2020-03-23 12:51:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 12:51:32 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-23 12:51:32 -<==      Total: 2
2020-03-23 12:51:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 12:51:32 -==> Parameters: 1(Integer), 1(Integer), 571(String), applyRateFlag(String)
2020-03-23 14:51:33 -HikariPool-1 - Connection com.mysql.jdbc.JDBC4Connection@4181cc52 marked as broken because of SQLSTATE(08S01), ErrorCode(0)
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet successfully received from the server was 7,200,048 milliseconds ago.  The last packet sent successfully to the server was 7,200,048 milliseconds ago.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3673)
	at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3562)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4113)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2570)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2731)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2818)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:2157)
	at com.mysql.jdbc.PreparedStatement.execute(PreparedStatement.java:1379)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java)
	at sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy156.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:46)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:198)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:433)
	at com.sun.proxy.$Proxy102.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.updateNewsReadState(Unknown Source)
	at com.example.longecological.service.system.impl.SysNoticeServiceImpl.getUnReadNews(SysNoticeServiceImpl.java:91)
	at com.example.longecological.controller.system.SysNoticeController.getUnReadNews(SysNoticeController.java:36)
	at com.example.longecological.controller.system.SysNoticeController$$FastClassBySpringCGLIB$$1f2cf86b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor92.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysNoticeController$$EnhancerBySpringCGLIB$$aefa579d.getUnReadNews(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.SocketException: Connection reset
	at java.net.SocketInputStream.read(SocketInputStream.java:210)
	at java.net.SocketInputStream.read(SocketInputStream.java:141)
	at com.mysql.jdbc.util.ReadAheadInputStream.fill(ReadAheadInputStream.java:114)
	at com.mysql.jdbc.util.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:161)
	at com.mysql.jdbc.util.ReadAheadInputStream.read(ReadAheadInputStream.java:189)
	at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:3116)
	at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3573)
	... 107 common frames omitted
2020-03-23 14:51:33 -SysNoticeServiceImpl -- getUnReadNews方法处理异常：
### Error updating database.  Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet successfully received from the server was 7,200,048 milliseconds ago.  The last packet sent successfully to the server was 7,200,048 milliseconds ago.
### The error may involve com.example.longecological.mapper.system.SysNoticeMapper.updateNewsReadState-Inline
### The error occurred while setting parameters
### SQL: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=?
### Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet successfully received from the server was 7,200,048 milliseconds ago.  The last packet sent successfully to the server was 7,200,048 milliseconds ago.
; Communications link failure

The last packet successfully received from the server was 7,200,048 milliseconds ago.  The last packet sent successfully to the server was 7,200,048 milliseconds ago.; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet successfully received from the server was 7,200,048 milliseconds ago.  The last packet sent successfully to the server was 7,200,048 milliseconds ago.
	at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:100)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.update(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.update(SqlSessionTemplate.java:294)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:63)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.updateNewsReadState(Unknown Source)
	at com.example.longecological.service.system.impl.SysNoticeServiceImpl.getUnReadNews(SysNoticeServiceImpl.java:91)
	at com.example.longecological.controller.system.SysNoticeController.getUnReadNews(SysNoticeController.java:36)
	at com.example.longecological.controller.system.SysNoticeController$$FastClassBySpringCGLIB$$1f2cf86b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor92.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysNoticeController$$EnhancerBySpringCGLIB$$aefa579d.getUnReadNews(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-23 14:51:33 -耗时 : 7200219
2020-03-23 16:19:37 -Starting LongEcologicalApplication on PC-201905161910 with PID 18052 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 16:19:37 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 16:19:37 -No active profile set, falling back to default profiles: default
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:19:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 16:19:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 16:19:40 -Finished Spring Data repository scanning in 84ms. Found 0 repository interfaces.
2020-03-23 16:19:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 16:19:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 16:19:40 -Finished Spring Data repository scanning in 42ms. Found 0 repository interfaces.
2020-03-23 16:19:41 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$35a04c39] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 16:19:41 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$302430d9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 16:19:41 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 16:19:41 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 16:19:41 -Starting service [Tomcat]
2020-03-23 16:19:41 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 16:19:41 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 16:19:42 -Initializing Spring embedded WebApplicationContext
2020-03-23 16:19:42 -Root WebApplicationContext: initialization completed in 4788 ms
2020-03-23 16:19:42 -Filter xssFilter was not registered (disabled)
2020-03-23 16:19:42 -HikariPool-1 - Starting...
2020-03-23 16:19:42 -HikariPool-1 - Start completed.
2020-03-23 16:19:42 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 16:19:42 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 16:19:42 -HHH000206: hibernate.properties not found
2020-03-23 16:19:42 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 16:19:43 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 16:19:43 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 16:19:43 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'paramEncryptRequestBodyAdvice': Unsatisfied dependency expressed through field 'userInfoCacheService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
2020-03-23 16:19:43 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 16:19:43 -HikariPool-1 - Shutdown initiated...
2020-03-23 16:19:43 -HikariPool-1 - Shutdown completed.
2020-03-23 16:19:43 -Stopping service [Tomcat]
2020-03-23 16:19:43 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-23 16:19:43 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'paramEncryptRequestBodyAdvice': Unsatisfied dependency expressed through field 'userInfoCacheService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1378)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:846)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1378)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1362)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1467)
	... 43 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 56 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:523)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:380)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:547)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:153)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$62f88209.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$62f88209$$FastClassBySpringCGLIB$$be9fe9ff.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$62f88209.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 57 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.getSqlSourceFromAnnotations(MapperAnnotationBuilder.java:472)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:289)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:134)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:741)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.bindMapperForNamespace(XMLMapperBuilder.java:413)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:521)
	... 70 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 571; The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:259)
	at org.apache.ibatis.parsing.XPathParser.<init>(XPathParser.java:115)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:51)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:482)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.getSqlSourceFromAnnotations(MapperAnnotationBuilder.java:465)
	... 77 common frames omitted
Caused by: org.xml.sax.SAXParseException: The element type "choose" must be terminated by the matching end-tag "</choose>".
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLScanner.reportFatalError(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanEndElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:257)
	... 81 common frames omitted
2020-03-23 16:20:30 -Starting LongEcologicalApplication on PC-201905161910 with PID 8504 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 16:20:30 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 16:20:30 -No active profile set, falling back to default profiles: default
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 16:20:31 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 16:20:31 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 16:20:32 -Finished Spring Data repository scanning in 65ms. Found 0 repository interfaces.
2020-03-23 16:20:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 16:20:32 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 16:20:32 -Finished Spring Data repository scanning in 42ms. Found 0 repository interfaces.
2020-03-23 16:20:32 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c4e8b814] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 16:20:32 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bf6c9cb4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 16:20:33 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 16:20:33 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 16:20:33 -Starting service [Tomcat]
2020-03-23 16:20:33 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 16:20:33 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 16:20:33 -Initializing Spring embedded WebApplicationContext
2020-03-23 16:20:33 -Root WebApplicationContext: initialization completed in 2264 ms
2020-03-23 16:20:33 -Filter xssFilter was not registered (disabled)
2020-03-23 16:20:34 -HikariPool-1 - Starting...
2020-03-23 16:20:34 -HikariPool-1 - Start completed.
2020-03-23 16:20:34 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 16:20:34 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 16:20:34 -HHH000206: hibernate.properties not found
2020-03-23 16:20:34 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 16:20:35 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 16:20:35 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 16:20:35 -Using default implementation for ThreadExecutor
2020-03-23 16:20:35 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 16:20:35 -Quartz Scheduler v.2.3.0 created.
2020-03-23 16:20:35 -RAMJobStore initialized.
2020-03-23 16:20:35 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 16:20:35 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 16:20:35 -Quartz scheduler version: 2.3.0
2020-03-23 16:20:35 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3a116ca6
2020-03-23 16:20:36 -STAET TaskExecutorConfig
2020-03-23 16:20:36 -Initializing ExecutorService
2020-03-23 16:20:36 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 16:20:36 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 16:20:36 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 16:20:37 -Initializing ExecutorService 'taskScheduler'
2020-03-23 16:20:37 -Starting Quartz Scheduler now
2020-03-23 16:20:37 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 16:20:37 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 16:20:37 -Using a shared selector for servlet write/read
2020-03-23 16:20:37 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 16:20:37 -Started LongEcologicalApplication in 7.199 seconds (JVM running for 8.504)
2020-03-23 16:20:54 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 16:20:54 -Initializing Servlet 'dispatcherServlet'
2020-03-23 16:20:54 -Completed initialization in 14 ms
2020-03-23 16:20:54 -此处进行解密+验签+身份验证
2020-03-23 16:20:54 -此处进行解密+验签+身份验证
2020-03-23 16:20:54 -此处进行解密+验签+身份验证
2020-03-23 16:20:54 -此处进行解密+验签+身份验证
2020-03-23 16:20:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 16:20:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 16:20:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 16:20:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-23 16:20:54 -Starting without optional epoll library
2020-03-23 16:20:54 -Starting without optional kqueue library
2020-03-23 16:20:55 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-23 16:20:55 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-23 16:20:55 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-23 16:20:55 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-23 16:20:55 -==> Parameters: 571(String)
2020-03-23 16:20:55 -==> Parameters: 571(String)
2020-03-23 16:20:55 -==> Parameters: 571(String)
2020-03-23 16:20:55 -==> Parameters: 571(String)
2020-03-23 16:20:55 -<==      Total: 0
2020-03-23 16:20:55 -<==      Total: 0
2020-03-23 16:20:55 -<==      Total: 0
2020-03-23 16:20:55 -<==      Total: 0
2020-03-23 16:20:55 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_571,save content:null
2020-03-23 16:20:55 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_571,save content:null
2020-03-23 16:20:55 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_571,save content:null
2020-03-23 16:20:55 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_571,save content:null
2020-03-23 16:20:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 16:20:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 16:20:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 16:20:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 16:20:55 -耗时 : 3
2020-03-23 16:20:55 -耗时 : 3
2020-03-23 16:20:55 -耗时 : 3
2020-03-23 16:20:55 -耗时 : 3
2020-03-23 16:21:19 -此处进行解密+验签+身份验证
2020-03-23 16:21:19 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"75F6C1EB1219F8B7212846826864527D","device_no":"1.0.9","device_type":"android","sys_user_account":"13322990711"}
2020-03-23 16:21:19 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-23 16:21:19 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-23 16:21:19 -==> Parameters: 13322990711(String)
2020-03-23 16:21:20 -<==      Total: 1
2020-03-23 16:21:20 -耗时 : 37
2020-03-23 16:21:45 -此处进行解密+验签+身份验证
2020-03-23 16:21:45 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"00AFDB4C70D57BBAC1662AE7D966882B","device_no":"1.0.9","device_type":"android","sys_user_account":"13322990711"}
2020-03-23 16:21:45 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-23 16:21:45 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-23 16:21:45 -==> Parameters: 13322990711(String)
2020-03-23 16:21:45 -<==      Total: 1
2020-03-23 16:21:45 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-23 16:21:45 -==> Parameters: android(String), 1.0.9(String), (String), null, 192.168.191.1(String), 20200323(String), 162145(String), 181(Integer)
2020-03-23 16:21:45 -<==    Updates: 1
2020-03-23 16:21:45 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-23 16:21:45 -==> Parameters: 26(String)
2020-03-23 16:21:45 -<==      Total: 1
2020-03-23 16:21:45 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 16:21:45 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 16:21:45 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 16:21:45 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 16:21:45 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-23 16:21:45 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-23 16:21:45 -耗时 : 126
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:46 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-23 16:21:46 -==> Parameters: 181(String)
2020-03-23 16:21:46 -<==      Total: 0
2020-03-23 16:21:46 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_181,save content:null
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 16:21:46 -==> Parameters: 181(String)
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -解密：
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -耗时 : 17
2020-03-23 16:21:46 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-23 16:21:46 -==> Parameters: 181(String)
2020-03-23 16:21:46 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-23 16:21:46 -==> Parameters: 01(String), 01(String)
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:46 -<==      Total: 4
2020-03-23 16:21:46 -耗时 : 13
2020-03-23 16:21:46 -<==      Total: 2
2020-03-23 16:21:46 -耗时 : 16
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-23 16:21:46 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-23 16:21:46 -==> Parameters: 
2020-03-23 16:21:46 -<==      Total: 3
2020-03-23 16:21:46 -耗时 : 16
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 16:21:46 -此处进行解密+验签+身份验证
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-23 16:21:46 -==> Parameters: 181(String)
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 16:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 16:21:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-23 16:21:46 -==> Parameters: 181(String)
2020-03-23 16:21:46 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_181,save content:{referer_id=null, parent_chain=null, user_tel=13322990711, id_card=352228198203282016, real_name=李贤耀, algebra=1, cre_date=20181119, cre_time=203311, login_password=4ef5b2272d691781ec1add27367aa532, manager_id=26, pay_password=a75b87f3bd2fddced55de0ade9b36456, id=181, auth_status=09, status=0}
2020-03-23 16:21:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:21:46 -==> Parameters: 181(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 16:21:46 -==> Parameters: 181(String)
2020-03-23 16:21:46 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_181,save content:{referer_id=null, parent_chain=null, user_tel=13322990711, id_card=352228198203282016, real_name=李贤耀, algebra=1, cre_date=20181119, cre_time=203311, login_password=4ef5b2272d691781ec1add27367aa532, manager_id=26, pay_password=a75b87f3bd2fddced55de0ade9b36456, id=181, auth_status=09, status=0}
2020-03-23 16:21:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:21:46 -==> Parameters: 181(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -耗时 : 43
2020-03-23 16:21:46 -<==      Total: 2
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 16:21:46 -<==      Total: 2
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 16:21:46 -<==    Updates: 2
2020-03-23 16:21:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 16:21:46 -==> Parameters: 181(String), 181(String)
2020-03-23 16:21:46 -<==    Updates: 2
2020-03-23 16:21:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 16:21:46 -==> Parameters: 181(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 16:21:46 -<==    Updates: 1
2020-03-23 16:21:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 16:21:46 -==> Parameters: 
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 16:21:46 -<==    Updates: 1
2020-03-23 16:21:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 16:21:46 -==> Parameters: 
2020-03-23 16:21:46 -<==    Updates: 1
2020-03-23 16:21:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:21:46 -==> Parameters: 181(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 16:21:46 -<==    Updates: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 16:21:46 -<==    Updates: 1
2020-03-23 16:21:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:21:46 -==> Parameters: 181(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -耗时 : 175
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:21:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 16:21:46 -<==    Updates: 1
2020-03-23 16:21:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:21:46 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 16:21:46 -<==      Total: 1
2020-03-23 16:21:46 -耗时 : 256
2020-03-23 16:21:56 -此处进行解密+验签+身份验证
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 16:21:56 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 16:21:56 -==> Parameters: 181(String)
2020-03-23 16:21:56 -此处进行解密+验签+身份验证
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:56 -此处进行解密+验签+身份验证
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:56 -此处进行解密+验签+身份验证
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:56 -<==      Total: 1
2020-03-23 16:21:56 -耗时 : 20
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:21:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 16:21:56 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 16:21:56 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:21:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 16:21:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 16:21:56 -<==      Total: 1
2020-03-23 16:21:56 -耗时 : 15
2020-03-23 16:21:56 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 16:21:56 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:21:56 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 16:21:56 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:21:56 -<==      Total: 1
2020-03-23 16:21:56 -耗时 : 41
2020-03-23 16:21:56 -<==      Total: 1
2020-03-23 16:21:56 -耗时 : 39
2020-03-23 16:22:03 -此处进行解密+验签+身份验证
2020-03-23 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:03 -此处进行解密+验签+身份验证
2020-03-23 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-23 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 16:22:03 -==> Parameters: 202003(String), 181(String)
2020-03-23 16:22:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-23 16:22:03 -==> Parameters: 181(String)
2020-03-23 16:22:03 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-23 16:22:03 -==> Parameters: 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 16:22:03 -==> Parameters: 202003(String), 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-23 16:22:03 -==> Parameters: 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-23 16:22:03 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 16:22:03 -==> Parameters: 202003(String), 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-23 16:22:03 -==> Parameters: 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -耗时 : 50
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-23 16:22:03 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:03 -<==      Total: 1
2020-03-23 16:22:03 -耗时 : 254
2020-03-23 16:22:20 -此处进行解密+验签+身份验证
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:20 -此处进行解密+验签+身份验证
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:20 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-23 16:22:20 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-23 16:22:20 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-23 16:22:20 -==> Parameters: 181(String), 20200323(String)
2020-03-23 16:22:20 -此处进行解密+验签+身份验证
2020-03-23 16:22:20 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 16:22:20 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:20 -此处进行解密+验签+身份验证
2020-03-23 16:22:20 -<==      Total: 1
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:20 -耗时 : 19
2020-03-23 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:20 -<==      Total: 1
2020-03-23 16:22:20 -耗时 : 24
2020-03-23 16:22:20 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-23 16:22:20 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-23 16:22:20 -==> Parameters: 181(String), 20200323(String)
2020-03-23 16:22:20 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-23 16:22:20 -<==      Total: 1
2020-03-23 16:22:20 -耗时 : 12
2020-03-23 16:22:20 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 16:22:20 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:22:20 -<==      Total: 1
2020-03-23 16:22:20 -耗时 : 23
2020-03-23 16:22:24 -此处进行解密+验签+身份验证
2020-03-23 16:22:24 -此处进行解密+验签+身份验证
2020-03-23 16:22:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 16:22:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 16:22:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 16:22:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 16:22:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 16:22:24 -==> Parameters: 181(String)
2020-03-23 16:22:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:22:24 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -耗时 : 18
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:24 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 2
2020-03-23 16:22:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 16:22:24 -<==    Updates: 2
2020-03-23 16:22:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 16:22:24 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:24 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:24 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 16:22:24 -<==    Updates: 1
2020-03-23 16:22:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 16:22:24 -==> Parameters: 
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:24 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:24 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 16:22:24 -<==    Updates: 1
2020-03-23 16:22:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:22:24 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:24 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 16:22:24 -<==    Updates: 1
2020-03-23 16:22:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:24 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 16:22:24 -<==      Total: 1
2020-03-23 16:22:24 -耗时 : 135
2020-03-23 16:22:25 -此处进行解密+验签+身份验证
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:25 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyMposDetail
2020-03-23 16:22:25 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-23 16:22:25 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:22:25 -此处进行解密+验签+身份验证
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:25 -<==      Total: 1
2020-03-23 16:22:25 -耗时 : 12
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:25 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyMposDetail
2020-03-23 16:22:25 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-23 16:22:25 -==> Parameters: 181(String), 20200323(String)
2020-03-23 16:22:25 -此处进行解密+验签+身份验证
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:25 -<==      Total: 1
2020-03-23 16:22:25 -耗时 : 21
2020-03-23 16:22:25 -此处进行解密+验签+身份验证
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:25 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantMposDetail
2020-03-23 16:22:25 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantMposDetail
2020-03-23 16:22:25 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-23 16:22:25 -==> Parameters: 181(String), 20200323(String)
2020-03-23 16:22:25 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-23 16:22:25 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:22:25 -<==      Total: 1
2020-03-23 16:22:25 -耗时 : 11
2020-03-23 16:22:25 -<==      Total: 1
2020-03-23 16:22:25 -耗时 : 13
2020-03-23 16:22:27 -此处进行解密+验签+身份验证
2020-03-23 16:22:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:27 -此处进行解密+验签+身份验证
2020-03-23 16:22:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 16:22:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 16:22:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 16:22:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 16:22:27 -==> Parameters: 181(String)
2020-03-23 16:22:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -耗时 : 19
2020-03-23 16:22:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:22:27 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:27 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 2
2020-03-23 16:22:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 16:22:27 -<==    Updates: 2
2020-03-23 16:22:27 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 16:22:27 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:27 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:27 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 16:22:27 -<==    Updates: 1
2020-03-23 16:22:27 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 16:22:27 -==> Parameters: 
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:27 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:27 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 16:22:27 -<==    Updates: 1
2020-03-23 16:22:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:22:27 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:27 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 16:22:27 -<==    Updates: 1
2020-03-23 16:22:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:27 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 16:22:27 -<==      Total: 1
2020-03-23 16:22:27 -耗时 : 240
2020-03-23 16:22:28 -此处进行解密+验签+身份验证
2020-03-23 16:22:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:28 -此处进行解密+验签+身份验证
2020-03-23 16:22:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:29 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-23 16:22:29 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-23 16:22:29 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 16:22:29 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:22:29 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-23 16:22:29 -==> Parameters: 181(String), 20200323(String)
2020-03-23 16:22:29 -<==      Total: 1
2020-03-23 16:22:29 -耗时 : 11
2020-03-23 16:22:29 -<==      Total: 1
2020-03-23 16:22:29 -耗时 : 20
2020-03-23 16:22:29 -此处进行解密+验签+身份验证
2020-03-23 16:22:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:29 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-23 16:22:29 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-23 16:22:29 -==> Parameters: 181(String), 20200323(String)
2020-03-23 16:22:29 -此处进行解密+验签+身份验证
2020-03-23 16:22:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:29 -<==      Total: 1
2020-03-23 16:22:29 -耗时 : 20
2020-03-23 16:22:29 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-23 16:22:29 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 16:22:29 -==> Parameters: 181(String), 202003(String)
2020-03-23 16:22:29 -<==      Total: 1
2020-03-23 16:22:29 -耗时 : 8
2020-03-23 16:22:30 -此处进行解密+验签+身份验证
2020-03-23 16:22:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:30 -此处进行解密+验签+身份验证
2020-03-23 16:22:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 16:22:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 16:22:30 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 16:22:30 -==> Parameters: 181(String)
2020-03-23 16:22:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 16:22:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -耗时 : 10
2020-03-23 16:22:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:22:30 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:30 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 2
2020-03-23 16:22:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 16:22:30 -<==    Updates: 2
2020-03-23 16:22:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 16:22:30 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:30 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:30 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 16:22:30 -<==    Updates: 1
2020-03-23 16:22:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 16:22:30 -==> Parameters: 
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:30 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:30 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 16:22:30 -<==    Updates: 1
2020-03-23 16:22:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:22:30 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:30 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:22:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 16:22:30 -<==    Updates: 1
2020-03-23 16:22:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:22:30 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 16:22:30 -<==      Total: 1
2020-03-23 16:22:30 -耗时 : 202
2020-03-23 16:22:51 -此处进行解密+验签+身份验证
2020-03-23 16:22:51 -此处进行解密+验签+身份验证
2020-03-23 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:22:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-23 16:22:51 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-23 16:22:51 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-23 16:22:51 -==> Parameters: 181(String)
2020-03-23 16:22:51 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 16:22:51 -==> Parameters: 202003(String), 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-23 16:22:51 -==> Parameters: 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-23 16:22:51 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 16:22:51 -==> Parameters: 202003(String), 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-23 16:22:51 -==> Parameters: 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 16:22:51 -==> Parameters: 202003(String), 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-23 16:22:51 -==> Parameters: 181(String)
2020-03-23 16:22:51 -<==      Total: 1
2020-03-23 16:22:51 -耗时 : 49
2020-03-23 16:22:52 -<==      Total: 1
2020-03-23 16:22:52 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-23 16:22:52 -==> Parameters: 181(String), 181(String)
2020-03-23 16:22:52 -<==      Total: 1
2020-03-23 16:22:52 -耗时 : 233
2020-03-23 16:23:34 -此处进行解密+验签+身份验证
2020-03-23 16:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:23:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 16:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 16:23:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 16:23:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:23:34 -==> Parameters: 181(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:23:34 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 2
2020-03-23 16:23:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:23:34 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 16:23:34 -<==    Updates: 2
2020-03-23 16:23:34 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 16:23:34 -==> Parameters: 181(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:23:34 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:23:34 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 16:23:34 -<==    Updates: 1
2020-03-23 16:23:34 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 16:23:34 -==> Parameters: 
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:23:34 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:23:34 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 16:23:34 -<==    Updates: 1
2020-03-23 16:23:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 16:23:34 -==> Parameters: 181(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:23:34 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 16:23:34 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 16:23:34 -<==    Updates: 1
2020-03-23 16:23:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 16:23:34 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 16:23:34 -<==      Total: 1
2020-03-23 16:23:34 -耗时 : 134
2020-03-23 16:23:39 -此处进行解密+验签+身份验证
2020-03-23 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:39 -此处进行解密+验签+身份验证
2020-03-23 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:23:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-23 16:23:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-23 16:23:39 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-23 16:23:39 -==> Parameters: 181(String)
2020-03-23 16:23:39 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-23 16:23:39 -==> Parameters: 181(String)
2020-03-23 16:23:39 -<==      Total: 10
2020-03-23 16:23:39 -耗时 : 21
2020-03-23 16:23:39 -<==      Total: 1
2020-03-23 16:23:39 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-23 16:23:39 -==> Parameters: 181(String)
2020-03-23 16:23:39 -<==      Total: 1
2020-03-23 16:23:39 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 16:23:39 -==> Parameters: 181(String)
2020-03-23 16:23:39 -<==      Total: 1
2020-03-23 16:23:39 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-23 16:23:39 -==> Parameters: 181(String)
2020-03-23 16:23:39 -<==      Total: 1
2020-03-23 16:23:39 -耗时 : 67
2020-03-23 16:23:43 -此处进行解密+验签+身份验证
2020-03-23 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:23:43 -此处进行解密+验签+身份验证
2020-03-23 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:23:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:23:43 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-23 16:23:43 -==> Parameters: 2632(String)
2020-03-23 16:23:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 16:23:50 -<==      Total: 1
2020-03-23 16:23:50 -此处进行解密+验签+身份验证
2020-03-23 16:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:50 -此处进行解密+验签+身份验证
2020-03-23 16:23:50 -此处进行解密+验签+身份验证
2020-03-23 16:23:50 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_2632,save content:{referer_id=181, parent_chain=181, user_tel=13502890969, id_card=440923197605081032, real_name=蔡东兴, algebra=2, cre_date=20200309, cre_time=165424, login_password=e7a672513d8b69291a084906bc294516, manager_id=26, pay_password=6696a1ef46ad7f50ba7f8a3c4899fe8f, id=2632, auth_status=09, status=0}
2020-03-23 16:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:06 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 16:24:06 -==> Parameters: 2632(String)
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:06 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2632 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2632 and cre_month=202003 and pos_type is null 
2020-03-23 16:24:06 -==> Parameters: 
2020-03-23 16:24:06 -<==      Total: 1
2020-03-23 16:24:06 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 16:24:06 -==> Parameters: 2632(String)
2020-03-23 16:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:24:06 -<==      Total: 1
2020-03-23 16:24:06 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2632 and pos_type='epos' 
2020-03-23 16:24:06 -==> Parameters: 
2020-03-23 16:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:24:06 -<==      Total: 1
2020-03-23 16:24:06 -耗时 : 22894
2020-03-23 16:24:06 -<==      Total: 1
2020-03-23 16:24:06 -耗时 : 22905
2020-03-23 16:24:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:24:06 -==> Parameters: 2632(String), 2632(String)
2020-03-23 16:24:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:24:06 -==> Parameters: 2632(String), 2632(String), 1(String)
2020-03-23 16:24:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:24:06 -==> Parameters: 2632(String), 2632(String), 0(String)
2020-03-23 16:24:06 -<==      Total: 10
2020-03-23 16:24:06 -耗时 : 40
2020-03-23 16:24:06 -<==      Total: 4
2020-03-23 16:24:06 -耗时 : 43
2020-03-23 16:24:06 -<==      Total: 6
2020-03-23 16:24:06 -耗时 : 59
2020-03-23 16:24:37 -此处进行解密+验签+身份验证
2020-03-23 16:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:24:37 -此处进行解密+验签+身份验证
2020-03-23 16:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 16:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:24:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 16:24:43 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-23 16:24:43 -==> Parameters: 2505(String)
2020-03-23 16:24:43 -此处进行解密+验签+身份验证
2020-03-23 16:24:43 -此处进行解密+验签+身份验证
2020-03-23 16:24:43 -此处进行解密+验签+身份验证
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:43 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2505 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2505 and cre_month=202003 and pos_type is null 
2020-03-23 16:24:43 -<==      Total: 1
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:24:43 -==> Parameters: 
2020-03-23 16:24:43 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_2505,save content:{referer_id=181, parent_chain=181, user_tel=13599838993, id_card=352228198209142022, real_name=张秀玲, algebra=2, cre_date=20200219, cre_time=174231, login_password=3c83192cc0ffd4f6994c972474ed1b27, manager_id=26, pay_password=30942b2e7f5e525ea7f8ebbde85cc566, id=2505, auth_status=09, status=0}
2020-03-23 16:24:43 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 16:24:43 -==> Parameters: 2505(String)
2020-03-23 16:24:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:24:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:24:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:24:43 -<==      Total: 1
2020-03-23 16:24:43 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 16:24:43 -==> Parameters: 2505(String)
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:24:43 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:24:43 -==> Parameters: 2505(String), 2505(String), 1(String)
2020-03-23 16:24:43 -<==      Total: 1
2020-03-23 16:24:43 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2505 and pos_type='epos' 
2020-03-23 16:24:43 -==> Parameters: 
2020-03-23 16:24:43 -<==      Total: 1
2020-03-23 16:25:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:25:16 -<==      Total: 0
2020-03-23 16:25:16 -==> Parameters: 2505(String), 2505(String), 0(String)
2020-03-23 16:25:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:25:16 -耗时 : 32932
2020-03-23 16:25:16 -==> Parameters: 2505(String), 2505(String)
2020-03-23 16:25:17 -<==      Total: 1
2020-03-23 16:25:17 -耗时 : 40383
2020-03-23 16:25:17 -耗时 : 40376
2020-03-23 16:25:17 -<==      Total: 0
2020-03-23 16:25:17 -耗时 : 34503
2020-03-23 16:25:17 -<==      Total: 0
2020-03-23 16:25:17 -耗时 : 34505
2020-03-23 16:27:22 -此处进行解密+验签+身份验证
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:22 -此处进行解密+验签+身份验证
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:27:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2505 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2505 and cre_month=202003 and pos_type is null 
2020-03-23 16:27:22 -==> Parameters: 
2020-03-23 16:27:22 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 16:27:22 -==> Parameters: 2505(String)
2020-03-23 16:27:22 -<==      Total: 1
2020-03-23 16:27:22 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 16:27:22 -==> Parameters: 2505(String)
2020-03-23 16:27:22 -<==      Total: 1
2020-03-23 16:27:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2505 and pos_type='epos' 
2020-03-23 16:27:22 -==> Parameters: 
2020-03-23 16:27:22 -<==      Total: 1
2020-03-23 16:27:22 -耗时 : 31
2020-03-23 16:27:22 -<==      Total: 1
2020-03-23 16:27:22 -耗时 : 47
2020-03-23 16:27:22 -此处进行解密+验签+身份验证
2020-03-23 16:27:22 -此处进行解密+验签+身份验证
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:22 -此处进行解密+验签+身份验证
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-23 16:27:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:22 -==> Parameters: 2505(String), 2505(String), 0(String)
2020-03-23 16:27:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:22 -==> Parameters: 2505(String), 2505(String)
2020-03-23 16:27:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:22 -==> Parameters: 2505(String), 2505(String), 1(String)
2020-03-23 16:27:22 -<==      Total: 0
2020-03-23 16:27:22 -耗时 : 37
2020-03-23 16:27:22 -<==      Total: 0
2020-03-23 16:27:22 -耗时 : 48
2020-03-23 16:27:22 -<==      Total: 0
2020-03-23 16:27:22 -耗时 : 53
2020-03-23 16:27:25 -此处进行解密+验签+身份验证
2020-03-23 16:27:25 -此处进行解密+验签+身份验证
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:25 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2632 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2632 and cre_month=202003 and pos_type is null 
2020-03-23 16:27:25 -==> Parameters: 
2020-03-23 16:27:25 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 16:27:25 -==> Parameters: 2632(String)
2020-03-23 16:27:25 -<==      Total: 1
2020-03-23 16:27:25 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 16:27:25 -==> Parameters: 2632(String)
2020-03-23 16:27:25 -<==      Total: 1
2020-03-23 16:27:25 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2632 and pos_type='epos' 
2020-03-23 16:27:25 -==> Parameters: 
2020-03-23 16:27:25 -<==      Total: 1
2020-03-23 16:27:25 -耗时 : 33
2020-03-23 16:27:25 -<==      Total: 1
2020-03-23 16:27:25 -耗时 : 47
2020-03-23 16:27:25 -此处进行解密+验签+身份验证
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:25 -此处进行解密+验签+身份验证
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:25 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:25 -==> Parameters: 2632(String), 2632(String), 1(String)
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:25 -此处进行解密+验签+身份验证
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:25 -<==      Total: 4
2020-03-23 16:27:25 -耗时 : 40
2020-03-23 16:27:25 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:25 -==> Parameters: 2632(String), 2632(String)
2020-03-23 16:27:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:25 -<==      Total: 10
2020-03-23 16:27:25 -耗时 : 31
2020-03-23 16:27:25 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:25 -==> Parameters: 2632(String), 2632(String), 0(String)
2020-03-23 16:27:25 -<==      Total: 6
2020-03-23 16:27:25 -耗时 : 46
2020-03-23 16:27:28 -此处进行解密+验签+身份验证
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:28 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:28 -==> Parameters: 2632(String), 2632(String), 0(String)
2020-03-23 16:27:28 -此处进行解密+验签+身份验证
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:28 -此处进行解密+验签+身份验证
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:28 -<==      Total: 0
2020-03-23 16:27:28 -耗时 : 61
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:28 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-23 16:27:28 -==> Parameters: 2632(String)
2020-03-23 16:27:28 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:28 -==> Parameters: 2632(String), 2632(String)
2020-03-23 16:27:28 -<==      Total: 1
2020-03-23 16:27:28 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-23 16:27:28 -==> Parameters: 2632(String)
2020-03-23 16:27:28 -<==      Total: 1
2020-03-23 16:27:28 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2632 
2020-03-23 16:27:28 -==> Parameters: 
2020-03-23 16:27:28 -此处进行解密+验签+身份验证
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:28 -此处进行解密+验签+身份验证
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:28 -<==      Total: 1
2020-03-23 16:27:28 -耗时 : 59
2020-03-23 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-23 16:27:28 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2632 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2632 and cre_month=202003 
2020-03-23 16:27:28 -==> Parameters: 
2020-03-23 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:28 -<==      Total: 0
2020-03-23 16:27:28 -耗时 : 56
2020-03-23 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:28 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:28 -==> Parameters: 2632(String), 2632(String), 1(String)
2020-03-23 16:27:28 -<==      Total: 1
2020-03-23 16:27:28 -耗时 : 37
2020-03-23 16:27:28 -<==      Total: 0
2020-03-23 16:27:28 -耗时 : 58
2020-03-23 16:27:29 -此处进行解密+验签+身份验证
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:29 -此处进行解密+验签+身份验证
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:29 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:29 -==> Parameters: 2632(String), 2632(String)
2020-03-23 16:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 16:27:29 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2632 and pos_type='epos' ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2632 and cre_month=202003 and pos_type='epos' 
2020-03-23 16:27:29 -==> Parameters: 
2020-03-23 16:27:29 -此处进行解密+验签+身份验证
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:29 -此处进行解密+验签+身份验证
2020-03-23 16:27:29 -<==      Total: 1
2020-03-23 16:27:29 -耗时 : 22
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:29 -<==      Total: 0
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:29 -耗时 : 48
2020-03-23 16:27:29 -此处进行解密+验签+身份验证
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:29 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:29 -==> Parameters: 2632(String), 2632(String), 0(String)
2020-03-23 16:27:29 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:29 -==> Parameters: 2632(String), 2632(String), 1(String)
2020-03-23 16:27:29 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-23 16:27:29 -==> Parameters: 2632(String)
2020-03-23 16:27:29 -<==      Total: 1
2020-03-23 16:27:29 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-23 16:27:29 -==> Parameters: 2632(String)
2020-03-23 16:27:29 -<==      Total: 1
2020-03-23 16:27:29 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2632 and pos_type='epos' 
2020-03-23 16:27:29 -==> Parameters: 
2020-03-23 16:27:29 -<==      Total: 0
2020-03-23 16:27:29 -耗时 : 47
2020-03-23 16:27:29 -<==      Total: 1
2020-03-23 16:27:29 -耗时 : 46
2020-03-23 16:27:29 -<==      Total: 0
2020-03-23 16:27:29 -耗时 : 39
2020-03-23 16:27:30 -此处进行解密+验签+身份验证
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:30 -此处进行解密+验签+身份验证
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:30 -此处进行解密+验签+身份验证
2020-03-23 16:27:30 -此处进行解密+验签+身份验证
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:30 -此处进行解密+验签+身份验证
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 16:27:30 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 16:27:30 -==> Parameters: 2632(String)
2020-03-23 16:27:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2632
2020-03-23 16:27:30 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:30 -==> Parameters: 2632(String), 2632(String), 0(String)
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2632 , return
2020-03-23 16:27:30 -<==      Total: 1
2020-03-23 16:27:30 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 16:27:30 -==> Parameters: 2632(String)
2020-03-23 16:27:30 -<==      Total: 6
2020-03-23 16:27:30 -耗时 : 28
2020-03-23 16:27:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 16:27:30 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:30 -==> Parameters: 2632(String), 2632(String), 1(String)
2020-03-23 16:27:30 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2632 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2632 and cre_month=202003 and pos_type is null 
2020-03-23 16:27:30 -==> Parameters: 
2020-03-23 16:27:30 -<==      Total: 1
2020-03-23 16:27:30 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2632 and pos_type='epos' 
2020-03-23 16:27:30 -==> Parameters: 
2020-03-23 16:27:30 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 16:27:30 -==> Parameters: 2632(String), 2632(String)
2020-03-23 16:27:30 -<==      Total: 4
2020-03-23 16:27:30 -耗时 : 24
2020-03-23 16:27:30 -<==      Total: 1
2020-03-23 16:27:30 -耗时 : 21
2020-03-23 16:27:30 -<==      Total: 1
2020-03-23 16:27:30 -耗时 : 68
2020-03-23 16:27:30 -<==      Total: 10
2020-03-23 16:27:30 -耗时 : 37
2020-03-23 16:48:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 16:48:55 -Shutting down ExecutorService 'taskScheduler'
2020-03-23 16:48:55 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-23 16:48:55 -Shutting down Quartz Scheduler
2020-03-23 16:48:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-23 16:48:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 16:48:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-23 16:48:55 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 16:48:55 -HikariPool-1 - Shutdown initiated...
2020-03-23 16:48:55 -HikariPool-1 - Shutdown completed.
2020-03-23 17:31:00 -Starting LongEcologicalApplication on PC-201905161910 with PID 21328 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 17:31:00 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 17:31:00 -No active profile set, falling back to default profiles: default
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:01 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:31:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 17:31:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 17:31:02 -Finished Spring Data repository scanning in 76ms. Found 0 repository interfaces.
2020-03-23 17:31:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 17:31:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 17:31:02 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-03-23 17:31:02 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$12334359] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 17:31:02 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cb727f9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 17:31:02 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 17:31:03 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 17:31:03 -Starting service [Tomcat]
2020-03-23 17:31:03 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 17:31:03 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 17:31:03 -Initializing Spring embedded WebApplicationContext
2020-03-23 17:31:03 -Root WebApplicationContext: initialization completed in 2136 ms
2020-03-23 17:31:03 -Filter xssFilter was not registered (disabled)
2020-03-23 17:31:03 -HikariPool-1 - Starting...
2020-03-23 17:31:03 -HikariPool-1 - Start completed.
2020-03-23 17:31:03 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 17:31:03 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 17:31:03 -HHH000206: hibernate.properties not found
2020-03-23 17:31:03 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 17:31:04 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 17:31:04 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 17:31:04 -Using default implementation for ThreadExecutor
2020-03-23 17:31:04 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 17:31:04 -Quartz Scheduler v.2.3.0 created.
2020-03-23 17:31:04 -RAMJobStore initialized.
2020-03-23 17:31:04 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 17:31:04 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 17:31:04 -Quartz scheduler version: 2.3.0
2020-03-23 17:31:04 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1491cd6c
2020-03-23 17:31:05 -STAET TaskExecutorConfig
2020-03-23 17:31:05 -Initializing ExecutorService
2020-03-23 17:31:05 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 17:31:05 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 17:31:05 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 17:31:06 -Initializing ExecutorService 'taskScheduler'
2020-03-23 17:31:06 -Starting Quartz Scheduler now
2020-03-23 17:31:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 17:31:06 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 17:31:06 -Using a shared selector for servlet write/read
2020-03-23 17:31:06 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 17:31:06 -Started LongEcologicalApplication in 5.729 seconds (JVM running for 6.65)
2020-03-23 17:31:11 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 17:31:11 -Initializing Servlet 'dispatcherServlet'
2020-03-23 17:31:11 -Completed initialization in 15 ms
2020-03-23 17:31:12 -此处进行解密+验签+身份验证
2020-03-23 17:31:12 -此处进行解密+验签+身份验证
2020-03-23 17:31:12 -此处进行解密+验签+身份验证
2020-03-23 17:31:12 -此处进行解密+验签+身份验证
2020-03-23 17:31:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:12 -Starting without optional epoll library
2020-03-23 17:31:12 -Starting without optional kqueue library
2020-03-23 17:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:13 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 17:31:13 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 17:31:13 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 17:31:13 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 17:31:13 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 17:31:13 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 17:31:13 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 17:31:13 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 17:31:13 -==> Parameters: 181(String), 202003(String)
2020-03-23 17:31:13 -==> Parameters: 181(String)
2020-03-23 17:31:13 -==> Parameters: 181(String), 202003(String)
2020-03-23 17:31:13 -==> Parameters: 181(String), 202003(String)
2020-03-23 17:31:13 -<==      Total: 1
2020-03-23 17:31:13 -耗时 : 74
2020-03-23 17:31:13 -<==      Total: 1
2020-03-23 17:31:13 -耗时 : 77
2020-03-23 17:31:13 -<==      Total: 1
2020-03-23 17:31:13 -<==      Total: 1
2020-03-23 17:31:13 -耗时 : 78
2020-03-23 17:31:13 -耗时 : 78
2020-03-23 17:31:16 -此处进行解密+验签+身份验证
2020-03-23 17:31:16 -此处进行解密+验签+身份验证
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:16 -此处进行解密+验签+身份验证
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:16 -此处进行解密+验签+身份验证
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:31:16 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:31:16 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:31:16 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:31:16 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:31:16 -==> Parameters: 181(String), 09(String)
2020-03-23 17:31:16 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:31:16 -==> Parameters: 181(String), 09(String)
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:31:16 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:31:16 -<==      Total: 1
2020-03-23 17:31:16 -<==      Total: 1
2020-03-23 17:31:16 -耗时 : 24
2020-03-23 17:31:16 -耗时 : 23
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:31:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:31:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:31:16 -==> Parameters: 181(String)
2020-03-23 17:31:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:31:16 -==> Parameters: 181(String)
2020-03-23 17:31:16 -<==      Total: 1
2020-03-23 17:31:16 -<==      Total: 1
2020-03-23 17:31:16 -耗时 : 83
2020-03-23 17:31:16 -耗时 : 104
2020-03-23 17:32:33 -Starting LongEcologicalApplication on PC-201905161910 with PID 7440 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 17:32:33 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 17:32:33 -No active profile set, falling back to default profiles: default
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:34 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 17:32:35 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 17:32:35 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 17:32:35 -Finished Spring Data repository scanning in 67ms. Found 0 repository interfaces.
2020-03-23 17:32:35 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 17:32:35 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 17:32:35 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-23 17:32:35 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$f958856c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 17:32:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f3dc6a0c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 17:32:36 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 17:32:36 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 17:32:36 -Starting service [Tomcat]
2020-03-23 17:32:36 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 17:32:36 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 17:32:36 -Initializing Spring embedded WebApplicationContext
2020-03-23 17:32:36 -Root WebApplicationContext: initialization completed in 2399 ms
2020-03-23 17:32:36 -Filter xssFilter was not registered (disabled)
2020-03-23 17:32:36 -HikariPool-1 - Starting...
2020-03-23 17:32:36 -HikariPool-1 - Start completed.
2020-03-23 17:32:37 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 17:32:37 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 17:32:37 -HHH000206: hibernate.properties not found
2020-03-23 17:32:37 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 17:32:37 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 17:32:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 17:32:38 -Using default implementation for ThreadExecutor
2020-03-23 17:32:38 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 17:32:38 -Quartz Scheduler v.2.3.0 created.
2020-03-23 17:32:38 -RAMJobStore initialized.
2020-03-23 17:32:38 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 17:32:38 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 17:32:38 -Quartz scheduler version: 2.3.0
2020-03-23 17:32:38 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1b7a4930
2020-03-23 17:32:38 -STAET TaskExecutorConfig
2020-03-23 17:32:38 -Initializing ExecutorService
2020-03-23 17:32:38 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 17:32:39 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 17:32:39 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 17:32:39 -Initializing ExecutorService 'taskScheduler'
2020-03-23 17:32:39 -Starting Quartz Scheduler now
2020-03-23 17:32:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 17:32:39 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 17:32:39 -Using a shared selector for servlet write/read
2020-03-23 17:32:39 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 17:32:39 -Started LongEcologicalApplication in 7.036 seconds (JVM running for 8.473)
2020-03-23 17:33:32 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 17:33:32 -Initializing Servlet 'dispatcherServlet'
2020-03-23 17:33:32 -Completed initialization in 13 ms
2020-03-23 17:33:32 -此处进行解密+验签+身份验证
2020-03-23 17:33:32 -解密：{"cash_money":"20","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"17FBD236CC2DA548719015F30FEFEB53","card_id":"1652","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-23 17:33:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:33:33 -Starting without optional epoll library
2020-03-23 17:33:33 -Starting without optional kqueue library
2020-03-23 17:33:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:33:33 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 17:33:33 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 17:33:33 -==> Parameters: 1652(String), 181(String)
2020-03-23 17:33:33 -<==      Total: 1
2020-03-23 17:33:33 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 and real_deduct_money+?>=0 
2020-03-23 17:33:33 -==> Parameters: 20(String), 0.00(BigDecimal), 0.00(BigDecimal), 06(String), 20200323173333735223(String), 20200323(String), 173333(String), 181(String), 20(String), 0.00(BigDecimal), 0.00(BigDecimal)
2020-03-23 17:33:33 -<==    Updates: 1
2020-03-23 17:33:33 -==>  Preparing: insert into t_user_cash_record ( order_id, user_id, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, account, account_name, id_card, bank_code, bank_name, batch_no, status, cre_date, cre_time) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2020-03-23 17:33:33 -==> Parameters: 20200323173333735223(String), 181(String), 20(String), 15.6000(BigDecimal), 0.07(BigDecimal), 1.4000(BigDecimal), 3(BigDecimal), 0.00(BigDecimal), 6271007200019305229(String), 李贤耀(String), 352228198203282016(String), 105164100027(String), 中国建设银行股份有限公司朔州王坪矿区分理处(String), 20200323173333735951(String), 00(String), 20200323(String), 173333(String)
2020-03-23 17:33:33 -<==    Updates: 1
2020-03-23 17:33:33 -==>  Preparing: insert into t_user_cash_record_detail ( cash_id, cash_status, note, cre_date, cre_time) values ( ?, ?, ?, ?, ?) 
2020-03-23 17:33:33 -==> Parameters: 3151(Long), 00(String), 申请提现(String), 20200323(String), 173333(String)
2020-03-23 17:33:33 -<==    Updates: 1
2020-03-23 17:33:33 -耗时 : 211
2020-03-23 17:33:33 -此处进行解密+验签+身份验证
2020-03-23 17:33:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:33:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:33:34 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 17:33:34 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 17:33:34 -==> Parameters: 181(String), 10(Integer)
2020-03-23 17:33:34 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:33:34 -====> Parameters: 3151(Integer)
2020-03-23 17:33:34 -<====      Total: 1
2020-03-23 17:33:34 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:33:34 -====> Parameters: 1498(Integer)
2020-03-23 17:33:34 -<====      Total: 3
2020-03-23 17:33:34 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:33:34 -====> Parameters: 446(Integer)
2020-03-23 17:33:34 -<====      Total: 3
2020-03-23 17:33:34 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:33:34 -====> Parameters: 221(Integer)
2020-03-23 17:33:34 -<====      Total: 3
2020-03-23 17:33:34 -<==      Total: 4
2020-03-23 17:33:34 -耗时 : 140
2020-03-23 17:36:58 -此处进行解密+验签+身份验证
2020-03-23 17:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:36:58 -此处进行解密+验签+身份验证
2020-03-23 17:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:36:58 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 17:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:36:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:36:58 -==> Parameters: 181(String)
2020-03-23 17:36:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 17:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 17:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -耗时 : 27
2020-03-23 17:36:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:36:58 -==> Parameters: 181(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:36:58 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 2
2020-03-23 17:36:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:36:58 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 17:36:58 -<==    Updates: 2
2020-03-23 17:36:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 17:36:58 -==> Parameters: 181(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:36:58 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:36:58 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 17:36:58 -<==    Updates: 1
2020-03-23 17:36:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 17:36:58 -==> Parameters: 
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:36:58 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:36:58 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 17:36:58 -<==    Updates: 1
2020-03-23 17:36:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:36:58 -==> Parameters: 181(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:36:58 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:36:58 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 17:36:58 -<==    Updates: 1
2020-03-23 17:36:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:36:58 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 17:36:58 -<==      Total: 1
2020-03-23 17:36:58 -耗时 : 251
2020-03-23 17:37:00 -此处进行解密+验签+身份验证
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:37:00 -此处进行解密+验签+身份验证
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:37:00 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:37:00 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:37:00 -此处进行解密+验签+身份验证
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:37:00 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:37:00 -==> Parameters: 181(String), 09(String)
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:37:00 -<==      Total: 1
2020-03-23 17:37:00 -耗时 : 40
2020-03-23 17:37:00 -此处进行解密+验签+身份验证
2020-03-23 17:37:00 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:37:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:37:00 -==> Parameters: 181(String)
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:37:00 -<==      Total: 1
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:37:00 -耗时 : 160
2020-03-23 17:37:00 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:37:00 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:37:00 -==> Parameters: 181(String), 09(String)
2020-03-23 17:37:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:37:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:37:00 -==> Parameters: 181(String)
2020-03-23 17:37:00 -<==      Total: 1
2020-03-23 17:37:00 -耗时 : 15
2020-03-23 17:37:00 -<==      Total: 1
2020-03-23 17:37:00 -耗时 : 146
2020-03-23 17:37:09 -此处进行解密+验签+身份验证
2020-03-23 17:37:09 -解密：{"cash_money":"20","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"17FBD236CC2DA548719015F30FEFEB53","card_id":"1652","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-23 17:37:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:37:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:37:09 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 17:37:09 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 17:37:09 -==> Parameters: 1652(String), 181(String)
2020-03-23 17:37:09 -<==      Total: 1
2020-03-23 17:37:09 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 and real_deduct_money+?>=0 
2020-03-23 17:37:09 -==> Parameters: 20(String), 0.00(BigDecimal), 0.00(BigDecimal), 06(String), 20200323173709865674(String), 20200323(String), 173709(String), 181(String), 20(String), 0.00(BigDecimal), 0.00(BigDecimal)
2020-03-23 17:37:09 -<==    Updates: 1
2020-03-23 17:37:09 -==>  Preparing: insert into t_user_cash_record ( order_id, user_id, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, account, account_name, id_card, bank_code, bank_name, batch_no, status, cre_date, cre_time) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2020-03-23 17:37:09 -==> Parameters: 20200323173709865674(String), 181(String), 20(String), 15.6000(BigDecimal), 0.07(BigDecimal), 1.4000(BigDecimal), 3(BigDecimal), 0.00(BigDecimal), 6271007200019305229(String), 李贤耀(String), 352228198203282016(String), 105164100027(String), 中国建设银行股份有限公司朔州王坪矿区分理处(String), 20200323173709866494(String), 00(String), 20200323(String), 173709(String)
2020-03-23 17:37:09 -<==    Updates: 1
2020-03-23 17:37:09 -==>  Preparing: insert into t_user_cash_record_detail ( cash_id, cash_status, note, cre_date, cre_time) values ( ?, ?, ?, ?, ?) 
2020-03-23 17:37:09 -==> Parameters: 3152(Long), 00(String), 申请提现(String), 20200323(String), 173709(String)
2020-03-23 17:37:09 -<==    Updates: 1
2020-03-23 17:37:09 -耗时 : 106
2020-03-23 17:37:10 -此处进行解密+验签+身份验证
2020-03-23 17:37:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:37:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:37:10 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 17:37:10 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 17:37:10 -==> Parameters: 181(String), 10(Integer)
2020-03-23 17:37:10 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:37:10 -====> Parameters: 3152(Integer)
2020-03-23 17:37:10 -<====      Total: 1
2020-03-23 17:37:10 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:37:10 -====> Parameters: 3151(Integer)
2020-03-23 17:37:10 -<====      Total: 2
2020-03-23 17:37:10 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:37:10 -====> Parameters: 1498(Integer)
2020-03-23 17:37:10 -<====      Total: 3
2020-03-23 17:37:10 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:37:10 -====> Parameters: 446(Integer)
2020-03-23 17:37:10 -<====      Total: 3
2020-03-23 17:37:10 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:37:10 -====> Parameters: 221(Integer)
2020-03-23 17:37:10 -<====      Total: 3
2020-03-23 17:37:10 -<==      Total: 5
2020-03-23 17:37:10 -耗时 : 98
2020-03-23 17:48:33 -此处进行解密+验签+身份验证
2020-03-23 17:48:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 17:48:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 17:48:33 -此处进行解密+验签+身份验证
2020-03-23 17:48:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 17:48:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@13fc7239 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@193bf4de (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4361e7c1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@554b966b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7a45bedf (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@33fc382e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6a684433 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1344913b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@42e23a00 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2cb3c0a4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-23 17:48:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:48:33 -==> Parameters: 181(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:48:33 -==> Parameters: 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -耗时 : 77
2020-03-23 17:48:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:48:33 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 2
2020-03-23 17:48:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:48:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 17:48:33 -<==    Updates: 2
2020-03-23 17:48:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 17:48:33 -==> Parameters: 181(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:48:33 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:48:33 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 17:48:33 -<==    Updates: 1
2020-03-23 17:48:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 17:48:33 -==> Parameters: 
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:48:33 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:48:33 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 17:48:33 -<==    Updates: 1
2020-03-23 17:48:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:48:33 -==> Parameters: 181(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:48:33 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:48:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 17:48:33 -<==    Updates: 1
2020-03-23 17:48:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:48:33 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 17:48:33 -<==      Total: 1
2020-03-23 17:48:33 -耗时 : 220
2020-03-23 17:48:34 -此处进行解密+验签+身份验证
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:34 -此处进行解密+验签+身份验证
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:34 -解密异常：{sign=E42A2A8FED7863E5CEAD011226C3C551, token=181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8}
2020-03-23 17:48:34 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:48:34 -耗时 : 0
2020-03-23 17:48:34 -此处进行解密+验签+身份验证
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:34 -此处进行解密+验签+身份验证
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:34 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-23 17:48:34 -Reconnected to 120.25.164.176:10379
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:34 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:48:34 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:48:34 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:48:34 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:48:34 -==> Parameters: 181(String), 09(String)
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:48:34 -<==      Total: 1
2020-03-23 17:48:34 -耗时 : 13
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:48:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:48:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:48:34 -==> Parameters: 181(String)
2020-03-23 17:48:34 -<==      Total: 1
2020-03-23 17:48:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:48:34 -==> Parameters: 181(String)
2020-03-23 17:48:34 -<==      Total: 1
2020-03-23 17:48:34 -耗时 : 58
2020-03-23 17:48:34 -耗时 : 63
2020-03-23 17:48:45 -此处进行解密+验签+身份验证
2020-03-23 17:48:45 -解密：{"cash_money":"20","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"17FBD236CC2DA548719015F30FEFEB53","card_id":"1652","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-23 17:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:45 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 17:48:45 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 17:48:45 -==> Parameters: 1652(String), 181(String)
2020-03-23 17:48:45 -<==      Total: 1
2020-03-23 17:48:45 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 and real_deduct_money+?>=0 
2020-03-23 17:48:45 -==> Parameters: 20(String), 0.00(BigDecimal), 0.00(BigDecimal), 06(String), 20200323174845135643(String), 20200323(String), 174845(String), 181(String), 20(String), 0.00(BigDecimal), 0.00(BigDecimal)
2020-03-23 17:48:45 -<==    Updates: 1
2020-03-23 17:48:45 -==>  Preparing: insert into t_user_cash_record ( order_id, user_id, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, account, account_name, id_card, bank_code, bank_name, batch_no, status, cre_date, cre_time) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2020-03-23 17:48:45 -==> Parameters: 20200323174845135643(String), 181(String), 20(String), 15.6000(BigDecimal), 0.07(BigDecimal), 1.4000(BigDecimal), 3(BigDecimal), 0.00(BigDecimal), 6271007200019305229(String), 李贤耀(String), 352228198203282016(String), 105164100027(String), 中国建设银行股份有限公司朔州王坪矿区分理处(String), 20200323174845135249(String), 00(String), 20200323(String), 174845(String)
2020-03-23 17:48:45 -<==    Updates: 1
2020-03-23 17:48:45 -==>  Preparing: insert into t_user_cash_record_detail ( cash_id, cash_status, note, cre_date, cre_time) values ( ?, ?, ?, ?, ?) 
2020-03-23 17:48:45 -==> Parameters: 3153(Long), 00(String), 申请提现(String), 20200323(String), 174845(String)
2020-03-23 17:48:45 -<==    Updates: 1
2020-03-23 17:48:45 -耗时 : 66
2020-03-23 17:48:45 -此处进行解密+验签+身份验证
2020-03-23 17:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:48:45 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 17:48:45 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 17:48:45 -==> Parameters: 181(String), 10(Integer)
2020-03-23 17:48:45 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:48:45 -====> Parameters: 3153(Integer)
2020-03-23 17:48:45 -<====      Total: 1
2020-03-23 17:48:45 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:48:45 -====> Parameters: 3152(Integer)
2020-03-23 17:48:45 -<====      Total: 2
2020-03-23 17:48:45 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:48:45 -====> Parameters: 3151(Integer)
2020-03-23 17:48:45 -<====      Total: 2
2020-03-23 17:48:45 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:48:45 -====> Parameters: 1498(Integer)
2020-03-23 17:48:45 -<====      Total: 3
2020-03-23 17:48:45 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:48:45 -====> Parameters: 446(Integer)
2020-03-23 17:48:45 -<====      Total: 3
2020-03-23 17:48:45 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:48:45 -====> Parameters: 221(Integer)
2020-03-23 17:48:45 -<====      Total: 3
2020-03-23 17:48:45 -<==      Total: 6
2020-03-23 17:48:45 -耗时 : 73
2020-03-23 17:50:46 -此处进行解密+验签+身份验证
2020-03-23 17:50:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:46 -此处进行解密+验签+身份验证
2020-03-23 17:50:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 17:50:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 17:50:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 17:50:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:50:46 -==> Parameters: 181(String)
2020-03-23 17:50:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -耗时 : 12
2020-03-23 17:50:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:50:46 -==> Parameters: 181(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:50:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 2
2020-03-23 17:50:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:50:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 17:50:46 -<==    Updates: 2
2020-03-23 17:50:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 17:50:46 -==> Parameters: 181(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:50:46 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:50:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 17:50:46 -<==    Updates: 1
2020-03-23 17:50:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 17:50:46 -==> Parameters: 
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:50:46 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:50:46 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 17:50:46 -<==    Updates: 1
2020-03-23 17:50:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:50:46 -==> Parameters: 181(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:50:46 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:50:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 17:50:46 -<==    Updates: 1
2020-03-23 17:50:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:50:46 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 17:50:46 -<==      Total: 1
2020-03-23 17:50:46 -耗时 : 142
2020-03-23 17:50:48 -此处进行解密+验签+身份验证
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:48 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:50:48 -此处进行解密+验签+身份验证
2020-03-23 17:50:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:50:48 -==> Parameters: 181(String)
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:48 -<==      Total: 1
2020-03-23 17:50:48 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:50:48 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:50:48 -==> Parameters: 181(String), 09(String)
2020-03-23 17:50:48 -耗时 : 63
2020-03-23 17:50:48 -此处进行解密+验签+身份验证
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:48 -<==      Total: 1
2020-03-23 17:50:48 -耗时 : 13
2020-03-23 17:50:48 -此处进行解密+验签+身份验证
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:48 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:50:48 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:50:48 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:50:48 -==> Parameters: 181(String), 09(String)
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:50:48 -<==      Total: 1
2020-03-23 17:50:48 -耗时 : 8
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:50:48 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:50:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:50:48 -==> Parameters: 181(String)
2020-03-23 17:50:48 -<==      Total: 1
2020-03-23 17:50:48 -耗时 : 53
2020-03-23 17:50:57 -此处进行解密+验签+身份验证
2020-03-23 17:50:57 -解密：{"cash_money":"20","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"17FBD236CC2DA548719015F30FEFEB53","card_id":"1652","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-23 17:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:57 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 17:50:57 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 17:50:57 -==> Parameters: 1652(String), 181(String)
2020-03-23 17:50:57 -<==      Total: 1
2020-03-23 17:50:57 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 and real_deduct_money+?>=0 
2020-03-23 17:50:57 -==> Parameters: 20(String), 0.00(BigDecimal), 0.00(BigDecimal), 06(String), 20200323175057603495(String), 20200323(String), 175057(String), 181(String), 20(String), 0.00(BigDecimal), 0.00(BigDecimal)
2020-03-23 17:50:57 -<==    Updates: 1
2020-03-23 17:50:57 -==>  Preparing: insert into t_user_cash_record ( order_id, user_id, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, account, account_name, id_card, bank_code, bank_name, batch_no, status, cre_date, cre_time) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2020-03-23 17:50:57 -==> Parameters: 20200323175057603495(String), 181(String), 20(String), 15.6000(BigDecimal), 0.07(BigDecimal), 1.4000(BigDecimal), 3(BigDecimal), 0.00(BigDecimal), 6271007200019305229(String), 李贤耀(String), 352228198203282016(String), 105164100027(String), 中国建设银行股份有限公司朔州王坪矿区分理处(String), 20200323175057603773(String), 00(String), 20200323(String), 175057(String)
2020-03-23 17:50:57 -<==    Updates: 1
2020-03-23 17:50:57 -==>  Preparing: insert into t_user_cash_record_detail ( cash_id, cash_status, note, cre_date, cre_time) values ( ?, ?, ?, ?, ?) 
2020-03-23 17:50:57 -==> Parameters: 3154(Long), 00(String), 申请提现(String), 20200323(String), 175057(String)
2020-03-23 17:50:57 -<==    Updates: 1
2020-03-23 17:50:57 -耗时 : 64
2020-03-23 17:50:57 -此处进行解密+验签+身份验证
2020-03-23 17:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:50:57 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 17:50:57 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 17:50:57 -==> Parameters: 181(String), 10(Integer)
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 3154(Integer)
2020-03-23 17:50:57 -<====      Total: 1
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 3153(Integer)
2020-03-23 17:50:57 -<====      Total: 2
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 3152(Integer)
2020-03-23 17:50:57 -<====      Total: 2
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 3151(Integer)
2020-03-23 17:50:57 -<====      Total: 2
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 1498(Integer)
2020-03-23 17:50:57 -<====      Total: 3
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 446(Integer)
2020-03-23 17:50:57 -<====      Total: 3
2020-03-23 17:50:57 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:50:57 -====> Parameters: 221(Integer)
2020-03-23 17:50:57 -<====      Total: 3
2020-03-23 17:50:57 -<==      Total: 7
2020-03-23 17:50:57 -耗时 : 80
2020-03-23 17:51:00 -此处进行解密+验签+身份验证
2020-03-23 17:51:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:00 -此处进行解密+验签+身份验证
2020-03-23 17:51:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 17:51:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 17:51:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 17:51:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:51:00 -==> Parameters: 181(String), 181(String)
2020-03-23 17:51:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 17:51:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:51:00 -==> Parameters: 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:51:00 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -耗时 : 13
2020-03-23 17:51:00 -<==      Total: 2
2020-03-23 17:51:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:51:00 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 17:51:00 -<==    Updates: 2
2020-03-23 17:51:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 17:51:00 -==> Parameters: 181(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:51:00 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:51:00 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 17:51:00 -<==    Updates: 1
2020-03-23 17:51:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 17:51:00 -==> Parameters: 
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:51:00 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:51:00 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 17:51:00 -<==    Updates: 1
2020-03-23 17:51:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 17:51:00 -==> Parameters: 181(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:51:00 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 17:51:00 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 17:51:00 -<==    Updates: 1
2020-03-23 17:51:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 17:51:00 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 17:51:00 -<==      Total: 1
2020-03-23 17:51:00 -耗时 : 141
2020-03-23 17:51:02 -此处进行解密+验签+身份验证
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:02 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:51:02 -此处进行解密+验签+身份验证
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:02 -此处进行解密+验签+身份验证
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:02 -此处进行解密+验签+身份验证
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:02 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:51:02 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:51:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:02 -==> Parameters: 181(String), 09(String)
2020-03-23 17:51:02 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-23 17:51:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-23 17:51:03 -<==      Total: 1
2020-03-23 17:51:03 -耗时 : 14
2020-03-23 17:51:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-23 17:51:03 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:51:03 -==> Parameters: 181(String)
2020-03-23 17:51:03 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-23 17:51:03 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-23 17:51:03 -==> Parameters: 181(String), 09(String)
2020-03-23 17:51:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-23 17:51:03 -<==      Total: 1
2020-03-23 17:51:03 -耗时 : 7
2020-03-23 17:51:03 -<==      Total: 1
2020-03-23 17:51:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-23 17:51:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-23 17:51:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-23 17:51:03 -耗时 : 70
2020-03-23 17:51:03 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 17:51:03 -==> Parameters: 181(String)
2020-03-23 17:51:03 -<==      Total: 1
2020-03-23 17:51:03 -耗时 : 57
2020-03-23 17:51:11 -此处进行解密+验签+身份验证
2020-03-23 17:51:11 -解密：{"cash_money":"20","pay_password":"E3CEB5881A0A1FDAAD01296D7554868D","sign":"17FBD236CC2DA548719015F30FEFEB53","card_id":"1652","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-23 17:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:11 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/applyCash
2020-03-23 17:51:11 -==>  Preparing: select * FROM t_user_card_info where id=? AND user_id=? AND status='09' 
2020-03-23 17:51:11 -==> Parameters: 1652(String), 181(String)
2020-03-23 17:51:11 -<==      Total: 1
2020-03-23 17:51:11 -==>  Preparing: update t_user_info set money=money-?, deduct_money=deduct_money-?, real_deduct_money=real_deduct_money+?, op_type=?, op_order_id=?, up_date=?, up_time=? where id=? and money-?>=0 and deduct_money-?>=0 and real_deduct_money+?>=0 
2020-03-23 17:51:11 -==> Parameters: 20(String), 0.00(BigDecimal), 0.00(BigDecimal), 06(String), 20200323175111487746(String), 20200323(String), 175111(String), 181(String), 20(String), 0.00(BigDecimal), 0.00(BigDecimal)
2020-03-23 17:51:11 -<==    Updates: 1
2020-03-23 17:51:11 -==>  Preparing: insert into t_user_cash_record ( order_id, user_id, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, account, account_name, id_card, bank_code, bank_name, batch_no, status, cre_date, cre_time) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
2020-03-23 17:51:11 -==> Parameters: 20200323175111487746(String), 181(String), 20(String), 15.6000(BigDecimal), 0.07(BigDecimal), 1.4000(BigDecimal), 3(BigDecimal), 0.00(BigDecimal), 6271007200019305229(String), 李贤耀(String), 352228198203282016(String), 105164100027(String), 中国建设银行股份有限公司朔州王坪矿区分理处(String), 20200323175111487875(String), 00(String), 20200323(String), 175111(String)
2020-03-23 17:51:11 -<==    Updates: 1
2020-03-23 17:51:11 -==>  Preparing: insert into t_user_cash_record_detail ( cash_id, cash_status, note, cre_date, cre_time) values ( ?, ?, ?, ?, ?) 
2020-03-23 17:51:11 -==> Parameters: 3155(Long), 00(String), 申请提现(String), 20200323(String), 175111(String)
2020-03-23 17:51:11 -<==    Updates: 1
2020-03-23 17:51:11 -耗时 : 69
2020-03-23 17:51:11 -此处进行解密+验签+身份验证
2020-03-23 17:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 17:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 17:51:11 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashRecordList
2020-03-23 17:51:11 -==>  Preparing: SELECT id AS cash_id, order_id, user_id, account, cash_money, cash_actual_money, feet_rate, rate_feet_money, single_feet_money, deduct_money, status, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record WHERE user_id=? order by id desc LIMIT 0,? 
2020-03-23 17:51:11 -==> Parameters: 181(String), 10(Integer)
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 3155(Integer)
2020-03-23 17:51:11 -<====      Total: 1
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 3154(Integer)
2020-03-23 17:51:11 -<====      Total: 1
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 3153(Integer)
2020-03-23 17:51:11 -<====      Total: 2
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 3152(Integer)
2020-03-23 17:51:11 -<====      Total: 2
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 3151(Integer)
2020-03-23 17:51:11 -<====      Total: 2
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 1498(Integer)
2020-03-23 17:51:11 -<====      Total: 3
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 446(Integer)
2020-03-23 17:51:11 -<====      Total: 3
2020-03-23 17:51:11 -====>  Preparing: SELECT id AS cash_detail_id, cash_id, cash_status, note, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y/%m/%d %H:%i:%s' ) AS cre_date FROM t_user_cash_record_detail where cash_id=? order by id 
2020-03-23 17:51:11 -====> Parameters: 221(Integer)
2020-03-23 17:51:11 -<====      Total: 3
2020-03-23 17:51:11 -<==      Total: 8
2020-03-23 17:51:11 -耗时 : 123
2020-03-23 17:55:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 17:55:00 -Shutting down ExecutorService 'taskScheduler'
2020-03-23 17:55:00 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-23 17:55:00 -Shutting down Quartz Scheduler
2020-03-23 17:55:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-23 17:55:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-23 17:55:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-23 17:55:00 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 17:55:00 -HikariPool-1 - Shutdown initiated...
2020-03-23 17:55:00 -HikariPool-1 - Shutdown completed.
2020-03-23 18:03:51 -Starting LongEcologicalApplication on PC-201905161910 with PID 6700 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-23 18:03:51 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-23 18:03:51 -No active profile set, falling back to default profiles: default
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-23 18:03:53 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 18:03:53 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 18:03:53 -Finished Spring Data repository scanning in 95ms. Found 0 repository interfaces.
2020-03-23 18:03:53 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-23 18:03:53 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-23 18:03:53 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-23 18:03:54 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$19c7d06b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 18:03:54 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$144bb50b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 18:03:54 -Tomcat initialized with port(s): 8080 (http)
2020-03-23 18:03:54 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-23 18:03:54 -Starting service [Tomcat]
2020-03-23 18:03:54 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-23 18:03:54 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-23 18:03:54 -Initializing Spring embedded WebApplicationContext
2020-03-23 18:03:54 -Root WebApplicationContext: initialization completed in 3000 ms
2020-03-23 18:03:54 -Filter xssFilter was not registered (disabled)
2020-03-23 18:03:55 -HikariPool-1 - Starting...
2020-03-23 18:03:55 -HikariPool-1 - Start completed.
2020-03-23 18:03:55 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-23 18:03:55 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-23 18:03:55 -HHH000206: hibernate.properties not found
2020-03-23 18:03:55 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-23 18:03:55 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-23 18:03:56 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 18:03:56 -Using default implementation for ThreadExecutor
2020-03-23 18:03:56 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-23 18:03:56 -Quartz Scheduler v.2.3.0 created.
2020-03-23 18:03:56 -RAMJobStore initialized.
2020-03-23 18:03:56 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-23 18:03:56 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-23 18:03:56 -Quartz scheduler version: 2.3.0
2020-03-23 18:03:56 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@14b8a751
2020-03-23 18:03:56 -STAET TaskExecutorConfig
2020-03-23 18:03:56 -Initializing ExecutorService
2020-03-23 18:03:56 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-23 18:03:57 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-23 18:03:57 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-23 18:03:57 -Initializing ExecutorService 'taskScheduler'
2020-03-23 18:03:57 -Starting Quartz Scheduler now
2020-03-23 18:03:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-23 18:03:57 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-23 18:03:57 -Using a shared selector for servlet write/read
2020-03-23 18:03:57 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 18:03:57 -Started LongEcologicalApplication in 6.73 seconds (JVM running for 8.125)
2020-03-23 18:04:08 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 18:04:08 -Initializing Servlet 'dispatcherServlet'
2020-03-23 18:04:08 -Completed initialization in 12 ms
2020-03-23 18:04:08 -此处进行解密+验签+身份验证
2020-03-23 18:04:08 -此处进行解密+验签+身份验证
2020-03-23 18:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:08 -Starting without optional epoll library
2020-03-23 18:04:08 -Starting without optional kqueue library
2020-03-23 18:04:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 18:04:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 18:04:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 18:04:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 18:04:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 18:04:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:04:09 -==> Parameters: 181(String)
2020-03-23 18:04:09 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -耗时 : 48
2020-03-23 18:04:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:09 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 2
2020-03-23 18:04:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:09 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 18:04:09 -<==    Updates: 2
2020-03-23 18:04:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 18:04:09 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:09 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:09 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 18:04:09 -<==    Updates: 1
2020-03-23 18:04:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 18:04:09 -==> Parameters: 
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:09 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:09 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 18:04:09 -<==    Updates: 1
2020-03-23 18:04:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:04:09 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:09 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:09 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 18:04:09 -<==    Updates: 1
2020-03-23 18:04:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:09 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 18:04:09 -<==      Total: 1
2020-03-23 18:04:09 -耗时 : 155
2020-03-23 18:04:10 -此处进行解密+验签+身份验证
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:10 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-23 18:04:10 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-23 18:04:10 -==> Parameters: 181(String)
2020-03-23 18:04:10 -<==      Total: 1
2020-03-23 18:04:10 -耗时 : 18
2020-03-23 18:04:10 -此处进行解密+验签+身份验证
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:10 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-23 18:04:10 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-23 18:04:10 -==> Parameters: 181(String), 202003(String)
2020-03-23 18:04:10 -<==      Total: 1
2020-03-23 18:04:10 -耗时 : 14
2020-03-23 18:04:10 -此处进行解密+验签+身份验证
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:10 -此处进行解密+验签+身份验证
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:10 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 18:04:10 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-23 18:04:10 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-23 18:04:10 -==> Parameters: 181(String), 202003(String)
2020-03-23 18:04:10 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-23 18:04:10 -==> Parameters: 181(String), 202003(String)
2020-03-23 18:04:10 -<==      Total: 1
2020-03-23 18:04:10 -耗时 : 36
2020-03-23 18:04:10 -<==      Total: 1
2020-03-23 18:04:10 -耗时 : 40
2020-03-23 18:04:12 -此处进行解密+验签+身份验证
2020-03-23 18:04:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:12 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-03-23 18:04:12 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-23 18:04:12 -==> Parameters: 181(String), 20200301(String), 20200331(String), 181(String), 20200301(String), 20200331(String)
2020-03-23 18:04:12 -<==      Total: 2
2020-03-23 18:04:12 -耗时 : 15
2020-03-23 18:04:32 -此处进行解密+验签+身份验证
2020-03-23 18:04:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:32 -此处进行解密+验签+身份验证
2020-03-23 18:04:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 18:04:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 18:04:32 -==> Parameters: 181(String)
2020-03-23 18:04:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 18:04:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 18:04:32 -<==      Total: 1
2020-03-23 18:04:32 -耗时 : 14
2020-03-23 18:04:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 18:04:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:04:32 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:32 -<==      Total: 1
2020-03-23 18:04:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:32 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 18:04:32 -<==      Total: 2
2020-03-23 18:04:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:32 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 18:04:32 -<==    Updates: 2
2020-03-23 18:04:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 18:04:32 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:32 -<==      Total: 1
2020-03-23 18:04:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:32 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 18:04:32 -<==      Total: 1
2020-03-23 18:04:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:32 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 18:04:32 -<==    Updates: 1
2020-03-23 18:04:32 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 18:04:32 -==> Parameters: 
2020-03-23 18:04:32 -<==      Total: 1
2020-03-23 18:04:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:32 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 18:04:32 -<==      Total: 1
2020-03-23 18:04:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:32 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 18:04:33 -<==    Updates: 1
2020-03-23 18:04:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:04:33 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:33 -<==      Total: 1
2020-03-23 18:04:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:33 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 18:04:33 -<==      Total: 1
2020-03-23 18:04:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 18:04:33 -<==    Updates: 1
2020-03-23 18:04:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:33 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 18:04:33 -<==      Total: 1
2020-03-23 18:04:33 -耗时 : 155
2020-03-23 18:04:39 -此处进行解密+验签+身份验证
2020-03-23 18:04:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-03-23 18:04:39 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-23 18:04:39 -==> Parameters: 181(String), 20200301(String), 20200331(String), 181(String), 20200301(String), 20200331(String)
2020-03-23 18:04:39 -<==      Total: 2
2020-03-23 18:04:39 -耗时 : 13
2020-03-23 18:04:55 -此处进行解密+验签+身份验证
2020-03-23 18:04:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 18:04:55 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 18:04:55 -==> Parameters: 181(String)
2020-03-23 18:04:55 -此处进行解密+验签+身份验证
2020-03-23 18:04:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:04:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -耗时 : 14
2020-03-23 18:04:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 18:04:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 18:04:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 18:04:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:04:55 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:55 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 2
2020-03-23 18:04:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:55 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 18:04:55 -<==    Updates: 2
2020-03-23 18:04:55 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 18:04:55 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:55 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:55 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 18:04:55 -<==    Updates: 1
2020-03-23 18:04:55 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 18:04:55 -==> Parameters: 
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:55 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:55 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 18:04:55 -<==    Updates: 1
2020-03-23 18:04:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:04:55 -==> Parameters: 181(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:55 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:04:55 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 18:04:55 -<==    Updates: 1
2020-03-23 18:04:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:04:55 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 18:04:55 -<==      Total: 1
2020-03-23 18:04:55 -耗时 : 131
2020-03-23 18:05:02 -此处进行解密+验签+身份验证
2020-03-23 18:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardEposList
2020-03-23 18:05:02 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type='epos' and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-23 18:05:02 -==> Parameters: 181(String), 20200301(String), 20200331(String), 181(String), 20200301(String), 20200331(String)
2020-03-23 18:05:02 -<==      Total: 0
2020-03-23 18:05:02 -耗时 : 15
2020-03-23 18:05:14 -此处进行解密+验签+身份验证
2020-03-23 18:05:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:14 -此处进行解密+验签+身份验证
2020-03-23 18:05:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-23 18:05:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-23 18:05:15 -==> Parameters: 181(String)
2020-03-23 18:05:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 18:05:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 18:05:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -耗时 : 11
2020-03-23 18:05:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:05:15 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:15 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 2
2020-03-23 18:05:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 18:05:15 -<==    Updates: 2
2020-03-23 18:05:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 18:05:15 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:15 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:15 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 18:05:15 -<==    Updates: 1
2020-03-23 18:05:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 18:05:15 -==> Parameters: 
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:15 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:15 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 18:05:15 -<==    Updates: 1
2020-03-23 18:05:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:05:15 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:15 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 18:05:15 -<==    Updates: 1
2020-03-23 18:05:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:15 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 18:05:15 -<==      Total: 1
2020-03-23 18:05:15 -耗时 : 148
2020-03-23 18:05:19 -此处进行解密+验签+身份验证
2020-03-23 18:05:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 18:05:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 18:05:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 18:05:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:05:19 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:19 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 2
2020-03-23 18:05:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:19 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 18:05:19 -<==    Updates: 2
2020-03-23 18:05:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 18:05:19 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:19 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:19 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 18:05:19 -<==    Updates: 1
2020-03-23 18:05:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 18:05:19 -==> Parameters: 
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:19 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:19 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 18:05:19 -<==    Updates: 1
2020-03-23 18:05:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:05:19 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:19 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:19 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 18:05:19 -<==    Updates: 1
2020-03-23 18:05:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:19 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 18:05:19 -<==      Total: 1
2020-03-23 18:05:19 -耗时 : 143
2020-03-23 18:05:31 -此处进行解密+验签+身份验证
2020-03-23 18:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:31 -此处进行解密+验签+身份验证
2020-03-23 18:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-23 18:05:31 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-23 18:05:31 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-23 18:05:31 -==> Parameters: 181(String)
2020-03-23 18:05:31 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 18:05:31 -==> Parameters: 202003(String), 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-23 18:05:31 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-23 18:05:31 -==> Parameters: 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 18:05:31 -==> Parameters: 202003(String), 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-23 18:05:31 -==> Parameters: 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-23 18:05:31 -==> Parameters: 202003(String), 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-23 18:05:31 -==> Parameters: 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -耗时 : 55
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-23 18:05:31 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:31 -<==      Total: 1
2020-03-23 18:05:31 -耗时 : 241
2020-03-23 18:05:39 -此处进行解密+验签+身份验证
2020-03-23 18:05:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-23 18:05:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-23 18:05:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-23 18:05:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:05:39 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:39 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 2
2020-03-23 18:05:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-23 18:05:39 -<==    Updates: 2
2020-03-23 18:05:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-23 18:05:39 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:39 -==> Parameters: recallFlag(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:39 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-23 18:05:39 -<==    Updates: 1
2020-03-23 18:05:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-23 18:05:39 -==> Parameters: 
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:39 -==> Parameters: collegeFlag(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:39 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-23 18:05:39 -<==    Updates: 1
2020-03-23 18:05:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-23 18:05:39 -==> Parameters: 181(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:39 -==> Parameters: cardFlag(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-23 18:05:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-23 18:05:39 -<==    Updates: 1
2020-03-23 18:05:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-23 18:05:39 -==> Parameters: appImgFlag(String), 181(String)
2020-03-23 18:05:39 -<==      Total: 1
2020-03-23 18:05:39 -耗时 : 145
2020-03-23 18:05:43 -此处进行解密+验签+身份验证
2020-03-23 18:05:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:43 -此处进行解密+验签+身份验证
2020-03-23 18:05:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-23 18:05:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-23 18:05:43 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-23 18:05:43 -==> Parameters: 181(String)
2020-03-23 18:05:43 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-23 18:05:43 -==> Parameters: 181(String)
2020-03-23 18:05:43 -<==      Total: 10
2020-03-23 18:05:43 -耗时 : 18
2020-03-23 18:05:43 -<==      Total: 1
2020-03-23 18:05:43 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-23 18:05:43 -==> Parameters: 181(String)
2020-03-23 18:05:43 -<==      Total: 1
2020-03-23 18:05:43 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 18:05:43 -==> Parameters: 181(String)
2020-03-23 18:05:43 -<==      Total: 1
2020-03-23 18:05:43 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-23 18:05:43 -==> Parameters: 181(String)
2020-03-23 18:05:43 -<==      Total: 1
2020-03-23 18:05:43 -耗时 : 36
2020-03-23 18:05:45 -此处进行解密+验签+身份验证
2020-03-23 18:05:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:45 -此处进行解密+验签+身份验证
2020-03-23 18:05:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 18:05:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:05:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:45 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-23 18:05:45 -==> Parameters: 2397(String)
2020-03-23 18:05:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 18:05:45 -<==      Total: 1
2020-03-23 18:05:45 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2397 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2397 and cre_month=202003 and pos_type is null 
2020-03-23 18:05:45 -==> Parameters: 
2020-03-23 18:05:45 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_2397,save content:{referer_id=181, parent_chain=181, user_tel=13760421128, id_card=429006198202021899, real_name=吴学红, algebra=2, cre_date=20200106, cre_time=203251, login_password=90bfb38d553d51abe085d13818ac65bf, manager_id=26, pay_password=c59265ff706f54bc1cce137c3b10e523, id=2397, auth_status=09, status=0}
2020-03-23 18:05:45 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 18:05:45 -==> Parameters: 2397(String)
2020-03-23 18:05:45 -<==      Total: 1
2020-03-23 18:05:45 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 18:05:45 -==> Parameters: 2397(String)
2020-03-23 18:05:45 -<==      Total: 1
2020-03-23 18:05:45 -耗时 : 31
2020-03-23 18:05:45 -<==      Total: 1
2020-03-23 18:05:45 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2397 and pos_type='epos' 
2020-03-23 18:05:45 -==> Parameters: 
2020-03-23 18:05:45 -<==      Total: 1
2020-03-23 18:05:45 -耗时 : 71
2020-03-23 18:05:46 -此处进行解密+验签+身份验证
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:46 -此处进行解密+验签+身份验证
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:05:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:05:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 18:05:46 -==> Parameters: 2397(String), 2397(String)
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:05:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 18:05:46 -==> Parameters: 2397(String), 2397(String), 1(String)
2020-03-23 18:05:46 -<==      Total: 1
2020-03-23 18:05:46 -耗时 : 45
2020-03-23 18:05:46 -此处进行解密+验签+身份验证
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:46 -<==      Total: 1
2020-03-23 18:05:46 -耗时 : 46
2020-03-23 18:05:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:05:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 18:05:46 -==> Parameters: 2397(String), 2397(String), 0(String)
2020-03-23 18:05:46 -<==      Total: 0
2020-03-23 18:05:46 -耗时 : 30
2020-03-23 18:05:48 -此处进行解密+验签+身份验证
2020-03-23 18:05:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:05:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:05:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-23 18:05:48 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-23 18:05:48 -==> Parameters: 181(String), 00000302J8NL12066871(String)
2020-03-23 18:05:48 -<==      Total: 1
2020-03-23 18:05:48 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-23 18:05:48 -==> Parameters: 00000302J8NL12066871(String)
2020-03-23 18:05:48 -<==      Total: 1
2020-03-23 18:05:48 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-23 18:05:48 -==> Parameters: 00000302J8NL12066871(String)
2020-03-23 18:05:48 -<==      Total: 1
2020-03-23 18:05:48 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-23 18:05:48 -==> Parameters: 00000302J8NL12066871(String), 181(String)
2020-03-23 18:05:48 -<==      Total: 1
2020-03-23 18:05:48 -耗时 : 48
2020-03-23 18:06:15 -此处进行解密+验签+身份验证
2020-03-23 18:06:15 -此处进行解密+验签+身份验证
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:15 -此处进行解密+验签+身份验证
2020-03-23 18:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:15 -此处进行解密+验签+身份验证
2020-03-23 18:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:16 -==> Parameters: 2397(String), 2397(String)
2020-03-23 18:06:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:16 -==> Parameters: 2397(String), 2397(String), 1(String)
2020-03-23 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:16 -此处进行解密+验签+身份验证
2020-03-23 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:16 -<==      Total: 0
2020-03-23 18:06:16 -<==      Total: 0
2020-03-23 18:06:16 -耗时 : 40
2020-03-23 18:06:16 -耗时 : 44
2020-03-23 18:06:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:16 -==> Parameters: 2397(String), 2397(String), 0(String)
2020-03-23 18:06:16 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-23 18:06:16 -==> Parameters: 2397(String)
2020-03-23 18:06:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 18:06:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2397 and pos_type='epos' ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2397 and cre_month=202003 and pos_type='epos' 
2020-03-23 18:06:16 -==> Parameters: 
2020-03-23 18:06:16 -<==      Total: 1
2020-03-23 18:06:16 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-23 18:06:16 -==> Parameters: 2397(String)
2020-03-23 18:06:16 -<==      Total: 1
2020-03-23 18:06:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2397 and pos_type='epos' 
2020-03-23 18:06:16 -==> Parameters: 
2020-03-23 18:06:16 -<==      Total: 1
2020-03-23 18:06:16 -耗时 : 19
2020-03-23 18:06:16 -<==      Total: 0
2020-03-23 18:06:16 -耗时 : 53
2020-03-23 18:06:16 -<==      Total: 1
2020-03-23 18:06:16 -耗时 : 41
2020-03-23 18:06:26 -此处进行解密+验签+身份验证
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:26 -此处进行解密+验签+身份验证
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:26 -此处进行解密+验签+身份验证
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:26 -此处进行解密+验签+身份验证
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:26 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2397 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2397 and cre_month=202003 
2020-03-23 18:06:26 -==> Parameters: 
2020-03-23 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:26 -此处进行解密+验签+身份验证
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:26 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-23 18:06:26 -==> Parameters: 2397(String)
2020-03-23 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 18:06:26 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:26 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:26 -==> Parameters: 2397(String), 2397(String)
2020-03-23 18:06:26 -==> Parameters: 2397(String), 2397(String), 1(String)
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:26 -<==      Total: 1
2020-03-23 18:06:26 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-23 18:06:26 -==> Parameters: 2397(String)
2020-03-23 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:26 -<==      Total: 1
2020-03-23 18:06:26 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2397 
2020-03-23 18:06:26 -==> Parameters: 
2020-03-23 18:06:26 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:26 -<==      Total: 1
2020-03-23 18:06:26 -==> Parameters: 2397(String), 2397(String), 0(String)
2020-03-23 18:06:26 -耗时 : 45
2020-03-23 18:06:26 -<==      Total: 1
2020-03-23 18:06:26 -耗时 : 59
2020-03-23 18:06:26 -<==      Total: 0
2020-03-23 18:06:26 -耗时 : 65
2020-03-23 18:06:26 -<==      Total: 0
2020-03-23 18:06:26 -耗时 : 52
2020-03-23 18:06:26 -<==      Total: 0
2020-03-23 18:06:26 -耗时 : 81
2020-03-23 18:06:30 -此处进行解密+验签+身份验证
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:30 -此处进行解密+验签+身份验证
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:30 -此处进行解密+验签+身份验证
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:30 -此处进行解密+验签+身份验证
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:30 -此处进行解密+验签+身份验证
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:06:30 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2397 and pos_type='epos' ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2397 and cre_month=202003 and pos_type='epos' 
2020-03-23 18:06:30 -==> Parameters: 
2020-03-23 18:06:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:30 -<==      Total: 1
2020-03-23 18:06:30 -耗时 : 12
2020-03-23 18:06:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:06:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:06:30 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-23 18:06:30 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:30 -==> Parameters: 2397(String)
2020-03-23 18:06:30 -==> Parameters: 2397(String), 2397(String)
2020-03-23 18:06:30 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:30 -==> Parameters: 2397(String), 2397(String), 0(String)
2020-03-23 18:06:30 -<==      Total: 1
2020-03-23 18:06:30 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-23 18:06:30 -==> Parameters: 2397(String)
2020-03-23 18:06:30 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 18:06:30 -==> Parameters: 2397(String), 2397(String), 1(String)
2020-03-23 18:06:30 -<==      Total: 0
2020-03-23 18:06:30 -耗时 : 21
2020-03-23 18:06:30 -<==      Total: 0
2020-03-23 18:06:30 -<==      Total: 1
2020-03-23 18:06:30 -耗时 : 25
2020-03-23 18:06:30 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2397 and pos_type='epos' 
2020-03-23 18:06:30 -==> Parameters: 
2020-03-23 18:06:30 -<==      Total: 0
2020-03-23 18:06:30 -耗时 : 35
2020-03-23 18:06:30 -<==      Total: 1
2020-03-23 18:06:30 -耗时 : 38
2020-03-23 18:18:32 -此处进行解密+验签+身份验证
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:32 -此处进行解密+验签+身份验证
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:32 -此处进行解密+验签+身份验证
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:32 -此处进行解密+验签+身份验证
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:32 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 18:18:32 -==> Parameters: 2397(String), 2397(String)
2020-03-23 18:18:32 -此处进行解密+验签+身份验证
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:32 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 18:18:32 -==> Parameters: 2397(String), 2397(String), 1(String)
2020-03-23 18:18:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:32 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-23 18:18:32 -==> Parameters: 2397(String)
2020-03-23 18:18:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-23 18:18:32 -<==      Total: 1
2020-03-23 18:18:32 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 18:18:32 -==> Parameters: 2397(String), 2397(String), 0(String)
2020-03-23 18:18:32 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-23 18:18:32 -==> Parameters: 2397(String)
2020-03-23 18:18:32 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2397 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2397 and cre_month=202003 
2020-03-23 18:18:32 -==> Parameters: 
2020-03-23 18:18:32 -<==      Total: 0
2020-03-23 18:18:32 -耗时 : 54
2020-03-23 18:18:32 -<==      Total: 1
2020-03-23 18:18:32 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2397 
2020-03-23 18:18:32 -==> Parameters: 
2020-03-23 18:18:32 -<==      Total: 0
2020-03-23 18:18:32 -耗时 : 52
2020-03-23 18:18:32 -<==      Total: 1
2020-03-23 18:18:32 -耗时 : 74
2020-03-23 18:18:32 -<==      Total: 0
2020-03-23 18:18:32 -耗时 : 72
2020-03-23 18:18:32 -<==      Total: 1
2020-03-23 18:18:32 -耗时 : 59
2020-03-23 18:18:34 -此处进行解密+验签+身份验证
2020-03-23 18:18:34 -此处进行解密+验签+身份验证
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:34 -此处进行解密+验签+身份验证
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:34 -此处进行解密+验签+身份验证
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:34 -此处进行解密+验签+身份验证
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-23 18:18:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:18:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-23 18:18:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:34 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2397 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2397 and cre_month=202003 and pos_type is null 
2020-03-23 18:18:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-23 18:18:34 -==> Parameters: 
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2397
2020-03-23 18:18:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2397 , return
2020-03-23 18:18:34 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-23 18:18:34 -==> Parameters: 2397(String)
2020-03-23 18:18:34 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-23 18:18:34 -==> Parameters: 2397(String), 2397(String), 0(String)
2020-03-23 18:18:34 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-23 18:18:34 -==> Parameters: 2397(String), 2397(String), 1(String)
2020-03-23 18:18:34 -<==      Total: 1
2020-03-23 18:18:34 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-23 18:18:34 -==> Parameters: 2397(String)
2020-03-23 18:18:34 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-23 18:18:34 -==> Parameters: 2397(String), 2397(String)
2020-03-23 18:18:34 -<==      Total: 1
2020-03-23 18:18:34 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2397 and pos_type='epos' 
2020-03-23 18:18:34 -==> Parameters: 
2020-03-23 18:18:34 -<==      Total: 1
2020-03-23 18:18:34 -耗时 : 34
2020-03-23 18:18:34 -<==      Total: 0
2020-03-23 18:18:34 -耗时 : 39
2020-03-23 18:18:34 -<==      Total: 1
2020-03-23 18:18:34 -耗时 : 43
2020-03-23 18:18:34 -<==      Total: 1
2020-03-23 18:18:34 -耗时 : 35
2020-03-23 18:18:34 -<==      Total: 1
2020-03-23 18:18:34 -耗时 : 47
