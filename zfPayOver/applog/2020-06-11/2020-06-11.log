2020-06-11 10:13:24 -Starting LongEcologicalApplication on PC-201905161910 with PID 18708 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-06-11 10:13:24 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-06-11 10:13:24 -No active profile set, falling back to default profiles: default
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'userMapper' and 'com.example.longecological.mapper.user.UserMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'userRoleMapper' and 'com.example.longecological.mapper.user.UserRoleMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:13:25 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-11 10:13:25 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-11 10:13:25 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-06-11 10:13:25 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-11 10:13:25 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-11 10:13:25 -Finished Spring Data repository scanning in 22ms. Found 0 repository interfaces.
2020-06-11 10:13:26 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$ce373c5d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-11 10:13:26 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c8bb20fd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-11 10:13:26 -Tomcat initialized with port(s): 8080 (http)
2020-06-11 10:13:26 -Initializing ProtocolHandler ["http-nio-8080"]
2020-06-11 10:13:26 -Starting service [Tomcat]
2020-06-11 10:13:26 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-06-11 10:13:26 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;D:\360Downloads\apache-maven-3.6.1\apache-maven-3.6.1\bin;"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;";;C:\Program Files\python;C:\Program Files\python\Scripts;;D:\BtSoft\panel\script;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-06-11 10:13:26 -Initializing Spring embedded WebApplicationContext
2020-06-11 10:13:26 -Root WebApplicationContext: initialization completed in 2405 ms
2020-06-11 10:13:26 -Filter xssFilter was not registered (disabled)
2020-06-11 10:13:27 -HikariPool-1 - Starting...
2020-06-11 10:13:27 -HikariPool-1 - Start completed.
2020-06-11 10:13:27 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-06-11 10:13:27 -HHH000412: Hibernate Core {5.3.7.Final}
2020-06-11 10:13:27 -HHH000206: hibernate.properties not found
2020-06-11 10:13:27 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-06-11 10:13:28 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-06-11 10:13:28 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-06-11 10:13:28 -Using default implementation for ThreadExecutor
2020-06-11 10:13:28 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-06-11 10:13:28 -Quartz Scheduler v.2.3.0 created.
2020-06-11 10:13:28 -RAMJobStore initialized.
2020-06-11 10:13:28 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-06-11 10:13:28 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-06-11 10:13:28 -Quartz scheduler version: 2.3.0
2020-06-11 10:13:28 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@375084c9
2020-06-11 10:13:29 -STAET TaskExecutorConfig
2020-06-11 10:13:29 -Initializing ExecutorService
2020-06-11 10:13:29 -Initializing ExecutorService 'getAsyncExecutor'
2020-06-11 10:13:29 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-06-11 10:13:29 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-06-11 10:13:30 -Initializing ExecutorService 'taskScheduler'
2020-06-11 10:13:30 -Starting Quartz Scheduler now
2020-06-11 10:13:30 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-06-11 10:13:30 -Starting ProtocolHandler ["http-nio-8080"]
2020-06-11 10:13:30 -Using a shared selector for servlet write/read
2020-06-11 10:13:30 -Tomcat started on port(s): 8080 (http) with context path ''
2020-06-11 10:13:30 -Started LongEcologicalApplication in 6.525 seconds (JVM running for 7.788)
2020-06-11 10:13:30 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-11 10:13:30 -Initializing Servlet 'dispatcherServlet'
2020-06-11 10:13:30 -Completed initialization in 17 ms
2020-06-11 10:13:31 -此处进行解密+验签+身份验证
2020-06-11 10:13:32 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"9AF97E7A316BA4E758941ABF81E3C152","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"2724|J6A99JNM316AA2YRN0L3WL2EGBPJR9VD"}
2020-06-11 10:13:32 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-11 10:13:32 -token值=======2724|J6A99JNM316AA2YRN0L3WL2EGBPJR9VD
2020-06-11 10:13:32 -Starting without optional epoll library
2020-06-11 10:13:32 -Starting without optional kqueue library
2020-06-11 10:13:32 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-06-11 10:13:32 -==> Parameters: 2724(String)
2020-06-11 10:13:32 -<==      Total: 1
2020-06-11 10:13:32 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-06-11 10:13:32 -==> Parameters: 26(String)
2020-06-11 10:13:32 -<==      Total: 1
2020-06-11 10:13:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 10:13:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 10:13:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 10:13:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 10:13:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 10:13:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 10:13:32 -耗时 : 709
2020-06-11 10:14:08 -此处进行解密+验签+身份验证
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-06-11 10:14:08 -此处进行解密+验签+身份验证
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:08 -此处进行解密+验签+身份验证
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-06-11 10:14:08 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-06-11 10:14:08 -==> Parameters: 2724(String)
2020-06-11 10:14:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-06-11 10:14:08 -<==      Total: 1
2020-06-11 10:14:08 -耗时 : 12
2020-06-11 10:14:08 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-06-11 10:14:08 -==> Parameters: 2724(String), 202006(String)
2020-06-11 10:14:08 -<==      Total: 0
2020-06-11 10:14:08 -耗时 : 10
2020-06-11 10:14:08 -此处进行解密+验签+身份验证
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-06-11 10:14:08 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-06-11 10:14:08 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-06-11 10:14:08 -==> Parameters: 2724(String), 202006(String)
2020-06-11 10:14:08 -==> Parameters: 2724(String), 202006(String)
2020-06-11 10:14:08 -<==      Total: 0
2020-06-11 10:14:08 -<==      Total: 0
2020-06-11 10:14:08 -耗时 : 32
2020-06-11 10:14:08 -耗时 : 8
2020-06-11 10:14:10 -此处进行解密+验签+身份验证
2020-06-11 10:14:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 10:14:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2724
2020-06-11 10:14:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2724 , return
2020-06-11 10:14:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:14:10 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:10 -==> Parameters: applyRateFlag(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:10 -==> Parameters: 0(Integer), 0(Integer), 2724(String), applyRateFlag(String)
2020-06-11 10:14:10 -<==    Updates: 1
2020-06-11 10:14:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 10:14:10 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:10 -==> Parameters: recallFlag(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:10 -==> Parameters: 0(Integer), 0(Integer), 2724(String), recallFlag(String)
2020-06-11 10:14:10 -<==    Updates: 1
2020-06-11 10:14:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 10:14:10 -==> Parameters: 
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:10 -==> Parameters: collegeFlag(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:10 -==> Parameters: 25(Integer), 25(Integer), 2724(String), collegeFlag(String)
2020-06-11 10:14:10 -<==    Updates: 1
2020-06-11 10:14:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:14:10 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:10 -==> Parameters: cardFlag(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:10 -==> Parameters: 0(Integer), 0(Integer), 2724(String), cardFlag(String)
2020-06-11 10:14:10 -<==    Updates: 1
2020-06-11 10:14:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:10 -==> Parameters: appImgFlag(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 1
2020-06-11 10:14:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:10 -==> Parameters: cashFlag(String), 2724(String)
2020-06-11 10:14:10 -<==      Total: 0
2020-06-11 10:14:10 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 10:14:10 -==> Parameters: 2724(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 10:14:10 -<==    Updates: 1
2020-06-11 10:14:10 -耗时 : 167
2020-06-11 10:14:12 -此处进行解密+验签+身份验证
2020-06-11 10:14:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-06-11 10:14:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-06-11 10:14:12 -==> Parameters: 2724(String)
2020-06-11 10:14:12 -此处进行解密+验签+身份验证
2020-06-11 10:14:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-06-11 10:14:12 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-06-11 10:14:12 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:12 -<==      Total: 0
2020-06-11 10:14:12 -耗时 : 424
2020-06-11 10:14:13 -<==      Total: 0
2020-06-11 10:14:13 -耗时 : 606
2020-06-11 10:14:15 -此处进行解密+验签+身份验证
2020-06-11 10:14:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:15 -此处进行解密+验签+身份验证
2020-06-11 10:14:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 10:14:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2724
2020-06-11 10:14:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2724 , return
2020-06-11 10:14:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:14:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 10:14:15 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 10:14:15 -==> Parameters: 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -耗时 : 7
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:15 -==> Parameters: applyRateFlag(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:15 -==> Parameters: 0(Integer), 0(Integer), 2724(String), applyRateFlag(String)
2020-06-11 10:14:15 -<==    Updates: 1
2020-06-11 10:14:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 10:14:15 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:15 -==> Parameters: recallFlag(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:15 -==> Parameters: 0(Integer), 0(Integer), 2724(String), recallFlag(String)
2020-06-11 10:14:15 -<==    Updates: 1
2020-06-11 10:14:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 10:14:15 -==> Parameters: 
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:15 -==> Parameters: collegeFlag(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:15 -==> Parameters: 25(Integer), 25(Integer), 2724(String), collegeFlag(String)
2020-06-11 10:14:15 -<==    Updates: 1
2020-06-11 10:14:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:14:15 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:15 -==> Parameters: cardFlag(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 1
2020-06-11 10:14:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:15 -==> Parameters: 0(Integer), 0(Integer), 2724(String), cardFlag(String)
2020-06-11 10:14:15 -<==    Updates: 1
2020-06-11 10:14:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:15 -==> Parameters: appImgFlag(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 2
2020-06-11 10:14:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:15 -==> Parameters: cashFlag(String), 2724(String)
2020-06-11 10:14:15 -<==      Total: 0
2020-06-11 10:14:15 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 10:14:15 -==> Parameters: 2724(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 10:14:15 -<==    Updates: 1
2020-06-11 10:14:15 -耗时 : 148
2020-06-11 10:14:19 -此处进行解密+验签+身份验证
2020-06-11 10:14:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-06-11 10:14:19 -==> Parameters: 2724(String)
2020-06-11 10:14:19 -此处进行解密+验签+身份验证
2020-06-11 10:14:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-06-11 10:14:19 -==> Parameters: 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-06-11 10:14:19 -==> Parameters: 2724(String), 2724(String), 202006(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-11 10:14:19 -==> Parameters: 2724(String), 2724(String), 20200512(String), 20200611(String), 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-11 10:14:19 -==> Parameters: 2724(String), 20200412(String), 2724(String), 20200412(String), 20200611(String), 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-06-11 10:14:19 -==> Parameters: 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -耗时 : 134
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-06-11 10:14:19 -==> Parameters: 2724(String), 2724(String), 202006(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-11 10:14:19 -==> Parameters: 2724(String), 2724(String), 20200512(String), 20200611(String), 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-11 10:14:19 -==> Parameters: 2724(String), 20200412(String), 2724(String), 20200412(String), 20200611(String), 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-06-11 10:14:19 -==> Parameters: 2724(String)
2020-06-11 10:14:19 -<==      Total: 1
2020-06-11 10:14:19 -耗时 : 285
2020-06-11 10:14:21 -此处进行解密+验签+身份验证
2020-06-11 10:14:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:14:21 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.trade_status=? AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-11 10:14:21 -==> Parameters: 2724(String), null
2020-06-11 10:14:21 -<==      Total: 0
2020-06-11 10:14:21 -耗时 : 72
2020-06-11 10:14:23 -此处进行解密+验签+身份验证
2020-06-11 10:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-06-11 10:14:23 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-06-11 10:14:23 -==> Parameters: 2724(String)
2020-06-11 10:14:23 -<==      Total: 1
2020-06-11 10:14:23 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-06-11 10:14:23 -==> Parameters: 2724(String), 2724(String), 202006(String)
2020-06-11 10:14:23 -<==      Total: 1
2020-06-11 10:14:23 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-11 10:14:23 -==> Parameters: 2724(String), 2724(String), 20200512(String), 20200611(String), 2724(String)
2020-06-11 10:14:24 -<==      Total: 1
2020-06-11 10:14:24 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-11 10:14:24 -==> Parameters: 2724(String), 20200412(String), 2724(String), 20200412(String), 20200611(String), 2724(String)
2020-06-11 10:14:24 -<==      Total: 1
2020-06-11 10:14:24 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-06-11 10:14:24 -==> Parameters: 2724(String)
2020-06-11 10:14:24 -<==      Total: 1
2020-06-11 10:14:24 -耗时 : 46
2020-06-11 10:14:29 -此处进行解密+验签+身份验证
2020-06-11 10:14:29 -此处进行解密+验签+身份验证
2020-06-11 10:14:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2724
2020-06-11 10:14:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2724 , return
2020-06-11 10:14:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 10:14:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2724
2020-06-11 10:14:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 10:14:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2724 , return
2020-06-11 10:14:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 10:14:29 -==> Parameters: 2724(String)
2020-06-11 10:14:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:14:29 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -耗时 : 3
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:29 -==> Parameters: applyRateFlag(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:29 -==> Parameters: 0(Integer), 0(Integer), 2724(String), applyRateFlag(String)
2020-06-11 10:14:29 -<==    Updates: 1
2020-06-11 10:14:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 10:14:29 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:29 -==> Parameters: recallFlag(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:29 -==> Parameters: 0(Integer), 0(Integer), 2724(String), recallFlag(String)
2020-06-11 10:14:29 -<==    Updates: 1
2020-06-11 10:14:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 10:14:29 -==> Parameters: 
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:29 -==> Parameters: collegeFlag(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:29 -==> Parameters: 25(Integer), 25(Integer), 2724(String), collegeFlag(String)
2020-06-11 10:14:29 -<==    Updates: 1
2020-06-11 10:14:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:14:29 -==> Parameters: 2724(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:29 -==> Parameters: cardFlag(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 1
2020-06-11 10:14:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:14:29 -==> Parameters: 0(Integer), 0(Integer), 2724(String), cardFlag(String)
2020-06-11 10:14:29 -<==    Updates: 1
2020-06-11 10:14:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:29 -==> Parameters: appImgFlag(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 3
2020-06-11 10:14:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:14:29 -==> Parameters: cashFlag(String), 2724(String)
2020-06-11 10:14:29 -<==      Total: 0
2020-06-11 10:14:29 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 10:14:29 -==> Parameters: 2724(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 10:14:29 -<==    Updates: 1
2020-06-11 10:14:29 -耗时 : 145
2020-06-11 10:14:33 -此处进行解密+验签+身份验证
2020-06-11 10:14:33 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-06-11 10:14:33 -token值=======2724|J6A99JNM316AA2YRN0L3WL2EGBPJR9VD
2020-06-11 10:14:33 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-06-11 10:14:33 -==> Parameters: null, 2724(String)
2020-06-11 10:14:33 -<==    Updates: 1
2020-06-11 10:14:33 -耗时 : 17
2020-06-11 10:14:45 -此处进行解密+验签+身份验证
2020-06-11 10:14:46 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"4A002E600C8562D72CF66528D9C36723","device_no":"1.1.7","device_type":"android","sys_user_account":"13322990711"}
2020-06-11 10:14:46 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-11 10:14:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-06-11 10:14:46 -==> Parameters: 13322990711(String)
2020-06-11 10:14:46 -<==      Total: 1
2020-06-11 10:14:46 -耗时 : 29
2020-06-11 10:15:03 -此处进行解密+验签+身份验证
2020-06-11 10:15:03 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"4A002E600C8562D72CF66528D9C36723","device_no":"1.1.7","device_type":"android","sys_user_account":"13322990711"}
2020-06-11 10:15:03 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-11 10:15:03 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-06-11 10:15:03 -==> Parameters: 13322990711(String)
2020-06-11 10:15:03 -<==      Total: 1
2020-06-11 10:15:03 -耗时 : 5
2020-06-11 10:15:14 -此处进行解密+验签+身份验证
2020-06-11 10:15:14 -解密：{"version_no":"","login_password":"3A300C48B47B714D9821DC473304AA84","login_type":"account","sign":"5B44BD04493A6783CD2DDC0BA52375D9","device_no":"1.1.7","device_type":"android","sys_user_account":"13322990711"}
2020-06-11 10:15:14 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-11 10:15:14 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-06-11 10:15:14 -==> Parameters: 13322990711(String)
2020-06-11 10:15:14 -<==      Total: 1
2020-06-11 10:15:14 -耗时 : 4
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"1CD57555E0DD5A6F58230E2777AD0726","device_no":"1.1.7","device_type":"android","sys_user_account":"13322990711"}
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-11 10:15:30 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-06-11 10:15:30 -==> Parameters: 13322990711(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-06-11 10:15:30 -==> Parameters: android(String), 1.1.7(String), (String), null, 192.168.191.1(String), 20200611(String), 101530(String), 181(Integer)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-06-11 10:15:30 -==> Parameters: 26(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 10:15:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 10:15:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 10:15:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 10:15:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 10:15:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 10:15:30 -耗时 : 32
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 10:15:30 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 10:15:30 -==> Parameters: 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -耗时 : 2
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 10:15:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:15:30 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 2
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-06-11 10:15:30 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-06-11 10:15:30 -==> Parameters: 181(String)
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:30 -<==    Updates: 2
2020-06-11 10:15:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 10:15:30 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 2
2020-06-11 10:15:30 -耗时 : 7
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -解密：
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:30 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-06-11 10:15:30 -==> Parameters: 
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 10:15:30 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-11 10:15:30 -==> Parameters: 01(String), 01(String)
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 10:15:30 -<==      Total: 3
2020-06-11 10:15:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:15:30 -耗时 : 8
2020-06-11 10:15:30 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 10:15:30 -==> Parameters: 
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 10:15:30 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 4
2020-06-11 10:15:30 -耗时 : 13
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 10:15:30 -<==      Total: 2
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:15:30 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 10:15:30 -<==    Updates: 2
2020-06-11 10:15:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 10:15:30 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -此处进行解密+验签+身份验证
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 10:15:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 10:15:30 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 10:15:30 -==> Parameters: 181(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 10:15:30 -==> Parameters: 
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -耗时 : 2
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 0
2020-06-11 10:15:30 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 10:15:30 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -耗时 : 85
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:15:30 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 1
2020-06-11 10:15:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 2
2020-06-11 10:15:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:30 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 10:15:30 -<==      Total: 0
2020-06-11 10:15:30 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 10:15:30 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 10:15:30 -<==    Updates: 1
2020-06-11 10:15:30 -耗时 : 84
2020-06-11 10:15:41 -此处进行解密+验签+身份验证
2020-06-11 10:15:41 -此处进行解密+验签+身份验证
2020-06-11 10:15:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-06-11 10:15:41 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-06-11 10:15:41 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-06-11 10:15:41 -==> Parameters: 181(String)
2020-06-11 10:15:41 -<==      Total: 1
2020-06-11 10:15:41 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-06-11 10:15:41 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:41 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-06-11 10:15:41 -==> Parameters: 202006(String), 181(String)
2020-06-11 10:15:41 -<==      Total: 1
2020-06-11 10:15:41 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-06-11 10:15:41 -==> Parameters: 181(String)
2020-06-11 10:15:41 -<==      Total: 0
2020-06-11 10:15:41 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-06-11 10:15:41 -==> Parameters: 202006(String), 181(String)
2020-06-11 10:15:41 -<==      Total: 1
2020-06-11 10:15:41 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-06-11 10:15:41 -==> Parameters: 181(String)
2020-06-11 10:15:41 -<==      Total: 0
2020-06-11 10:15:41 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-06-11 10:15:41 -==> Parameters: 202006(String), 181(String)
2020-06-11 10:15:41 -<==      Total: 1
2020-06-11 10:15:41 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-06-11 10:15:41 -==> Parameters: 181(String)
2020-06-11 10:15:41 -<==      Total: 0
2020-06-11 10:15:41 -耗时 : 38
2020-06-11 10:15:42 -此处进行解密+验签+身份验证
2020-06-11 10:15:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 10:15:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 10:15:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 10:15:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:15:42 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:42 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 2
2020-06-11 10:15:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:42 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-06-11 10:15:42 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:42 -<==    Updates: 2
2020-06-11 10:15:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 10:15:42 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:42 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:42 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 10:15:42 -<==    Updates: 1
2020-06-11 10:15:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 10:15:42 -==> Parameters: 
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:42 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:42 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 10:15:42 -<==    Updates: 1
2020-06-11 10:15:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 10:15:42 -==> Parameters: 181(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:42 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 10:15:42 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 10:15:42 -<==    Updates: 1
2020-06-11 10:15:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:42 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 3
2020-06-11 10:15:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 10:15:42 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 10:15:42 -<==      Total: 0
2020-06-11 10:15:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 10:15:42 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 10:15:42 -<==    Updates: 1
2020-06-11 10:15:42 -耗时 : 348
2020-06-11 10:15:42 -<==      Total: 1
2020-06-11 10:15:42 -耗时 : 1612
2020-06-11 10:15:45 -此处进行解密+验签+身份验证
2020-06-11 10:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:45 -此处进行解密+验签+身份验证
2020-06-11 10:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-06-11 10:15:45 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-06-11 10:15:45 -==> Parameters: 181(String)
2020-06-11 10:15:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-06-11 10:15:45 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-06-11 10:15:45 -==> Parameters: 181(String)
2020-06-11 10:15:45 -<==      Total: 1
2020-06-11 10:15:45 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-06-11 10:15:45 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-11 10:15:45 -<==      Total: 1
2020-06-11 10:15:45 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-06-11 10:15:45 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-11 10:15:45 -<==      Total: 1
2020-06-11 10:15:45 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-11 10:15:45 -==> Parameters: 181(String), 181(String), 20200512(String), 20200611(String), 181(String)
2020-06-11 10:15:46 -<==      Total: 1
2020-06-11 10:15:46 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-11 10:15:46 -==> Parameters: 181(String), 181(String), 20200512(String), 20200611(String), 181(String)
2020-06-11 10:15:47 -<==      Total: 1
2020-06-11 10:15:47 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-11 10:15:47 -==> Parameters: 181(String), 20200412(String), 181(String), 20200412(String), 20200611(String), 181(String)
2020-06-11 10:15:48 -<==      Total: 1
2020-06-11 10:15:48 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-11 10:15:48 -==> Parameters: 181(String), 20200412(String), 181(String), 20200412(String), 20200611(String), 181(String)
2020-06-11 10:15:48 -<==      Total: 1
2020-06-11 10:15:48 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-06-11 10:15:48 -==> Parameters: 181(String)
2020-06-11 10:15:48 -<==      Total: 1
2020-06-11 10:15:48 -耗时 : 2721
2020-06-11 10:15:49 -<==      Total: 1
2020-06-11 10:15:49 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-06-11 10:15:49 -==> Parameters: 181(String)
2020-06-11 10:15:49 -<==      Total: 1
2020-06-11 10:15:49 -耗时 : 3560
2020-06-11 10:15:52 -此处进行解密+验签+身份验证
2020-06-11 10:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:15:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:15:52 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.trade_status=? AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-11 10:15:52 -==> Parameters: 181(String), null
2020-06-11 10:15:52 -<==      Total: 0
2020-06-11 10:15:52 -耗时 : 99
2020-06-11 10:16:02 -此处进行解密+验签+身份验证
2020-06-11 10:16:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:16:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:16:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:16:02 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.trade_status=? AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-11 10:16:02 -==> Parameters: 181(String), null
2020-06-11 10:16:02 -<==      Total: 0
2020-06-11 10:16:02 -耗时 : 15
2020-06-11 10:16:06 -此处进行解密+验签+身份验证
2020-06-11 10:16:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:16:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:16:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-06-11 10:16:06 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-06-11 10:16:06 -==> Parameters: 181(String)
2020-06-11 10:16:06 -<==      Total: 1
2020-06-11 10:16:06 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-06-11 10:16:06 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-11 10:16:06 -<==      Total: 1
2020-06-11 10:16:06 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-11 10:16:06 -==> Parameters: 181(String), 181(String), 20200512(String), 20200611(String), 181(String)
2020-06-11 10:16:07 -<==      Total: 1
2020-06-11 10:16:07 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-11 10:16:07 -==> Parameters: 181(String), 20200412(String), 181(String), 20200412(String), 20200611(String), 181(String)
2020-06-11 10:16:07 -<==      Total: 1
2020-06-11 10:16:07 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-06-11 10:16:07 -==> Parameters: 181(String)
2020-06-11 10:16:07 -<==      Total: 1
2020-06-11 10:16:07 -耗时 : 1012
2020-06-11 10:16:09 -此处进行解密+验签+身份验证
2020-06-11 10:16:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:16:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:16:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-06-11 10:16:09 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.trade_status=? AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-06-11 10:16:09 -==> Parameters: 181(String), null
2020-06-11 10:16:09 -<==      Total: 0
2020-06-11 10:16:09 -耗时 : 134
2020-06-11 10:16:14 -此处进行解密+验签+身份验证
2020-06-11 10:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:16:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-06-11 10:16:14 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.trade_status=? AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-06-11 10:16:14 -==> Parameters: 181(String), null
2020-06-11 10:16:14 -<==      Total: 0
2020-06-11 10:16:14 -耗时 : 40
2020-06-11 10:22:43 -此处进行解密+验签+身份验证
2020-06-11 10:22:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:22:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:22:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getDormantMerchantMposList
2020-06-11 10:22:43 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_num>0) ORDER BY t.id desc limit 0,10 
2020-06-11 10:22:43 -==> Parameters: 181(String), 20200412(String), 181(String), 20200412(String), 20200611(String), 181(String)
2020-06-11 10:22:44 -<==      Total: 10
2020-06-11 10:22:44 -耗时 : 995
2020-06-11 10:22:48 -此处进行解密+验签+身份验证
2020-06-11 10:22:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:22:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:22:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-06-11 10:22:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 10:22:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 10:22:48 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-06-11 10:22:48 -==> Parameters: 181(String), 02(String)
2020-06-11 10:22:48 -<==      Total: 1
2020-06-11 10:22:48 -==>  Preparing: select * from t_sys_pos_policy_define where policy_type=3 and manager_id=? and id in(select policy_id from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1) order by policy_quantity asc 
2020-06-11 10:22:48 -==> Parameters: 26(String), M351846173368(String)
2020-06-11 10:22:48 -<==      Total: 1
2020-06-11 10:22:48 -耗时 : 36
2020-06-11 10:22:54 -此处进行解密+验签+身份验证
2020-06-11 10:22:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:22:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:22:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getActiveMerchantMposList
2020-06-11 10:22:54 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance>=10 AND t2.merchant_num>=2) ORDER BY t.id desc limit 0,10 
2020-06-11 10:22:54 -==> Parameters: 181(String), 181(String), 20200512(String), 20200611(String), 181(String)
2020-06-11 10:22:55 -<==      Total: 0
2020-06-11 10:22:55 -耗时 : 935
2020-06-11 10:22:57 -此处进行解密+验签+身份验证
2020-06-11 10:22:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:22:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:22:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getExcellentMerchantMposList
2020-06-11 10:22:57 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance >= 50000 AND t2.cre_month = ? ) ORDER BY t.id desc limit 0,10 
2020-06-11 10:22:57 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-11 10:22:57 -<==      Total: 0
2020-06-11 10:22:57 -耗时 : 171
2020-06-11 10:27:12 -此处进行解密+验签+身份验证
2020-06-11 10:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-06-11 10:27:12 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.trade_status=? AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-06-11 10:27:12 -==> Parameters: 181(String), null
2020-06-11 10:27:12 -<==      Total: 0
2020-06-11 10:27:12 -耗时 : 35
2020-06-11 10:44:18 -Starting LongEcologicalApplication on PC-201905161910 with PID 13800 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-06-11 10:44:18 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-06-11 10:44:18 -No active profile set, falling back to default profiles: default
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'userMapper' and 'com.example.longecological.mapper.user.UserMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'userRoleMapper' and 'com.example.longecological.mapper.user.UserRoleMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-11 10:44:19 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-11 10:44:19 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-11 10:44:19 -Finished Spring Data repository scanning in 77ms. Found 0 repository interfaces.
2020-06-11 10:44:19 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-11 10:44:19 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-11 10:44:19 -Finished Spring Data repository scanning in 26ms. Found 0 repository interfaces.
2020-06-11 10:44:20 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$47c7938b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-11 10:44:20 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$424b782b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-11 10:44:20 -Tomcat initialized with port(s): 8080 (http)
2020-06-11 10:44:20 -Initializing ProtocolHandler ["http-nio-8080"]
2020-06-11 10:44:20 -Starting service [Tomcat]
2020-06-11 10:44:20 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-06-11 10:44:20 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;D:\360Downloads\apache-maven-3.6.1\apache-maven-3.6.1\bin;"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;";;C:\Program Files\python;C:\Program Files\python\Scripts;;D:\BtSoft\panel\script;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-06-11 10:44:21 -Initializing Spring embedded WebApplicationContext
2020-06-11 10:44:21 -Root WebApplicationContext: initialization completed in 2485 ms
2020-06-11 10:44:21 -Filter xssFilter was not registered (disabled)
2020-06-11 10:44:21 -HikariPool-1 - Starting...
2020-06-11 10:44:21 -HikariPool-1 - Start completed.
2020-06-11 10:44:21 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-06-11 10:44:21 -HHH000412: Hibernate Core {5.3.7.Final}
2020-06-11 10:44:21 -HHH000206: hibernate.properties not found
2020-06-11 10:44:21 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-06-11 10:44:22 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-06-11 10:44:22 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-06-11 10:44:22 -Using default implementation for ThreadExecutor
2020-06-11 10:44:22 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-06-11 10:44:22 -Quartz Scheduler v.2.3.0 created.
2020-06-11 10:44:22 -RAMJobStore initialized.
2020-06-11 10:44:22 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-06-11 10:44:22 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-06-11 10:44:22 -Quartz scheduler version: 2.3.0
2020-06-11 10:44:22 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7e0f9528
2020-06-11 10:44:23 -STAET TaskExecutorConfig
2020-06-11 10:44:23 -Initializing ExecutorService
2020-06-11 10:44:23 -Initializing ExecutorService 'getAsyncExecutor'
2020-06-11 10:44:23 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-06-11 10:44:24 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-06-11 10:44:24 -Initializing ExecutorService 'taskScheduler'
2020-06-11 10:44:24 -Starting Quartz Scheduler now
2020-06-11 10:44:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-06-11 10:44:24 -Starting ProtocolHandler ["http-nio-8080"]
2020-06-11 10:44:24 -Using a shared selector for servlet write/read
2020-06-11 10:44:24 -Tomcat started on port(s): 8080 (http) with context path ''
2020-06-11 10:44:24 -Started LongEcologicalApplication in 6.644 seconds (JVM running for 7.881)
2020-06-11 10:45:22 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-11 10:45:22 -Initializing Servlet 'dispatcherServlet'
2020-06-11 10:45:22 -Completed initialization in 15 ms
2020-06-11 10:45:23 -此处进行解密+验签+身份验证
2020-06-11 10:45:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:45:23 -Starting without optional epoll library
2020-06-11 10:45:23 -Starting without optional kqueue library
2020-06-11 10:45:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:45:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-06-11 10:45:23 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-06-11 10:45:23 -==> Parameters: 181(String)
2020-06-11 10:45:23 -<==      Total: 10
2020-06-11 10:45:23 -耗时 : 125
2020-06-11 10:45:30 -此处进行解密+验签+身份验证
2020-06-11 10:45:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:45:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:45:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:45:30 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-11 10:45:30 -==> Parameters: 181(String)
2020-06-11 10:45:30 -<==      Total: 10
2020-06-11 10:45:30 -耗时 : 25
2020-06-11 10:45:35 -此处进行解密+验签+身份验证
2020-06-11 10:45:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:45:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:45:35 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-06-11 10:45:35 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-06-11 10:45:35 -==> Parameters: 181(String), 000006026221540190(String)
2020-06-11 10:45:35 -<==      Total: 1
2020-06-11 10:45:35 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-06-11 10:45:35 -==> Parameters: 000006026221540190(String)
2020-06-11 10:45:35 -<==      Total: 1
2020-06-11 10:45:35 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-06-11 10:45:35 -==> Parameters: 000006026221540190(String)
2020-06-11 10:45:35 -<==      Total: 1
2020-06-11 10:45:35 -==>  Preparing: select pos_type from t_sys_traditional_pos_info where sn=? 
2020-06-11 10:45:35 -==> Parameters: 000006026221540190(String)
2020-06-11 10:45:35 -<==      Total: 1
2020-06-11 10:45:35 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-06-11 10:45:35 -==> Parameters: 000006026221540190(String), 181(String)
2020-06-11 10:45:35 -<==      Total: 1
2020-06-11 10:45:35 -耗时 : 86
2020-06-11 10:45:40 -此处进行解密+验签+身份验证
2020-06-11 10:45:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:45:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:45:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:45:40 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-06-11 10:45:40 -==> Parameters: 181(String), 26980(String)
2020-06-11 10:45:40 -<==      Total: 10
2020-06-11 10:45:40 -耗时 : 3
2020-06-11 10:45:43 -此处进行解密+验签+身份验证
2020-06-11 10:45:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:45:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:45:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-06-11 10:45:43 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-06-11 10:45:43 -==> Parameters: 181(String), 000006026221540190(String)
2020-06-11 10:45:43 -<==      Total: 1
2020-06-11 10:45:43 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-06-11 10:45:43 -==> Parameters: 000006026221540190(String)
2020-06-11 10:45:43 -<==      Total: 1
2020-06-11 10:45:43 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-06-11 10:45:43 -==> Parameters: 000006026221540190(String)
2020-06-11 10:45:43 -<==      Total: 1
2020-06-11 10:45:43 -==>  Preparing: select pos_type from t_sys_traditional_pos_info where sn=? 
2020-06-11 10:45:43 -==> Parameters: 000006026221540190(String)
2020-06-11 10:45:43 -<==      Total: 1
2020-06-11 10:45:43 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-06-11 10:45:43 -==> Parameters: 000006026221540190(String), 181(String)
2020-06-11 10:45:43 -<==      Total: 1
2020-06-11 10:45:43 -耗时 : 25
2020-06-11 10:45:51 -此处进行解密+验签+身份验证
2020-06-11 10:45:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:45:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:45:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-06-11 10:45:51 -==>  Preparing: select * from ( select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? union all select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_mpos_share_benefit_record where user_id=? and sn=? ) tb order by trans_time desc 
2020-06-11 10:45:51 -==> Parameters: 181(String), 000006026221540190(String), 181(String), 000006026221540190(String)
2020-06-11 10:46:00 -此处进行解密+验签+身份验证
2020-06-11 10:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:46:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-06-11 10:46:00 -==>  Preparing: select * from ( select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? union all select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_mpos_share_benefit_record where user_id=? and sn=? ) tb order by trans_time desc 
2020-06-11 10:46:00 -==> Parameters: 181(String), 000006026221540190(String), 181(String), 000006026221540190(String)
2020-06-11 10:46:01 -<==      Total: 0
2020-06-11 10:46:01 -耗时 : 10166
2020-06-11 10:46:10 -<==      Total: 0
2020-06-11 10:46:10 -耗时 : 9624
2020-06-11 10:47:18 -此处进行解密+验签+身份验证
2020-06-11 10:47:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:47:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:47:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:47:18 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-06-11 10:47:18 -==> Parameters: 181(String), 26970(String)
2020-06-11 10:47:18 -<==      Total: 10
2020-06-11 10:47:18 -耗时 : 19
2020-06-11 10:47:30 -此处进行解密+验签+身份验证
2020-06-11 10:47:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:47:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:47:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:47:30 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-06-11 10:47:30 -==> Parameters: 181(String)
2020-06-11 10:47:30 -<==      Total: 10
2020-06-11 10:47:30 -耗时 : 16
2020-06-11 10:47:47 -此处进行解密+验签+身份验证
2020-06-11 10:47:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:47:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:47:47 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 10:47:47 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-11 10:47:47 -==> Parameters: 181(String)
2020-06-11 10:47:47 -<==      Total: 10
2020-06-11 10:47:47 -耗时 : 18
2020-06-11 10:47:50 -此处进行解密+验签+身份验证
2020-06-11 10:47:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:47:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:47:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-06-11 10:47:50 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-06-11 10:47:50 -==> Parameters: 181(String), 000006026221540189(String)
2020-06-11 10:47:50 -<==      Total: 1
2020-06-11 10:47:50 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-06-11 10:47:50 -==> Parameters: 000006026221540189(String)
2020-06-11 10:47:50 -<==      Total: 1
2020-06-11 10:47:50 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-06-11 10:47:50 -==> Parameters: 000006026221540189(String)
2020-06-11 10:47:50 -<==      Total: 1
2020-06-11 10:47:50 -==>  Preparing: select pos_type from t_sys_traditional_pos_info where sn=? 
2020-06-11 10:47:50 -==> Parameters: 000006026221540189(String)
2020-06-11 10:47:50 -<==      Total: 1
2020-06-11 10:47:50 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-06-11 10:47:50 -==> Parameters: 000006026221540189(String), 181(String)
2020-06-11 10:47:50 -<==      Total: 1
2020-06-11 10:47:50 -耗时 : 60
2020-06-11 10:47:54 -此处进行解密+验签+身份验证
2020-06-11 10:47:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 10:47:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 10:47:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-06-11 10:47:54 -==>  Preparing: select * from ( select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? union all select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_mpos_share_benefit_record where user_id=? and sn=? ) tb order by trans_time desc 
2020-06-11 10:47:54 -==> Parameters: 181(String), 000006026221540189(String), 181(String), 000006026221540189(String)
2020-06-11 10:48:03 -<==      Total: 0
2020-06-11 10:48:03 -耗时 : 9552
2020-06-11 15:21:31 -此处进行解密+验签+身份验证
2020-06-11 15:21:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:21:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:21:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-11 15:21:31 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-06-11 15:21:31 -==> Parameters: 181(String), 26980(String)
2020-06-11 15:21:31 -<==      Total: 10
2020-06-11 15:21:31 -耗时 : 23
2020-06-11 15:21:46 -此处进行解密+验签+身份验证
2020-06-11 15:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 15:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 15:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 15:21:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:21:46 -==> Parameters: 181(String), 181(String)
2020-06-11 15:21:46 -此处进行解密+验签+身份验证
2020-06-11 15:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:21:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 15:21:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 15:21:46 -==> Parameters: 181(String)
2020-06-11 15:21:46 -<==      Total: 1
2020-06-11 15:21:46 -耗时 : 38
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:21:47 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 2
2020-06-11 15:21:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:21:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 15:21:47 -<==    Updates: 2
2020-06-11 15:21:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 15:21:47 -==> Parameters: 181(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:21:47 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:21:47 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 15:21:47 -<==    Updates: 1
2020-06-11 15:21:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 15:21:47 -==> Parameters: 
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:21:47 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:21:47 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 15:21:47 -<==    Updates: 1
2020-06-11 15:21:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:21:47 -==> Parameters: 181(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:21:47 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 1
2020-06-11 15:21:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:21:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 15:21:47 -<==    Updates: 1
2020-06-11 15:21:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:21:47 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 4
2020-06-11 15:21:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:21:47 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 15:21:47 -<==      Total: 0
2020-06-11 15:21:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 15:21:47 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 15:21:47 -<==    Updates: 1
2020-06-11 15:21:47 -耗时 : 227
2020-06-11 15:22:03 -此处进行解密+验签+身份验证
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:22:03 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-06-11 15:22:03 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-06-11 15:22:03 -==> Parameters: 181(String)
2020-06-11 15:22:03 -<==      Total: 1
2020-06-11 15:22:03 -耗时 : 8
2020-06-11 15:22:03 -此处进行解密+验签+身份验证
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:22:03 -此处进行解密+验签+身份验证
2020-06-11 15:22:03 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:22:03 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-06-11 15:22:03 -==> Parameters: 181(String), 202006(String)
2020-06-11 15:22:03 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-06-11 15:22:03 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-06-11 15:22:03 -==> Parameters: 181(String), 202006(String)
2020-06-11 15:22:03 -<==      Total: 1
2020-06-11 15:22:03 -耗时 : 12
2020-06-11 15:22:03 -此处进行解密+验签+身份验证
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:22:03 -<==      Total: 1
2020-06-11 15:22:03 -耗时 : 9
2020-06-11 15:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:22:03 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-06-11 15:22:03 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-06-11 15:22:03 -==> Parameters: 181(String), 202006(String)
2020-06-11 15:22:03 -<==      Total: 1
2020-06-11 15:22:03 -耗时 : 6
2020-06-11 15:24:20 -此处进行解密+验签+身份验证
2020-06-11 15:24:20 -此处进行解密+验签+身份验证
2020-06-11 15:24:20 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-06-11 15:24:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-06-11 15:24:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-06-11 15:24:20 -耗时 : 20
2020-06-11 15:24:21 -解密：
2020-06-11 15:24:21 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-11 15:24:21 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-11 15:24:21 -==> Parameters: 04(String), 04(String)
2020-06-11 15:24:21 -<==      Total: 1
2020-06-11 15:24:21 -耗时 : 11
2020-06-11 15:24:21 -此处进行解密+验签+身份验证
2020-06-11 15:24:21 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"7EF78844159CDED37ADDD9D77098A410","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|UFSOKKJQ0MVL79LAUCTC8O1660RNTCAG"}
2020-06-11 15:24:21 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-11 15:24:21 -token值=======181|UFSOKKJQ0MVL79LAUCTC8O1660RNTCAG
2020-06-11 15:24:21 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-06-11 15:24:21 -==> Parameters: 181(String)
2020-06-11 15:24:21 -<==      Total: 1
2020-06-11 15:24:21 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-06-11 15:24:21 -==> Parameters: 26(String)
2020-06-11 15:24:21 -<==      Total: 1
2020-06-11 15:24:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 15:24:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 15:24:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 15:24:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 15:24:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-11 15:24:21 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-11 15:24:21 -耗时 : 40
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 15:24:26 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 15:24:26 -==> Parameters: 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -耗时 : 2
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -解密：
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-11 15:24:26 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-11 15:24:26 -==> Parameters: 01(String), 01(String)
2020-06-11 15:24:26 -<==      Total: 4
2020-06-11 15:24:26 -耗时 : 2
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 15:24:26 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-06-11 15:24:26 -==> Parameters: 181(String)
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 15:24:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:26 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 2
2020-06-11 15:24:26 -耗时 : 12
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 2
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 15:24:26 -<==    Updates: 2
2020-06-11 15:24:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 15:24:26 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 15:24:26 -==> Parameters: 
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:26 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 15:24:26 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 15:24:26 -==> Parameters: 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -耗时 : 2
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -此处进行解密+验签+身份验证
2020-06-11 15:24:26 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:26 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:26 -==> Parameters: 
2020-06-11 15:24:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 15:24:26 -<==      Total: 5
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 15:24:26 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 15:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 15:24:26 -<==      Total: 3
2020-06-11 15:24:26 -耗时 : 9
2020-06-11 15:24:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:26 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 0
2020-06-11 15:24:26 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 15:24:26 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -耗时 : 111
2020-06-11 15:24:26 -<==      Total: 2
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 15:24:26 -<==    Updates: 2
2020-06-11 15:24:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 15:24:26 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 15:24:26 -==> Parameters: 
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:26 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 1
2020-06-11 15:24:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 6
2020-06-11 15:24:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:26 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 15:24:26 -<==      Total: 0
2020-06-11 15:24:26 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 15:24:26 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 15:24:26 -<==    Updates: 1
2020-06-11 15:24:26 -耗时 : 94
2020-06-11 15:24:34 -此处进行解密+验签+身份验证
2020-06-11 15:24:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:34 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-11 15:24:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-11 15:24:34 -==> Parameters: 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -耗时 : 4
2020-06-11 15:24:34 -此处进行解密+验签+身份验证
2020-06-11 15:24:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 15:24:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 15:24:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 15:24:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:34 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:34 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 2
2020-06-11 15:24:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:34 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 15:24:34 -<==    Updates: 2
2020-06-11 15:24:34 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 15:24:34 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:34 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:34 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 15:24:34 -<==    Updates: 1
2020-06-11 15:24:34 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 15:24:34 -==> Parameters: 
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:34 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:34 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 15:24:34 -<==    Updates: 1
2020-06-11 15:24:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:34 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:34 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 1
2020-06-11 15:24:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:34 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 15:24:34 -<==    Updates: 1
2020-06-11 15:24:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:34 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 7
2020-06-11 15:24:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:34 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 15:24:34 -<==      Total: 0
2020-06-11 15:24:34 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 15:24:34 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 15:24:34 -<==    Updates: 1
2020-06-11 15:24:34 -耗时 : 86
2020-06-11 15:24:36 -此处进行解密+验签+身份验证
2020-06-11 15:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:36 -此处进行解密+验签+身份验证
2020-06-11 15:24:36 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-06-11 15:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:36 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-06-11 15:24:36 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-06-11 15:24:36 -==> Parameters: 181(String)
2020-06-11 15:24:36 -<==      Total: 1
2020-06-11 15:24:36 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-06-11 15:24:36 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:36 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-06-11 15:24:36 -==> Parameters: 202006(String), 181(String)
2020-06-11 15:24:36 -<==      Total: 1
2020-06-11 15:24:36 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-06-11 15:24:36 -==> Parameters: 181(String)
2020-06-11 15:24:36 -<==      Total: 0
2020-06-11 15:24:36 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-06-11 15:24:36 -==> Parameters: 202006(String), 181(String)
2020-06-11 15:24:36 -<==      Total: 1
2020-06-11 15:24:36 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-06-11 15:24:36 -==> Parameters: 181(String)
2020-06-11 15:24:36 -<==      Total: 0
2020-06-11 15:24:36 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-06-11 15:24:36 -==> Parameters: 202006(String), 181(String)
2020-06-11 15:24:36 -<==      Total: 1
2020-06-11 15:24:36 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-06-11 15:24:36 -==> Parameters: 181(String)
2020-06-11 15:24:36 -<==      Total: 0
2020-06-11 15:24:36 -耗时 : 114
2020-06-11 15:24:37 -此处进行解密+验签+身份验证
2020-06-11 15:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-11 15:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-11 15:24:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-11 15:24:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:37 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:38 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 2
2020-06-11 15:24:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:38 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-11 15:24:38 -<==    Updates: 2
2020-06-11 15:24:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-11 15:24:38 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:38 -==> Parameters: recallFlag(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:38 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-11 15:24:38 -<==    Updates: 1
2020-06-11 15:24:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-11 15:24:38 -==> Parameters: 
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:38 -==> Parameters: collegeFlag(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:38 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-11 15:24:38 -<==    Updates: 1
2020-06-11 15:24:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-11 15:24:38 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:38 -==> Parameters: cardFlag(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-11 15:24:38 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-11 15:24:38 -<==    Updates: 1
2020-06-11 15:24:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:38 -==> Parameters: appImgFlag(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 8
2020-06-11 15:24:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-11 15:24:38 -==> Parameters: cashFlag(String), 181(String)
2020-06-11 15:24:38 -<==      Total: 0
2020-06-11 15:24:38 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-11 15:24:38 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-11 15:24:38 -<==    Updates: 1
2020-06-11 15:24:38 -耗时 : 352
2020-06-11 15:24:38 -<==      Total: 1
2020-06-11 15:24:38 -耗时 : 1789
2020-06-11 15:24:39 -此处进行解密+验签+身份验证
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:39 -此处进行解密+验签+身份验证
2020-06-11 15:24:39 -此处进行解密+验签+身份验证
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:39 -此处进行解密+验签+身份验证
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-06-11 15:24:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-06-11 15:24:39 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-06-11 15:24:39 -==> Parameters: 181(String), 202006(String)
2020-06-11 15:24:39 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-06-11 15:24:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-06-11 15:24:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-06-11 15:24:39 -==> Parameters: 181(String), 202006(String)
2020-06-11 15:24:39 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-06-11 15:24:39 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-06-11 15:24:39 -==> Parameters: 181(String)
2020-06-11 15:24:39 -==> Parameters: 181(String), 202006(String)
2020-06-11 15:24:39 -<==      Total: 1
2020-06-11 15:24:39 -耗时 : 6
2020-06-11 15:24:39 -<==      Total: 1
2020-06-11 15:24:39 -耗时 : 7
2020-06-11 15:24:39 -<==      Total: 1
2020-06-11 15:24:39 -耗时 : 7
2020-06-11 15:24:39 -<==      Total: 1
2020-06-11 15:24:39 -耗时 : 9
2020-06-11 15:24:51 -此处进行解密+验签+身份验证
2020-06-11 15:24:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-11 15:24:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-11 15:24:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-06-11 15:24:51 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-06-11 15:24:51 -==> Parameters: 181(String)
2020-06-11 15:24:51 -<==      Total: 1
2020-06-11 15:24:51 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-06-11 15:24:51 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:53 -<==      Total: 1
2020-06-11 15:24:53 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-06-11 15:24:53 -==> Parameters: 181(String), 181(String)
2020-06-11 15:24:53 -<==      Total: 1
2020-06-11 15:24:53 -耗时 : 1439
