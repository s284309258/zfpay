2020-04-20 12:27:53 -Starting LongEcologicalApplication on PC-201905161910 with PID 10700 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 12:27:53 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 12:27:53 -No active profile set, falling back to default profiles: default
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 12:27:54 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 12:27:54 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 12:27:54 -Finished Spring Data repository scanning in 71ms. Found 0 repository interfaces.
2020-04-20 12:27:54 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 12:27:54 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 12:27:54 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-04-20 12:27:54 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$783cfa07] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 12:27:55 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$72c0dea7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 12:27:55 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 12:27:55 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 12:27:55 -Starting service [Tomcat]
2020-04-20 12:27:55 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 12:27:55 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 12:27:55 -Initializing Spring embedded WebApplicationContext
2020-04-20 12:27:55 -Root WebApplicationContext: initialization completed in 2080 ms
2020-04-20 12:27:55 -Filter xssFilter was not registered (disabled)
2020-04-20 12:27:56 -HikariPool-1 - Starting...
2020-04-20 12:27:56 -HikariPool-1 - Start completed.
2020-04-20 12:27:56 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 12:27:56 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 12:27:56 -HHH000206: hibernate.properties not found
2020-04-20 12:27:56 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 12:27:56 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 12:27:57 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 12:27:57 -Using default implementation for ThreadExecutor
2020-04-20 12:27:57 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 12:27:57 -Quartz Scheduler v.2.3.0 created.
2020-04-20 12:27:57 -RAMJobStore initialized.
2020-04-20 12:27:57 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 12:27:57 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 12:27:57 -Quartz scheduler version: 2.3.0
2020-04-20 12:27:57 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@e26a3df
2020-04-20 12:27:58 -STAET TaskExecutorConfig
2020-04-20 12:27:58 -Initializing ExecutorService
2020-04-20 12:27:58 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 12:27:58 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 12:27:58 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 12:27:59 -Initializing ExecutorService 'taskScheduler'
2020-04-20 12:27:59 -Starting Quartz Scheduler now
2020-04-20 12:27:59 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 12:27:59 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 12:27:59 -Using a shared selector for servlet write/read
2020-04-20 12:27:59 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 12:27:59 -Started LongEcologicalApplication in 6.301 seconds (JVM running for 7.364)
2020-04-20 13:17:57 -Starting LongEcologicalApplication on PC-201905161910 with PID 4356 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 13:17:57 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 13:17:57 -No active profile set, falling back to default profiles: default
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:58 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 13:17:59 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 13:17:59 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 13:17:59 -Finished Spring Data repository scanning in 121ms. Found 0 repository interfaces.
2020-04-20 13:17:59 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 13:17:59 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 13:17:59 -Finished Spring Data repository scanning in 24ms. Found 0 repository interfaces.
2020-04-20 13:18:00 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c9c68a2f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 13:18:00 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c44a6ecf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 13:18:01 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 13:18:01 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 13:18:01 -Starting service [Tomcat]
2020-04-20 13:18:01 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 13:18:01 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 13:18:01 -Initializing Spring embedded WebApplicationContext
2020-04-20 13:18:01 -Root WebApplicationContext: initialization completed in 4143 ms
2020-04-20 13:18:01 -Filter xssFilter was not registered (disabled)
2020-04-20 13:18:02 -HikariPool-1 - Starting...
2020-04-20 13:18:03 -HikariPool-1 - Start completed.
2020-04-20 13:18:03 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 13:18:03 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 13:18:03 -HHH000206: hibernate.properties not found
2020-04-20 13:18:03 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 13:18:03 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 13:18:04 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 13:18:05 -Using default implementation for ThreadExecutor
2020-04-20 13:18:05 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 13:18:05 -Quartz Scheduler v.2.3.0 created.
2020-04-20 13:18:05 -RAMJobStore initialized.
2020-04-20 13:18:05 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 13:18:05 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 13:18:05 -Quartz scheduler version: 2.3.0
2020-04-20 13:18:05 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@28b458e6
2020-04-20 13:18:05 -STAET TaskExecutorConfig
2020-04-20 13:18:05 -Initializing ExecutorService
2020-04-20 13:18:05 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 13:18:06 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 13:18:06 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 13:18:07 -Initializing ExecutorService 'taskScheduler'
2020-04-20 13:18:07 -Starting Quartz Scheduler now
2020-04-20 13:18:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 13:18:07 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 13:18:07 -Using a shared selector for servlet write/read
2020-04-20 13:18:07 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 13:18:07 -Started LongEcologicalApplication in 11.256 seconds (JVM running for 13.969)
2020-04-20 13:19:37 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 13:19:37 -Initializing Servlet 'dispatcherServlet'
2020-04-20 13:19:37 -Completed initialization in 16 ms
2020-04-20 13:19:37 -此处进行解密+验签+身份验证
2020-04-20 13:19:37 -此处进行解密+验签+身份验证
2020-04-20 13:19:37 -此处进行解密+验签+身份验证
2020-04-20 13:19:37 -此处进行解密+验签+身份验证
2020-04-20 13:19:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:19:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:19:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:19:37 -Starting without optional epoll library
2020-04-20 13:19:37 -Starting without optional kqueue library
2020-04-20 13:19:38 -解密：
2020-04-20 13:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:19:38 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:19:38 -==> Parameters: 01(String), 01(String)
2020-04-20 13:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 13:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 13:19:38 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 13:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:19:38 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 13:19:38 -==> Parameters: 
2020-04-20 13:19:38 -==> Parameters: 181(String)
2020-04-20 13:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:19:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:19:38 -==> Parameters: 181(String), 181(String)
2020-04-20 13:19:38 -<==      Total: 4
2020-04-20 13:19:38 -耗时 : 474
2020-04-20 13:19:38 -<==      Total: 3
2020-04-20 13:19:38 -耗时 : 107
2020-04-20 13:19:38 -<==      Total: 2
2020-04-20 13:19:38 -耗时 : 137
2020-04-20 13:19:38 -<==      Total: 1
2020-04-20 13:19:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:19:38 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:19:38 -<==      Total: 2
2020-04-20 13:19:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:19:38 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:19:39 -<==    Updates: 2
2020-04-20 13:19:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:19:39 -==> Parameters: 181(String), 181(String)
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:19:39 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:19:39 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:19:39 -<==    Updates: 1
2020-04-20 13:19:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:19:39 -==> Parameters: 
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:19:39 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:19:39 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:19:39 -<==    Updates: 1
2020-04-20 13:19:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:19:39 -==> Parameters: 181(String), 181(String)
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:19:39 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:19:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:19:39 -<==    Updates: 1
2020-04-20 13:19:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:19:39 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:19:39 -<==      Total: 1
2020-04-20 13:19:39 -耗时 : 341
2020-04-20 13:20:03 -此处进行解密+验签+身份验证
2020-04-20 13:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-04-20 13:20:03 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-04-20 13:20:03 -==> Parameters: 181(String)
2020-04-20 13:20:03 -此处进行解密+验签+身份验证
2020-04-20 13:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-04-20 13:20:03 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-04-20 13:20:03 -==> Parameters: 181(String)
2020-04-20 13:20:03 -<==      Total: 1
2020-04-20 13:20:03 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-04-20 13:20:03 -==> Parameters: 181(String), 181(String), 202004(String)
2020-04-20 13:20:04 -<==      Total: 1
2020-04-20 13:20:04 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-04-20 13:20:04 -==> Parameters: 181(String), 181(String), 202004(String)
2020-04-20 13:20:04 -<==      Total: 1
2020-04-20 13:20:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-20 13:20:04 -==> Parameters: 181(String), 181(String), 20200321(String), 20200420(String), 181(String)
2020-04-20 13:20:04 -<==      Total: 1
2020-04-20 13:20:04 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-20 13:20:04 -==> Parameters: 181(String), 181(String), 20200321(String), 20200420(String), 181(String)
2020-04-20 13:20:06 -<==      Total: 1
2020-04-20 13:20:06 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-20 13:20:06 -==> Parameters: 181(String), 20200220(String), 181(String), 20200220(String), 20200420(String), 181(String)
2020-04-20 13:20:08 -<==      Total: 1
2020-04-20 13:20:08 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-04-20 13:20:08 -==> Parameters: 181(String)
2020-04-20 13:20:08 -<==      Total: 1
2020-04-20 13:20:08 -耗时 : 5119
2020-04-20 13:20:08 -<==      Total: 1
2020-04-20 13:20:08 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-20 13:20:08 -==> Parameters: 181(String), 20200220(String), 181(String), 20200220(String), 20200420(String), 181(String)
2020-04-20 13:20:10 -<==      Total: 1
2020-04-20 13:20:10 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-04-20 13:20:10 -==> Parameters: 181(String)
2020-04-20 13:20:10 -<==      Total: 1
2020-04-20 13:20:10 -耗时 : 6805
2020-04-20 13:20:15 -此处进行解密+验签+身份验证
2020-04-20 13:20:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:20:15 -此处进行解密+验签+身份验证
2020-04-20 13:20:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:20:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:20:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:20:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:20:15 -==> Parameters: 181(String), 181(String)
2020-04-20 13:20:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:20:15 -==> Parameters: 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -耗时 : 42
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:15 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 2
2020-04-20 13:20:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:20:15 -<==    Updates: 2
2020-04-20 13:20:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:20:15 -==> Parameters: 181(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:15 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:15 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:20:15 -<==    Updates: 1
2020-04-20 13:20:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:20:15 -==> Parameters: 
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:15 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:15 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:20:15 -<==    Updates: 1
2020-04-20 13:20:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:20:15 -==> Parameters: 181(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:15 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:20:15 -<==    Updates: 1
2020-04-20 13:20:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:15 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:20:15 -<==      Total: 1
2020-04-20 13:20:15 -耗时 : 134
2020-04-20 13:20:23 -此处进行解密+验签+身份验证
2020-04-20 13:20:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-20 13:20:23 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-20 13:20:23 -==> Parameters: 1(String), 181(String), appImgFlag(String)
2020-04-20 13:20:23 -<==    Updates: 1
2020-04-20 13:20:23 -耗时 : 35
2020-04-20 13:20:23 -此处进行解密+验签+身份验证
2020-04-20 13:20:23 -解密：
2020-04-20 13:20:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:20:23 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:20:23 -==> Parameters: 02(String), 02(String)
2020-04-20 13:20:23 -此处进行解密+验签+身份验证
2020-04-20 13:20:23 -解密：
2020-04-20 13:20:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:20:23 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:20:23 -==> Parameters: 03(String), 03(String)
2020-04-20 13:20:23 -<==      Total: 15
2020-04-20 13:20:23 -<==      Total: 10
2020-04-20 13:20:23 -耗时 : 5
2020-04-20 13:20:23 -耗时 : 14
2020-04-20 13:20:42 -此处进行解密+验签+身份验证
2020-04-20 13:20:42 -解密：
2020-04-20 13:20:42 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:20:42 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:20:42 -==> Parameters: 02(String), 02(String)
2020-04-20 13:20:42 -<==      Total: 15
2020-04-20 13:20:42 -耗时 : 6
2020-04-20 13:20:44 -此处进行解密+验签+身份验证
2020-04-20 13:20:44 -解密：
2020-04-20 13:20:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:20:44 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:20:44 -==> Parameters: 02(String), 02(String)
2020-04-20 13:20:44 -<==      Total: 15
2020-04-20 13:20:44 -耗时 : 4
2020-04-20 13:20:50 -此处进行解密+验签+身份验证
2020-04-20 13:20:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:50 -此处进行解密+验签+身份验证
2020-04-20 13:20:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:20:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:20:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:20:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:20:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:20:50 -==> Parameters: 181(String)
2020-04-20 13:20:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -耗时 : 3
2020-04-20 13:20:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:20:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:20:50 -==> Parameters: 181(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:50 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 2
2020-04-20 13:20:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:50 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:20:50 -<==    Updates: 2
2020-04-20 13:20:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:20:50 -==> Parameters: 181(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:50 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:50 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:20:50 -<==    Updates: 1
2020-04-20 13:20:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:20:50 -==> Parameters: 
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:50 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:50 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:20:50 -<==    Updates: 1
2020-04-20 13:20:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:20:50 -==> Parameters: 181(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:50 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:20:50 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:20:50 -<==    Updates: 1
2020-04-20 13:20:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:20:50 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:20:50 -<==      Total: 1
2020-04-20 13:20:50 -耗时 : 95
2020-04-20 13:24:33 -此处进行解密+验签+身份验证
2020-04-20 13:24:33 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-20 13:24:33 -token值=======181|4PE5JFJ5UIJYSY8271ZA9AWG7IU0YHEA
2020-04-20 13:24:33 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-20 13:24:33 -==> Parameters: null, 181(String)
2020-04-20 13:24:33 -<==    Updates: 1
2020-04-20 13:24:33 -耗时 : 134
2020-04-20 13:24:52 -此处进行解密+验签+身份验证
2020-04-20 13:24:52 -解密：{"version_no":"","login_password":"E1FE5A43DA780FC5BFE6E5A1B7A50909","login_type":"account","sign":"3C352525131F8D414DA1CBA27A8F6316","device_no":"1.1.4","device_type":"android","sys_user_account":"18802671616"}
2020-04-20 13:24:52 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 13:24:52 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 13:24:52 -==> Parameters: 18802671616(String)
2020-04-20 13:24:52 -<==      Total: 1
2020-04-20 13:24:52 -耗时 : 36
2020-04-20 13:25:08 -此处进行解密+验签+身份验证
2020-04-20 13:25:08 -解密：{"version_no":"","login_password":"E1FE5A43DA780FC5BFE6E5A1B7A50909","login_type":"account","sign":"3C352525131F8D414DA1CBA27A8F6316","device_no":"1.1.4","device_type":"android","sys_user_account":"18802671616"}
2020-04-20 13:25:08 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 13:25:08 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 13:25:08 -==> Parameters: 18802671616(String)
2020-04-20 13:25:08 -<==      Total: 1
2020-04-20 13:25:08 -耗时 : 6
2020-04-20 13:26:32 -此处进行解密+验签+身份验证
2020-04-20 13:26:32 -解密：{"version_no":"","login_password":"DC483E80A7A0BD9EF71D8CF973673924","login_type":"account","sign":"A2CF48493C5B23C20DBEEBA272BEFDAC","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 13:26:32 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 13:26:32 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 13:26:32 -==> Parameters: 13322990711(String)
2020-04-20 13:26:32 -<==      Total: 1
2020-04-20 13:26:32 -耗时 : 9
2020-04-20 13:26:46 -此处进行解密+验签+身份验证
2020-04-20 13:26:46 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"3E72A9D20D793E544591F970E6176C23","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 13:26:46 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 13:26:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 13:26:46 -==> Parameters: 13322990711(String)
2020-04-20 13:26:46 -<==      Total: 1
2020-04-20 13:26:46 -耗时 : 4
2020-04-20 13:27:01 -此处进行解密+验签+身份验证
2020-04-20 13:27:01 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"41AB57816D026EC0FB664984B27C4C7C","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 13:27:01 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 13:27:01 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 13:27:01 -==> Parameters: 13322990711(String)
2020-04-20 13:27:01 -<==      Total: 1
2020-04-20 13:27:01 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-20 13:27:01 -==> Parameters: android(String), 1.1.4(String), (String), null, 192.168.191.1(String), 20200420(String), 132701(String), 181(Integer)
2020-04-20 13:27:01 -<==    Updates: 1
2020-04-20 13:27:01 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 13:27:01 -==> Parameters: 26(String)
2020-04-20 13:27:01 -<==      Total: 1
2020-04-20 13:27:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 13:27:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 13:27:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 13:27:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 13:27:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 13:27:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 13:27:01 -耗时 : 88
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:27:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:27:02 -==> Parameters: 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -耗时 : 2
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 13:27:02 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 13:27:02 -==> Parameters: 
2020-04-20 13:27:02 -<==      Total: 3
2020-04-20 13:27:02 -耗时 : 24
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:27:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:27:02 -==> Parameters: 181(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 2
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:27:02 -<==    Updates: 2
2020-04-20 13:27:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:27:02 -==> Parameters: 181(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:27:02 -<==    Updates: 1
2020-04-20 13:27:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:27:02 -==> Parameters: 
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:27:02 -<==    Updates: 1
2020-04-20 13:27:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:27:02 -==> Parameters: 181(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -解密：
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:27:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:27:02 -==> Parameters: 01(String), 01(String)
2020-04-20 13:27:02 -<==    Updates: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -耗时 : 95
2020-04-20 13:27:02 -<==      Total: 4
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -耗时 : 25
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:27:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:27:02 -==> Parameters: 181(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 13:27:02 -<==      Total: 2
2020-04-20 13:27:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 181(String)
2020-04-20 13:27:02 -此处进行解密+验签+身份验证
2020-04-20 13:27:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:27:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:27:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:27:02 -==> Parameters: 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -耗时 : 1
2020-04-20 13:27:02 -<==      Total: 2
2020-04-20 13:27:02 -耗时 : 331
2020-04-20 13:27:02 -<==    Updates: 2
2020-04-20 13:27:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:27:02 -==> Parameters: 181(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:27:02 -<==    Updates: 1
2020-04-20 13:27:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:27:02 -==> Parameters: 
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:27:02 -<==    Updates: 1
2020-04-20 13:27:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:27:02 -==> Parameters: 181(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:27:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:27:02 -<==    Updates: 1
2020-04-20 13:27:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:27:02 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:27:02 -<==      Total: 1
2020-04-20 13:27:02 -耗时 : 397
2020-04-20 13:30:35 -此处进行解密+验签+身份验证
2020-04-20 13:30:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-20 13:30:35 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-20 13:30:35 -==> Parameters: 181(String)
2020-04-20 13:30:35 -此处进行解密+验签+身份验证
2020-04-20 13:30:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-20 13:30:35 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-20 13:30:35 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:36 -<==      Total: 1164
2020-04-20 13:30:36 -耗时 : 429
2020-04-20 13:30:36 -<==      Total: 1599
2020-04-20 13:30:36 -耗时 : 585
2020-04-20 13:30:38 -此处进行解密+验签+身份验证
2020-04-20 13:30:38 -此处进行解密+验签+身份验证
2020-04-20 13:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:30:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:30:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:30:38 -==> Parameters: 181(String)
2020-04-20 13:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -耗时 : 2
2020-04-20 13:30:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:30:38 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:38 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 2
2020-04-20 13:30:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:38 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:30:38 -<==    Updates: 2
2020-04-20 13:30:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:30:38 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:38 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:38 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:30:38 -<==    Updates: 1
2020-04-20 13:30:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:30:38 -==> Parameters: 
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:38 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:38 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:30:38 -<==    Updates: 1
2020-04-20 13:30:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:30:38 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:38 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:38 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:30:38 -<==    Updates: 1
2020-04-20 13:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:38 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:30:38 -<==      Total: 1
2020-04-20 13:30:38 -耗时 : 135
2020-04-20 13:30:39 -此处进行解密+验签+身份验证
2020-04-20 13:30:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-20 13:30:39 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-20 13:30:39 -==> Parameters: 181(String)
2020-04-20 13:30:39 -此处进行解密+验签+身份验证
2020-04-20 13:30:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-20 13:30:39 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-20 13:30:39 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:40 -<==      Total: 1164
2020-04-20 13:30:40 -耗时 : 407
2020-04-20 13:30:40 -<==      Total: 1599
2020-04-20 13:30:40 -耗时 : 638
2020-04-20 13:30:42 -此处进行解密+验签+身份验证
2020-04-20 13:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:42 -此处进行解密+验签+身份验证
2020-04-20 13:30:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:30:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:30:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:30:42 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:30:42 -==> Parameters: 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -耗时 : 2
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:42 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 2
2020-04-20 13:30:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:42 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:30:42 -<==    Updates: 2
2020-04-20 13:30:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:30:42 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:42 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:42 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:30:42 -<==    Updates: 1
2020-04-20 13:30:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:30:42 -==> Parameters: 
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:42 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:42 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:30:42 -<==    Updates: 1
2020-04-20 13:30:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:30:42 -==> Parameters: 181(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:42 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:30:42 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:30:42 -<==    Updates: 1
2020-04-20 13:30:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:30:42 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:30:42 -<==      Total: 1
2020-04-20 13:30:42 -耗时 : 140
2020-04-20 13:31:30 -此处进行解密+验签+身份验证
2020-04-20 13:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-20 13:31:30 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-20 13:31:30 -==> Parameters: 1(String), 181(String), appImgFlag(String)
2020-04-20 13:31:30 -<==    Updates: 1
2020-04-20 13:31:30 -耗时 : 22
2020-04-20 13:31:30 -此处进行解密+验签+身份验证
2020-04-20 13:31:30 -解密：
2020-04-20 13:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:31:30 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:31:30 -==> Parameters: 02(String), 02(String)
2020-04-20 13:31:30 -<==      Total: 15
2020-04-20 13:31:30 -耗时 : 3
2020-04-20 13:31:30 -此处进行解密+验签+身份验证
2020-04-20 13:31:30 -解密：
2020-04-20 13:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:31:30 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:31:30 -==> Parameters: 03(String), 03(String)
2020-04-20 13:31:30 -<==      Total: 10
2020-04-20 13:31:30 -耗时 : 2
2020-04-20 13:31:37 -此处进行解密+验签+身份验证
2020-04-20 13:31:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:31:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:31:37 -此处进行解密+验签+身份验证
2020-04-20 13:31:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:31:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:31:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:31:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:31:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:31:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:31:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:31:37 -==> Parameters: 181(String), 181(String)
2020-04-20 13:31:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:31:37 -==> Parameters: 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -耗时 : 3
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:31:37 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 2
2020-04-20 13:31:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:31:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:31:37 -<==    Updates: 2
2020-04-20 13:31:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:31:37 -==> Parameters: 181(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:31:37 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:31:37 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:31:37 -<==    Updates: 1
2020-04-20 13:31:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:31:37 -==> Parameters: 
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:31:37 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:31:37 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:31:37 -<==    Updates: 1
2020-04-20 13:31:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:31:37 -==> Parameters: 181(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:31:37 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:31:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:31:37 -<==    Updates: 1
2020-04-20 13:31:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:31:37 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:31:37 -<==      Total: 1
2020-04-20 13:31:37 -耗时 : 89
2020-04-20 13:31:44 -此处进行解密+验签+身份验证
2020-04-20 13:31:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:31:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:31:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-20 13:31:44 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-20 13:31:44 -==> Parameters: 1(String), 181(String), appImgFlag(String)
2020-04-20 13:31:44 -<==    Updates: 1
2020-04-20 13:31:44 -耗时 : 10
2020-04-20 13:31:44 -此处进行解密+验签+身份验证
2020-04-20 13:31:44 -解密：
2020-04-20 13:31:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:31:44 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:31:44 -==> Parameters: 02(String), 02(String)
2020-04-20 13:31:44 -<==      Total: 15
2020-04-20 13:31:44 -耗时 : 3
2020-04-20 13:31:44 -此处进行解密+验签+身份验证
2020-04-20 13:31:44 -解密：
2020-04-20 13:31:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:31:44 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:31:44 -==> Parameters: 03(String), 03(String)
2020-04-20 13:31:44 -<==      Total: 10
2020-04-20 13:31:44 -耗时 : 2
2020-04-20 13:32:10 -此处进行解密+验签+身份验证
2020-04-20 13:32:10 -解密：
2020-04-20 13:32:10 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 13:32:10 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 13:32:10 -==> Parameters: 04(String), 04(String)
2020-04-20 13:32:10 -<==      Total: 1
2020-04-20 13:32:10 -耗时 : 2
2020-04-20 13:32:16 -此处进行解密+验签+身份验证
2020-04-20 13:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:32:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:32:16 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 2
2020-04-20 13:32:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:32:16 -此处进行解密+验签+身份验证
2020-04-20 13:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 13:32:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 13:32:16 -==> Parameters: 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -耗时 : 2
2020-04-20 13:32:16 -<==    Updates: 2
2020-04-20 13:32:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:32:16 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:16 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:32:16 -<==    Updates: 1
2020-04-20 13:32:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:32:16 -==> Parameters: 
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:16 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:16 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:32:16 -<==    Updates: 1
2020-04-20 13:32:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:32:16 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:16 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:32:16 -<==      Total: 1
2020-04-20 13:32:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:32:17 -<==    Updates: 1
2020-04-20 13:32:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:17 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:32:17 -<==      Total: 1
2020-04-20 13:32:17 -耗时 : 72
2020-04-20 13:32:18 -此处进行解密+验签+身份验证
2020-04-20 13:32:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:18 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-04-20 13:32:18 -此处进行解密+验签+身份验证
2020-04-20 13:32:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-04-20 13:32:18 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-04-20 13:32:18 -==> Parameters: 181(String)
2020-04-20 13:32:18 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-20 13:32:18 -==> Parameters: 202004(String), 181(String)
2020-04-20 13:32:18 -<==      Total: 1
2020-04-20 13:32:18 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-04-20 13:32:18 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:18 -<==      Total: 1
2020-04-20 13:32:18 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-04-20 13:32:18 -==> Parameters: 181(String)
2020-04-20 13:32:18 -<==      Total: 0
2020-04-20 13:32:18 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-20 13:32:18 -==> Parameters: 202004(String), 181(String)
2020-04-20 13:32:18 -<==      Total: 1
2020-04-20 13:32:18 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-04-20 13:32:18 -==> Parameters: 181(String)
2020-04-20 13:32:18 -<==      Total: 0
2020-04-20 13:32:18 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-20 13:32:18 -==> Parameters: 202004(String), 181(String)
2020-04-20 13:32:18 -<==      Total: 1
2020-04-20 13:32:18 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-04-20 13:32:18 -==> Parameters: 181(String)
2020-04-20 13:32:18 -<==      Total: 0
2020-04-20 13:32:18 -耗时 : 52
2020-04-20 13:32:19 -<==      Total: 1
2020-04-20 13:32:19 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-04-20 13:32:19 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:20 -<==      Total: 1
2020-04-20 13:32:20 -耗时 : 1354
2020-04-20 13:32:22 -此处进行解密+验签+身份验证
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:22 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-20 13:32:22 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-20 13:32:22 -==> Parameters: 181(String)
2020-04-20 13:32:22 -<==      Total: 1
2020-04-20 13:32:22 -耗时 : 8
2020-04-20 13:32:22 -此处进行解密+验签+身份验证
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:22 -此处进行解密+验签+身份验证
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:22 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-20 13:32:22 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-20 13:32:22 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-20 13:32:22 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-20 13:32:22 -==> Parameters: 181(String), 202004(String)
2020-04-20 13:32:22 -==> Parameters: 181(String), 202004(String)
2020-04-20 13:32:22 -<==      Total: 1
2020-04-20 13:32:22 -<==      Total: 1
2020-04-20 13:32:22 -耗时 : 7
2020-04-20 13:32:22 -耗时 : 5
2020-04-20 13:32:22 -此处进行解密+验签+身份验证
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:22 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-20 13:32:22 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-20 13:32:22 -==> Parameters: 181(String), 202004(String)
2020-04-20 13:32:22 -<==      Total: 0
2020-04-20 13:32:22 -耗时 : 3
2020-04-20 13:32:24 -此处进行解密+验签+身份验证
2020-04-20 13:32:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:32:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:32:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:32:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:32:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:32:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:32:24 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:25 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 2
2020-04-20 13:32:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:25 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:32:25 -<==    Updates: 2
2020-04-20 13:32:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:32:25 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:25 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:25 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:32:25 -<==    Updates: 1
2020-04-20 13:32:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:32:25 -==> Parameters: 
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:25 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:25 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:32:25 -<==    Updates: 1
2020-04-20 13:32:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:32:25 -==> Parameters: 181(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:25 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:32:25 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:32:25 -<==    Updates: 1
2020-04-20 13:32:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:32:25 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:32:25 -<==      Total: 1
2020-04-20 13:32:25 -耗时 : 118
2020-04-20 13:34:25 -此处进行解密+验签+身份验证
2020-04-20 13:34:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:34:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:34:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:34:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:34:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:34:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:34:25 -==> Parameters: 181(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:34:25 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 2
2020-04-20 13:34:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:34:25 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:34:25 -<==    Updates: 2
2020-04-20 13:34:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:34:25 -==> Parameters: 181(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:34:25 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:34:25 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:34:25 -<==    Updates: 1
2020-04-20 13:34:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:34:25 -==> Parameters: 
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:34:25 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:34:25 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:34:25 -<==    Updates: 1
2020-04-20 13:34:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:34:25 -==> Parameters: 181(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:34:25 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:34:25 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:34:25 -<==    Updates: 1
2020-04-20 13:34:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:34:25 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:34:25 -<==      Total: 1
2020-04-20 13:34:25 -耗时 : 58
2020-04-20 13:42:49 -此处进行解密+验签+身份验证
2020-04-20 13:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 13:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 13:42:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 13:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 13:42:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 13:42:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:42:49 -==> Parameters: 181(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:42:49 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 2
2020-04-20 13:42:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:42:49 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 13:42:49 -<==    Updates: 2
2020-04-20 13:42:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 13:42:49 -==> Parameters: 181(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:42:49 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:42:49 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 13:42:49 -<==    Updates: 1
2020-04-20 13:42:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 13:42:49 -==> Parameters: 
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:42:49 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:42:49 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 13:42:49 -<==    Updates: 1
2020-04-20 13:42:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 13:42:49 -==> Parameters: 181(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:42:49 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 13:42:49 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 13:42:49 -<==    Updates: 1
2020-04-20 13:42:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 13:42:49 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 13:42:49 -<==      Total: 1
2020-04-20 13:42:49 -耗时 : 56
2020-04-20 14:13:30 -此处进行解密+验签+身份验证
2020-04-20 14:13:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:13:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:13:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:13:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:13:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:13:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:13:30 -==> Parameters: 181(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:13:30 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 2
2020-04-20 14:13:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:13:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:13:30 -<==    Updates: 2
2020-04-20 14:13:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:13:30 -==> Parameters: 181(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:13:30 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:13:30 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:13:30 -<==    Updates: 1
2020-04-20 14:13:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:13:30 -==> Parameters: 
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:13:30 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:13:30 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:13:30 -<==    Updates: 1
2020-04-20 14:13:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:13:30 -==> Parameters: 181(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:13:30 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:13:30 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:13:30 -<==    Updates: 1
2020-04-20 14:13:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:13:30 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:13:30 -<==      Total: 1
2020-04-20 14:13:30 -耗时 : 68
2020-04-20 14:13:34 -此处进行解密+验签+身份验证
2020-04-20 14:13:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:13:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:13:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:13:34 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:13:34 -==> Parameters: 11(String)
2020-04-20 14:13:34 -<==      Total: 1
2020-04-20 14:13:34 -耗时 : 24
2020-04-20 14:14:23 -此处进行解密+验签+身份验证
2020-04-20 14:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:14:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:14:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:14:23 -==> Parameters: 181(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:14:23 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:14:23 -此处进行解密+验签+身份验证
2020-04-20 14:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:14:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:14:23 -<==      Total: 2
2020-04-20 14:14:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:14:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:14:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:14:23 -==> Parameters: 181(String)
2020-04-20 14:14:23 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -耗时 : 9
2020-04-20 14:14:23 -<==    Updates: 2
2020-04-20 14:14:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:14:23 -==> Parameters: 181(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:14:23 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:14:23 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:14:23 -<==    Updates: 1
2020-04-20 14:14:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:14:23 -==> Parameters: 
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:14:23 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:14:23 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:14:23 -<==    Updates: 1
2020-04-20 14:14:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:14:23 -==> Parameters: 181(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:14:23 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:14:23 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:14:23 -<==    Updates: 1
2020-04-20 14:14:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:14:23 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:14:23 -<==      Total: 1
2020-04-20 14:14:23 -耗时 : 75
2020-04-20 14:14:59 -此处进行解密+验签+身份验证
2020-04-20 14:14:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:14:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:14:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:14:59 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:14:59 -==> Parameters: 11(String)
2020-04-20 14:14:59 -<==      Total: 1
2020-04-20 14:14:59 -耗时 : 2
2020-04-20 14:15:22 -此处进行解密+验签+身份验证
2020-04-20 14:15:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:15:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:15:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:15:22 -此处进行解密+验签+身份验证
2020-04-20 14:15:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:15:22 -==> Parameters: 181(String)
2020-04-20 14:15:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -耗时 : 1
2020-04-20 14:15:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:15:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:15:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:15:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:15:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:15:22 -==> Parameters: 181(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:15:22 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 2
2020-04-20 14:15:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:15:22 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:15:22 -<==    Updates: 2
2020-04-20 14:15:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:15:22 -==> Parameters: 181(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:15:22 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:15:22 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:15:22 -<==    Updates: 1
2020-04-20 14:15:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:15:22 -==> Parameters: 
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:15:22 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:15:22 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:15:22 -<==    Updates: 1
2020-04-20 14:15:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:15:22 -==> Parameters: 181(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:15:22 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:15:22 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:15:22 -<==    Updates: 1
2020-04-20 14:15:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:15:22 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:15:22 -<==      Total: 1
2020-04-20 14:15:22 -耗时 : 63
2020-04-20 14:15:59 -此处进行解密+验签+身份验证
2020-04-20 14:15:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:15:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:15:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:15:59 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:15:59 -==> Parameters: 11(String)
2020-04-20 14:15:59 -<==      Total: 1
2020-04-20 14:15:59 -耗时 : 2
2020-04-20 14:24:02 -Starting LongEcologicalApplication on PC-201905161910 with PID 9104 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 14:24:02 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 14:24:02 -No active profile set, falling back to default profiles: default
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:03 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:24:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 14:24:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 14:24:04 -Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2020-04-20 14:24:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 14:24:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 14:24:04 -Finished Spring Data repository scanning in 17ms. Found 0 repository interfaces.
2020-04-20 14:24:04 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$71dda5d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 14:24:04 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6c618a74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 14:24:05 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 14:24:05 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 14:24:05 -Starting service [Tomcat]
2020-04-20 14:24:05 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 14:24:05 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 14:24:05 -Initializing Spring embedded WebApplicationContext
2020-04-20 14:24:05 -Root WebApplicationContext: initialization completed in 2149 ms
2020-04-20 14:24:05 -Filter xssFilter was not registered (disabled)
2020-04-20 14:24:05 -HikariPool-1 - Starting...
2020-04-20 14:24:05 -HikariPool-1 - Start completed.
2020-04-20 14:24:05 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 14:24:05 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 14:24:05 -HHH000206: hibernate.properties not found
2020-04-20 14:24:06 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 14:24:06 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 14:24:06 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 14:24:07 -Using default implementation for ThreadExecutor
2020-04-20 14:24:07 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 14:24:07 -Quartz Scheduler v.2.3.0 created.
2020-04-20 14:24:07 -RAMJobStore initialized.
2020-04-20 14:24:07 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 14:24:07 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 14:24:07 -Quartz scheduler version: 2.3.0
2020-04-20 14:24:07 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@203b953c
2020-04-20 14:24:07 -STAET TaskExecutorConfig
2020-04-20 14:24:07 -Initializing ExecutorService
2020-04-20 14:24:07 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 14:24:08 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 14:24:08 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 14:24:08 -Initializing ExecutorService 'taskScheduler'
2020-04-20 14:24:09 -Starting Quartz Scheduler now
2020-04-20 14:24:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 14:24:09 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 14:24:09 -Using a shared selector for servlet write/read
2020-04-20 14:24:09 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 14:24:09 -Started LongEcologicalApplication in 6.589 seconds (JVM running for 7.796)
2020-04-20 14:24:26 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 14:24:26 -Initializing Servlet 'dispatcherServlet'
2020-04-20 14:24:26 -Completed initialization in 13 ms
2020-04-20 14:24:26 -此处进行解密+验签+身份验证
2020-04-20 14:24:26 -此处进行解密+验签+身份验证
2020-04-20 14:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:24:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:24:26 -Starting without optional epoll library
2020-04-20 14:24:26 -Starting without optional kqueue library
2020-04-20 14:24:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:24:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:24:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:24:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:24:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:24:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:24:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:24:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:24:27 -==> Parameters: 181(String), 181(String)
2020-04-20 14:24:27 -==> Parameters: 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -耗时 : 50
2020-04-20 14:24:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:27 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 2
2020-04-20 14:24:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:24:27 -<==    Updates: 2
2020-04-20 14:24:27 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:24:27 -==> Parameters: 181(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:27 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:27 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:24:27 -<==    Updates: 1
2020-04-20 14:24:27 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:24:27 -==> Parameters: 
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:27 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:27 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:24:27 -<==    Updates: 1
2020-04-20 14:24:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:24:27 -==> Parameters: 181(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:27 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:24:27 -<==    Updates: 1
2020-04-20 14:24:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:27 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:24:27 -<==      Total: 1
2020-04-20 14:24:27 -耗时 : 124
2020-04-20 14:24:38 -此处进行解密+验签+身份验证
2020-04-20 14:24:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:24:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:24:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:24:38 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:24:38 -==> Parameters: 11(String)
2020-04-20 14:24:38 -<==      Total: 1
2020-04-20 14:24:38 -耗时 : 6
2020-04-20 14:24:58 -此处进行解密+验签+身份验证
2020-04-20 14:24:58 -此处进行解密+验签+身份验证
2020-04-20 14:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:24:58 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:24:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:24:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:24:58 -==> Parameters: 181(String)
2020-04-20 14:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -耗时 : 5
2020-04-20 14:24:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:24:58 -==> Parameters: 181(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:58 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 2
2020-04-20 14:24:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:58 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:24:58 -<==    Updates: 2
2020-04-20 14:24:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:24:58 -==> Parameters: 181(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:58 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:58 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:24:58 -<==    Updates: 1
2020-04-20 14:24:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:24:58 -==> Parameters: 
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:58 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:58 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:24:58 -<==    Updates: 1
2020-04-20 14:24:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:24:58 -==> Parameters: 181(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:58 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:24:58 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:24:58 -<==    Updates: 1
2020-04-20 14:24:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:24:58 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:24:58 -<==      Total: 1
2020-04-20 14:24:58 -耗时 : 74
2020-04-20 14:31:19 -此处进行解密+验签+身份验证
2020-04-20 14:31:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:31:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:31:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:31:19 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:31:19 -==> Parameters: 11(String)
2020-04-20 14:31:19 -<==      Total: 1
2020-04-20 14:31:19 -耗时 : 8
2020-04-20 14:41:04 -Starting LongEcologicalApplication on PC-201905161910 with PID 12412 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 14:41:04 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 14:41:04 -No active profile set, falling back to default profiles: default
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:41:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 14:41:05 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 14:41:05 -Finished Spring Data repository scanning in 43ms. Found 0 repository interfaces.
2020-04-20 14:41:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 14:41:05 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 14:41:05 -Finished Spring Data repository scanning in 29ms. Found 0 repository interfaces.
2020-04-20 14:41:05 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$cdc3eded] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 14:41:05 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c847d28d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 14:41:06 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 14:41:06 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 14:41:06 -Starting service [Tomcat]
2020-04-20 14:41:06 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 14:41:06 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 14:41:06 -Initializing Spring embedded WebApplicationContext
2020-04-20 14:41:06 -Root WebApplicationContext: initialization completed in 2172 ms
2020-04-20 14:41:06 -Filter xssFilter was not registered (disabled)
2020-04-20 14:41:06 -HikariPool-1 - Starting...
2020-04-20 14:41:07 -HikariPool-1 - Start completed.
2020-04-20 14:41:07 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 14:41:07 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 14:41:07 -HHH000206: hibernate.properties not found
2020-04-20 14:41:07 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 14:41:07 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 14:41:07 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 14:41:08 -Using default implementation for ThreadExecutor
2020-04-20 14:41:08 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 14:41:08 -Quartz Scheduler v.2.3.0 created.
2020-04-20 14:41:08 -RAMJobStore initialized.
2020-04-20 14:41:08 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 14:41:08 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 14:41:08 -Quartz scheduler version: 2.3.0
2020-04-20 14:41:08 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6b5c134e
2020-04-20 14:41:08 -STAET TaskExecutorConfig
2020-04-20 14:41:08 -Initializing ExecutorService
2020-04-20 14:41:08 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 14:41:09 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 14:41:09 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 14:41:09 -Initializing ExecutorService 'taskScheduler'
2020-04-20 14:41:09 -Starting Quartz Scheduler now
2020-04-20 14:41:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 14:41:09 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 14:41:09 -Using a shared selector for servlet write/read
2020-04-20 14:41:09 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 14:41:09 -Started LongEcologicalApplication in 6.084 seconds (JVM running for 7.189)
2020-04-20 14:41:46 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 14:41:46 -Initializing Servlet 'dispatcherServlet'
2020-04-20 14:41:46 -Completed initialization in 15 ms
2020-04-20 14:41:46 -此处进行解密+验签+身份验证
2020-04-20 14:41:46 -此处进行解密+验签+身份验证
2020-04-20 14:41:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:41:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:41:46 -Starting without optional epoll library
2020-04-20 14:41:46 -Starting without optional kqueue library
2020-04-20 14:41:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:41:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:41:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:41:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:41:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:41:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:41:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:41:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:41:46 -==> Parameters: 181(String)
2020-04-20 14:41:46 -==> Parameters: 181(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -耗时 : 50
2020-04-20 14:41:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 2
2020-04-20 14:41:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:41:46 -<==    Updates: 2
2020-04-20 14:41:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:41:46 -==> Parameters: 181(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:46 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:41:46 -<==    Updates: 1
2020-04-20 14:41:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:41:46 -==> Parameters: 
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:46 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:46 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:41:46 -<==    Updates: 1
2020-04-20 14:41:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:41:46 -==> Parameters: 181(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:46 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:46 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:41:46 -<==    Updates: 1
2020-04-20 14:41:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:46 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:41:46 -<==      Total: 1
2020-04-20 14:41:46 -耗时 : 134
2020-04-20 14:41:47 -此处进行解密+验签+身份验证
2020-04-20 14:41:47 -此处进行解密+验签+身份验证
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 14:41:47 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 14:41:47 -==> Parameters: 181(String)
2020-04-20 14:41:47 -此处进行解密+验签+身份验证
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 14:41:47 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 14:41:47 -==> Parameters: 
2020-04-20 14:41:47 -<==      Total: 3
2020-04-20 14:41:47 -耗时 : 30
2020-04-20 14:41:47 -<==      Total: 2
2020-04-20 14:41:47 -耗时 : 50
2020-04-20 14:41:47 -此处进行解密+验签+身份验证
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:41:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:41:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:41:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:41:47 -==> Parameters: 181(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:47 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 2
2020-04-20 14:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:41:47 -<==    Updates: 2
2020-04-20 14:41:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:41:47 -==> Parameters: 181(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:47 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:47 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:41:47 -<==    Updates: 1
2020-04-20 14:41:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:41:47 -==> Parameters: 
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:47 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:47 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:41:47 -<==    Updates: 1
2020-04-20 14:41:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:41:47 -==> Parameters: 181(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:47 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:41:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:41:47 -<==    Updates: 1
2020-04-20 14:41:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:41:47 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:41:47 -<==      Total: 1
2020-04-20 14:41:47 -耗时 : 79
2020-04-20 14:41:47 -解密：
2020-04-20 14:41:48 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 14:41:48 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 14:41:48 -==> Parameters: 01(String), 01(String)
2020-04-20 14:41:48 -<==      Total: 4
2020-04-20 14:41:48 -耗时 : 10
2020-04-20 14:41:50 -此处进行解密+验签+身份验证
2020-04-20 14:41:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:41:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:41:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:41:50 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:41:50 -==> Parameters: 10(String)
2020-04-20 14:41:50 -<==      Total: 1
2020-04-20 14:41:50 -耗时 : 3
2020-04-20 14:42:00 -此处进行解密+验签+身份验证
2020-04-20 14:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:42:00 -此处进行解密+验签+身份验证
2020-04-20 14:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:42:00 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:42:00 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:42:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:42:00 -==> Parameters: 181(String)
2020-04-20 14:42:00 -<==      Total: 2
2020-04-20 14:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:00 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -耗时 : 6
2020-04-20 14:42:00 -<==    Updates: 2
2020-04-20 14:42:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:42:00 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:00 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:00 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:42:00 -<==    Updates: 1
2020-04-20 14:42:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:42:00 -==> Parameters: 
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:00 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:00 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:42:00 -<==    Updates: 1
2020-04-20 14:42:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:42:00 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:00 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:00 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:42:00 -<==    Updates: 1
2020-04-20 14:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:00 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:42:00 -<==      Total: 1
2020-04-20 14:42:00 -耗时 : 70
2020-04-20 14:42:02 -此处进行解密+验签+身份验证
2020-04-20 14:42:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:42:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:42:02 -==> Parameters: 10(String)
2020-04-20 14:42:02 -<==      Total: 1
2020-04-20 14:42:02 -耗时 : 2
2020-04-20 14:42:04 -此处进行解密+验签+身份验证
2020-04-20 14:42:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:04 -此处进行解密+验签+身份验证
2020-04-20 14:42:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:42:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:42:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:42:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:42:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:42:04 -==> Parameters: 181(String)
2020-04-20 14:42:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:42:04 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -耗时 : 2
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:04 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 2
2020-04-20 14:42:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:04 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:42:04 -<==    Updates: 2
2020-04-20 14:42:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:42:04 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:04 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:04 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:42:04 -<==    Updates: 1
2020-04-20 14:42:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:42:04 -==> Parameters: 
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:04 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:04 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:42:04 -<==    Updates: 1
2020-04-20 14:42:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:42:04 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:04 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:04 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:42:04 -<==    Updates: 1
2020-04-20 14:42:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:04 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:42:04 -<==      Total: 1
2020-04-20 14:42:04 -耗时 : 70
2020-04-20 14:42:09 -此处进行解密+验签+身份验证
2020-04-20 14:42:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:42:09 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:42:09 -==> Parameters: 11(String)
2020-04-20 14:42:09 -<==      Total: 1
2020-04-20 14:42:09 -耗时 : 3
2020-04-20 14:42:55 -此处进行解密+验签+身份验证
2020-04-20 14:42:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:55 -此处进行解密+验签+身份验证
2020-04-20 14:42:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:42:55 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:42:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:42:55 -==> Parameters: 181(String)
2020-04-20 14:42:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:42:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -耗时 : 2
2020-04-20 14:42:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:42:55 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:55 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 2
2020-04-20 14:42:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:55 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:42:55 -<==    Updates: 2
2020-04-20 14:42:55 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:42:55 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:55 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:55 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:42:55 -<==    Updates: 1
2020-04-20 14:42:55 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:42:55 -==> Parameters: 
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:55 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:55 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:42:55 -<==    Updates: 1
2020-04-20 14:42:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:42:55 -==> Parameters: 181(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:55 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:42:55 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:42:55 -<==    Updates: 1
2020-04-20 14:42:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:42:55 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:42:55 -<==      Total: 1
2020-04-20 14:42:55 -耗时 : 78
2020-04-20 14:42:57 -此处进行解密+验签+身份验证
2020-04-20 14:42:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:42:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:42:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:42:57 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:42:57 -==> Parameters: 11(String)
2020-04-20 14:42:57 -<==      Total: 1
2020-04-20 14:42:57 -耗时 : 1
2020-04-20 14:43:08 -此处进行解密+验签+身份验证
2020-04-20 14:43:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:43:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:43:08 -此处进行解密+验签+身份验证
2020-04-20 14:43:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:43:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:43:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:43:08 -==> Parameters: 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -耗时 : 2
2020-04-20 14:43:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:43:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:43:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:43:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:43:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:43:08 -==> Parameters: 181(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:43:08 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 2
2020-04-20 14:43:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:43:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:43:08 -<==    Updates: 2
2020-04-20 14:43:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:43:08 -==> Parameters: 181(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:43:08 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:43:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:43:08 -<==    Updates: 1
2020-04-20 14:43:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:43:08 -==> Parameters: 
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:43:08 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:43:08 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:43:08 -<==    Updates: 1
2020-04-20 14:43:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:43:08 -==> Parameters: 181(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:43:08 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:43:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:43:08 -<==    Updates: 1
2020-04-20 14:43:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:43:08 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:43:08 -<==      Total: 1
2020-04-20 14:43:08 -耗时 : 70
2020-04-20 14:43:14 -此处进行解密+验签+身份验证
2020-04-20 14:43:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:43:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:43:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:43:14 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:43:14 -==> Parameters: 10(String)
2020-04-20 14:43:14 -<==      Total: 1
2020-04-20 14:43:14 -耗时 : 3
2020-04-20 14:44:32 -Starting LongEcologicalApplication on PC-201905161910 with PID 480 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 14:44:32 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 14:44:32 -No active profile set, falling back to default profiles: default
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 14:44:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 14:44:33 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 14:44:33 -Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2020-04-20 14:44:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 14:44:33 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 14:44:33 -Finished Spring Data repository scanning in 21ms. Found 0 repository interfaces.
2020-04-20 14:44:34 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c31918e9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 14:44:34 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bd9cfd89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 14:44:34 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 14:44:34 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 14:44:34 -Starting service [Tomcat]
2020-04-20 14:44:34 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 14:44:34 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 14:44:35 -Initializing Spring embedded WebApplicationContext
2020-04-20 14:44:35 -Root WebApplicationContext: initialization completed in 2655 ms
2020-04-20 14:44:35 -Filter xssFilter was not registered (disabled)
2020-04-20 14:44:36 -HikariPool-1 - Starting...
2020-04-20 14:44:36 -HikariPool-1 - Start completed.
2020-04-20 14:44:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 14:44:36 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 14:44:36 -HHH000206: hibernate.properties not found
2020-04-20 14:44:36 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 14:44:37 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 14:44:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 14:44:38 -Using default implementation for ThreadExecutor
2020-04-20 14:44:38 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 14:44:38 -Quartz Scheduler v.2.3.0 created.
2020-04-20 14:44:38 -RAMJobStore initialized.
2020-04-20 14:44:38 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 14:44:38 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 14:44:38 -Quartz scheduler version: 2.3.0
2020-04-20 14:44:38 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4607d78b
2020-04-20 14:44:39 -STAET TaskExecutorConfig
2020-04-20 14:44:39 -Initializing ExecutorService
2020-04-20 14:44:39 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 14:44:39 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 14:44:39 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 14:44:40 -Initializing ExecutorService 'taskScheduler'
2020-04-20 14:44:40 -Starting Quartz Scheduler now
2020-04-20 14:44:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 14:44:40 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 14:44:40 -Using a shared selector for servlet write/read
2020-04-20 14:44:40 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 14:44:40 -Started LongEcologicalApplication in 8.179 seconds (JVM running for 9.303)
2020-04-20 14:47:13 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 14:47:13 -Initializing Servlet 'dispatcherServlet'
2020-04-20 14:47:13 -Completed initialization in 14 ms
2020-04-20 14:47:13 -此处进行解密+验签+身份验证
2020-04-20 14:47:13 -此处进行解密+验签+身份验证
2020-04-20 14:47:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:47:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:47:13 -Starting without optional epoll library
2020-04-20 14:47:13 -Starting without optional kqueue library
2020-04-20 14:47:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:47:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:47:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:47:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:47:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:47:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:47:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:47:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:47:14 -==> Parameters: 181(String)
2020-04-20 14:47:14 -==> Parameters: 181(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -耗时 : 44
2020-04-20 14:47:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:47:14 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 2
2020-04-20 14:47:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:47:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:47:14 -<==    Updates: 2
2020-04-20 14:47:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:47:14 -==> Parameters: 181(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:47:14 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:47:14 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:47:14 -<==    Updates: 1
2020-04-20 14:47:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:47:14 -==> Parameters: 
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:47:14 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:47:14 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:47:14 -<==    Updates: 1
2020-04-20 14:47:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:47:14 -==> Parameters: 181(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:47:14 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:47:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:47:14 -<==    Updates: 1
2020-04-20 14:47:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:47:14 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:47:14 -<==      Total: 1
2020-04-20 14:47:14 -耗时 : 123
2020-04-20 14:56:09 -此处进行解密+验签+身份验证
2020-04-20 14:56:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:56:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:56:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-04-20 14:56:09 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-04-20 14:56:09 -==> Parameters: 11(String)
2020-04-20 14:56:09 -<==      Total: 1
2020-04-20 14:56:09 -耗时 : 6
2020-04-20 14:56:11 -此处进行解密+验签+身份验证
2020-04-20 14:56:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:56:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:56:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:56:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:56:11 -==> Parameters: 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -耗时 : 4
2020-04-20 14:56:11 -此处进行解密+验签+身份验证
2020-04-20 14:56:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:56:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:56:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:56:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:56:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:56:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:56:11 -==> Parameters: 181(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:56:11 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 2
2020-04-20 14:56:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:56:11 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:56:11 -<==    Updates: 2
2020-04-20 14:56:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:56:11 -==> Parameters: 181(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:56:11 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:56:11 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:56:11 -<==    Updates: 1
2020-04-20 14:56:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:56:11 -==> Parameters: 
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:56:11 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:56:11 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:56:11 -<==    Updates: 1
2020-04-20 14:56:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:56:11 -==> Parameters: 181(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:56:11 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:56:11 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:56:11 -<==    Updates: 1
2020-04-20 14:56:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:56:11 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:56:11 -<==      Total: 1
2020-04-20 14:56:11 -耗时 : 78
2020-04-20 14:58:30 -此处进行解密+验签+身份验证
2020-04-20 14:58:30 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 14:58:30 -此处进行解密+验签+身份验证
2020-04-20 14:58:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 14:58:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 14:58:30 -耗时 : 30
2020-04-20 14:58:30 -解密：
2020-04-20 14:58:31 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 14:58:31 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 14:58:31 -==> Parameters: 04(String), 04(String)
2020-04-20 14:58:31 -<==      Total: 1
2020-04-20 14:58:31 -耗时 : 11
2020-04-20 14:58:31 -此处进行解密+验签+身份验证
2020-04-20 14:58:31 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"24A28EFA7BA75CC4353FC72670B329AC","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|FQWQHQI3G2YMRS7AO7R91O6RAJGCYL9D"}
2020-04-20 14:58:31 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 14:58:31 -token值=======181|FQWQHQI3G2YMRS7AO7R91O6RAJGCYL9D
2020-04-20 14:58:31 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-20 14:58:31 -==> Parameters: 181(String)
2020-04-20 14:58:31 -<==      Total: 1
2020-04-20 14:58:31 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 14:58:31 -==> Parameters: 26(String)
2020-04-20 14:58:31 -<==      Total: 1
2020-04-20 14:58:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 14:58:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 14:58:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 14:58:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 14:58:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 14:58:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 14:58:31 -耗时 : 33
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:58:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:58:35 -==> Parameters: 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -耗时 : 1
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:58:35 -解密：
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 14:58:35 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 14:58:35 -==> Parameters: 01(String), 01(String)
2020-04-20 14:58:35 -<==      Total: 4
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 14:58:35 -耗时 : 3
2020-04-20 14:58:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 14:58:35 -==> Parameters: 181(String)
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:58:35 -<==      Total: 2
2020-04-20 14:58:35 -耗时 : 35
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:58:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:58:35 -==> Parameters: 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -耗时 : 2
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 14:58:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 14:58:35 -==> Parameters: 
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:58:35 -<==      Total: 3
2020-04-20 14:58:35 -耗时 : 8
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:58:35 -此处进行解密+验签+身份验证
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:58:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:58:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:58:35 -==> Parameters: 181(String), 181(String)
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:58:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:58:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:58:35 -==> Parameters: 181(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:58:35 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 2
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:58:35 -<==      Total: 2
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:58:35 -<==    Updates: 2
2020-04-20 14:58:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:58:35 -==> Parameters: 181(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:58:35 -<==    Updates: 1
2020-04-20 14:58:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:58:35 -==> Parameters: 
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:58:35 -<==    Updates: 1
2020-04-20 14:58:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:58:35 -==> Parameters: 181(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:58:35 -<==    Updates: 2
2020-04-20 14:58:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:58:35 -==> Parameters: 181(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:58:35 -<==    Updates: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:58:35 -<==    Updates: 1
2020-04-20 14:58:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:58:35 -==> Parameters: 
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -耗时 : 106
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:58:35 -<==    Updates: 1
2020-04-20 14:58:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:58:35 -==> Parameters: 181(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:58:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:58:35 -<==    Updates: 1
2020-04-20 14:58:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:58:35 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:58:35 -<==      Total: 1
2020-04-20 14:58:35 -耗时 : 131
2020-04-20 14:58:43 -此处进行解密+验签+身份验证
2020-04-20 14:58:43 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-20 14:58:43 -token值=======181|FQWQHQI3G2YMRS7AO7R91O6RAJGCYL9D
2020-04-20 14:58:43 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-20 14:58:43 -==> Parameters: null, 181(String)
2020-04-20 14:58:44 -<==    Updates: 1
2020-04-20 14:58:44 -耗时 : 407
2020-04-20 14:58:58 -此处进行解密+验签+身份验证
2020-04-20 14:58:58 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"3E72A9D20D793E544591F970E6176C23","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 14:58:58 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 14:58:58 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 14:58:58 -==> Parameters: 13322990711(String)
2020-04-20 14:58:58 -<==      Total: 1
2020-04-20 14:58:58 -耗时 : 62
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"41AB57816D026EC0FB664984B27C4C7C","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 14:59:07 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 14:59:07 -==> Parameters: 13322990711(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-20 14:59:07 -==> Parameters: android(String), 1.1.4(String), (String), null, 192.168.191.1(String), 20200420(String), 145907(String), 181(Integer)
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 14:59:07 -==> Parameters: 26(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 14:59:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 14:59:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 14:59:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 14:59:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 14:59:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 14:59:07 -耗时 : 59
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:59:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:59:07 -==> Parameters: 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -耗时 : 2
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 14:59:07 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 14:59:07 -==> Parameters: 181(String)
2020-04-20 14:59:07 -<==      Total: 2
2020-04-20 14:59:07 -耗时 : 3
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 14:59:07 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 14:59:07 -==> Parameters: 
2020-04-20 14:59:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:59:07 -==> Parameters: 181(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 3
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -耗时 : 5
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 2
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -解密：
2020-04-20 14:59:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 14:59:07 -==> Parameters: 181(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -此处进行解密+验签+身份验证
2020-04-20 14:59:07 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 14:59:07 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 14:59:07 -==> Parameters: 01(String), 01(String)
2020-04-20 14:59:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 14:59:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 14:59:07 -<==      Total: 4
2020-04-20 14:59:07 -耗时 : 8
2020-04-20 14:59:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 14:59:07 -==> Parameters: 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -耗时 : 8
2020-04-20 14:59:07 -<==      Total: 2
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 14:59:07 -<==    Updates: 2
2020-04-20 14:59:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:59:07 -==> Parameters: 181(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:59:07 -<==    Updates: 2
2020-04-20 14:59:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 14:59:07 -==> Parameters: 181(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:59:07 -==> Parameters: 
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 14:59:07 -==> Parameters: 
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:59:07 -==> Parameters: 181(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 14:59:07 -==> Parameters: 181(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 14:59:07 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -耗时 : 126
2020-04-20 14:59:07 -<==    Updates: 1
2020-04-20 14:59:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 14:59:07 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 14:59:07 -<==      Total: 1
2020-04-20 14:59:07 -耗时 : 109
2020-04-20 15:00:31 -此处进行解密+验签+身份验证
2020-04-20 15:00:31 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 15:00:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 15:00:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 15:00:31 -耗时 : 3
2020-04-20 15:00:31 -此处进行解密+验签+身份验证
2020-04-20 15:00:31 -解密：
2020-04-20 15:00:31 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 15:00:31 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 15:00:31 -==> Parameters: 04(String), 04(String)
2020-04-20 15:00:31 -<==      Total: 1
2020-04-20 15:00:31 -耗时 : 3
2020-04-20 15:00:31 -此处进行解密+验签+身份验证
2020-04-20 15:00:31 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"D9BD5425FB86D7E6B51CCAC7272030E6","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|YPSM827L6955CZMKPDBFWZL88948XW5L"}
2020-04-20 15:00:31 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 15:00:31 -token值=======181|YPSM827L6955CZMKPDBFWZL88948XW5L
2020-04-20 15:00:31 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-20 15:00:31 -==> Parameters: 181(String)
2020-04-20 15:00:31 -<==      Total: 1
2020-04-20 15:00:31 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 15:00:31 -==> Parameters: 26(String)
2020-04-20 15:00:31 -<==      Total: 1
2020-04-20 15:00:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:00:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:00:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:00:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:00:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:00:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:00:32 -耗时 : 20
2020-04-20 15:01:25 -此处进行解密+验签+身份验证
2020-04-20 15:01:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:01:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:01:25 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:01:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:01:25 -==> Parameters: 181(String)
2020-04-20 15:01:25 -<==      Total: 1
2020-04-20 15:01:25 -耗时 : 2
2020-04-20 15:01:26 -此处进行解密+验签+身份验证
2020-04-20 15:01:26 -解密：
2020-04-20 15:01:26 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 15:01:26 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 15:01:26 -==> Parameters: 01(String), 01(String)
2020-04-20 15:01:26 -<==      Total: 4
2020-04-20 15:01:26 -耗时 : 2
2020-04-20 15:01:26 -此处进行解密+验签+身份验证
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:01:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 15:01:26 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 15:01:26 -==> Parameters: 181(String)
2020-04-20 15:01:26 -<==      Total: 2
2020-04-20 15:01:26 -耗时 : 9
2020-04-20 15:01:26 -此处进行解密+验签+身份验证
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:01:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:01:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:01:26 -==> Parameters: 181(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 2
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:01:26 -<==    Updates: 2
2020-04-20 15:01:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:01:26 -==> Parameters: 181(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:01:26 -<==    Updates: 1
2020-04-20 15:01:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:01:26 -==> Parameters: 
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -此处进行解密+验签+身份验证
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -此处进行解密+验签+身份验证
2020-04-20 15:01:26 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:01:26 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 15:01:26 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:01:26 -==> Parameters: 
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:01:26 -<==      Total: 3
2020-04-20 15:01:26 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:01:26 -耗时 : 3
2020-04-20 15:01:26 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:01:26 -==> Parameters: 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -耗时 : 2
2020-04-20 15:01:26 -<==    Updates: 1
2020-04-20 15:01:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:01:26 -==> Parameters: 181(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:01:26 -<==    Updates: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -耗时 : 76
2020-04-20 15:01:26 -此处进行解密+验签+身份验证
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:01:26 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:01:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:01:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:01:26 -==> Parameters: 181(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 2
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:01:26 -<==    Updates: 2
2020-04-20 15:01:26 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:01:26 -==> Parameters: 181(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:01:26 -<==    Updates: 1
2020-04-20 15:01:26 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:01:26 -==> Parameters: 
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:01:26 -<==    Updates: 1
2020-04-20 15:01:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:01:26 -==> Parameters: 181(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:01:26 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:01:26 -<==    Updates: 1
2020-04-20 15:01:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:01:26 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:01:26 -<==      Total: 1
2020-04-20 15:01:26 -耗时 : 56
2020-04-20 15:07:10 -此处进行解密+验签+身份验证
2020-04-20 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:07:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:07:10 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 2
2020-04-20 15:07:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:07:10 -<==    Updates: 2
2020-04-20 15:07:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:07:10 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:10 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:07:10 -<==    Updates: 1
2020-04-20 15:07:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:07:10 -==> Parameters: 
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:10 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:10 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:07:10 -<==    Updates: 1
2020-04-20 15:07:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:07:10 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:10 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:07:10 -<==    Updates: 1
2020-04-20 15:07:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:10 -此处进行解密+验签+身份验证
2020-04-20 15:07:10 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:10 -耗时 : 60
2020-04-20 15:07:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:07:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:07:10 -==> Parameters: 181(String)
2020-04-20 15:07:10 -<==      Total: 1
2020-04-20 15:07:10 -耗时 : 1
2020-04-20 15:07:12 -此处进行解密+验签+身份验证
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:12 -此处进行解密+验签+身份验证
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:07:12 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:07:12 -==> Parameters: 181(String)
2020-04-20 15:07:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 15:07:12 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 15:07:12 -==> Parameters: 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -耗时 : 2
2020-04-20 15:07:12 -<==      Total: 2
2020-04-20 15:07:12 -耗时 : 1
2020-04-20 15:07:12 -此处进行解密+验签+身份验证
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:12 -此处进行解密+验签+身份验证
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:12 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 15:07:12 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 15:07:12 -==> Parameters: 
2020-04-20 15:07:12 -此处进行解密+验签+身份验证
2020-04-20 15:07:12 -解密：
2020-04-20 15:07:12 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 15:07:12 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 15:07:12 -==> Parameters: 01(String), 01(String)
2020-04-20 15:07:12 -<==      Total: 3
2020-04-20 15:07:12 -耗时 : 3
2020-04-20 15:07:12 -<==      Total: 4
2020-04-20 15:07:12 -耗时 : 2
2020-04-20 15:07:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:07:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:07:12 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:12 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 2
2020-04-20 15:07:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:12 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:07:12 -<==    Updates: 2
2020-04-20 15:07:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:07:12 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:12 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:12 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:07:12 -<==    Updates: 1
2020-04-20 15:07:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:07:12 -==> Parameters: 
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:12 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:12 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:07:12 -<==    Updates: 1
2020-04-20 15:07:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:07:12 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:12 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:12 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:07:12 -<==    Updates: 1
2020-04-20 15:07:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:12 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:07:12 -<==      Total: 1
2020-04-20 15:07:12 -耗时 : 93
2020-04-20 15:07:13 -此处进行解密+验签+身份验证
2020-04-20 15:07:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:13 -此处进行解密+验签+身份验证
2020-04-20 15:07:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:07:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:07:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:07:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:07:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:07:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:07:13 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:07:13 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:07:13 -==> Parameters: 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -耗时 : 8
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:13 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 2
2020-04-20 15:07:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:13 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:07:13 -<==    Updates: 2
2020-04-20 15:07:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:07:13 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:13 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:13 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:07:13 -<==    Updates: 1
2020-04-20 15:07:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:07:13 -==> Parameters: 
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:13 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:13 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:07:13 -<==    Updates: 1
2020-04-20 15:07:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:07:13 -==> Parameters: 181(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:13 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:07:13 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:07:13 -<==    Updates: 1
2020-04-20 15:07:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:07:13 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:07:13 -<==      Total: 1
2020-04-20 15:07:13 -耗时 : 70
2020-04-20 15:08:57 -此处进行解密+验签+身份验证
2020-04-20 15:08:57 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"D9BD5425FB86D7E6B51CCAC7272030E6","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|YPSM827L6955CZMKPDBFWZL88948XW5L"}
2020-04-20 15:08:57 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 15:08:57 -token值=======181|YPSM827L6955CZMKPDBFWZL88948XW5L
2020-04-20 15:08:57 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-20 15:08:57 -==> Parameters: 181(String)
2020-04-20 15:08:57 -<==      Total: 1
2020-04-20 15:08:57 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 15:08:57 -==> Parameters: 26(String)
2020-04-20 15:08:57 -<==      Total: 1
2020-04-20 15:08:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:08:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:08:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:08:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:08:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:08:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:08:57 -耗时 : 26
2020-04-20 15:09:55 -此处进行解密+验签+身份验证
2020-04-20 15:09:55 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 15:09:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 15:09:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 15:09:55 -耗时 : 2
2020-04-20 15:09:55 -此处进行解密+验签+身份验证
2020-04-20 15:09:55 -解密：
2020-04-20 15:09:55 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 15:09:55 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 15:09:55 -==> Parameters: 04(String), 04(String)
2020-04-20 15:09:55 -<==      Total: 1
2020-04-20 15:09:55 -耗时 : 5
2020-04-20 15:09:56 -此处进行解密+验签+身份验证
2020-04-20 15:09:56 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"D9BD5425FB86D7E6B51CCAC7272030E6","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|YPSM827L6955CZMKPDBFWZL88948XW5L"}
2020-04-20 15:09:56 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 15:09:56 -token值=======181|YPSM827L6955CZMKPDBFWZL88948XW5L
2020-04-20 15:09:56 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-20 15:09:56 -==> Parameters: 181(String)
2020-04-20 15:09:56 -<==      Total: 1
2020-04-20 15:09:56 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 15:09:56 -==> Parameters: 26(String)
2020-04-20 15:09:56 -<==      Total: 1
2020-04-20 15:09:56 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:09:56 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:09:56 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:09:56 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:09:56 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:09:56 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:09:56 -耗时 : 14
2020-04-20 15:10:15 -此处进行解密+验签+身份验证
2020-04-20 15:10:15 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 15:10:15 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 15:10:15 -此处进行解密+验签+身份验证
2020-04-20 15:10:15 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 15:10:15 -解密：
2020-04-20 15:10:15 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 15:10:15 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 15:10:15 -==> Parameters: 04(String), 04(String)
2020-04-20 15:10:15 -耗时 : 3
2020-04-20 15:10:15 -<==      Total: 1
2020-04-20 15:10:15 -耗时 : 2
2020-04-20 15:10:16 -此处进行解密+验签+身份验证
2020-04-20 15:10:16 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"D9BD5425FB86D7E6B51CCAC7272030E6","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|YPSM827L6955CZMKPDBFWZL88948XW5L"}
2020-04-20 15:10:16 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 15:10:16 -token值=======181|YPSM827L6955CZMKPDBFWZL88948XW5L
2020-04-20 15:10:16 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-20 15:10:16 -==> Parameters: 181(String)
2020-04-20 15:10:16 -<==      Total: 1
2020-04-20 15:10:16 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 15:10:16 -==> Parameters: 26(String)
2020-04-20 15:10:16 -<==      Total: 1
2020-04-20 15:10:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:10:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:10:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:10:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:10:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 15:10:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 15:10:16 -耗时 : 15
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:10:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:10:20 -==> Parameters: 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -耗时 : 1
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 15:10:20 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 15:10:20 -==> Parameters: 
2020-04-20 15:10:20 -<==      Total: 3
2020-04-20 15:10:20 -耗时 : 13
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:10:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:10:20 -==> Parameters: 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -耗时 : 1
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -解密：
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 15:10:20 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 15:10:20 -==> Parameters: 01(String), 01(String)
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:20 -<==      Total: 4
2020-04-20 15:10:20 -耗时 : 2
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 15:10:20 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 15:10:20 -==> Parameters: 181(String)
2020-04-20 15:10:20 -<==      Total: 2
2020-04-20 15:10:20 -耗时 : 3
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:10:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:10:20 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 2
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:10:20 -<==    Updates: 2
2020-04-20 15:10:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:10:20 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:20 -此处进行解密+验签+身份验证
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:10:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:10:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:10:20 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:10:20 -<==    Updates: 1
2020-04-20 15:10:20 -<==      Total: 2
2020-04-20 15:10:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:10:20 -==> Parameters: 
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -<==    Updates: 2
2020-04-20 15:10:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:10:20 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:10:20 -<==    Updates: 1
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:20 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:10:20 -<==    Updates: 1
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:10:20 -==> Parameters: 
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:20 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:10:20 -<==    Updates: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -耗时 : 82
2020-04-20 15:10:20 -<==    Updates: 1
2020-04-20 15:10:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:10:20 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:20 -<==      Total: 1
2020-04-20 15:10:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:20 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:10:21 -<==      Total: 1
2020-04-20 15:10:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:21 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:10:21 -<==    Updates: 1
2020-04-20 15:10:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:21 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:10:21 -<==      Total: 1
2020-04-20 15:10:21 -耗时 : 57
2020-04-20 15:10:28 -此处进行解密+验签+身份验证
2020-04-20 15:10:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:28 -此处进行解密+验签+身份验证
2020-04-20 15:10:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 15:10:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 15:10:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 15:10:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 15:10:28 -==> Parameters: 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -耗时 : 3
2020-04-20 15:10:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 15:10:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 15:10:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 15:10:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:10:28 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:28 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 2
2020-04-20 15:10:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 15:10:28 -<==    Updates: 2
2020-04-20 15:10:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 15:10:28 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:28 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:28 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 15:10:28 -<==    Updates: 1
2020-04-20 15:10:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 15:10:28 -==> Parameters: 
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:28 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:28 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 15:10:28 -<==    Updates: 1
2020-04-20 15:10:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 15:10:28 -==> Parameters: 181(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:28 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 15:10:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 15:10:28 -<==    Updates: 1
2020-04-20 15:10:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 15:10:28 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 15:10:28 -<==      Total: 1
2020-04-20 15:10:28 -耗时 : 57
2020-04-20 15:23:11 -Starting LongEcologicalApplication on PC-201905161910 with PID 1956 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 15:23:11 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 15:23:11 -No active profile set, falling back to default profiles: default
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:12 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 15:23:13 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 15:23:13 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 15:23:13 -Finished Spring Data repository scanning in 75ms. Found 0 repository interfaces.
2020-04-20 15:23:13 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 15:23:13 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 15:23:13 -Finished Spring Data repository scanning in 32ms. Found 0 repository interfaces.
2020-04-20 15:23:13 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$e0d43ace] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 15:23:13 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$db581f6e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 15:23:14 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 15:23:14 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 15:23:14 -Starting service [Tomcat]
2020-04-20 15:23:14 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 15:23:14 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 15:23:14 -Initializing Spring embedded WebApplicationContext
2020-04-20 15:23:14 -Root WebApplicationContext: initialization completed in 2940 ms
2020-04-20 15:23:14 -Filter xssFilter was not registered (disabled)
2020-04-20 15:23:15 -HikariPool-1 - Starting...
2020-04-20 15:23:15 -HikariPool-1 - Start completed.
2020-04-20 15:23:15 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 15:23:15 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 15:23:15 -HHH000206: hibernate.properties not found
2020-04-20 15:23:15 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 15:23:16 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 15:23:16 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 15:23:17 -Using default implementation for ThreadExecutor
2020-04-20 15:23:17 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 15:23:17 -Quartz Scheduler v.2.3.0 created.
2020-04-20 15:23:17 -RAMJobStore initialized.
2020-04-20 15:23:17 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 15:23:17 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 15:23:17 -Quartz scheduler version: 2.3.0
2020-04-20 15:23:17 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@104cfb24
2020-04-20 15:23:17 -STAET TaskExecutorConfig
2020-04-20 15:23:17 -Initializing ExecutorService
2020-04-20 15:23:17 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 15:23:18 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 15:23:18 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 15:23:18 -Initializing ExecutorService 'taskScheduler'
2020-04-20 15:23:18 -Starting Quartz Scheduler now
2020-04-20 15:23:18 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 15:23:19 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 15:23:19 -Using a shared selector for servlet write/read
2020-04-20 15:23:19 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 15:23:19 -Started LongEcologicalApplication in 8.171 seconds (JVM running for 10.923)
2020-04-20 16:23:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-20 16:23:07 -Shutting down ExecutorService 'taskScheduler'
2020-04-20 16:23:07 -Shutting down ExecutorService 'getAsyncExecutor'
2020-04-20 16:23:07 -Shutting down Quartz Scheduler
2020-04-20 16:23:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-04-20 16:23:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-20 16:23:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-04-20 16:23:07 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 16:23:07 -HikariPool-1 - Shutdown initiated...
2020-04-20 16:23:07 -HikariPool-1 - Shutdown completed.
2020-04-20 16:23:14 -Starting LongEcologicalApplication on PC-201905161910 with PID 4208 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-20 16:23:14 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-20 16:23:14 -No active profile set, falling back to default profiles: default
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-20 16:23:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 16:23:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 16:23:15 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-04-20 16:23:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-20 16:23:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-20 16:23:16 -Finished Spring Data repository scanning in 23ms. Found 0 repository interfaces.
2020-04-20 16:23:16 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$908bb424] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 16:23:16 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8b0f98c4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-20 16:23:17 -Tomcat initialized with port(s): 8080 (http)
2020-04-20 16:23:17 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-20 16:23:17 -Starting service [Tomcat]
2020-04-20 16:23:17 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-20 16:23:17 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-20 16:23:17 -Initializing Spring embedded WebApplicationContext
2020-04-20 16:23:17 -Root WebApplicationContext: initialization completed in 2406 ms
2020-04-20 16:23:17 -Filter xssFilter was not registered (disabled)
2020-04-20 16:23:17 -HikariPool-1 - Starting...
2020-04-20 16:23:17 -HikariPool-1 - Start completed.
2020-04-20 16:23:17 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-20 16:23:18 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-20 16:23:18 -HHH000206: hibernate.properties not found
2020-04-20 16:23:18 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-20 16:23:18 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-20 16:23:18 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 16:23:19 -Using default implementation for ThreadExecutor
2020-04-20 16:23:19 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-20 16:23:19 -Quartz Scheduler v.2.3.0 created.
2020-04-20 16:23:19 -RAMJobStore initialized.
2020-04-20 16:23:19 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-20 16:23:19 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-20 16:23:19 -Quartz scheduler version: 2.3.0
2020-04-20 16:23:19 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@608f310a
2020-04-20 16:23:19 -STAET TaskExecutorConfig
2020-04-20 16:23:19 -Initializing ExecutorService
2020-04-20 16:23:19 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-20 16:23:20 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-20 16:23:20 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-20 16:23:20 -Initializing ExecutorService 'taskScheduler'
2020-04-20 16:23:21 -Starting Quartz Scheduler now
2020-04-20 16:23:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-20 16:23:21 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-20 16:23:21 -Using a shared selector for servlet write/read
2020-04-20 16:23:21 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-20 16:23:21 -Started LongEcologicalApplication in 7.107 seconds (JVM running for 8.194)
2020-04-20 16:26:35 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-20 16:26:35 -Initializing Servlet 'dispatcherServlet'
2020-04-20 16:26:35 -Completed initialization in 13 ms
2020-04-20 16:26:35 -此处进行解密+验签+身份验证
2020-04-20 16:26:35 -此处进行解密+验签+身份验证
2020-04-20 16:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 16:26:36 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 16:26:36 -Starting without optional epoll library
2020-04-20 16:26:36 -Starting without optional kqueue library
2020-04-20 16:26:36 -解密：
2020-04-20 16:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 16:26:36 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 16:26:36 -==> Parameters: 04(String), 04(String)
2020-04-20 16:26:37 -<==      Total: 1
2020-04-20 16:26:37 -耗时 : 136
2020-04-20 16:26:37 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 16:26:37 -耗时 : 1706
2020-04-20 16:26:37 -此处进行解密+验签+身份验证
2020-04-20 16:26:37 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"7F4C19984A83F5C889AE3E1B3ADECE78","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|WG3L8HZPY5TKKUI05JW2B4KX01ENZPJW"}
2020-04-20 16:26:37 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 16:26:37 -token值=======181|WG3L8HZPY5TKKUI05JW2B4KX01ENZPJW
2020-04-20 16:26:37 -耗时 : 6
2020-04-20 16:26:58 -此处进行解密+验签+身份验证
2020-04-20 16:26:58 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"41AB57816D026EC0FB664984B27C4C7C","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 16:26:58 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 16:26:58 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 16:26:58 -==> Parameters: 13322990711(String)
2020-04-20 16:26:58 -<==      Total: 1
2020-04-20 16:26:58 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-20 16:26:58 -==> Parameters: android(String), 1.1.4(String), (String), null, 192.168.191.1(String), 20200420(String), 162658(String), 181(Integer)
2020-04-20 16:26:58 -<==    Updates: 1
2020-04-20 16:26:58 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 16:26:58 -==> Parameters: 26(String)
2020-04-20 16:26:58 -<==      Total: 1
2020-04-20 16:27:09 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:27:09 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:27:09 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:27:09 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:27:09 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:27:09 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:27:09 -耗时 : 10664
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 16:27:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 16:27:28 -==> Parameters: 181(String)
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -耗时 : 7
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -解密：
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 16:27:28 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 16:27:28 -==> Parameters: 01(String), 01(String)
2020-04-20 16:27:28 -<==      Total: 4
2020-04-20 16:27:28 -耗时 : 2
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 16:27:28 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 16:27:28 -==> Parameters: 181(String)
2020-04-20 16:27:28 -<==      Total: 2
2020-04-20 16:27:28 -耗时 : 55
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 16:27:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:27:28 -==> Parameters: 181(String), 181(String)
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 16:27:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:27:28 -==> Parameters: 181(String), 181(String)
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:28 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:28 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:27:28 -此处进行解密+验签+身份验证
2020-04-20 16:27:28 -<==      Total: 2
2020-04-20 16:27:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:28 -<==      Total: 2
2020-04-20 16:27:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 16:27:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:28 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 16:27:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 16:27:28 -==> Parameters: 181(String)
2020-04-20 16:27:28 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 16:27:28 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 16:27:28 -==> Parameters: 
2020-04-20 16:27:28 -<==    Updates: 2
2020-04-20 16:27:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 16:27:28 -==> Parameters: 181(String), 181(String)
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -<==    Updates: 2
2020-04-20 16:27:28 -耗时 : 21
2020-04-20 16:27:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 16:27:28 -==> Parameters: 181(String), 181(String)
2020-04-20 16:27:28 -<==      Total: 3
2020-04-20 16:27:28 -耗时 : 19
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:28 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 16:27:28 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -<==      Total: 1
2020-04-20 16:27:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:28 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 16:27:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:28 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 16:27:28 -<==    Updates: 1
2020-04-20 16:27:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 16:27:28 -==> Parameters: 
2020-04-20 16:27:29 -<==    Updates: 1
2020-04-20 16:27:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 16:27:29 -==> Parameters: 
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:29 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 16:27:29 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:29 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 16:27:29 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 16:27:29 -<==    Updates: 1
2020-04-20 16:27:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:27:29 -==> Parameters: 181(String), 181(String)
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:29 -<==    Updates: 1
2020-04-20 16:27:29 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 16:27:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:27:29 -==> Parameters: 181(String), 181(String)
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:29 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:29 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:27:29 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 16:27:29 -<==    Updates: 1
2020-04-20 16:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:29 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 16:27:29 -<==    Updates: 1
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:27:29 -耗时 : 147
2020-04-20 16:27:29 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 16:27:29 -<==      Total: 1
2020-04-20 16:27:29 -耗时 : 133
2020-04-20 16:38:43 -此处进行解密+验签+身份验证
2020-04-20 16:38:43 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 16:38:43 -此处进行解密+验签+身份验证
2020-04-20 16:38:43 -解密：
2020-04-20 16:38:43 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 16:38:43 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 16:38:43 -==> Parameters: 04(String), 04(String)
2020-04-20 16:38:43 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 16:38:43 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 16:38:43 -耗时 : 32
2020-04-20 16:38:43 -<==      Total: 1
2020-04-20 16:38:43 -耗时 : 29
2020-04-20 16:38:44 -此处进行解密+验签+身份验证
2020-04-20 16:38:44 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"1731F52F8A115223E2A70490FCDFB09B","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|1WWNE7UMOXIZNIBCNZZYIM0UEMQDPB6S"}
2020-04-20 16:38:44 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 16:38:44 -token值=======181|1WWNE7UMOXIZNIBCNZZYIM0UEMQDPB6S
2020-04-20 16:38:44 -耗时 : 1
2020-04-20 16:39:01 -此处进行解密+验签+身份验证
2020-04-20 16:39:01 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"41AB57816D026EC0FB664984B27C4C7C","device_no":"1.1.4","device_type":"android","sys_user_account":"13322990711"}
2020-04-20 16:39:01 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 16:39:01 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-20 16:39:01 -==> Parameters: 13322990711(String)
2020-04-20 16:39:01 -<==      Total: 1
2020-04-20 16:39:01 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-20 16:39:01 -==> Parameters: android(String), 1.1.4(String), (String), null, 192.168.191.1(String), 20200420(String), 163901(String), 181(Integer)
2020-04-20 16:39:01 -<==    Updates: 1
2020-04-20 16:39:01 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 16:39:01 -==> Parameters: 26(String)
2020-04-20 16:39:01 -<==      Total: 1
2020-04-20 16:39:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:39:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:39:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:39:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:39:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:39:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:39:07 -耗时 : 5408
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 16:39:41 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 16:39:41 -==> Parameters: 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -耗时 : 7
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 16:39:41 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 16:39:41 -==> Parameters: 181(String)
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -解密：
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 16:39:41 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 16:39:41 -==> Parameters: 01(String), 01(String)
2020-04-20 16:39:41 -<==      Total: 4
2020-04-20 16:39:41 -耗时 : 4
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:39:41 -<==      Total: 2
2020-04-20 16:39:41 -耗时 : 58
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 16:39:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:39:41 -==> Parameters: 181(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 2
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 16:39:41 -<==    Updates: 2
2020-04-20 16:39:41 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 16:39:41 -==> Parameters: 181(String), 181(String)
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 16:39:41 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 16:39:41 -==> Parameters: 
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 3
2020-04-20 16:39:41 -耗时 : 5
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 16:39:41 -<==    Updates: 1
2020-04-20 16:39:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 16:39:41 -==> Parameters: 
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 16:39:41 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 16:39:41 -==> Parameters: 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -耗时 : 2
2020-04-20 16:39:41 -<==    Updates: 1
2020-04-20 16:39:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:39:41 -==> Parameters: 181(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 16:39:41 -<==    Updates: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -耗时 : 134
2020-04-20 16:39:41 -此处进行解密+验签+身份验证
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:39:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 16:39:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 16:39:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:39:41 -==> Parameters: 181(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 2
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 16:39:41 -<==    Updates: 2
2020-04-20 16:39:41 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 16:39:41 -==> Parameters: 181(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 16:39:41 -<==    Updates: 1
2020-04-20 16:39:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 16:39:41 -==> Parameters: 
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 16:39:41 -<==    Updates: 1
2020-04-20 16:39:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:39:41 -==> Parameters: 181(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:39:41 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 16:39:41 -<==    Updates: 1
2020-04-20 16:39:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:39:41 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 16:39:41 -<==      Total: 1
2020-04-20 16:39:41 -耗时 : 59
2020-04-20 16:46:39 -此处进行解密+验签+身份验证
2020-04-20 16:46:39 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-20 16:46:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-20 16:46:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-20 16:46:39 -耗时 : 4
2020-04-20 16:46:39 -此处进行解密+验签+身份验证
2020-04-20 16:46:39 -解密：
2020-04-20 16:46:39 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 16:46:39 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 16:46:39 -==> Parameters: 04(String), 04(String)
2020-04-20 16:46:39 -<==      Total: 1
2020-04-20 16:46:39 -耗时 : 19
2020-04-20 16:46:40 -此处进行解密+验签+身份验证
2020-04-20 16:46:40 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"3414086357C2CC595346D8023DA6D431","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"181|3VZ102GPXR7CEIQEUS76CG7X9BKNTU3D"}
2020-04-20 16:46:40 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-20 16:46:40 -token值=======181|3VZ102GPXR7CEIQEUS76CG7X9BKNTU3D
2020-04-20 16:46:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-20 16:46:40 -==> Parameters: 181(String)
2020-04-20 16:46:40 -<==      Total: 1
2020-04-20 16:46:40 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-20 16:46:40 -==> Parameters: 26(String)
2020-04-20 16:46:40 -<==      Total: 1
2020-04-20 16:46:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:46:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:46:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:46:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:46:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-20 16:46:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-20 16:46:40 -耗时 : 41
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 16:46:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 16:46:44 -==> Parameters: 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -耗时 : 2
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -解密：
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-20 16:46:44 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-20 16:46:44 -==> Parameters: 01(String), 01(String)
2020-04-20 16:46:44 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-20 16:46:44 -==> Parameters: 181(String)
2020-04-20 16:46:44 -<==      Total: 4
2020-04-20 16:46:44 -耗时 : 2
2020-04-20 16:46:44 -<==      Total: 2
2020-04-20 16:46:44 -耗时 : 6
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:46:44 -==> Parameters: 
2020-04-20 16:46:44 -<==      Total: 3
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:46:44 -耗时 : 3
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 16:46:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:46:44 -==> Parameters: 181(String), 181(String)
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-20 16:46:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:46:44 -==> Parameters: 181(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-20 16:46:44 -此处进行解密+验签+身份验证
2020-04-20 16:46:44 -<==      Total: 2
2020-04-20 16:46:44 -<==      Total: 2
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 16:46:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-20 16:46:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-20 16:46:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-20 16:46:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-20 16:46:44 -==> Parameters: 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -耗时 : 3
2020-04-20 16:46:44 -<==    Updates: 2
2020-04-20 16:46:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 16:46:44 -==> Parameters: 181(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -<==    Updates: 2
2020-04-20 16:46:44 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 16:46:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-20 16:46:44 -==> Parameters: 181(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: recallFlag(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-20 16:46:44 -<==    Updates: 1
2020-04-20 16:46:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 16:46:44 -==> Parameters: 
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 16:46:44 -<==    Updates: 1
2020-04-20 16:46:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-20 16:46:44 -==> Parameters: 
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: collegeFlag(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-20 16:46:44 -<==    Updates: 1
2020-04-20 16:46:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:46:44 -==> Parameters: 181(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 16:46:44 -<==    Updates: 1
2020-04-20 16:46:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-20 16:46:44 -==> Parameters: 181(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: cardFlag(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-20 16:46:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-20 16:46:44 -<==    Updates: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -耗时 : 98
2020-04-20 16:46:44 -<==    Updates: 1
2020-04-20 16:46:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-20 16:46:44 -==> Parameters: appImgFlag(String), 181(String)
2020-04-20 16:46:44 -<==      Total: 1
2020-04-20 16:46:44 -耗时 : 97
2020-04-20 16:46:53 -此处进行解密+验签+身份验证
2020-04-20 16:46:53 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-20 16:46:53 -token值=======181|3VZ102GPXR7CEIQEUS76CG7X9BKNTU3D
2020-04-20 16:46:53 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-20 16:46:53 -==> Parameters: null, 181(String)
2020-04-20 16:46:53 -<==    Updates: 1
2020-04-20 16:46:53 -耗时 : 11
2020-04-20 18:33:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-20 18:33:51 -Shutting down ExecutorService 'taskScheduler'
2020-04-20 18:33:51 -Shutting down ExecutorService 'getAsyncExecutor'
2020-04-20 18:33:51 -Shutting down Quartz Scheduler
2020-04-20 18:33:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-04-20 18:33:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-20 18:33:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-04-20 18:33:51 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-04-20 18:33:51 -HikariPool-1 - Shutdown initiated...
2020-04-20 18:33:51 -HikariPool-1 - Shutdown completed.
