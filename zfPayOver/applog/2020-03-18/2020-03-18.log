2020-03-18 10:19:55 -Starting LongEcologicalApplication on PC-201905161910 with PID 14996 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 10:19:55 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 10:19:55 -No active profile set, falling back to default profiles: default
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:56 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:19:57 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 10:19:57 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 10:19:57 -Finished Spring Data repository scanning in 122ms. Found 0 repository interfaces.
2020-03-18 10:19:57 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 10:19:57 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 10:19:57 -Finished Spring Data repository scanning in 76ms. Found 0 repository interfaces.
2020-03-18 10:19:58 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$61aaea2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 10:19:58 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9e9342] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 10:19:59 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 10:19:59 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 10:19:59 -Starting service [Tomcat]
2020-03-18 10:19:59 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 10:19:59 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 10:19:59 -Initializing Spring embedded WebApplicationContext
2020-03-18 10:19:59 -Root WebApplicationContext: initialization completed in 4074 ms
2020-03-18 10:19:59 -Filter xssFilter was not registered (disabled)
2020-03-18 10:20:00 -HikariPool-1 - Starting...
2020-03-18 10:20:00 -HikariPool-1 - Start completed.
2020-03-18 10:20:00 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 10:20:00 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 10:20:00 -HHH000206: hibernate.properties not found
2020-03-18 10:20:00 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 10:20:01 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 10:20:01 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 10:20:01 -Using default implementation for ThreadExecutor
2020-03-18 10:20:01 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 10:20:01 -Quartz Scheduler v.2.3.0 created.
2020-03-18 10:20:01 -RAMJobStore initialized.
2020-03-18 10:20:01 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 10:20:01 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 10:20:01 -Quartz scheduler version: 2.3.0
2020-03-18 10:20:01 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@38c460e8
2020-03-18 10:20:02 -STAET TaskExecutorConfig
2020-03-18 10:20:02 -Initializing ExecutorService
2020-03-18 10:20:02 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 10:20:02 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 10:20:02 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 10:20:03 -Initializing ExecutorService 'taskScheduler'
2020-03-18 10:20:03 -Starting Quartz Scheduler now
2020-03-18 10:20:03 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 10:20:03 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 10:20:03 -Using a shared selector for servlet write/read
2020-03-18 10:20:03 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 10:20:03 -Started LongEcologicalApplication in 8.532 seconds (JVM running for 9.695)
2020-03-18 10:20:21 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 10:20:21 -Initializing Servlet 'dispatcherServlet'
2020-03-18 10:20:21 -Completed initialization in 14 ms
2020-03-18 10:20:22 -此处进行解密+验签+身份验证
2020-03-18 10:20:22 -此处进行解密+验签+身份验证
2020-03-18 10:20:22 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 10:20:22 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 10:20:22 -Starting without optional epoll library
2020-03-18 10:20:22 -Starting without optional kqueue library
2020-03-18 10:20:22 -解密：
2020-03-18 10:20:22 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 10:20:22 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 10:20:22 -==> Parameters: 04(String), 04(String)
2020-03-18 10:20:22 -<==      Total: 0
2020-03-18 10:20:22 -耗时 : 59
2020-03-18 10:20:22 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 10:20:22 -耗时 : 713
2020-03-18 10:20:22 -此处进行解密+验签+身份验证
2020-03-18 10:20:22 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"EBA1FB66ED78DCA465C2CAB70BDC9C92","version_no":"450000000145206","login_type":"token","token":"426|Q0SULP9EJJ9XCCU0WNNT1DY5O54K3H1Y","sys_user_account":""}
2020-03-18 10:20:22 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:20:22 -token值=======426|Q0SULP9EJJ9XCCU0WNNT1DY5O54K3H1Y
2020-03-18 10:20:22 -耗时 : 10
2020-03-18 10:20:23 -此处进行解密+验签+身份验证
2020-03-18 10:20:23 -解密：
2020-03-18 10:20:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 10:20:23 -此处进行解密+验签+身份验证
2020-03-18 10:20:23 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 10:20:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 10:20:23 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 10:20:23 -==> Parameters: 04(String), 04(String)
2020-03-18 10:20:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 10:20:23 -耗时 : 15
2020-03-18 10:20:23 -<==      Total: 0
2020-03-18 10:20:23 -耗时 : 22
2020-03-18 10:21:02 -此处进行解密+验签+身份验证
2020-03-18 10:21:02 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:21:02 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:21:02 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:21:02 -==> Parameters: 15019499979(String)
2020-03-18 10:21:02 -<==      Total: 1
2020-03-18 10:21:02 -耗时 : 33
2020-03-18 10:22:35 -此处进行解密+验签+身份验证
2020-03-18 10:22:35 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:22:35 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:22:35 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:22:35 -==> Parameters: 15019499979(String)
2020-03-18 10:22:35 -<==      Total: 1
2020-03-18 10:22:35 -耗时 : 22
2020-03-18 10:22:39 -此处进行解密+验签+身份验证
2020-03-18 10:22:39 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:22:39 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:22:39 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:22:39 -==> Parameters: 15019499979(String)
2020-03-18 10:22:39 -<==      Total: 1
2020-03-18 10:22:39 -耗时 : 22
2020-03-18 10:23:06 -此处进行解密+验签+身份验证
2020-03-18 10:23:06 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:23:06 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:23:06 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:23:06 -==> Parameters: 15019499979(String)
2020-03-18 10:23:06 -<==      Total: 1
2020-03-18 10:23:06 -耗时 : 21
2020-03-18 10:23:12 -此处进行解密+验签+身份验证
2020-03-18 10:23:12 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:23:12 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:23:12 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:23:12 -==> Parameters: 15019499979(String)
2020-03-18 10:23:12 -<==      Total: 1
2020-03-18 10:23:12 -耗时 : 20
2020-03-18 10:23:44 -此处进行解密+验签+身份验证
2020-03-18 10:23:44 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:23:44 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:23:44 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:23:44 -==> Parameters: 15019499979(String)
2020-03-18 10:23:44 -<==      Total: 1
2020-03-18 10:23:44 -耗时 : 24
2020-03-18 10:27:09 -Starting LongEcologicalApplication on PC-201905161910 with PID 11924 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 10:27:09 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 10:27:09 -No active profile set, falling back to default profiles: default
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:10 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:27:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 10:27:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 10:27:11 -Finished Spring Data repository scanning in 91ms. Found 0 repository interfaces.
2020-03-18 10:27:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 10:27:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 10:27:11 -Finished Spring Data repository scanning in 43ms. Found 0 repository interfaces.
2020-03-18 10:27:11 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b2e0f62d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 10:27:11 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ad64dacd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 10:27:12 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 10:27:12 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 10:27:12 -Starting service [Tomcat]
2020-03-18 10:27:12 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 10:27:12 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 10:27:12 -Initializing Spring embedded WebApplicationContext
2020-03-18 10:27:12 -Root WebApplicationContext: initialization completed in 2653 ms
2020-03-18 10:27:12 -Filter xssFilter was not registered (disabled)
2020-03-18 10:27:12 -HikariPool-1 - Starting...
2020-03-18 10:27:12 -HikariPool-1 - Start completed.
2020-03-18 10:27:13 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 10:27:13 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 10:27:13 -HHH000206: hibernate.properties not found
2020-03-18 10:27:13 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 10:27:13 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 10:27:13 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 10:27:14 -Using default implementation for ThreadExecutor
2020-03-18 10:27:14 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 10:27:14 -Quartz Scheduler v.2.3.0 created.
2020-03-18 10:27:14 -RAMJobStore initialized.
2020-03-18 10:27:14 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 10:27:14 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 10:27:14 -Quartz scheduler version: 2.3.0
2020-03-18 10:27:14 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@41f785e3
2020-03-18 10:27:14 -STAET TaskExecutorConfig
2020-03-18 10:27:14 -Initializing ExecutorService
2020-03-18 10:27:14 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 10:27:14 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 10:27:14 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 10:27:15 -Initializing ExecutorService 'taskScheduler'
2020-03-18 10:27:15 -Starting Quartz Scheduler now
2020-03-18 10:27:15 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 10:27:15 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 10:27:15 -Using a shared selector for servlet write/read
2020-03-18 10:27:15 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 10:27:15 -Started LongEcologicalApplication in 6.4 seconds (JVM running for 7.423)
2020-03-18 10:27:23 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 10:27:23 -Initializing Servlet 'dispatcherServlet'
2020-03-18 10:27:23 -Completed initialization in 16 ms
2020-03-18 10:27:23 -此处进行解密+验签+身份验证
2020-03-18 10:27:23 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:27:24 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:27:24 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:27:24 -==> Parameters: 15019499979(String)
2020-03-18 10:27:24 -<==      Total: 1
2020-03-18 10:27:24 -耗时 : 65
2020-03-18 10:29:36 -此处进行解密+验签+身份验证
2020-03-18 10:29:36 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:29:36 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:29:36 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:29:36 -==> Parameters: 15019499979(String)
2020-03-18 10:29:36 -<==      Total: 1
2020-03-18 10:29:36 -耗时 : 24
2020-03-18 10:31:57 -此处进行解密+验签+身份验证
2020-03-18 10:31:57 -解密：{"sys_user_account":"13763349409","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"2C2D629FA8BFA5533EF7B0AC744E9A2C","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:31:57 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:31:58 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:31:58 -==> Parameters: 13763349409(String)
2020-03-18 10:31:58 -<==      Total: 1
2020-03-18 10:31:58 -耗时 : 22
2020-03-18 10:32:54 -此处进行解密+验签+身份验证
2020-03-18 10:32:54 -解密：{"sys_user_account":"15019499979","login_password":"58CF703F664397EC4F0AC359B84B565C","device_type":"android","device_no":"1.0.9","sign":"24D68199F3380B7D5DD182798289672C","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:32:54 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:32:54 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:32:54 -==> Parameters: 15019499979(String)
2020-03-18 10:32:54 -<==      Total: 1
2020-03-18 10:32:54 -耗时 : 20
2020-03-18 10:33:15 -此处进行解密+验签+身份验证
2020-03-18 10:33:15 -解密：{"sys_user_account":"15019499979","login_password":"58CF703F664397EC4F0AC359B84B565C","device_type":"android","device_no":"1.0.9","sign":"24D68199F3380B7D5DD182798289672C","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:33:15 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:33:15 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:33:15 -==> Parameters: 15019499979(String)
2020-03-18 10:33:15 -<==      Total: 1
2020-03-18 10:33:15 -耗时 : 21
2020-03-18 10:33:26 -此处进行解密+验签+身份验证
2020-03-18 10:33:26 -请求地址 : http://192.168.191.1:8080/api/common/imgCode/createImgCode
2020-03-18 10:33:26 -Starting without optional epoll library
2020-03-18 10:33:26 -Starting without optional kqueue library
2020-03-18 10:33:27 -耗时 : 771
2020-03-18 10:39:02 -Starting LongEcologicalApplication on PC-201905161910 with PID 12660 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 10:39:02 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 10:39:02 -No active profile set, falling back to default profiles: default
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 10:39:03 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 10:39:03 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 10:39:03 -Finished Spring Data repository scanning in 66ms. Found 0 repository interfaces.
2020-03-18 10:39:03 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 10:39:03 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 10:39:03 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-03-18 10:39:04 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$20bb96f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 10:39:04 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fc8f9e0f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 10:39:04 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 10:39:05 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 10:39:05 -Starting service [Tomcat]
2020-03-18 10:39:05 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 10:39:05 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 10:39:05 -Initializing Spring embedded WebApplicationContext
2020-03-18 10:39:05 -Root WebApplicationContext: initialization completed in 3168 ms
2020-03-18 10:39:05 -Filter xssFilter was not registered (disabled)
2020-03-18 10:39:05 -HikariPool-1 - Starting...
2020-03-18 10:39:06 -HikariPool-1 - Start completed.
2020-03-18 10:39:06 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 10:39:06 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 10:39:06 -HHH000206: hibernate.properties not found
2020-03-18 10:39:06 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 10:39:06 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 10:39:06 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 10:39:07 -Using default implementation for ThreadExecutor
2020-03-18 10:39:07 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 10:39:07 -Quartz Scheduler v.2.3.0 created.
2020-03-18 10:39:07 -RAMJobStore initialized.
2020-03-18 10:39:07 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 10:39:07 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 10:39:07 -Quartz scheduler version: 2.3.0
2020-03-18 10:39:07 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@ac4915e
2020-03-18 10:39:07 -STAET TaskExecutorConfig
2020-03-18 10:39:07 -Initializing ExecutorService
2020-03-18 10:39:07 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 10:39:07 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 10:39:08 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 10:39:08 -Initializing ExecutorService 'taskScheduler'
2020-03-18 10:39:08 -Starting Quartz Scheduler now
2020-03-18 10:39:08 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 10:39:08 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 10:39:08 -Using a shared selector for servlet write/read
2020-03-18 10:39:08 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 10:39:08 -Started LongEcologicalApplication in 7.451 seconds (JVM running for 8.954)
2020-03-18 10:39:17 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 10:39:17 -Initializing Servlet 'dispatcherServlet'
2020-03-18 10:39:17 -Completed initialization in 14 ms
2020-03-18 10:39:18 -此处进行解密+验签+身份验证
2020-03-18 10:39:18 -解密：{"sys_user_account":"15019499979","login_password":"58CF703F664397EC4F0AC359B84B565C","device_type":"android","device_no":"1.0.9","sign":"24D68199F3380B7D5DD182798289672C","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:39:18 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:39:18 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:39:18 -==> Parameters: 15019499979(String)
2020-03-18 10:39:18 -<==      Total: 1
2020-03-18 10:39:18 -耗时 : 69
2020-03-18 10:39:27 -此处进行解密+验签+身份验证
2020-03-18 10:39:27 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 10:39:27 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 10:39:27 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 10:39:27 -==> Parameters: 15019499979(String)
2020-03-18 10:39:27 -<==      Total: 1
2020-03-18 10:39:27 -Starting without optional epoll library
2020-03-18 10:39:27 -Starting without optional kqueue library
2020-03-18 10:39:28 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 10:39:28 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 103928(String), 469(Integer)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 10:39:28 -==> Parameters: 25(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 10:39:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 10:39:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 10:39:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 10:39:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 10:39:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 10:39:28 -耗时 : 711
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 10:39:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 10:39:28 -==> Parameters: 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -耗时 : 19
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -解密：
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 10:39:28 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 10:39:28 -==> Parameters: 01(String), 01(String)
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:28 -<==      Total: 4
2020-03-18 10:39:28 -耗时 : 17
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -此处进行解密+验签+身份验证
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 10:39:28 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 10:39:28 -==> Parameters: 469(String)
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:28 -<==      Total: 2
2020-03-18 10:39:28 -耗时 : 19
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 10:39:28 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 10:39:28 -==> Parameters: 469(String)
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 10:39:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:39:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -耗时 : 13
2020-03-18 10:39:28 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-18 10:39:28 -==> Parameters: 469(String)
2020-03-18 10:39:28 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 10:39:28 -==> Parameters: 
2020-03-18 10:39:28 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-18 10:39:28 -==> Parameters: 469(String)
2020-03-18 10:39:28 -<==      Total: 3
2020-03-18 10:39:28 -耗时 : 20
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_469,save content:{referer_id=null, parent_chain=null, user_tel=15019499979, id_card=441523199409226802, real_name=叶梦蝶, algebra=1, cre_date=20181207, cre_time=150422, login_password=47e6515d924b5ee1fb13711a53804c71, manager_id=25, pay_password=47e6515d924b5ee1fb13711a53804c71, id=469, auth_status=09, status=0}
2020-03-18 10:39:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:39:28 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:28 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_469,save content:{referer_id=null, parent_chain=null, user_tel=15019499979, id_card=441523199409226802, real_name=叶梦蝶, algebra=1, cre_date=20181207, cre_time=150422, login_password=47e6515d924b5ee1fb13711a53804c71, manager_id=25, pay_password=47e6515d924b5ee1fb13711a53804c71, id=469, auth_status=09, status=0}
2020-03-18 10:39:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:39:28 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:39:28 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:39:28 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:39:28 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:39:28 -==> Parameters: 
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: 
2020-03-18 10:39:28 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:39:28 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:39:28 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:39:28 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:39:28 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -耗时 : 210
2020-03-18 10:39:28 -<==    Updates: 1
2020-03-18 10:39:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:39:28 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:39:28 -<==      Total: 1
2020-03-18 10:39:28 -耗时 : 224
2020-03-18 10:39:32 -此处进行解密+验签+身份验证
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:32 -此处进行解密+验签+身份验证
2020-03-18 10:39:32 -此处进行解密+验签+身份验证
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:32 -此处进行解密+验签+身份验证
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:32 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-18 10:39:32 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-18 10:39:32 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-18 10:39:32 -==> Parameters: 469(String)
2020-03-18 10:39:32 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-18 10:39:32 -==> Parameters: 469(String), 202003(String)
2020-03-18 10:39:32 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-18 10:39:32 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-18 10:39:32 -<==      Total: 1
2020-03-18 10:39:32 -耗时 : 13
2020-03-18 10:39:32 -<==      Total: 1
2020-03-18 10:39:32 -耗时 : 21
2020-03-18 10:39:32 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-18 10:39:32 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 10:39:32 -==> Parameters: 469(String), 202003(String)
2020-03-18 10:39:32 -==> Parameters: 469(String), 202003(String)
2020-03-18 10:39:32 -<==      Total: 0
2020-03-18 10:39:32 -耗时 : 34
2020-03-18 10:39:32 -<==      Total: 0
2020-03-18 10:39:32 -耗时 : 37
2020-03-18 10:39:52 -此处进行解密+验签+身份验证
2020-03-18 10:39:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:52 -此处进行解密+验签+身份验证
2020-03-18 10:39:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:39:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:39:52 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 10:39:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 10:39:52 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-18 10:39:52 -==> Parameters: 202003(String), 469(String)
2020-03-18 10:39:52 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 10:39:52 -==> Parameters: 469(String)
2020-03-18 10:39:52 -<==      Total: 1
2020-03-18 10:39:52 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 10:39:52 -<==      Total: 1
2020-03-18 10:39:52 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:52 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 10:39:52 -==> Parameters: 469(String)
2020-03-18 10:39:52 -<==      Total: 0
2020-03-18 10:39:52 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 10:39:52 -==> Parameters: 202003(String), 469(String)
2020-03-18 10:39:52 -<==      Total: 1
2020-03-18 10:39:52 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-18 10:39:52 -==> Parameters: 469(String)
2020-03-18 10:39:52 -<==      Total: 0
2020-03-18 10:39:52 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-18 10:39:52 -==> Parameters: 202003(String), 469(String)
2020-03-18 10:39:52 -<==      Total: 0
2020-03-18 10:39:52 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-18 10:39:52 -==> Parameters: 469(String)
2020-03-18 10:39:52 -<==      Total: 0
2020-03-18 10:39:52 -耗时 : 83
2020-03-18 10:39:52 -<==      Total: 1
2020-03-18 10:39:52 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 10:39:52 -==> Parameters: 469(String), 469(String)
2020-03-18 10:39:52 -<==      Total: 1
2020-03-18 10:39:52 -耗时 : 222
2020-03-18 10:41:16 -此处进行解密+验签+身份验证
2020-03-18 10:41:16 -此处进行解密+验签+身份验证
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:16 -此处进行解密+验签+身份验证
2020-03-18 10:41:16 -此处进行解密+验签+身份验证
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:16 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyEposDetail
2020-03-18 10:41:16 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 10:41:16 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyEposDetail
2020-03-18 10:41:16 -==> Parameters: 469(String), 202003(String)
2020-03-18 10:41:16 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-18 10:41:16 -==> Parameters: 469(String), 20200318(String)
2020-03-18 10:41:16 -<==      Total: 0
2020-03-18 10:41:16 -耗时 : 17
2020-03-18 10:41:16 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantEposDetail
2020-03-18 10:41:16 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-18 10:41:16 -==> Parameters: 469(String), 20200318(String)
2020-03-18 10:41:16 -<==      Total: 0
2020-03-18 10:41:16 -耗时 : 13
2020-03-18 10:41:16 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantEposDetail
2020-03-18 10:41:16 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 10:41:16 -==> Parameters: 469(String), 202003(String)
2020-03-18 10:41:16 -<==      Total: 0
2020-03-18 10:41:16 -耗时 : 13
2020-03-18 10:41:16 -<==      Total: 0
2020-03-18 10:41:16 -耗时 : 10
2020-03-18 10:41:20 -此处进行解密+验签+身份验证
2020-03-18 10:41:20 -此处进行解密+验签+身份验证
2020-03-18 10:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 10:41:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 10:41:20 -==> Parameters: 469(String)
2020-03-18 10:41:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:41:20 -<==      Total: 1
2020-03-18 10:41:20 -耗时 : 13
2020-03-18 10:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 10:41:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:41:20 -==> Parameters: 469(String), 469(String)
2020-03-18 10:41:20 -<==      Total: 1
2020-03-18 10:41:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:20 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:41:20 -<==      Total: 1
2020-03-18 10:41:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:20 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:41:21 -<==    Updates: 1
2020-03-18 10:41:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:41:21 -==> Parameters: 469(String), 469(String)
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:21 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:41:21 -<==    Updates: 1
2020-03-18 10:41:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:41:21 -==> Parameters: 
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:21 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:21 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:41:21 -<==    Updates: 1
2020-03-18 10:41:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:41:21 -==> Parameters: 469(String), 469(String)
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:21 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:21 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:41:21 -<==    Updates: 1
2020-03-18 10:41:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:21 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:41:21 -<==      Total: 1
2020-03-18 10:41:21 -耗时 : 156
2020-03-18 10:41:37 -此处进行解密+验签+身份验证
2020-03-18 10:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 10:41:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:41:37 -==> Parameters: 469(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:37 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:37 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:41:37 -<==    Updates: 1
2020-03-18 10:41:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:41:37 -==> Parameters: 469(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:37 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:37 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:41:37 -<==    Updates: 1
2020-03-18 10:41:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:41:37 -==> Parameters: 
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:37 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:37 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:41:37 -<==    Updates: 1
2020-03-18 10:41:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:41:37 -==> Parameters: 469(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:37 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:41:37 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:41:37 -<==    Updates: 1
2020-03-18 10:41:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:41:37 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:41:37 -<==      Total: 1
2020-03-18 10:41:37 -耗时 : 153
2020-03-18 10:41:43 -此处进行解密+验签+身份验证
2020-03-18 10:41:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:43 -此处进行解密+验签+身份验证
2020-03-18 10:41:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-18 10:41:43 -==> Parameters: 469(String)
2020-03-18 10:41:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-18 10:41:43 -==> Parameters: 469(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-18 10:41:43 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-18 10:41:43 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 10:41:43 -==> Parameters: 469(String), 469(String), 20200217(String), 20200318(String), 469(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 10:41:43 -==> Parameters: 469(String), 20200118(String), 469(String), 20200118(String), 20200318(String), 469(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 10:41:43 -==> Parameters: 469(String), 469(String), 20200217(String), 20200318(String), 469(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-18 10:41:43 -==> Parameters: 469(String)
2020-03-18 10:41:43 -<==      Total: 1
2020-03-18 10:41:43 -耗时 : 108
2020-03-18 10:41:44 -<==      Total: 1
2020-03-18 10:41:44 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 10:41:44 -==> Parameters: 469(String), 20200118(String), 469(String), 20200118(String), 20200318(String), 469(String)
2020-03-18 10:41:44 -<==      Total: 1
2020-03-18 10:41:44 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-18 10:41:44 -==> Parameters: 469(String)
2020-03-18 10:41:44 -<==      Total: 1
2020-03-18 10:41:44 -耗时 : 394
2020-03-18 10:41:49 -此处进行解密+验签+身份验证
2020-03-18 10:41:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:41:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:41:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 10:41:49 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-18 10:41:49 -==> Parameters: 469(String)
2020-03-18 10:41:49 -<==      Total: 1
2020-03-18 10:41:49 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-18 10:41:49 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-18 10:41:49 -<==      Total: 1
2020-03-18 10:41:49 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 10:41:49 -==> Parameters: 469(String), 469(String), 20200217(String), 20200318(String), 469(String)
2020-03-18 10:41:49 -<==      Total: 1
2020-03-18 10:41:49 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 10:41:49 -==> Parameters: 469(String), 20200118(String), 469(String), 20200118(String), 20200318(String), 469(String)
2020-03-18 10:41:49 -<==      Total: 1
2020-03-18 10:41:49 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-18 10:41:49 -==> Parameters: 469(String)
2020-03-18 10:41:49 -<==      Total: 1
2020-03-18 10:41:49 -耗时 : 88
2020-03-18 10:45:18 -此处进行解密+验签+身份验证
2020-03-18 10:45:18 -此处进行解密+验签+身份验证
2020-03-18 10:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:45:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 10:45:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 10:45:18 -==> Parameters: 469(String)
2020-03-18 10:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 10:45:18 -<==      Total: 1
2020-03-18 10:45:18 -耗时 : 13
2020-03-18 10:45:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:45:18 -==> Parameters: 469(String), 469(String)
2020-03-18 10:45:18 -<==      Total: 1
2020-03-18 10:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:45:18 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:45:18 -<==      Total: 1
2020-03-18 10:45:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:45:18 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:45:18 -<==    Updates: 1
2020-03-18 10:45:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:45:18 -==> Parameters: 469(String), 469(String)
2020-03-18 10:45:18 -<==      Total: 1
2020-03-18 10:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:45:18 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:45:18 -<==      Total: 1
2020-03-18 10:45:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:45:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:45:18 -<==    Updates: 1
2020-03-18 10:45:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:45:18 -==> Parameters: 
2020-03-18 10:45:19 -<==      Total: 1
2020-03-18 10:45:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:45:19 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:45:19 -<==      Total: 1
2020-03-18 10:45:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:45:19 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:45:19 -<==    Updates: 1
2020-03-18 10:45:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:45:19 -==> Parameters: 469(String), 469(String)
2020-03-18 10:45:19 -<==      Total: 1
2020-03-18 10:45:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:45:19 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:45:19 -<==      Total: 1
2020-03-18 10:45:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:45:19 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:45:19 -<==    Updates: 1
2020-03-18 10:45:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:45:19 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:45:19 -<==      Total: 1
2020-03-18 10:45:19 -耗时 : 164
2020-03-18 10:45:26 -此处进行解密+验签+身份验证
2020-03-18 10:45:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:26 -此处进行解密+验签+身份验证
2020-03-18 10:45:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-18 10:45:26 -==> Parameters: 469(String)
2020-03-18 10:45:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-18 10:45:26 -==> Parameters: 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-18 10:45:26 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-18 10:45:26 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 10:45:26 -==> Parameters: 469(String), 469(String), 20200217(String), 20200318(String), 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 10:45:26 -==> Parameters: 469(String), 469(String), 20200217(String), 20200318(String), 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 10:45:26 -==> Parameters: 469(String), 20200118(String), 469(String), 20200118(String), 20200318(String), 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 10:45:26 -==> Parameters: 469(String), 20200118(String), 469(String), 20200118(String), 20200318(String), 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-18 10:45:26 -==> Parameters: 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -耗时 : 67
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-18 10:45:26 -==> Parameters: 469(String)
2020-03-18 10:45:26 -<==      Total: 1
2020-03-18 10:45:26 -耗时 : 87
2020-03-18 10:45:27 -此处进行解密+验签+身份验证
2020-03-18 10:45:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:27 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 10:45:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-18 10:45:27 -==> Parameters: 469(String)
2020-03-18 10:45:27 -<==      Total: 1
2020-03-18 10:45:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-18 10:45:27 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-18 10:45:27 -<==      Total: 1
2020-03-18 10:45:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 10:45:27 -==> Parameters: 469(String), 469(String), 20200217(String), 20200318(String), 469(String)
2020-03-18 10:45:27 -<==      Total: 1
2020-03-18 10:45:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 10:45:27 -==> Parameters: 469(String), 20200118(String), 469(String), 20200118(String), 20200318(String), 469(String)
2020-03-18 10:45:27 -<==      Total: 1
2020-03-18 10:45:27 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-18 10:45:27 -==> Parameters: 469(String)
2020-03-18 10:45:27 -<==      Total: 1
2020-03-18 10:45:27 -耗时 : 147
2020-03-18 10:45:29 -此处进行解密+验签+身份验证
2020-03-18 10:45:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-18 10:45:29 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-18 10:45:29 -==> Parameters: 469(String)
2020-03-18 10:45:29 -<==      Total: 10
2020-03-18 10:45:29 -耗时 : 16
2020-03-18 10:45:43 -此处进行解密+验签+身份验证
2020-03-18 10:45:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:43 -此处进行解密+验签+身份验证
2020-03-18 10:45:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:45:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:45:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 10:45:43 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 10:45:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 10:45:43 -==> Parameters: 469(String)
2020-03-18 10:45:43 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 10:45:43 -==> Parameters: 469(String)
2020-03-18 10:45:43 -<==      Total: 1
2020-03-18 10:45:43 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 10:45:43 -==> Parameters: 469(String)
2020-03-18 10:45:43 -<==      Total: 4
2020-03-18 10:45:43 -耗时 : 22
2020-03-18 10:45:43 -<==      Total: 1
2020-03-18 10:45:43 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 10:45:43 -==> Parameters: 469(String)
2020-03-18 10:45:43 -<==      Total: 1
2020-03-18 10:45:43 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 10:45:43 -==> Parameters: 469(String)
2020-03-18 10:45:43 -<==      Total: 1
2020-03-18 10:45:43 -耗时 : 41
2020-03-18 10:47:12 -此处进行解密+验签+身份验证
2020-03-18 10:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:12 -此处进行解密+验签+身份验证
2020-03-18 10:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:47:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 10:47:12 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 10:47:12 -==> Parameters: 469(String)
2020-03-18 10:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 10:47:12 -<==      Total: 1
2020-03-18 10:47:12 -耗时 : 13
2020-03-18 10:47:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:47:12 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:12 -<==      Total: 1
2020-03-18 10:47:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:12 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:47:12 -<==      Total: 1
2020-03-18 10:47:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:12 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:47:12 -<==    Updates: 1
2020-03-18 10:47:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:47:12 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:13 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:13 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:47:13 -<==    Updates: 1
2020-03-18 10:47:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:47:13 -==> Parameters: 
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:13 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:13 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:47:13 -<==    Updates: 1
2020-03-18 10:47:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:47:13 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:13 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:13 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:47:13 -<==    Updates: 1
2020-03-18 10:47:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:13 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:47:13 -<==      Total: 1
2020-03-18 10:47:13 -耗时 : 152
2020-03-18 10:47:19 -此处进行解密+验签+身份验证
2020-03-18 10:47:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:47:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:47:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 10:47:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:47:19 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:19 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:19 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:47:19 -<==    Updates: 1
2020-03-18 10:47:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:47:19 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:19 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:19 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:47:19 -<==    Updates: 1
2020-03-18 10:47:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:47:19 -==> Parameters: 
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:19 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:19 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:47:19 -<==    Updates: 1
2020-03-18 10:47:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:47:19 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:19 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:47:19 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:47:19 -<==    Updates: 1
2020-03-18 10:47:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:47:19 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:47:19 -<==      Total: 1
2020-03-18 10:47:19 -耗时 : 198
2020-03-18 10:47:20 -此处进行解密+验签+身份验证
2020-03-18 10:47:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:20 -此处进行解密+验签+身份验证
2020-03-18 10:47:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 10:47:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 10:47:20 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 10:47:20 -==> Parameters: 469(String)
2020-03-18 10:47:20 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 10:47:20 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:20 -<==      Total: 82
2020-03-18 10:47:20 -耗时 : 51
2020-03-18 10:47:24 -此处进行解密+验签+身份验证
2020-03-18 10:47:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-18 10:47:24 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-18 10:47:24 -==> Parameters: 469(String)
2020-03-18 10:47:24 -<==      Total: 0
2020-03-18 10:47:24 -耗时 : 25
2020-03-18 10:47:25 -此处进行解密+验签+身份验证
2020-03-18 10:47:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-18 10:47:25 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-18 10:47:25 -==> Parameters: 469(String)
2020-03-18 10:47:25 -<==      Total: 0
2020-03-18 10:47:25 -耗时 : 27
2020-03-18 10:47:26 -此处进行解密+验签+身份验证
2020-03-18 10:47:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-18 10:47:26 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-18 10:47:26 -==> Parameters: 469(String)
2020-03-18 10:47:26 -<==      Total: 10
2020-03-18 10:47:26 -耗时 : 25
2020-03-18 10:47:32 -此处进行解密+验签+身份验证
2020-03-18 10:47:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 10:47:32 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 10:47:32 -==> Parameters: 469(String)
2020-03-18 10:47:32 -<==      Total: 82
2020-03-18 10:47:32 -耗时 : 51
2020-03-18 10:47:33 -此处进行解密+验签+身份验证
2020-03-18 10:47:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 10:47:33 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-18 10:47:33 -==> Parameters: 469(String)
2020-03-18 10:47:33 -<==      Total: 10
2020-03-18 10:47:33 -耗时 : 26
2020-03-18 10:47:36 -此处进行解密+验签+身份验证
2020-03-18 10:47:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:36 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-18 10:47:36 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 10:47:36 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:36 -<==      Total: 0
2020-03-18 10:47:36 -耗时 : 33
2020-03-18 10:47:37 -此处进行解密+验签+身份验证
2020-03-18 10:47:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:37 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-18 10:47:37 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 10:47:37 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:38 -<==      Total: 0
2020-03-18 10:47:38 -耗时 : 660
2020-03-18 10:47:39 -此处进行解密+验签+身份验证
2020-03-18 10:47:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTrafficCardRecallList
2020-03-18 10:47:39 -==>  Preparing: SELECT t.card_no, t.user_id FROM t_user_traffic_card_info t WHERE t.state_status = '1' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_trafficcard_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.card_no = t.card_no AND t1.status = '00') order by t.card_no 
2020-03-18 10:47:39 -==> Parameters: 469(String), 469(String)
2020-03-18 10:47:39 -<==      Total: 0
2020-03-18 10:47:39 -耗时 : 18
2020-03-18 10:47:43 -此处进行解密+验签+身份验证
2020-03-18 10:47:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-18 10:47:43 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-18 10:47:43 -==> Parameters: 469(String)
2020-03-18 10:47:43 -<==      Total: 10
2020-03-18 10:47:43 -耗时 : 27
2020-03-18 10:47:46 -<==      Total: 7
2020-03-18 10:47:46 -耗时 : 25977
2020-03-18 10:47:57 -此处进行解密+验签+身份验证
2020-03-18 10:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:57 -此处进行解密+验签+身份验证
2020-03-18 10:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-18 10:47:57 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-18 10:47:57 -==> Parameters: 469(String), MPOS(String)
2020-03-18 10:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-18 10:47:57 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-18 10:47:57 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-18 10:47:57 -<==      Total: 1
2020-03-18 10:47:57 -耗时 : 23
2020-03-18 10:47:57 -<==      Total: 0
2020-03-18 10:47:57 -耗时 : 27
2020-03-18 10:47:59 -此处进行解密+验签+身份验证
2020-03-18 10:47:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:47:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:47:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-18 10:47:59 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-18 10:47:59 -==> Parameters: 469(String), epos(String)
2020-03-18 10:47:59 -<==      Total: 0
2020-03-18 10:47:59 -耗时 : 24
2020-03-18 10:48:00 -此处进行解密+验签+身份验证
2020-03-18 10:48:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:48:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:48:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-18 10:48:00 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-18 10:48:00 -==> Parameters: 469(String), TrafficCard(String)
2020-03-18 10:48:00 -<==      Total: 0
2020-03-18 10:48:00 -耗时 : 22
2020-03-18 10:48:03 -此处进行解密+验签+身份验证
2020-03-18 10:48:03 -此处进行解密+验签+身份验证
2020-03-18 10:48:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:48:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:48:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:48:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:48:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-18 10:48:04 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-18 10:48:04 -==> Parameters: 469(String)
2020-03-18 10:48:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-18 10:48:04 -<==      Total: 3
2020-03-18 10:48:04 -耗时 : 13
2020-03-18 10:48:04 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-18 10:48:04 -==> Parameters: 469(String), EPOS20200318041(String)
2020-03-18 10:48:04 -<==      Total: 1
2020-03-18 10:48:04 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-18 10:48:04 -==> Parameters: 
2020-03-18 10:48:04 -<==      Total: 101
2020-03-18 10:48:04 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-18 10:48:04 -==> Parameters: EPOS20200318041(String)
2020-03-18 10:48:04 -<==      Total: 0
2020-03-18 10:48:04 -耗时 : 71
2020-03-18 10:49:17 -此处进行解密+验签+身份验证
2020-03-18 10:49:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:49:17 -此处进行解密+验签+身份验证
2020-03-18 10:49:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:49:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:49:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:49:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-18 10:49:17 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-18 10:49:17 -==> Parameters: 469(String)
2020-03-18 10:49:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-18 10:49:17 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-18 10:49:17 -==> Parameters: 469(String), EPOS20200318041(String)
2020-03-18 10:49:17 -<==      Total: 3
2020-03-18 10:49:17 -耗时 : 13
2020-03-18 10:49:17 -<==      Total: 1
2020-03-18 10:49:17 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-18 10:49:17 -==> Parameters: 
2020-03-18 10:49:17 -<==      Total: 101
2020-03-18 10:49:17 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-18 10:49:17 -==> Parameters: EPOS20200318041(String)
2020-03-18 10:49:17 -<==      Total: 0
2020-03-18 10:49:17 -耗时 : 43
2020-03-18 10:52:16 -此处进行解密+验签+身份验证
2020-03-18 10:52:16 -此处进行解密+验签+身份验证
2020-03-18 10:52:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:52:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 10:52:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:52:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 10:52:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 10:52:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 10:52:16 -==> Parameters: 469(String)
2020-03-18 10:52:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 10:52:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 10:52:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -耗时 : 15
2020-03-18 10:52:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:52:16 -==> Parameters: 469(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:52:16 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:52:16 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 10:52:16 -<==    Updates: 1
2020-03-18 10:52:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 10:52:16 -==> Parameters: 469(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:52:16 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:52:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 10:52:16 -<==    Updates: 1
2020-03-18 10:52:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 10:52:16 -==> Parameters: 
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:52:16 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:52:16 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 10:52:16 -<==    Updates: 1
2020-03-18 10:52:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 10:52:16 -==> Parameters: 469(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:52:16 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 10:52:16 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 10:52:16 -<==    Updates: 1
2020-03-18 10:52:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 10:52:16 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 10:52:16 -<==      Total: 1
2020-03-18 10:52:16 -耗时 : 161
2020-03-18 11:09:31 -此处进行解密+验签+身份验证
2020-03-18 11:09:31 -解密：
2020-03-18 11:09:31 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 11:09:31 -此处进行解密+验签+身份验证
2020-03-18 11:09:31 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 11:09:31 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 11:09:31 -==> Parameters: 04(String), 04(String)
2020-03-18 11:09:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 11:09:31 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1b3e94ce.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$bffbece4.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-18 11:09:31 -耗时 : 18
2020-03-18 11:09:31 -<==      Total: 0
2020-03-18 11:09:31 -耗时 : 23
2020-03-18 11:09:31 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-18 11:09:31 -Reconnected to 120.25.164.176:10379
2020-03-18 11:09:31 -此处进行解密+验签+身份验证
2020-03-18 11:09:31 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"1F43F3A714EE52AA7A309E37C51314E3","version_no":"450000000145206","login_type":"token","token":"691|VG90PDZRI84WCY2R3XCY1MOR5OIUWETZ","sys_user_account":""}
2020-03-18 11:09:31 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 11:09:31 -token值=======691|VG90PDZRI84WCY2R3XCY1MOR5OIUWETZ
2020-03-18 11:09:31 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 11:09:31 -==> Parameters: 691(String)
2020-03-18 11:09:31 -<==      Total: 1
2020-03-18 11:09:31 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 11:09:31 -==> Parameters: 25(String)
2020-03-18 11:09:31 -<==      Total: 1
2020-03-18 11:09:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 11:09:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 11:09:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 11:09:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 11:09:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 11:09:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 11:09:32 -耗时 : 100
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 11:09:36 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 11:09:36 -==> Parameters: 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -耗时 : 20
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -解密：
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 11:09:36 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 11:09:36 -==> Parameters: 01(String), 01(String)
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:36 -<==      Total: 4
2020-03-18 11:09:36 -耗时 : 12
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:36 -此处进行解密+验签+身份验证
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 11:09:36 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 11:09:36 -==> Parameters: 691(String)
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 11:09:36 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 11:09:36 -==> Parameters: 
2020-03-18 11:09:36 -<==      Total: 2
2020-03-18 11:09:36 -耗时 : 12
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 11:09:36 -<==      Total: 3
2020-03-18 11:09:36 -耗时 : 12
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 11:09:36 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 11:09:36 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 11:09:36 -==> Parameters: 691(String)
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -耗时 : 13
2020-03-18 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 11:09:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:09:36 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:09:36 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 11:09:36 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 11:09:36 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 11:09:36 -==> Parameters: 
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:09:36 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 11:09:36 -==> Parameters: 
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 11:09:36 -<==      Total: 2
2020-03-18 11:09:36 -耗时 : 143
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:09:36 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 1
2020-03-18 11:09:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 11:09:36 -<==    Updates: 1
2020-03-18 11:09:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:36 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 11:09:36 -<==      Total: 2
2020-03-18 11:09:36 -耗时 : 220
2020-03-18 11:09:42 -此处进行解密+验签+身份验证
2020-03-18 11:09:42 -此处进行解密+验签+身份验证
2020-03-18 11:09:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:09:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:09:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 11:09:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 11:09:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 11:09:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 11:09:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 11:09:42 -==> Parameters: 691(String)
2020-03-18 11:09:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:09:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:42 -<==      Total: 1
2020-03-18 11:09:42 -耗时 : 19
2020-03-18 11:09:42 -<==      Total: 1
2020-03-18 11:09:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:42 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 11:09:42 -<==      Total: 1
2020-03-18 11:09:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 11:09:43 -<==    Updates: 1
2020-03-18 11:09:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 11:09:43 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:43 -<==      Total: 1
2020-03-18 11:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:43 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 11:09:43 -<==      Total: 1
2020-03-18 11:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 11:09:43 -<==    Updates: 1
2020-03-18 11:09:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 11:09:43 -==> Parameters: 
2020-03-18 11:09:43 -<==      Total: 1
2020-03-18 11:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:43 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 11:09:43 -<==      Total: 1
2020-03-18 11:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:43 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 11:09:43 -<==    Updates: 1
2020-03-18 11:09:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:09:43 -==> Parameters: 691(String), 691(String)
2020-03-18 11:09:43 -<==      Total: 1
2020-03-18 11:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:43 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 11:09:43 -<==      Total: 1
2020-03-18 11:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:09:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 11:09:43 -<==    Updates: 1
2020-03-18 11:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:09:43 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 11:09:43 -<==      Total: 2
2020-03-18 11:09:43 -耗时 : 130
2020-03-18 11:10:03 -此处进行解密+验签+身份验证
2020-03-18 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:03 -此处进行解密+验签+身份验证
2020-03-18 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 11:10:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-18 11:10:03 -==> Parameters: 202003(String), 691(String)
2020-03-18 11:10:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 11:10:03 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 11:10:03 -==> Parameters: 691(String)
2020-03-18 11:10:03 -<==      Total: 1
2020-03-18 11:10:03 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 11:10:03 -==> Parameters: 691(String), 691(String)
2020-03-18 11:10:03 -<==      Total: 0
2020-03-18 11:10:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 11:10:03 -==> Parameters: 691(String)
2020-03-18 11:10:03 -<==      Total: 0
2020-03-18 11:10:03 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：null
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:47)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$30b1bb9e.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-18 11:10:03 -耗时 : 32
2020-03-18 11:10:03 -<==      Total: 1
2020-03-18 11:10:03 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 11:10:03 -==> Parameters: 691(String), 691(String)
2020-03-18 11:10:03 -<==      Total: 1
2020-03-18 11:10:03 -耗时 : 187
2020-03-18 11:10:22 -Starting LongEcologicalApplication on PC-201905161910 with PID 17404 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 11:10:22 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 11:10:22 -No active profile set, falling back to default profiles: default
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:10:23 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 11:10:23 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 11:10:23 -Finished Spring Data repository scanning in 66ms. Found 0 repository interfaces.
2020-03-18 11:10:23 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 11:10:23 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 11:10:23 -Finished Spring Data repository scanning in 46ms. Found 0 repository interfaces.
2020-03-18 11:10:24 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b03eb466] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 11:10:24 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$aac29906] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 11:10:24 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 11:10:24 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 11:10:24 -Starting service [Tomcat]
2020-03-18 11:10:24 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 11:10:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 11:10:24 -Initializing Spring embedded WebApplicationContext
2020-03-18 11:10:24 -Root WebApplicationContext: initialization completed in 2459 ms
2020-03-18 11:10:24 -Filter xssFilter was not registered (disabled)
2020-03-18 11:10:25 -HikariPool-1 - Starting...
2020-03-18 11:10:25 -HikariPool-1 - Start completed.
2020-03-18 11:10:25 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 11:10:25 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 11:10:25 -HHH000206: hibernate.properties not found
2020-03-18 11:10:25 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 11:10:25 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 11:10:26 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 11:10:26 -Using default implementation for ThreadExecutor
2020-03-18 11:10:26 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 11:10:26 -Quartz Scheduler v.2.3.0 created.
2020-03-18 11:10:26 -RAMJobStore initialized.
2020-03-18 11:10:26 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 11:10:26 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 11:10:26 -Quartz scheduler version: 2.3.0
2020-03-18 11:10:26 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@49f6c25e
2020-03-18 11:10:27 -STAET TaskExecutorConfig
2020-03-18 11:10:27 -Initializing ExecutorService
2020-03-18 11:10:27 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 11:10:27 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 11:10:27 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 11:10:28 -Initializing ExecutorService 'taskScheduler'
2020-03-18 11:10:28 -Starting Quartz Scheduler now
2020-03-18 11:10:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 11:10:28 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 11:10:28 -Using a shared selector for servlet write/read
2020-03-18 11:10:28 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 11:10:28 -Started LongEcologicalApplication in 7.098 seconds (JVM running for 8.243)
2020-03-18 11:10:42 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 11:10:42 -Initializing Servlet 'dispatcherServlet'
2020-03-18 11:10:42 -Completed initialization in 14 ms
2020-03-18 11:10:42 -此处进行解密+验签+身份验证
2020-03-18 11:10:42 -此处进行解密+验签+身份验证
2020-03-18 11:10:42 -此处进行解密+验签+身份验证
2020-03-18 11:10:42 -此处进行解密+验签+身份验证
2020-03-18 11:10:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:42 -Starting without optional epoll library
2020-03-18 11:10:42 -Starting without optional kqueue library
2020-03-18 11:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:43 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-18 11:10:43 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-18 11:10:43 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-18 11:10:43 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-18 11:10:43 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-18 11:10:43 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-18 11:10:43 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-18 11:10:43 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 11:10:43 -==> Parameters: 691(String), 202003(String)
2020-03-18 11:10:43 -==> Parameters: 691(String)
2020-03-18 11:10:43 -==> Parameters: 691(String), 202003(String)
2020-03-18 11:10:43 -==> Parameters: 691(String), 202003(String)
2020-03-18 11:10:43 -<==      Total: 0
2020-03-18 11:10:43 -耗时 : 56
2020-03-18 11:10:43 -<==      Total: 1
2020-03-18 11:10:43 -<==      Total: 1
2020-03-18 11:10:43 -耗时 : 57
2020-03-18 11:10:43 -耗时 : 57
2020-03-18 11:10:43 -<==      Total: 1
2020-03-18 11:10:43 -耗时 : 58
2020-03-18 11:10:53 -此处进行解密+验签+身份验证
2020-03-18 11:10:53 -此处进行解密+验签+身份验证
2020-03-18 11:10:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:10:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:10:53 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 11:11:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 11:11:04 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-18 11:11:04 -==> Parameters: 202003(String), 691(String)
2020-03-18 11:11:04 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 11:11:04 -==> Parameters: 691(String)
2020-03-18 11:11:04 -<==      Total: 0
2020-03-18 11:11:12 -<==      Total: 1
2020-03-18 11:11:12 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 11:11:12 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:12 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 11:11:12 -==> Parameters: 691(String)
2020-03-18 11:11:12 -<==      Total: 0
2020-03-18 11:11:21 -<==      Total: 1
2020-03-18 11:11:21 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：null
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:47)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$b9d40839.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-18 11:11:21 -耗时 : 27947
2020-03-18 11:11:21 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 11:11:21 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:21 -<==      Total: 1
2020-03-18 11:11:21 -耗时 : 16764
2020-03-18 11:11:37 -此处进行解密+验签+身份验证
2020-03-18 11:11:37 -此处进行解密+验签+身份验证
2020-03-18 11:11:37 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 11:11:37 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 11:11:37 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 11:11:37 -耗时 : 24
2020-03-18 11:11:37 -此处进行解密+验签+身份验证
2020-03-18 11:11:37 -解密：
2020-03-18 11:11:37 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"1F43F3A714EE52AA7A309E37C51314E3","version_no":"450000000145206","login_type":"token","token":"691|VG90PDZRI84WCY2R3XCY1MOR5OIUWETZ","sys_user_account":""}
2020-03-18 11:11:37 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 11:11:37 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 11:11:37 -token值=======691|VG90PDZRI84WCY2R3XCY1MOR5OIUWETZ
2020-03-18 11:11:37 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 11:11:37 -==> Parameters: 04(String), 04(String)
2020-03-18 11:11:37 -<==      Total: 0
2020-03-18 11:11:37 -耗时 : 15
2020-03-18 11:11:37 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 11:11:37 -==> Parameters: 691(String)
2020-03-18 11:11:37 -<==      Total: 1
2020-03-18 11:11:37 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 11:11:37 -==> Parameters: 25(String)
2020-03-18 11:11:37 -<==      Total: 1
2020-03-18 11:11:37 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 11:11:37 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 11:11:37 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 11:11:37 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 11:11:37 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 11:11:37 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 11:11:37 -耗时 : 93
2020-03-18 11:11:41 -此处进行解密+验签+身份验证
2020-03-18 11:11:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 11:11:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 11:11:42 -==> Parameters: 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -耗时 : 22
2020-03-18 11:11:42 -此处进行解密+验签+身份验证
2020-03-18 11:11:42 -解密：
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 11:11:42 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 11:11:42 -此处进行解密+验签+身份验证
2020-03-18 11:11:42 -==> Parameters: 01(String), 01(String)
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:42 -此处进行解密+验签+身份验证
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:42 -此处进行解密+验签+身份验证
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:42 -<==      Total: 4
2020-03-18 11:11:42 -耗时 : 12
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:42 -此处进行解密+验签+身份验证
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 11:11:42 -此处进行解密+验签+身份验证
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 11:11:42 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 11:11:42 -==> Parameters: 691(String)
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 11:11:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 11:11:42 -<==      Total: 2
2020-03-18 11:11:42 -耗时 : 15
2020-03-18 11:11:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:11:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 11:11:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:11:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:42 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 11:11:42 -==> Parameters: 
2020-03-18 11:11:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 11:11:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 11:11:42 -==> Parameters: 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -耗时 : 10
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -<==      Total: 3
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 11:11:42 -耗时 : 19
2020-03-18 11:11:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 11:11:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 11:11:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 11:11:42 -==> Parameters: 
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 11:11:42 -==> Parameters: 
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:11:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 11:11:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 11:11:42 -==> Parameters: 691(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 11:11:42 -<==      Total: 1
2020-03-18 11:11:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 11:11:42 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 2
2020-03-18 11:11:42 -耗时 : 175
2020-03-18 11:11:42 -<==    Updates: 1
2020-03-18 11:11:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 11:11:42 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 11:11:42 -<==      Total: 2
2020-03-18 11:11:42 -耗时 : 177
2020-03-18 11:11:43 -此处进行解密+验签+身份验证
2020-03-18 11:11:43 -此处进行解密+验签+身份验证
2020-03-18 11:11:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 11:11:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 11:11:43 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 11:11:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 11:11:45 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-18 11:11:45 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 11:11:45 -==> Parameters: 691(String)
2020-03-18 11:11:45 -==> Parameters: 202003(String), 691(String)
2020-03-18 11:11:45 -<==      Total: 0
2020-03-18 11:19:04 -<==      Total: 1
2020-03-18 11:19:04 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 11:19:04 -==> Parameters: 691(String), 691(String)
2020-03-18 11:19:04 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m29s366ms252µs763ns).
2020-03-18 11:19:04 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 11:19:04 -==> Parameters: 691(String)
2020-03-18 11:19:04 -<==      Total: 0
2020-03-18 11:19:04 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：null
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:47)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor85.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$b9d40839.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-18 11:19:04 -耗时 : 440582
2020-03-18 11:19:04 -<==      Total: 1
2020-03-18 11:19:04 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 11:19:04 -==> Parameters: 691(String), 691(String)
2020-03-18 11:19:04 -<==      Total: 1
2020-03-18 11:19:04 -耗时 : 438329
2020-03-18 11:58:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-18 11:58:11 -Shutting down ExecutorService 'taskScheduler'
2020-03-18 11:58:11 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-18 11:58:11 -Shutting down Quartz Scheduler
2020-03-18 11:58:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-18 11:58:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-18 11:58:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-18 11:58:11 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 11:58:11 -HikariPool-1 - Shutdown initiated...
2020-03-18 11:58:11 -HikariPool-1 - Shutdown completed.
2020-03-18 11:59:42 -Starting LongEcologicalApplication on PC-201905161910 with PID 4148 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 11:59:42 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 11:59:42 -No active profile set, falling back to default profiles: default
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 11:59:43 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 11:59:43 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 11:59:43 -Finished Spring Data repository scanning in 65ms. Found 0 repository interfaces.
2020-03-18 11:59:43 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 11:59:43 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 11:59:43 -Finished Spring Data repository scanning in 43ms. Found 0 repository interfaces.
2020-03-18 11:59:44 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$81768496] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 11:59:44 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7bfa6936] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 11:59:44 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 11:59:44 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 11:59:44 -Starting service [Tomcat]
2020-03-18 11:59:44 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 11:59:44 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 11:59:44 -Initializing Spring embedded WebApplicationContext
2020-03-18 11:59:44 -Root WebApplicationContext: initialization completed in 1804 ms
2020-03-18 11:59:44 -Filter xssFilter was not registered (disabled)
2020-03-18 11:59:45 -HikariPool-1 - Starting...
2020-03-18 11:59:45 -HikariPool-1 - Start completed.
2020-03-18 11:59:45 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 11:59:45 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 11:59:45 -HHH000206: hibernate.properties not found
2020-03-18 11:59:45 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 11:59:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 11:59:45 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 11:59:46 -Using default implementation for ThreadExecutor
2020-03-18 11:59:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 11:59:46 -Quartz Scheduler v.2.3.0 created.
2020-03-18 11:59:46 -RAMJobStore initialized.
2020-03-18 11:59:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 11:59:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 11:59:46 -Quartz scheduler version: 2.3.0
2020-03-18 11:59:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@13e00016
2020-03-18 11:59:46 -STAET TaskExecutorConfig
2020-03-18 11:59:46 -Initializing ExecutorService
2020-03-18 11:59:46 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 11:59:46 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 11:59:47 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 11:59:47 -Initializing ExecutorService 'taskScheduler'
2020-03-18 11:59:47 -Starting Quartz Scheduler now
2020-03-18 11:59:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 11:59:47 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 11:59:47 -Using a shared selector for servlet write/read
2020-03-18 11:59:47 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 11:59:47 -Started LongEcologicalApplication in 5.214 seconds (JVM running for 6.044)
2020-03-18 11:59:59 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 11:59:59 -Initializing Servlet 'dispatcherServlet'
2020-03-18 11:59:59 -Completed initialization in 17 ms
2020-03-18 11:59:59 -此处进行解密+验签+身份验证
2020-03-18 11:59:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:00 -Starting without optional epoll library
2020-03-18 12:00:00 -Starting without optional kqueue library
2020-03-18 12:00:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 12:00:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 12:00:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 12:00:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:00:00 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:00 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:00 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 12:00:00 -<==    Updates: 1
2020-03-18 12:00:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 12:00:00 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:00 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:00 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 12:00:00 -<==    Updates: 1
2020-03-18 12:00:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 12:00:00 -==> Parameters: 
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:00 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:00 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 12:00:00 -<==    Updates: 1
2020-03-18 12:00:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:00:00 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:00 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 1
2020-03-18 12:00:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:00 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 12:00:00 -<==    Updates: 1
2020-03-18 12:00:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:00 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 12:00:00 -<==      Total: 2
2020-03-18 12:00:00 -耗时 : 191
2020-03-18 12:00:07 -此处进行解密+验签+身份验证
2020-03-18 12:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:07 -此处进行解密+验签+身份验证
2020-03-18 12:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:07 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 12:00:07 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 12:00:07 -==> Parameters: 202003(String), 691(String)
2020-03-18 12:00:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 12:00:07 -==> Parameters: 691(String)
2020-03-18 12:00:07 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 12:00:07 -==> Parameters: 691(String)
2020-03-18 12:00:07 -<==      Total: 0
2020-03-18 12:00:07 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 12:00:07 -==> Parameters: 202003(String), 691(String)
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-18 12:00:07 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 12:00:07 -==> Parameters: 691(String)
2020-03-18 12:00:07 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:07 -<==      Total: 0
2020-03-18 12:00:07 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 12:00:07 -==> Parameters: 202003(String), 691(String)
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-18 12:00:07 -==> Parameters: 691(String)
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -耗时 : 54
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 12:00:07 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:07 -<==      Total: 1
2020-03-18 12:00:07 -耗时 : 199
2020-03-18 12:00:32 -此处进行解密+验签+身份验证
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:32 -此处进行解密+验签+身份验证
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:32 -此处进行解密+验签+身份验证
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:32 -此处进行解密+验签+身份验证
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:32 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyEposDetail
2020-03-18 12:00:32 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-18 12:00:32 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:32 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyEposDetail
2020-03-18 12:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:32 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 12:00:32 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:00:32 -<==      Total: 1
2020-03-18 12:00:32 -耗时 : 10
2020-03-18 12:00:32 -<==      Total: 1
2020-03-18 12:00:32 -耗时 : 11
2020-03-18 12:00:32 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantEposDetail
2020-03-18 12:00:32 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-18 12:00:32 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:00:32 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantEposDetail
2020-03-18 12:00:32 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 12:00:32 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:00:32 -<==      Total: 1
2020-03-18 12:00:32 -耗时 : 8
2020-03-18 12:00:32 -<==      Total: 1
2020-03-18 12:00:32 -耗时 : 9
2020-03-18 12:00:43 -此处进行解密+验签+身份验证
2020-03-18 12:00:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:43 -此处进行解密+验签+身份验证
2020-03-18 12:00:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:00:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:00:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 12:00:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 12:00:43 -==> Parameters: 691(String)
2020-03-18 12:00:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 12:00:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -耗时 : 11
2020-03-18 12:00:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 12:00:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:00:43 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:43 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 12:00:43 -<==    Updates: 1
2020-03-18 12:00:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 12:00:43 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:43 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 12:00:43 -<==    Updates: 1
2020-03-18 12:00:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 12:00:43 -==> Parameters: 
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:43 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:43 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 12:00:43 -<==    Updates: 1
2020-03-18 12:00:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:00:43 -==> Parameters: 691(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:43 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 1
2020-03-18 12:00:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:00:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 12:00:43 -<==    Updates: 1
2020-03-18 12:00:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:00:43 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 12:00:43 -<==      Total: 2
2020-03-18 12:00:43 -耗时 : 121
2020-03-18 12:01:00 -此处进行解密+验签+身份验证
2020-03-18 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:01:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 12:01:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:01:00 -==> Parameters: 691(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:01:00 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:01:00 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 12:01:00 -<==    Updates: 1
2020-03-18 12:01:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 12:01:00 -==> Parameters: 691(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:01:00 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:01:00 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 12:01:00 -<==    Updates: 1
2020-03-18 12:01:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 12:01:00 -==> Parameters: 
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:01:00 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:01:00 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 12:01:00 -<==    Updates: 1
2020-03-18 12:01:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:01:00 -==> Parameters: 691(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:01:00 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 1
2020-03-18 12:01:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:01:00 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 12:01:00 -<==    Updates: 1
2020-03-18 12:01:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:01:00 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 12:01:00 -<==      Total: 2
2020-03-18 12:01:00 -耗时 : 134
2020-03-18 12:01:08 -此处进行解密+验签+身份验证
2020-03-18 12:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:01:08 -此处进行解密+验签+身份验证
2020-03-18 12:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:01:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 12:01:08 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 12:01:08 -==> Parameters: 202003(String), 691(String)
2020-03-18 12:01:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 12:01:08 -<==      Total: 1
2020-03-18 12:01:08 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 12:01:08 -==> Parameters: 691(String)
2020-03-18 12:01:08 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 12:01:08 -==> Parameters: 691(String)
2020-03-18 12:01:08 -<==      Total: 0
2020-03-18 12:01:08 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 12:01:08 -==> Parameters: 202003(String), 691(String)
2020-03-18 12:01:09 -<==      Total: 1
2020-03-18 12:01:09 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 12:01:09 -==> Parameters: 691(String), 691(String)
2020-03-18 12:01:09 -<==      Total: 1
2020-03-18 12:01:09 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-18 12:01:09 -==> Parameters: 691(String)
2020-03-18 12:01:09 -<==      Total: 0
2020-03-18 12:01:09 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 12:01:09 -==> Parameters: 202003(String), 691(String)
2020-03-18 12:01:09 -<==      Total: 1
2020-03-18 12:01:09 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-18 12:01:09 -==> Parameters: 691(String)
2020-03-18 12:01:09 -<==      Total: 1
2020-03-18 12:01:09 -耗时 : 51
2020-03-18 12:01:09 -<==      Total: 1
2020-03-18 12:01:09 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 12:01:09 -==> Parameters: 691(String), 691(String)
2020-03-18 12:01:09 -<==      Total: 1
2020-03-18 12:01:09 -耗时 : 192
2020-03-18 12:08:03 -此处进行解密+验签+身份验证
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:03 -此处进行解密+验签+身份验证
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:03 -此处进行解密+验签+身份验证
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:03 -此处进行解密+验签+身份验证
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyEposDetail
2020-03-18 12:08:03 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-18 12:08:03 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:08:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyEposDetail
2020-03-18 12:08:03 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 12:08:03 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:08:03 -<==      Total: 1
2020-03-18 12:08:03 -耗时 : 11
2020-03-18 12:08:03 -<==      Total: 1
2020-03-18 12:08:03 -耗时 : 10
2020-03-18 12:08:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantEposDetail
2020-03-18 12:08:03 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-18 12:08:03 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:08:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantEposDetail
2020-03-18 12:08:03 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-18 12:08:03 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:08:03 -<==      Total: 1
2020-03-18 12:08:03 -耗时 : 7
2020-03-18 12:08:03 -<==      Total: 1
2020-03-18 12:08:03 -耗时 : 8
2020-03-18 12:08:08 -此处进行解密+验签+身份验证
2020-03-18 12:08:08 -此处进行解密+验签+身份验证
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 12:08:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 12:08:08 -==> Parameters: 691(String)
2020-03-18 12:08:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -耗时 : 11
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 12:08:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:08:08 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:08 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 12:08:08 -<==    Updates: 1
2020-03-18 12:08:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 12:08:08 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:08 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 12:08:08 -<==    Updates: 1
2020-03-18 12:08:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 12:08:08 -==> Parameters: 
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:08 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:08 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 12:08:08 -<==    Updates: 1
2020-03-18 12:08:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:08:08 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:08 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 1
2020-03-18 12:08:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 12:08:08 -<==    Updates: 1
2020-03-18 12:08:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:08 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 12:08:08 -<==      Total: 2
2020-03-18 12:08:08 -耗时 : 127
2020-03-18 12:08:08 -此处进行解密+验签+身份验证
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:08 -此处进行解密+验签+身份验证
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:08 -此处进行解密+验签+身份验证
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:08 -此处进行解密+验签+身份验证
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-18 12:08:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-18 12:08:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-18 12:08:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-18 12:08:08 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-18 12:08:08 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-18 12:08:08 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:08:08 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:08:08 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-18 12:08:08 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:08:08 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-18 12:08:08 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:08:08 -<==      Total: 0
2020-03-18 12:08:08 -<==      Total: 0
2020-03-18 12:08:08 -耗时 : 16
2020-03-18 12:08:08 -耗时 : 10
2020-03-18 12:08:08 -<==      Total: 0
2020-03-18 12:08:08 -耗时 : 36
2020-03-18 12:08:08 -<==      Total: 0
2020-03-18 12:08:08 -耗时 : 39
2020-03-18 12:08:10 -此处进行解密+验签+身份验证
2020-03-18 12:08:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:10 -此处进行解密+验签+身份验证
2020-03-18 12:08:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 12:08:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 12:08:11 -==> Parameters: 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -耗时 : 12
2020-03-18 12:08:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 12:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 12:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 12:08:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:08:11 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:11 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:11 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 12:08:11 -<==    Updates: 1
2020-03-18 12:08:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 12:08:11 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:11 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:11 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 12:08:11 -<==    Updates: 1
2020-03-18 12:08:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 12:08:11 -==> Parameters: 
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:11 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:11 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 12:08:11 -<==    Updates: 1
2020-03-18 12:08:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:08:11 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:11 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 1
2020-03-18 12:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:11 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 12:08:11 -<==    Updates: 1
2020-03-18 12:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:11 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 12:08:11 -<==      Total: 2
2020-03-18 12:08:11 -耗时 : 120
2020-03-18 12:08:15 -此处进行解密+验签+身份验证
2020-03-18 12:08:15 -此处进行解密+验签+身份验证
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:15 -此处进行解密+验签+身份验证
2020-03-18 12:08:15 -此处进行解密+验签+身份验证
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:15 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyMposDetail
2020-03-18 12:08:15 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-18 12:08:15 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:08:15 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyMposDetail
2020-03-18 12:08:15 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-18 12:08:15 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:08:15 -<==      Total: 1
2020-03-18 12:08:15 -耗时 : 11
2020-03-18 12:08:15 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantMposDetail
2020-03-18 12:08:15 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-18 12:08:15 -==> Parameters: 691(String), 20200318(String)
2020-03-18 12:08:15 -<==      Total: 0
2020-03-18 12:08:15 -耗时 : 12
2020-03-18 12:08:15 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantMposDetail
2020-03-18 12:08:15 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-18 12:08:15 -<==      Total: 0
2020-03-18 12:08:15 -耗时 : 8
2020-03-18 12:08:15 -==> Parameters: 691(String), 202003(String)
2020-03-18 12:08:15 -<==      Total: 1
2020-03-18 12:08:15 -耗时 : 9
2020-03-18 12:08:17 -此处进行解密+验签+身份验证
2020-03-18 12:08:17 -此处进行解密+验签+身份验证
2020-03-18 12:08:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 12:08:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 12:08:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 12:08:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 12:08:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 12:08:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 12:08:17 -==> Parameters: 691(String)
2020-03-18 12:08:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -耗时 : 9
2020-03-18 12:08:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:08:17 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:17 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:17 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 12:08:17 -<==    Updates: 1
2020-03-18 12:08:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 12:08:17 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:17 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:17 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 12:08:17 -<==    Updates: 1
2020-03-18 12:08:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 12:08:17 -==> Parameters: 
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:17 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:17 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 12:08:17 -<==    Updates: 1
2020-03-18 12:08:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 12:08:17 -==> Parameters: 691(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:17 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 1
2020-03-18 12:08:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 12:08:17 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 12:08:17 -<==    Updates: 1
2020-03-18 12:08:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 12:08:17 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 12:08:17 -<==      Total: 2
2020-03-18 12:08:17 -耗时 : 125
2020-03-18 13:54:13 -Starting LongEcologicalApplication on PC-201905161910 with PID 11916 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 13:54:13 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 13:54:13 -No active profile set, falling back to default profiles: default
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:14 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 13:54:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 13:54:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 13:54:15 -Finished Spring Data repository scanning in 77ms. Found 0 repository interfaces.
2020-03-18 13:54:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 13:54:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 13:54:15 -Finished Spring Data repository scanning in 43ms. Found 0 repository interfaces.
2020-03-18 13:54:15 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8952e347] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 13:54:15 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$83d6c7e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 13:54:16 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 13:54:16 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 13:54:16 -Starting service [Tomcat]
2020-03-18 13:54:16 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 13:54:16 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 13:54:16 -Initializing Spring embedded WebApplicationContext
2020-03-18 13:54:16 -Root WebApplicationContext: initialization completed in 2253 ms
2020-03-18 13:54:16 -Filter xssFilter was not registered (disabled)
2020-03-18 13:54:16 -HikariPool-1 - Starting...
2020-03-18 13:54:16 -HikariPool-1 - Start completed.
2020-03-18 13:54:16 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 13:54:16 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 13:54:16 -HHH000206: hibernate.properties not found
2020-03-18 13:54:17 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 13:54:17 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 13:54:17 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 13:54:17 -Using default implementation for ThreadExecutor
2020-03-18 13:54:17 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 13:54:17 -Quartz Scheduler v.2.3.0 created.
2020-03-18 13:54:17 -RAMJobStore initialized.
2020-03-18 13:54:17 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 13:54:17 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 13:54:17 -Quartz scheduler version: 2.3.0
2020-03-18 13:54:17 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4af7dd6a
2020-03-18 13:54:18 -STAET TaskExecutorConfig
2020-03-18 13:54:18 -Initializing ExecutorService
2020-03-18 13:54:18 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 13:54:18 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 13:54:18 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 13:54:19 -Initializing ExecutorService 'taskScheduler'
2020-03-18 13:54:19 -Starting Quartz Scheduler now
2020-03-18 13:54:19 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 13:54:19 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 13:54:19 -Using a shared selector for servlet write/read
2020-03-18 13:54:19 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 13:54:19 -Started LongEcologicalApplication in 5.907 seconds (JVM running for 7.081)
2020-03-18 13:54:36 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 13:54:36 -Initializing Servlet 'dispatcherServlet'
2020-03-18 13:54:36 -Completed initialization in 18 ms
2020-03-18 13:54:36 -此处进行解密+验签+身份验证
2020-03-18 13:54:36 -此处进行解密+验签+身份验证
2020-03-18 13:54:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:36 -Starting without optional epoll library
2020-03-18 13:54:36 -Starting without optional kqueue library
2020-03-18 13:54:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:36 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 13:54:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 13:54:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 13:54:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 13:54:36 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 13:54:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:54:36 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:36 -==> Parameters: 691(String)
2020-03-18 13:54:36 -<==      Total: 1
2020-03-18 13:54:36 -<==      Total: 1
2020-03-18 13:54:36 -耗时 : 49
2020-03-18 13:54:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:36 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 13:54:36 -<==      Total: 1
2020-03-18 13:54:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 13:54:36 -<==    Updates: 1
2020-03-18 13:54:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 13:54:36 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:36 -<==      Total: 1
2020-03-18 13:54:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:36 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 13:54:36 -<==      Total: 1
2020-03-18 13:54:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:36 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 13:54:36 -<==    Updates: 1
2020-03-18 13:54:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 13:54:36 -==> Parameters: 
2020-03-18 13:54:36 -<==      Total: 1
2020-03-18 13:54:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:36 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 13:54:37 -<==      Total: 1
2020-03-18 13:54:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:37 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 13:54:37 -<==    Updates: 1
2020-03-18 13:54:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:54:37 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:37 -<==      Total: 1
2020-03-18 13:54:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:37 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 13:54:37 -<==      Total: 1
2020-03-18 13:54:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:37 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 13:54:37 -<==    Updates: 1
2020-03-18 13:54:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:37 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 13:54:37 -<==      Total: 2
2020-03-18 13:54:37 -耗时 : 224
2020-03-18 13:54:50 -此处进行解密+验签+身份验证
2020-03-18 13:54:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 13:54:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 13:54:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 13:54:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:54:50 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:50 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:50 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 13:54:50 -<==    Updates: 1
2020-03-18 13:54:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 13:54:50 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:50 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:50 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 13:54:50 -<==    Updates: 1
2020-03-18 13:54:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 13:54:50 -==> Parameters: 
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:50 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:50 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 13:54:50 -<==    Updates: 1
2020-03-18 13:54:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:54:50 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:50 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 1
2020-03-18 13:54:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:50 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 13:54:50 -<==    Updates: 1
2020-03-18 13:54:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:50 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 13:54:50 -<==      Total: 2
2020-03-18 13:54:50 -耗时 : 137
2020-03-18 13:54:52 -此处进行解密+验签+身份验证
2020-03-18 13:54:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:52 -此处进行解密+验签+身份验证
2020-03-18 13:54:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 13:54:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 13:54:52 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 13:54:52 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:52 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 13:54:52 -==> Parameters: 691(String)
2020-03-18 13:54:52 -<==      Total: 3
2020-03-18 13:54:52 -耗时 : 81
2020-03-18 13:54:54 -此处进行解密+验签+身份验证
2020-03-18 13:54:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:54 -此处进行解密+验签+身份验证
2020-03-18 13:54:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:54 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 13:54:54 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 13:54:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 13:54:54 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 13:54:54 -==> Parameters: 691(String)
2020-03-18 13:54:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -耗时 : 19
2020-03-18 13:54:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:54:54 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:54 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:54 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 13:54:54 -<==    Updates: 1
2020-03-18 13:54:54 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 13:54:54 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:54 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:54 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 13:54:54 -<==    Updates: 1
2020-03-18 13:54:54 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 13:54:54 -==> Parameters: 
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:54 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:54 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 13:54:54 -<==    Updates: 1
2020-03-18 13:54:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:54:54 -==> Parameters: 691(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:54 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 1
2020-03-18 13:54:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:54:54 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 13:54:54 -<==    Updates: 1
2020-03-18 13:54:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:54:54 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 13:54:54 -<==      Total: 2
2020-03-18 13:54:54 -耗时 : 232
2020-03-18 13:54:56 -此处进行解密+验签+身份验证
2020-03-18 13:54:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:56 -此处进行解密+验签+身份验证
2020-03-18 13:54:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:54:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:54:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 13:54:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 13:54:56 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 13:54:56 -==> Parameters: 691(String)
2020-03-18 13:54:56 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 13:54:56 -==> Parameters: 691(String)
2020-03-18 13:54:56 -<==      Total: 1
2020-03-18 13:54:56 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 13:54:56 -==> Parameters: 691(String)
2020-03-18 13:54:56 -<==      Total: 0
2020-03-18 13:54:56 -耗时 : 29
2020-03-18 13:54:56 -<==      Total: 1
2020-03-18 13:54:56 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 13:54:56 -==> Parameters: 691(String)
2020-03-18 13:54:56 -<==      Total: 1
2020-03-18 13:54:56 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 13:54:56 -==> Parameters: 691(String)
2020-03-18 13:54:56 -<==      Total: 1
2020-03-18 13:54:56 -耗时 : 61
2020-03-18 13:55:02 -此处进行解密+验签+身份验证
2020-03-18 13:55:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:02 -此处进行解密+验签+身份验证
2020-03-18 13:55:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 13:55:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-18 13:55:02 -==> Parameters: 691(String)
2020-03-18 13:55:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-18 13:55:02 -==> Parameters: 691(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-18 13:55:02 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-18 13:55:02 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 13:55:02 -==> Parameters: 691(String), 691(String), 20200217(String), 20200318(String), 691(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==> Parameters: 691(String), 20200118(String), 691(String), 20200118(String), 20200318(String), 691(String)
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 13:55:02 -==> Parameters: 691(String), 691(String), 20200217(String), 20200318(String), 691(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-18 13:55:02 -==> Parameters: 691(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 13:55:02 -==> Parameters: 691(String), 20200118(String), 691(String), 20200118(String), 20200318(String), 691(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -耗时 : 73
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-18 13:55:02 -==> Parameters: 691(String)
2020-03-18 13:55:02 -<==      Total: 1
2020-03-18 13:55:02 -耗时 : 81
2020-03-18 13:55:03 -此处进行解密+验签+身份验证
2020-03-18 13:55:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 13:55:03 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-18 13:55:03 -==> Parameters: 691(String)
2020-03-18 13:55:04 -<==      Total: 1
2020-03-18 13:55:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-18 13:55:04 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-18 13:55:04 -<==      Total: 1
2020-03-18 13:55:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 13:55:04 -==> Parameters: 691(String), 691(String), 20200217(String), 20200318(String), 691(String)
2020-03-18 13:55:04 -<==      Total: 1
2020-03-18 13:55:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 13:55:04 -==> Parameters: 691(String), 20200118(String), 691(String), 20200118(String), 20200318(String), 691(String)
2020-03-18 13:55:04 -<==      Total: 1
2020-03-18 13:55:04 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-18 13:55:04 -==> Parameters: 691(String)
2020-03-18 13:55:04 -<==      Total: 1
2020-03-18 13:55:04 -耗时 : 70
2020-03-18 13:55:05 -此处进行解密+验签+身份验证
2020-03-18 13:55:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-18 13:55:05 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-18 13:55:05 -==> Parameters: 691(String)
2020-03-18 13:55:05 -<==      Total: 5
2020-03-18 13:55:05 -耗时 : 31
2020-03-18 13:55:09 -此处进行解密+验签+身份验证
2020-03-18 13:55:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getExcellentMerchantMposList
2020-03-18 13:55:09 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance >= 50000 AND t2.cre_month = ? ) ORDER BY t.id desc limit 0,10 
2020-03-18 13:55:09 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-18 13:55:09 -<==      Total: 2
2020-03-18 13:55:09 -耗时 : 45
2020-03-18 13:55:14 -此处进行解密+验签+身份验证
2020-03-18 13:55:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:14 -此处进行解密+验签+身份验证
2020-03-18 13:55:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 13:55:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 13:55:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 13:55:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 13:55:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 13:55:14 -==> Parameters: 691(String)
2020-03-18 13:55:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:55:14 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -耗时 : 22
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:55:14 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:55:14 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 13:55:14 -<==    Updates: 1
2020-03-18 13:55:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 13:55:14 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:55:14 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:55:14 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 13:55:14 -<==    Updates: 1
2020-03-18 13:55:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 13:55:14 -==> Parameters: 
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:55:14 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:55:14 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 13:55:14 -<==    Updates: 1
2020-03-18 13:55:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 13:55:14 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:55:14 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 1
2020-03-18 13:55:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 13:55:14 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 13:55:14 -<==    Updates: 1
2020-03-18 13:55:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 13:55:14 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 13:55:14 -<==      Total: 2
2020-03-18 13:55:14 -耗时 : 209
2020-03-18 13:55:18 -<==      Total: 0
2020-03-18 13:55:18 -耗时 : 26268
2020-03-18 13:55:19 -此处进行解密+验签+身份验证
2020-03-18 13:55:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-18 13:55:19 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-18 13:55:19 -==> Parameters: 1(String), 691(String), applyRateFlag(String)
2020-03-18 13:55:19 -<==    Updates: 1
2020-03-18 13:55:19 -耗时 : 29
2020-03-18 13:55:19 -此处进行解密+验签+身份验证
2020-03-18 13:55:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:19 -此处进行解密+验签+身份验证
2020-03-18 13:55:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:19 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-18 13:55:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:19 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-18 13:55:19 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-18 13:55:19 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:19 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-18 13:55:19 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:19 -<==      Total: 15
2020-03-18 13:55:19 -耗时 : 10
2020-03-18 13:55:19 -<==      Total: 0
2020-03-18 13:55:19 -耗时 : 25
2020-03-18 13:55:20 -此处进行解密+验签+身份验证
2020-03-18 13:55:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:20 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-18 13:55:20 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-18 13:55:20 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:20 -<==      Total: 5
2020-03-18 13:55:20 -耗时 : 36
2020-03-18 13:55:32 -此处进行解密+验签+身份验证
2020-03-18 13:55:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:32 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-18 13:55:32 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,cacheKey:zfpay_sys_param_rate_list_1
2020-03-18 13:55:32 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,has cacheKey:zfpay_sys_param_rate_list_1 , return
2020-03-18 13:55:32 -耗时 : 9
2020-03-18 13:55:40 -此处进行解密+验签+身份验证
2020-03-18 13:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/addApplyRateTraditionalPos
2020-03-18 13:55:40 -==>  Preparing: insert into t_user_apply_cardrate_trapos_record_info(user_id, sn, credit_card_rate_old, credit_card_rate_new, card_settle_price, cre_date, cre_time,pos_type) select ?, t.sn, t1.credit_card_rate, ?, t.card_settle_price, ?, ?, t.pos_type FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and find_in_set(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) 
2020-03-18 13:55:40 -==> Parameters: 691(String), 0.56(String), 20200318(String), 135540(String), 691(String), EPOS20200318041(String), 691(String)
2020-03-18 13:55:40 -<==    Updates: 1
2020-03-18 13:55:40 -耗时 : 77
2020-03-18 13:55:40 -此处进行解密+验签+身份验证
2020-03-18 13:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:40 -此处进行解密+验签+身份验证
2020-03-18 13:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 13:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 13:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-18 13:55:40 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-18 13:55:40 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-18 13:55:40 -<==      Total: 15
2020-03-18 13:55:40 -耗时 : 13
2020-03-18 13:55:40 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-18 13:55:40 -==> Parameters: 691(String), 691(String)
2020-03-18 13:55:40 -<==      Total: 0
2020-03-18 13:55:40 -耗时 : 34
2020-03-18 14:46:21 -此处进行解密+验签+身份验证
2020-03-18 14:46:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 14:46:21 -此处进行解密+验签+身份验证
2020-03-18 14:46:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-18 14:46:21 -解密异常：{token=691|VG90PDZRI84WCY2R3XCY1MOR5OIUWETZ, sign=62D618FAB1DEB07139D5A230B09D85AD}
2020-03-18 14:46:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 14:46:21 -耗时 : 0
2020-03-18 14:46:21 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-18 14:46:21 -Reconnected to 120.25.164.176:10379
2020-03-18 14:46:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-18 14:46:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 14:46:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-18 14:46:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1ab6a8e2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6e09ad0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@565e696c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@79002afd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@109d43f7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@12297d2e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3799630e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4f36e0c2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@35ce9028 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6c575bb2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 14:46:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:21 -==> Parameters: 691(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:21 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:21 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-18 14:46:21 -<==    Updates: 1
2020-03-18 14:46:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 14:46:21 -==> Parameters: 691(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:21 -==> Parameters: recallFlag(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:21 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-18 14:46:21 -<==    Updates: 1
2020-03-18 14:46:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 14:46:21 -==> Parameters: 
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:21 -==> Parameters: collegeFlag(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:21 -==> Parameters: 25(Integer), 25(Integer), 691(String), collegeFlag(String)
2020-03-18 14:46:21 -<==    Updates: 1
2020-03-18 14:46:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:21 -==> Parameters: 691(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:21 -==> Parameters: cardFlag(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 1
2020-03-18 14:46:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:21 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-18 14:46:21 -<==    Updates: 1
2020-03-18 14:46:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:21 -==> Parameters: appImgFlag(String), 691(String)
2020-03-18 14:46:21 -<==      Total: 2
2020-03-18 14:46:21 -耗时 : 204
2020-03-18 14:46:27 -此处进行解密+验签+身份验证
2020-03-18 14:46:27 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-18 14:46:27 -token值=======691|VG90PDZRI84WCY2R3XCY1MOR5OIUWETZ
2020-03-18 14:46:27 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-03-18 14:46:27 -==> Parameters: null, 691(String)
2020-03-18 14:46:27 -<==    Updates: 1
2020-03-18 14:46:27 -耗时 : 44
2020-03-18 14:46:45 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 14:46:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 14:46:46 -==> Parameters: 13322990711(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 14:46:46 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 144646(String), 181(Integer)
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 14:46:46 -==> Parameters: 26(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 14:46:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 14:46:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 14:46:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 14:46:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 14:46:46 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 14:46:46 -耗时 : 87
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 14:46:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 14:46:46 -==> Parameters: 181(String)
2020-03-18 14:46:46 -解密：
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -耗时 : 7
2020-03-18 14:46:46 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 14:46:46 -==> Parameters: 01(String), 01(String)
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -<==      Total: 4
2020-03-18 14:46:46 -耗时 : 21
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 14:46:46 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 14:46:46 -==> Parameters: 181(String)
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 14:46:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:46 -此处进行解密+验签+身份验证
2020-03-18 14:46:46 -<==      Total: 2
2020-03-18 14:46:46 -耗时 : 9
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:46 -==> Parameters: 181(String)
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:46 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -耗时 : 16
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 14:46:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 14:46:46 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 14:46:46 -==> Parameters: 
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 14:46:46 -<==      Total: 2
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 6(Integer), 6(Integer), 181(String), applyRateFlag(String)
2020-03-18 14:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 14:46:46 -<==      Total: 3
2020-03-18 14:46:46 -耗时 : 14
2020-03-18 14:46:46 -<==    Updates: 2
2020-03-18 14:46:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 14:46:46 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:46 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 14:46:46 -==> Parameters: 
2020-03-18 14:46:46 -<==      Total: 2
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 6(Integer), 6(Integer), 181(String), applyRateFlag(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 14:46:46 -<==    Updates: 2
2020-03-18 14:46:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 14:46:46 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:46 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 6(Integer), 6(Integer), 181(String), cardFlag(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -耗时 : 138
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 14:46:46 -==> Parameters: 
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:46 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:46 -==> Parameters: 6(Integer), 6(Integer), 181(String), cardFlag(String)
2020-03-18 14:46:46 -<==    Updates: 1
2020-03-18 14:46:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:46 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 14:46:46 -<==      Total: 1
2020-03-18 14:46:46 -耗时 : 239
2020-03-18 14:46:50 -此处进行解密+验签+身份验证
2020-03-18 14:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 14:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 14:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 14:46:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:50 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:50 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 2
2020-03-18 14:46:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:50 -==> Parameters: 6(Integer), 6(Integer), 181(String), applyRateFlag(String)
2020-03-18 14:46:50 -<==    Updates: 2
2020-03-18 14:46:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 14:46:50 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:50 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:50 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 14:46:50 -<==    Updates: 1
2020-03-18 14:46:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 14:46:50 -==> Parameters: 
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:50 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:50 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 14:46:50 -<==    Updates: 1
2020-03-18 14:46:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 14:46:50 -==> Parameters: 181(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:50 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 14:46:50 -==> Parameters: 6(Integer), 6(Integer), 181(String), cardFlag(String)
2020-03-18 14:46:50 -<==    Updates: 1
2020-03-18 14:46:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 14:46:50 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 14:46:50 -<==      Total: 1
2020-03-18 14:46:50 -耗时 : 133
2020-03-18 14:46:55 -此处进行解密+验签+身份验证
2020-03-18 14:46:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:55 -此处进行解密+验签+身份验证
2020-03-18 14:46:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 14:46:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-18 14:46:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-18 14:46:55 -==> Parameters: 181(String)
2020-03-18 14:46:55 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-18 14:46:55 -==> Parameters: 181(String)
2020-03-18 14:46:55 -<==      Total: 1
2020-03-18 14:46:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-18 14:46:55 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-18 14:46:55 -<==      Total: 1
2020-03-18 14:46:55 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-18 14:46:55 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-18 14:46:55 -<==      Total: 1
2020-03-18 14:46:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 14:46:55 -==> Parameters: 181(String), 181(String), 20200217(String), 20200318(String), 181(String)
2020-03-18 14:46:55 -<==      Total: 1
2020-03-18 14:46:55 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 14:46:55 -==> Parameters: 181(String), 181(String), 20200217(String), 20200318(String), 181(String)
2020-03-18 14:46:56 -<==      Total: 1
2020-03-18 14:46:56 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 14:46:56 -==> Parameters: 181(String), 20200118(String), 181(String), 20200118(String), 20200318(String), 181(String)
2020-03-18 14:46:56 -<==      Total: 1
2020-03-18 14:46:56 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-18 14:46:56 -==> Parameters: 181(String)
2020-03-18 14:46:56 -<==      Total: 1
2020-03-18 14:46:56 -耗时 : 244
2020-03-18 14:46:56 -<==      Total: 1
2020-03-18 14:46:56 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 14:46:56 -==> Parameters: 181(String), 20200118(String), 181(String), 20200118(String), 20200318(String), 181(String)
2020-03-18 14:46:56 -<==      Total: 1
2020-03-18 14:46:56 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-18 14:46:56 -==> Parameters: 181(String)
2020-03-18 14:46:56 -<==      Total: 1
2020-03-18 14:46:56 -耗时 : 772
2020-03-18 14:46:57 -此处进行解密+验签+身份验证
2020-03-18 14:46:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:46:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:46:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-18 14:46:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-18 14:46:57 -==> Parameters: 181(String)
2020-03-18 14:46:57 -<==      Total: 1
2020-03-18 14:46:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-18 14:46:57 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-18 14:46:57 -<==      Total: 1
2020-03-18 14:46:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-18 14:46:57 -==> Parameters: 181(String), 181(String), 20200217(String), 20200318(String), 181(String)
2020-03-18 14:46:57 -<==      Total: 1
2020-03-18 14:46:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-18 14:46:57 -==> Parameters: 181(String), 20200118(String), 181(String), 20200118(String), 20200318(String), 181(String)
2020-03-18 14:46:57 -<==      Total: 1
2020-03-18 14:46:57 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-18 14:46:57 -==> Parameters: 181(String)
2020-03-18 14:46:57 -<==      Total: 1
2020-03-18 14:46:57 -耗时 : 163
2020-03-18 14:47:09 -此处进行解密+验签+身份验证
2020-03-18 14:47:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:09 -此处进行解密+验签+身份验证
2020-03-18 14:47:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 14:47:09 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 14:47:09 -==> Parameters: 181(String)
2020-03-18 14:47:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 14:47:09 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 14:47:09 -==> Parameters: 181(String)
2020-03-18 14:47:09 -<==      Total: 10
2020-03-18 14:47:09 -耗时 : 18
2020-03-18 14:47:09 -<==      Total: 1
2020-03-18 14:47:09 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 14:47:09 -==> Parameters: 181(String)
2020-03-18 14:47:09 -<==      Total: 1
2020-03-18 14:47:09 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 14:47:09 -==> Parameters: 181(String)
2020-03-18 14:47:09 -<==      Total: 1
2020-03-18 14:47:09 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 14:47:09 -==> Parameters: 181(String)
2020-03-18 14:47:09 -<==      Total: 1
2020-03-18 14:47:09 -耗时 : 36
2020-03-18 14:47:18 -此处进行解密+验签+身份验证
2020-03-18 14:47:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:18 -此处进行解密+验签+身份验证
2020-03-18 14:47:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 14:47:18 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 14:47:18 -==> Parameters: 181(String)
2020-03-18 14:47:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 14:47:18 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 14:47:18 -==> Parameters: 181(String)
2020-03-18 14:47:18 -<==      Total: 10
2020-03-18 14:47:18 -耗时 : 19
2020-03-18 14:47:18 -<==      Total: 1
2020-03-18 14:47:18 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 14:47:18 -==> Parameters: 181(String)
2020-03-18 14:47:18 -<==      Total: 1
2020-03-18 14:47:18 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 14:47:18 -==> Parameters: 181(String)
2020-03-18 14:47:18 -<==      Total: 1
2020-03-18 14:47:18 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 14:47:18 -==> Parameters: 181(String)
2020-03-18 14:47:18 -<==      Total: 1
2020-03-18 14:47:18 -耗时 : 36
2020-03-18 14:47:48 -此处进行解密+验签+身份验证
2020-03-18 14:47:48 -此处进行解密+验签+身份验证
2020-03-18 14:47:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 14:47:48 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 14:47:48 -==> Parameters: 181(String)
2020-03-18 14:47:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 14:47:48 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? AND (user_tel like concat('%',?,'%') or real_name like concat('%',?,'%')) ORDER BY id desc limit 0,10 
2020-03-18 14:47:48 -==> Parameters: 181(String), 赵贝贝(String), 赵贝贝(String)
2020-03-18 14:47:48 -<==      Total: 1
2020-03-18 14:47:48 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 14:47:48 -==> Parameters: 181(String)
2020-03-18 14:47:48 -<==      Total: 1
2020-03-18 14:47:48 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 14:47:48 -==> Parameters: 181(String)
2020-03-18 14:47:48 -<==      Total: 1
2020-03-18 14:47:48 -耗时 : 20
2020-03-18 14:47:48 -<==      Total: 1
2020-03-18 14:47:48 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 14:47:48 -==> Parameters: 181(String)
2020-03-18 14:47:48 -<==      Total: 1
2020-03-18 14:47:48 -耗时 : 35
2020-03-18 14:47:57 -此处进行解密+验签+身份验证
2020-03-18 14:47:57 -此处进行解密+验签+身份验证
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 14:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 14:47:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 14:47:57 -==> Parameters: 
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 14:47:57 -<==      Total: 1
2020-03-18 14:47:57 -耗时 : 13
2020-03-18 14:47:57 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 14:47:57 -==> Parameters: 177(String)
2020-03-18 14:47:57 -此处进行解密+验签+身份验证
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:57 -<==      Total: 1
2020-03-18 14:47:57 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 14:47:57 -==> Parameters: 177(String)
2020-03-18 14:47:57 -此处进行解密+验签+身份验证
2020-03-18 14:47:57 -此处进行解密+验签+身份验证
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 14:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 14:47:57 -<==      Total: 1
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 14:47:57 -==> Parameters: 
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 14:47:57 -<==      Total: 1
2020-03-18 14:47:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-18 14:47:57 -耗时 : 50
2020-03-18 14:47:57 -==> Parameters: 177(String), 177(String)
2020-03-18 14:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 14:47:57 -<==      Total: 2
2020-03-18 14:47:57 -耗时 : 24
2020-03-18 14:47:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 14:47:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 14:47:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 14:47:57 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 14:47:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 14:47:57 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 14:47:57 -<==      Total: 0
2020-03-18 14:47:57 -耗时 : 28
2020-03-18 14:47:57 -<==      Total: 2
2020-03-18 14:47:57 -耗时 : 26
2020-03-18 15:35:51 -此处进行解密+验签+身份验证
2020-03-18 15:35:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:35:51 -解密异常：{last_id=, token=181|L08E86VM11C51NE9J9PY2QU70LBGLM71, user_id=177, sign=BC04091655F8C6592BEF45A74757D34C}
2020-03-18 15:35:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:35:51 -耗时 : 0
2020-03-18 15:35:51 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-18 15:35:51 -Reconnected to 120.25.164.176:10379
2020-03-18 15:36:17 -Starting LongEcologicalApplication on PC-201905161910 with PID 7636 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 15:36:17 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 15:36:17 -No active profile set, falling back to default profiles: default
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 15:36:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 15:36:18 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 15:36:18 -Finished Spring Data repository scanning in 75ms. Found 0 repository interfaces.
2020-03-18 15:36:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 15:36:18 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 15:36:18 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-18 15:36:19 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$12e2b5a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 15:36:19 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d669a47] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 15:36:20 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 15:36:20 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 15:36:20 -Starting service [Tomcat]
2020-03-18 15:36:20 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 15:36:20 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 15:36:20 -Initializing Spring embedded WebApplicationContext
2020-03-18 15:36:20 -Root WebApplicationContext: initialization completed in 2890 ms
2020-03-18 15:36:20 -Filter xssFilter was not registered (disabled)
2020-03-18 15:36:20 -HikariPool-1 - Starting...
2020-03-18 15:36:20 -HikariPool-1 - Start completed.
2020-03-18 15:36:21 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 15:36:21 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 15:36:21 -HHH000206: hibernate.properties not found
2020-03-18 15:36:21 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 15:36:21 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 15:36:21 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 15:36:22 -Using default implementation for ThreadExecutor
2020-03-18 15:36:22 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 15:36:22 -Quartz Scheduler v.2.3.0 created.
2020-03-18 15:36:22 -RAMJobStore initialized.
2020-03-18 15:36:22 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 15:36:22 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 15:36:22 -Quartz scheduler version: 2.3.0
2020-03-18 15:36:22 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6796a873
2020-03-18 15:36:23 -STAET TaskExecutorConfig
2020-03-18 15:36:23 -Initializing ExecutorService
2020-03-18 15:36:23 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 15:36:23 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 15:36:23 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 15:36:24 -Initializing ExecutorService 'taskScheduler'
2020-03-18 15:36:24 -Starting Quartz Scheduler now
2020-03-18 15:36:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 15:36:24 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 15:36:24 -Using a shared selector for servlet write/read
2020-03-18 15:36:24 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 15:36:24 -Started LongEcologicalApplication in 8.286 seconds (JVM running for 10.614)
2020-03-18 15:36:47 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 15:36:47 -Initializing Servlet 'dispatcherServlet'
2020-03-18 15:36:48 -Completed initialization in 92 ms
2020-03-18 15:36:48 -此处进行解密+验签+身份验证
2020-03-18 15:36:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:36:48 -Starting without optional epoll library
2020-03-18 15:36:48 -Starting without optional kqueue library
2020-03-18 15:36:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:36:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:36:49 -耗时 : 7
2020-03-18 15:37:58 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 15:37:59 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 15:37:59 -==> Parameters: 13322990711(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 15:37:59 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 153759(String), 181(Integer)
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 15:37:59 -==> Parameters: 26(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 15:37:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 15:37:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 15:37:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 15:37:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 15:37:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 15:37:59 -耗时 : 167
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -解密：
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 15:37:59 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:37:59 -==> Parameters: 01(String), 01(String)
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -<==      Total: 4
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:37:59 -耗时 : 13
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:37:59 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 15:37:59 -==> Parameters: 181(String)
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -耗时 : 16
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 15:37:59 -此处进行解密+验签+身份验证
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:37:59 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 15:37:59 -==> Parameters: 181(String)
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 15:37:59 -<==      Total: 2
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 15:37:59 -耗时 : 12
2020-03-18 15:37:59 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 15:37:59 -==> Parameters: 181(String)
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -耗时 : 9
2020-03-18 15:37:59 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 15:37:59 -==> Parameters: 
2020-03-18 15:37:59 -<==      Total: 3
2020-03-18 15:37:59 -耗时 : 16
2020-03-18 15:37:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 15:37:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 15:37:59 -==> Parameters: 181(String), 181(String)
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 15:37:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 15:37:59 -==> Parameters: 181(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 2
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 0(Integer), 6(Integer), 181(String), applyRateFlag(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 15:37:59 -<==    Updates: 2
2020-03-18 15:37:59 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 15:37:59 -==> Parameters: 181(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 2
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 6(Integer), 6(Integer), 181(String), applyRateFlag(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 15:37:59 -<==    Updates: 2
2020-03-18 15:37:59 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 15:37:59 -==> Parameters: 181(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 15:37:59 -==> Parameters: 
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 15:37:59 -==> Parameters: 
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 15:37:59 -==> Parameters: 181(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: 181(String), 181(String)
2020-03-18 15:37:59 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 6(Integer), 6(Integer), 181(String), cardFlag(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 15:37:59 -==> Parameters: 6(Integer), 6(Integer), 181(String), cardFlag(String)
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 15:37:59 -<==    Updates: 1
2020-03-18 15:37:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 15:37:59 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -耗时 : 174
2020-03-18 15:37:59 -<==      Total: 1
2020-03-18 15:37:59 -耗时 : 146
2020-03-18 15:38:09 -此处进行解密+验签+身份验证
2020-03-18 15:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:09 -此处进行解密+验签+身份验证
2020-03-18 15:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 15:38:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 15:38:09 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 15:38:09 -==> Parameters: 181(String)
2020-03-18 15:38:09 -<==      Total: 1
2020-03-18 15:38:09 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 15:38:09 -==> Parameters: 181(String)
2020-03-18 15:38:09 -<==      Total: 1
2020-03-18 15:38:09 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 15:38:09 -==> Parameters: 181(String)
2020-03-18 15:38:09 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 15:38:09 -==> Parameters: 181(String)
2020-03-18 15:38:09 -<==      Total: 1
2020-03-18 15:38:09 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 15:38:09 -==> Parameters: 181(String)
2020-03-18 15:38:09 -<==      Total: 10
2020-03-18 15:38:09 -耗时 : 40
2020-03-18 15:38:09 -<==      Total: 1
2020-03-18 15:38:09 -耗时 : 39
2020-03-18 15:38:14 -此处进行解密+验签+身份验证
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:14 -此处进行解密+验签+身份验证
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-18 15:38:14 -此处进行解密+验签+身份验证
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:14 -此处进行解密+验签+身份验证
2020-03-18 15:38:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 15:38:14 -此处进行解密+验签+身份验证
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-18 15:38:14 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2505 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2505 and cre_month=202003 and pos_type is null 
2020-03-18 15:38:14 -==> Parameters: 
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:38:17 -<==      Total: 1
2020-03-18 15:38:17 -耗时 : 3248
2020-03-18 15:38:17 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 15:38:17 -==> Parameters: 2505(String)
2020-03-18 15:38:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:38:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-18 15:38:17 -<==      Total: 1
2020-03-18 15:38:17 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 15:38:17 -==> Parameters: 2505(String)
2020-03-18 15:38:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:38:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-18 15:38:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:38:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2505
2020-03-18 15:38:17 -<==      Total: 1
2020-03-18 15:38:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2505 and pos_type='epos' 
2020-03-18 15:38:17 -==> Parameters: 
2020-03-18 15:38:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-18 15:38:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-18 15:38:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2505 , return
2020-03-18 15:38:17 -<==      Total: 1
2020-03-18 15:38:17 -耗时 : 3287
2020-03-18 15:38:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 15:38:17 -==> Parameters: 2505(String), 2505(String), 0(String)
2020-03-18 15:38:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-18 15:38:17 -==> Parameters: 2505(String), 2505(String)
2020-03-18 15:38:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 15:38:17 -==> Parameters: 2505(String), 2505(String), 1(String)
2020-03-18 15:38:17 -<==      Total: 0
2020-03-18 15:38:17 -<==      Total: 0
2020-03-18 15:38:17 -耗时 : 49
2020-03-18 15:38:17 -耗时 : 56
2020-03-18 15:38:17 -<==      Total: 0
2020-03-18 15:38:17 -耗时 : 56
2020-03-18 15:39:43 -此处进行解密+验签+身份验证
2020-03-18 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:43 -此处进行解密+验签+身份验证
2020-03-18 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 15:39:43 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 15:39:43 -==> Parameters: 181(String)
2020-03-18 15:39:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 15:39:43 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? AND (user_tel like concat('%',?,'%') or real_name like concat('%',?,'%')) ORDER BY id desc limit 0,10 
2020-03-18 15:39:43 -==> Parameters: 181(String), 赵贝贝(String), 赵贝贝(String)
2020-03-18 15:39:43 -<==      Total: 1
2020-03-18 15:39:43 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 15:39:43 -==> Parameters: 181(String)
2020-03-18 15:39:43 -<==      Total: 1
2020-03-18 15:39:43 -<==      Total: 1
2020-03-18 15:39:43 -耗时 : 13
2020-03-18 15:39:43 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 15:39:43 -==> Parameters: 181(String)
2020-03-18 15:39:43 -<==      Total: 1
2020-03-18 15:39:43 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 15:39:43 -==> Parameters: 181(String)
2020-03-18 15:39:43 -<==      Total: 1
2020-03-18 15:39:43 -耗时 : 38
2020-03-18 15:39:48 -此处进行解密+验签+身份验证
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:48 -此处进行解密+验签+身份验证
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 15:39:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 15:39:48 -==> Parameters: 
2020-03-18 15:39:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:39:48 -此处进行解密+验签+身份验证
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:48 -<==      Total: 1
2020-03-18 15:39:48 -耗时 : 14
2020-03-18 15:39:48 -此处进行解密+验签+身份验证
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:48 -此处进行解密+验签+身份验证
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:48 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 15:39:48 -==> Parameters: 177(String)
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:39:48 -<==      Total: 1
2020-03-18 15:39:48 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 15:39:48 -==> Parameters: 177(String)
2020-03-18 15:39:48 -<==      Total: 1
2020-03-18 15:39:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 15:39:48 -==> Parameters: 
2020-03-18 15:39:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:39:48 -<==      Total: 1
2020-03-18 15:39:48 -耗时 : 47
2020-03-18 15:39:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:39:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:39:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:39:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-18 15:39:48 -==> Parameters: 177(String), 177(String)
2020-03-18 15:39:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 15:39:48 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 15:39:48 -<==      Total: 2
2020-03-18 15:39:48 -耗时 : 37
2020-03-18 15:39:48 -<==      Total: 0
2020-03-18 15:39:48 -耗时 : 31
2020-03-18 15:39:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 15:39:48 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 15:39:48 -<==      Total: 2
2020-03-18 15:39:48 -耗时 : 35
2020-03-18 15:40:00 -此处进行解密+验签+身份验证
2020-03-18 15:40:00 -此处进行解密+验签+身份验证
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:40:00 -此处进行解密+验签+身份验证
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:40:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:40:00 -此处进行解密+验签+身份验证
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:40:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 15:40:00 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 15:40:00 -==> Parameters: 
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:40:00 -此处进行解密+验签+身份验证
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 15:40:00 -<==      Total: 1
2020-03-18 15:40:00 -耗时 : 11
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 15:40:00 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 15:40:00 -==> Parameters: 177(String)
2020-03-18 15:40:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:40:00 -<==      Total: 1
2020-03-18 15:40:00 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 15:40:00 -==> Parameters: 177(String)
2020-03-18 15:40:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:40:00 -<==      Total: 1
2020-03-18 15:40:00 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 15:40:00 -==> Parameters: 
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:40:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 15:40:00 -<==      Total: 1
2020-03-18 15:40:00 -耗时 : 54
2020-03-18 15:40:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-18 15:40:00 -==> Parameters: 177(String), 177(String)
2020-03-18 15:40:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 15:40:00 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 15:40:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 15:40:00 -<==      Total: 2
2020-03-18 15:40:00 -耗时 : 33
2020-03-18 15:40:00 -<==      Total: 0
2020-03-18 15:40:00 -耗时 : 33
2020-03-18 15:40:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 15:40:00 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 15:40:00 -<==      Total: 2
2020-03-18 15:40:00 -耗时 : 35
2020-03-18 15:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-18 15:53:28 -Shutting down ExecutorService 'taskScheduler'
2020-03-18 15:53:28 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-18 15:53:28 -Shutting down Quartz Scheduler
2020-03-18 15:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-18 15:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-18 15:53:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-18 15:53:28 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 15:53:28 -HikariPool-1 - Shutdown initiated...
2020-03-18 15:53:28 -HikariPool-1 - Shutdown completed.
2020-03-18 16:24:38 -Starting LongEcologicalApplication on PC-201905161910 with PID 7644 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 16:24:38 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 16:24:38 -No active profile set, falling back to default profiles: default
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:24:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 16:24:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 16:24:40 -Finished Spring Data repository scanning in 90ms. Found 0 repository interfaces.
2020-03-18 16:24:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 16:24:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 16:24:41 -Finished Spring Data repository scanning in 161ms. Found 0 repository interfaces.
2020-03-18 16:24:41 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$49893a50] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 16:24:41 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$440d1ef0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 16:24:42 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 16:24:42 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 16:24:42 -Starting service [Tomcat]
2020-03-18 16:24:42 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 16:24:42 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 16:24:42 -Initializing Spring embedded WebApplicationContext
2020-03-18 16:24:42 -Root WebApplicationContext: initialization completed in 4339 ms
2020-03-18 16:24:42 -Filter xssFilter was not registered (disabled)
2020-03-18 16:24:43 -HikariPool-1 - Starting...
2020-03-18 16:24:43 -HikariPool-1 - Start completed.
2020-03-18 16:24:43 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 16:24:43 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 16:24:43 -HHH000206: hibernate.properties not found
2020-03-18 16:24:43 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 16:24:43 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 16:24:44 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 16:24:44 -Using default implementation for ThreadExecutor
2020-03-18 16:24:44 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 16:24:44 -Quartz Scheduler v.2.3.0 created.
2020-03-18 16:24:44 -RAMJobStore initialized.
2020-03-18 16:24:44 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 16:24:44 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 16:24:44 -Quartz scheduler version: 2.3.0
2020-03-18 16:24:44 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@36551e97
2020-03-18 16:24:45 -STAET TaskExecutorConfig
2020-03-18 16:24:45 -Initializing ExecutorService
2020-03-18 16:24:45 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 16:24:45 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 16:24:45 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 16:24:46 -Initializing ExecutorService 'taskScheduler'
2020-03-18 16:24:46 -Starting Quartz Scheduler now
2020-03-18 16:24:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 16:24:46 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 16:24:46 -Using a shared selector for servlet write/read
2020-03-18 16:24:46 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 16:24:46 -Started LongEcologicalApplication in 8.743 seconds (JVM running for 10.617)
2020-03-18 16:25:03 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 16:25:03 -Initializing Servlet 'dispatcherServlet'
2020-03-18 16:25:03 -Completed initialization in 14 ms
2020-03-18 16:25:03 -此处进行解密+验签+身份验证
2020-03-18 16:25:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:04 -Starting without optional epoll library
2020-03-18 16:25:04 -Starting without optional kqueue library
2020-03-18 16:25:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:25:04 -耗时 : 5
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:25:34 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 16:25:34 -==> Parameters: 13322990711(String)
2020-03-18 16:25:34 -<==      Total: 1
2020-03-18 16:25:34 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 16:25:34 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 162534(String), 181(Integer)
2020-03-18 16:25:34 -<==    Updates: 1
2020-03-18 16:25:34 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:25:34 -==> Parameters: 26(String)
2020-03-18 16:25:34 -<==      Total: 1
2020-03-18 16:25:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:25:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:25:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:25:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:25:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:25:34 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:25:34 -耗时 : 162
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -解密：
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:25:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:25:34 -==> Parameters: 181(String)
2020-03-18 16:25:34 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -==> Parameters: 01(String), 01(String)
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:34 -<==      Total: 1
2020-03-18 16:25:34 -耗时 : 25
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:34 -<==      Total: 4
2020-03-18 16:25:34 -耗时 : 27
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:34 -此处进行解密+验签+身份验证
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:25:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:25:34 -==> Parameters: 181(String)
2020-03-18 16:25:34 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:25:34 -==> Parameters: 181(String)
2020-03-18 16:25:34 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:25:34 -==> Parameters: 
2020-03-18 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:25:34 -<==      Total: 2
2020-03-18 16:25:34 -耗时 : 13
2020-03-18 16:25:34 -<==      Total: 1
2020-03-18 16:25:34 -耗时 : 14
2020-03-18 16:25:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:25:34 -==> Parameters: 181(String), 181(String)
2020-03-18 16:25:34 -<==      Total: 3
2020-03-18 16:25:34 -耗时 : 17
2020-03-18 16:25:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:25:34 -==> Parameters: 181(String), 181(String)
2020-03-18 16:25:34 -<==      Total: 1
2020-03-18 16:25:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:34 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 2
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:25:35 -<==      Total: 2
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:25:35 -<==    Updates: 2
2020-03-18 16:25:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-18 16:25:35 -<==    Updates: 2
2020-03-18 16:25:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:25:35 -<==    Updates: 1
2020-03-18 16:25:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:25:35 -==> Parameters: 
2020-03-18 16:25:35 -<==    Updates: 1
2020-03-18 16:25:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:25:35 -==> Parameters: 
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:25:35 -<==    Updates: 1
2020-03-18 16:25:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -<==    Updates: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:25:35 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:25:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:25:35 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:25:35 -<==    Updates: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -耗时 : 222
2020-03-18 16:25:35 -<==    Updates: 1
2020-03-18 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:25:35 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:25:35 -<==      Total: 1
2020-03-18 16:25:35 -耗时 : 212
2020-03-18 16:25:38 -此处进行解密+验签+身份验证
2020-03-18 16:25:38 -此处进行解密+验签+身份验证
2020-03-18 16:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 16:25:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 16:25:38 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 16:25:38 -==> Parameters: 181(String)
2020-03-18 16:25:38 -<==      Total: 1
2020-03-18 16:25:38 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 16:25:38 -==> Parameters: 181(String)
2020-03-18 16:25:38 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:25:38 -==> Parameters: 181(String)
2020-03-18 16:25:38 -<==      Total: 1
2020-03-18 16:25:38 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:25:38 -==> Parameters: 181(String)
2020-03-18 16:25:38 -<==      Total: 10
2020-03-18 16:25:38 -耗时 : 36
2020-03-18 16:25:38 -<==      Total: 1
2020-03-18 16:25:38 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:25:38 -==> Parameters: 181(String)
2020-03-18 16:25:38 -<==      Total: 1
2020-03-18 16:25:38 -耗时 : 64
2020-03-18 16:25:44 -此处进行解密+验签+身份验证
2020-03-18 16:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:44 -此处进行解密+验签+身份验证
2020-03-18 16:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:25:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 16:25:44 -耗时 : 0
2020-03-18 16:25:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 16:25:44 -耗时 : 0
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:26:27 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 16:26:27 -==> Parameters: 13322990711(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 16:26:27 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 162627(String), 181(Integer)
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:26:27 -==> Parameters: 26(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:26:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:26:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:26:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:26:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:26:27 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:26:27 -耗时 : 98
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -解密：
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:26:27 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:26:27 -==> Parameters: 01(String), 01(String)
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:26:27 -==> Parameters: 181(String)
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:27 -此处进行解密+验签+身份验证
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -耗时 : 13
2020-03-18 16:26:27 -<==      Total: 4
2020-03-18 16:26:27 -耗时 : 20
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:26:27 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:26:27 -==> Parameters: 
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:26:27 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:26:27 -==> Parameters: 181(String)
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:26:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:26:27 -==> Parameters: 181(String)
2020-03-18 16:26:27 -<==      Total: 3
2020-03-18 16:26:27 -耗时 : 15
2020-03-18 16:26:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -耗时 : 6
2020-03-18 16:26:27 -<==      Total: 2
2020-03-18 16:26:27 -耗时 : 15
2020-03-18 16:26:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:26:27 -==> Parameters: 181(String), 181(String)
2020-03-18 16:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:26:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:26:27 -==> Parameters: 181(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 2
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:26:27 -<==      Total: 2
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:26:27 -<==    Updates: 2
2020-03-18 16:26:27 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:26:27 -==> Parameters: 181(String), 181(String)
2020-03-18 16:26:27 -<==    Updates: 2
2020-03-18 16:26:27 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:26:27 -==> Parameters: 181(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:26:27 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:26:27 -==> Parameters: 
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:26:27 -==> Parameters: 
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:26:27 -==> Parameters: 181(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:26:27 -==> Parameters: 181(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:26:27 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -耗时 : 181
2020-03-18 16:26:27 -<==    Updates: 1
2020-03-18 16:26:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:26:27 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:26:27 -<==      Total: 1
2020-03-18 16:26:27 -耗时 : 217
2020-03-18 16:26:32 -此处进行解密+验签+身份验证
2020-03-18 16:26:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:32 -此处进行解密+验签+身份验证
2020-03-18 16:26:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 16:26:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 16:26:32 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:26:32 -==> Parameters: 181(String)
2020-03-18 16:26:32 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 16:26:32 -==> Parameters: 181(String)
2020-03-18 16:26:32 -<==      Total: 1
2020-03-18 16:26:32 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 16:26:32 -==> Parameters: 181(String)
2020-03-18 16:26:32 -<==      Total: 10
2020-03-18 16:26:32 -耗时 : 21
2020-03-18 16:26:32 -<==      Total: 1
2020-03-18 16:26:32 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:26:32 -==> Parameters: 181(String)
2020-03-18 16:26:32 -<==      Total: 1
2020-03-18 16:26:32 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:26:32 -==> Parameters: 181(String)
2020-03-18 16:26:32 -<==      Total: 1
2020-03-18 16:26:32 -耗时 : 37
2020-03-18 16:26:49 -此处进行解密+验签+身份验证
2020-03-18 16:26:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:49 -此处进行解密+验签+身份验证
2020-03-18 16:26:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 16:26:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 16:26:49 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 16:26:49 -==> Parameters: 181(String)
2020-03-18 16:26:49 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? AND (user_tel like concat('%',?,'%') or real_name like concat('%',?,'%')) ORDER BY id desc limit 0,10 
2020-03-18 16:26:49 -==> Parameters: 181(String), 赵贝贝(String), 赵贝贝(String)
2020-03-18 16:26:49 -<==      Total: 1
2020-03-18 16:26:49 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 16:26:49 -==> Parameters: 181(String)
2020-03-18 16:26:49 -<==      Total: 1
2020-03-18 16:26:49 -耗时 : 23
2020-03-18 16:26:49 -<==      Total: 1
2020-03-18 16:26:49 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:26:49 -==> Parameters: 181(String)
2020-03-18 16:26:49 -<==      Total: 1
2020-03-18 16:26:49 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:26:49 -==> Parameters: 181(String)
2020-03-18 16:26:49 -<==      Total: 1
2020-03-18 16:26:49 -耗时 : 57
2020-03-18 16:26:50 -此处进行解密+验签+身份验证
2020-03-18 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:50 -此处进行解密+验签+身份验证
2020-03-18 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:26:50 -此处进行解密+验签+身份验证
2020-03-18 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:26:50 -此处进行解密+验签+身份验证
2020-03-18 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 16:26:51 -==> Parameters: 
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:51 -此处进行解密+验签+身份验证
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:51 -<==      Total: 1
2020-03-18 16:26:51 -耗时 : 15
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:51 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 16:26:51 -==> Parameters: 177(String)
2020-03-18 16:26:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:26:51 -<==      Total: 1
2020-03-18 16:26:51 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:51 -==> Parameters: 177(String)
2020-03-18 16:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:51 -<==      Total: 1
2020-03-18 16:26:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:26:51 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:26:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:26:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:26:51 -==> Parameters: 
2020-03-18 16:26:51 -==> Parameters: 177(String), 177(String)
2020-03-18 16:26:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:26:51 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:26:51 -<==      Total: 1
2020-03-18 16:26:51 -耗时 : 53
2020-03-18 16:26:51 -<==      Total: 0
2020-03-18 16:26:51 -耗时 : 40
2020-03-18 16:26:51 -<==      Total: 1
2020-03-18 16:26:51 -耗时 : 48
2020-03-18 16:26:51 -<==      Total: 1
2020-03-18 16:26:51 -耗时 : 46
2020-03-18 16:26:57 -此处进行解密+验签+身份验证
2020-03-18 16:26:57 -此处进行解密+验签+身份验证
2020-03-18 16:26:57 -此处进行解密+验签+身份验证
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:57 -此处进行解密+验签+身份验证
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:57 -此处进行解密+验签+身份验证
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:26:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:26:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:26:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type='epos' 
2020-03-18 16:26:57 -==> Parameters: 
2020-03-18 16:26:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:26:57 -<==      Total: 1
2020-03-18 16:26:57 -耗时 : 22
2020-03-18 16:26:57 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-18 16:26:57 -==> Parameters: 177(String)
2020-03-18 16:26:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:26:57 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:26:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:26:57 -==> Parameters: 177(String), 177(String)
2020-03-18 16:26:57 -<==      Total: 1
2020-03-18 16:26:57 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:26:57 -==> Parameters: 177(String)
2020-03-18 16:26:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:26:57 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:26:57 -<==      Total: 1
2020-03-18 16:26:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:26:57 -==> Parameters: 
2020-03-18 16:26:57 -<==      Total: 2
2020-03-18 16:26:57 -耗时 : 45
2020-03-18 16:26:57 -<==      Total: 1
2020-03-18 16:26:57 -耗时 : 46
2020-03-18 16:26:57 -<==      Total: 0
2020-03-18 16:26:57 -耗时 : 44
2020-03-18 16:26:57 -<==      Total: 2
2020-03-18 16:26:57 -耗时 : 47
2020-03-18 16:27:04 -此处进行解密+验签+身份验证
2020-03-18 16:27:04 -此处进行解密+验签+身份验证
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:04 -此处进行解密+验签+身份验证
2020-03-18 16:27:04 -此处进行解密+验签+身份验证
2020-03-18 16:27:04 -此处进行解密+验签+身份验证
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=177 and cre_month=202003 
2020-03-18 16:27:04 -==> Parameters: 
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:04 -<==      Total: 1
2020-03-18 16:27:04 -耗时 : 16
2020-03-18 16:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:04 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-18 16:27:04 -==> Parameters: 177(String)
2020-03-18 16:27:04 -<==      Total: 1
2020-03-18 16:27:04 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 16:27:04 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:04 -==> Parameters: 177(String)
2020-03-18 16:27:04 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:04 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:04 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:04 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:04 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:04 -<==      Total: 1
2020-03-18 16:27:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=177 
2020-03-18 16:27:04 -==> Parameters: 
2020-03-18 16:27:04 -<==      Total: 2
2020-03-18 16:27:04 -耗时 : 29
2020-03-18 16:27:04 -<==      Total: 2
2020-03-18 16:27:04 -耗时 : 33
2020-03-18 16:27:04 -<==      Total: 1
2020-03-18 16:27:04 -耗时 : 47
2020-03-18 16:27:04 -<==      Total: 0
2020-03-18 16:27:04 -耗时 : 37
2020-03-18 16:27:06 -此处进行解密+验签+身份验证
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:06 -此处进行解密+验签+身份验证
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:06 -此处进行解密+验签+身份验证
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:06 -此处进行解密+验签+身份验证
2020-03-18 16:27:06 -此处进行解密+验签+身份验证
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:06 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type='epos' 
2020-03-18 16:27:06 -==> Parameters: 
2020-03-18 16:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:06 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-18 16:27:06 -==> Parameters: 177(String)
2020-03-18 16:27:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:06 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:06 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:06 -<==      Total: 2
2020-03-18 16:27:06 -耗时 : 31
2020-03-18 16:27:06 -<==      Total: 1
2020-03-18 16:27:06 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:27:06 -==> Parameters: 177(String)
2020-03-18 16:27:06 -<==      Total: 1
2020-03-18 16:27:06 -耗时 : 23
2020-03-18 16:27:06 -<==      Total: 2
2020-03-18 16:27:06 -耗时 : 34
2020-03-18 16:27:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:06 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:06 -<==      Total: 1
2020-03-18 16:27:06 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:27:06 -==> Parameters: 
2020-03-18 16:27:06 -<==      Total: 0
2020-03-18 16:27:06 -耗时 : 42
2020-03-18 16:27:06 -<==      Total: 1
2020-03-18 16:27:06 -耗时 : 59
2020-03-18 16:27:12 -此处进行解密+验签+身份验证
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:12 -此处进行解密+验签+身份验证
2020-03-18 16:27:12 -此处进行解密+验签+身份验证
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:12 -此处进行解密+验签+身份验证
2020-03-18 16:27:12 -此处进行解密+验签+身份验证
2020-03-18 16:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:12 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 16:27:12 -==> Parameters: 177(String)
2020-03-18 16:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:12 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 16:27:12 -==> Parameters: 
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:12 -<==      Total: 1
2020-03-18 16:27:12 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:27:12 -==> Parameters: 177(String)
2020-03-18 16:27:12 -<==      Total: 1
2020-03-18 16:27:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:12 -耗时 : 20
2020-03-18 16:27:12 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:12 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:12 -<==      Total: 1
2020-03-18 16:27:12 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:27:12 -==> Parameters: 
2020-03-18 16:27:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:12 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:12 -<==      Total: 1
2020-03-18 16:27:12 -耗时 : 28
2020-03-18 16:27:12 -<==      Total: 1
2020-03-18 16:27:12 -耗时 : 35
2020-03-18 16:27:12 -<==      Total: 1
2020-03-18 16:27:12 -耗时 : 54
2020-03-18 16:27:12 -<==      Total: 0
2020-03-18 16:27:12 -耗时 : 35
2020-03-18 16:27:13 -此处进行解密+验签+身份验证
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:13 -此处进行解密+验签+身份验证
2020-03-18 16:27:13 -此处进行解密+验签+身份验证
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:13 -此处进行解密+验签+身份验证
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:13 -此处进行解密+验签+身份验证
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:13 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-18 16:27:13 -==> Parameters: 177(String)
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-18 16:27:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:13 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=177 and cre_month=202003 
2020-03-18 16:27:13 -==> Parameters: 
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:13 -<==      Total: 1
2020-03-18 16:27:13 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 16:27:13 -==> Parameters: 177(String)
2020-03-18 16:27:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:13 -<==      Total: 1
2020-03-18 16:27:13 -耗时 : 18
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:13 -<==      Total: 1
2020-03-18 16:27:13 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=177 
2020-03-18 16:27:13 -==> Parameters: 
2020-03-18 16:27:13 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:13 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:13 -<==      Total: 1
2020-03-18 16:27:13 -耗时 : 48
2020-03-18 16:27:13 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:13 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:13 -<==      Total: 0
2020-03-18 16:27:13 -耗时 : 32
2020-03-18 16:27:13 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:13 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:13 -<==      Total: 2
2020-03-18 16:27:13 -耗时 : 31
2020-03-18 16:27:13 -<==      Total: 2
2020-03-18 16:27:13 -耗时 : 33
2020-03-18 16:27:16 -此处进行解密+验签+身份验证
2020-03-18 16:27:16 -此处进行解密+验签+身份验证
2020-03-18 16:27:16 -此处进行解密+验签+身份验证
2020-03-18 16:27:16 -此处进行解密+验签+身份验证
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:16 -此处进行解密+验签+身份验证
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:27:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type='epos' 
2020-03-18 16:27:16 -==> Parameters: 
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:16 -<==      Total: 1
2020-03-18 16:27:16 -耗时 : 12
2020-03-18 16:27:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:16 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:16 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-18 16:27:16 -==> Parameters: 177(String)
2020-03-18 16:27:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:16 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:16 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:16 -<==      Total: 1
2020-03-18 16:27:16 -<==      Total: 0
2020-03-18 16:27:16 -耗时 : 34
2020-03-18 16:27:16 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:27:16 -==> Parameters: 177(String)
2020-03-18 16:27:16 -<==      Total: 2
2020-03-18 16:27:16 -耗时 : 33
2020-03-18 16:27:16 -<==      Total: 2
2020-03-18 16:27:16 -耗时 : 33
2020-03-18 16:27:16 -<==      Total: 1
2020-03-18 16:27:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:27:16 -==> Parameters: 
2020-03-18 16:27:16 -<==      Total: 1
2020-03-18 16:27:16 -耗时 : 53
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:27:21 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 16:27:21 -==> Parameters: 
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -耗时 : 13
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:21 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 16:27:21 -==> Parameters: 177(String)
2020-03-18 16:27:21 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:21 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:21 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:21 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:21 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:21 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:27:21 -==> Parameters: 177(String)
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -耗时 : 29
2020-03-18 16:27:21 -耗时 : 33
2020-03-18 16:27:21 -<==      Total: 0
2020-03-18 16:27:21 -耗时 : 30
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:27:21 -==> Parameters: 
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -耗时 : 58
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-18 16:27:21 -此处进行解密+验签+身份验证
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=177 and cre_month=202003 
2020-03-18 16:27:21 -==> Parameters: 
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -<==      Total: 1
2020-03-18 16:27:21 -耗时 : 20
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-18 16:27:21 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-18 16:27:21 -==> Parameters: 177(String)
2020-03-18 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-18 16:27:22 -==> Parameters: 177(String)
2020-03-18 16:27:22 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:22 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=177 
2020-03-18 16:27:22 -==> Parameters: 
2020-03-18 16:27:22 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:22 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:22 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:22 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -耗时 : 43
2020-03-18 16:27:22 -<==      Total: 2
2020-03-18 16:27:22 -耗时 : 35
2020-03-18 16:27:22 -<==      Total: 0
2020-03-18 16:27:22 -耗时 : 34
2020-03-18 16:27:22 -<==      Total: 2
2020-03-18 16:27:22 -耗时 : 31
2020-03-18 16:27:22 -此处进行解密+验签+身份验证
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:22 -此处进行解密+验签+身份验证
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:22 -此处进行解密+验签+身份验证
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:22 -此处进行解密+验签+身份验证
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:22 -此处进行解密+验签+身份验证
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:27:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type='epos' 
2020-03-18 16:27:22 -==> Parameters: 
2020-03-18 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -耗时 : 10
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:22 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-18 16:27:22 -==> Parameters: 177(String)
2020-03-18 16:27:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:22 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:22 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:22 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-18 16:27:22 -==> Parameters: 177(String)
2020-03-18 16:27:22 -<==      Total: 0
2020-03-18 16:27:22 -耗时 : 34
2020-03-18 16:27:22 -<==      Total: 2
2020-03-18 16:27:22 -耗时 : 36
2020-03-18 16:27:22 -<==      Total: 2
2020-03-18 16:27:22 -耗时 : 34
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:27:22 -==> Parameters: 
2020-03-18 16:27:22 -<==      Total: 1
2020-03-18 16:27:22 -耗时 : 52
2020-03-18 16:27:33 -此处进行解密+验签+身份验证
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:33 -此处进行解密+验签+身份验证
2020-03-18 16:27:33 -此处进行解密+验签+身份验证
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:33 -此处进行解密+验签+身份验证
2020-03-18 16:27:33 -此处进行解密+验签+身份验证
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_177
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:33 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=177 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=177 and cre_month=202003 and pos_type is null 
2020-03-18 16:27:33 -==> Parameters: 
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_177 , return
2020-03-18 16:27:33 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-18 16:27:33 -==> Parameters: 177(String)
2020-03-18 16:27:33 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:33 -==> Parameters: 177(String), 177(String), 1(String)
2020-03-18 16:27:33 -<==      Total: 1
2020-03-18 16:27:33 -耗时 : 18
2020-03-18 16:27:33 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:33 -==> Parameters: 177(String), 177(String)
2020-03-18 16:27:34 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-18 16:27:34 -==> Parameters: 177(String), 177(String), 0(String)
2020-03-18 16:27:34 -<==      Total: 1
2020-03-18 16:27:34 -<==      Total: 1
2020-03-18 16:27:34 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-18 16:27:34 -耗时 : 28
2020-03-18 16:27:34 -==> Parameters: 177(String)
2020-03-18 16:27:34 -<==      Total: 0
2020-03-18 16:27:34 -耗时 : 33
2020-03-18 16:27:34 -<==      Total: 1
2020-03-18 16:27:34 -耗时 : 32
2020-03-18 16:27:34 -<==      Total: 1
2020-03-18 16:27:34 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=177 and pos_type='epos' 
2020-03-18 16:27:34 -==> Parameters: 
2020-03-18 16:27:34 -<==      Total: 1
2020-03-18 16:27:34 -耗时 : 60
2020-03-18 16:32:32 -此处进行解密+验签+身份验证
2020-03-18 16:32:32 -此处进行解密+验签+身份验证
2020-03-18 16:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:32:32 -解密异常：{token=181|CE1XUC2XJL0F7I0UXV6VM2HWQYTQZBXD, sign=108936B5CC08B9EFC905B5F309635FE1}
2020-03-18 16:32:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:32:32 -耗时 : 0
2020-03-18 16:32:32 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-18 16:32:32 -Reconnected to 120.25.164.176:10379
2020-03-18 16:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:32:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:32:33 -耗时 : 0
2020-03-18 16:33:04 -此处进行解密+验签+身份验证
2020-03-18 16:33:04 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 16:33:04 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@83adac7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5f4dd2d1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1ffd71d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6720314b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@67e4a01e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@560e3d69 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@29b65f8a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4f7a999e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@d5c243f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2a1ea588 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:33:04 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 16:33:04 -==> Parameters: 13322990711(String)
2020-03-18 16:33:04 -<==      Total: 1
2020-03-18 16:33:04 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 16:33:04 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 163304(String), 181(Integer)
2020-03-18 16:33:04 -<==    Updates: 1
2020-03-18 16:33:04 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:33:04 -==> Parameters: 26(String)
2020-03-18 16:33:04 -<==      Total: 1
2020-03-18 16:33:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:33:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:33:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:33:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:33:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:33:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:33:05 -耗时 : 145
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -解密：
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:33:05 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:33:05 -==> Parameters: 01(String), 01(String)
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:05 -<==      Total: 4
2020-03-18 16:33:05 -耗时 : 10
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:33:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:33:05 -==> Parameters: 181(String)
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -耗时 : 7
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:33:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:33:05 -==> Parameters: 181(String)
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:05 -此处进行解密+验签+身份验证
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -耗时 : 10
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:33:05 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:33:05 -==> Parameters: 
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:05 -<==      Total: 3
2020-03-18 16:33:05 -耗时 : 10
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:33:05 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:33:05 -==> Parameters: 181(String)
2020-03-18 16:33:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:33:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:33:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 2
2020-03-18 16:33:05 -耗时 : 11
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 2
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:33:05 -<==      Total: 2
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:33:05 -<==    Updates: 2
2020-03-18 16:33:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:33:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:33:05 -<==    Updates: 2
2020-03-18 16:33:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:33:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:05 -<==    Updates: 1
2020-03-18 16:33:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:33:05 -==> Parameters: 
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:33:05 -<==    Updates: 1
2020-03-18 16:33:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:33:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:33:05 -<==    Updates: 1
2020-03-18 16:33:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:33:05 -==> Parameters: 
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:33:05 -<==    Updates: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -耗时 : 126
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:33:05 -<==    Updates: 1
2020-03-18 16:33:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:33:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:05 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:33:05 -<==    Updates: 1
2020-03-18 16:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:05 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:33:05 -<==      Total: 1
2020-03-18 16:33:05 -耗时 : 208
2020-03-18 16:33:08 -此处进行解密+验签+身份验证
2020-03-18 16:33:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:08 -此处进行解密+验签+身份验证
2020-03-18 16:33:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:33:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:33:08 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:33:08 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:08 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:33:08 -==> Parameters: 181(String)
2020-03-18 16:33:08 -<==      Total: 1171
2020-03-18 16:33:08 -耗时 : 84
2020-03-18 16:33:10 -此处进行解密+验签+身份验证
2020-03-18 16:33:10 -此处进行解密+验签+身份验证
2020-03-18 16:33:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:33:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:33:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:33:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:33:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:33:10 -==> Parameters: 181(String)
2020-03-18 16:33:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:33:10 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -耗时 : 19
2020-03-18 16:33:10 -<==      Total: 2
2020-03-18 16:33:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:33:10 -<==    Updates: 2
2020-03-18 16:33:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:33:10 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:10 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:33:10 -<==    Updates: 1
2020-03-18 16:33:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:33:10 -==> Parameters: 
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:10 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:10 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:33:10 -<==    Updates: 1
2020-03-18 16:33:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:33:10 -==> Parameters: 181(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:10 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:33:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:33:10 -<==    Updates: 1
2020-03-18 16:33:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:33:10 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:33:10 -<==      Total: 1
2020-03-18 16:33:10 -耗时 : 121
2020-03-18 16:33:14 -此处进行解密+验签+身份验证
2020-03-18 16:33:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:14 -此处进行解密+验签+身份验证
2020-03-18 16:33:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:33:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:33:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-18 16:33:14 -耗时 : 0
2020-03-18 16:33:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-18 16:33:14 -耗时 : 0
2020-03-18 16:33:32 -此处进行解密+验签+身份验证
2020-03-18 16:33:32 -解密：
2020-03-18 16:33:32 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:33:32 -此处进行解密+验签+身份验证
2020-03-18 16:33:32 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 16:33:32 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 16:33:32 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:33:32 -==> Parameters: 04(String), 04(String)
2020-03-18 16:33:32 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 16:33:32 -耗时 : 13
2020-03-18 16:33:32 -<==      Total: 0
2020-03-18 16:33:32 -耗时 : 18
2020-03-18 16:33:32 -此处进行解密+验签+身份验证
2020-03-18 16:33:32 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"289C70A13812078EC0B65D9197827DB0","version_no":"450000000145206","login_type":"token","token":"181|GVHMECRZ0L9GLNFTA4BEHXOJRTOZ0EBV","sys_user_account":""}
2020-03-18 16:33:32 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:33:32 -token值=======181|GVHMECRZ0L9GLNFTA4BEHXOJRTOZ0EBV
2020-03-18 16:33:32 -耗时 : 4
2020-03-18 16:33:38 -<==      Total: 1595
2020-03-18 16:33:38 -耗时 : 30088
2020-03-18 16:37:11 -此处进行解密+验签+身份验证
2020-03-18 16:37:11 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 16:37:11 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 16:37:11 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 16:37:11 -此处进行解密+验签+身份验证
2020-03-18 16:37:11 -解密：
2020-03-18 16:37:11 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:37:11 -耗时 : 10
2020-03-18 16:37:11 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:37:11 -==> Parameters: 04(String), 04(String)
2020-03-18 16:37:11 -<==      Total: 0
2020-03-18 16:37:11 -耗时 : 9
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:37:29 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 16:37:29 -==> Parameters: 15019499979(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 16:37:29 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 163729(String), 469(Integer)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:37:29 -==> Parameters: 25(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:37:29 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:37:29 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:37:29 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:37:29 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:37:29 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:37:29 -耗时 : 78
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:37:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:37:29 -==> Parameters: 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -耗时 : 21
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -解密：
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:29 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:37:29 -==> Parameters: 01(String), 01(String)
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:37:29 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:37:29 -<==      Total: 4
2020-03-18 16:37:29 -==> Parameters: 469(String)
2020-03-18 16:37:29 -耗时 : 13
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:29 -<==      Total: 2
2020-03-18 16:37:29 -耗时 : 11
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:37:29 -此处进行解密+验签+身份验证
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:37:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:37:29 -==> Parameters: 
2020-03-18 16:37:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:37:29 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:37:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:37:29 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 3
2020-03-18 16:37:29 -耗时 : 9
2020-03-18 16:37:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:37:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:37:29 -==> Parameters: 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -耗时 : 9
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:37:29 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:37:29 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:37:29 -==> Parameters: 
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:37:29 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:37:29 -==> Parameters: 
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:37:29 -<==    Updates: 1
2020-03-18 16:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:29 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:29 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:37:29 -<==      Total: 1
2020-03-18 16:37:29 -耗时 : 145
2020-03-18 16:37:30 -<==    Updates: 1
2020-03-18 16:37:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:37:30 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:30 -<==      Total: 1
2020-03-18 16:37:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:30 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:37:30 -<==      Total: 1
2020-03-18 16:37:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:30 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:37:30 -<==    Updates: 1
2020-03-18 16:37:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:30 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:37:30 -<==      Total: 1
2020-03-18 16:37:30 -耗时 : 205
2020-03-18 16:37:47 -此处进行解密+验签+身份验证
2020-03-18 16:37:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:47 -此处进行解密+验签+身份验证
2020-03-18 16:37:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-18 16:37:47 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-18 16:37:47 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-18 16:37:47 -==> Parameters: 469(String)
2020-03-18 16:37:47 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 16:37:47 -==> Parameters: 202003(String), 469(String)
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-18 16:37:47 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-18 16:37:47 -==> Parameters: 469(String)
2020-03-18 16:37:47 -<==      Total: 0
2020-03-18 16:37:47 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 16:37:47 -==> Parameters: 202003(String), 469(String)
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-18 16:37:47 -==> Parameters: 469(String)
2020-03-18 16:37:47 -<==      Total: 0
2020-03-18 16:37:47 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-18 16:37:47 -==> Parameters: 202003(String), 469(String)
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-18 16:37:47 -==> Parameters: 469(String)
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -耗时 : 48
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-18 16:37:47 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:47 -<==      Total: 1
2020-03-18 16:37:47 -耗时 : 216
2020-03-18 16:37:49 -此处进行解密+验签+身份验证
2020-03-18 16:37:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:37:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:37:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:37:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:37:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:37:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:37:49 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:49 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:49 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:37:49 -<==    Updates: 1
2020-03-18 16:37:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:37:49 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:49 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:49 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:37:49 -<==    Updates: 1
2020-03-18 16:37:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:37:49 -==> Parameters: 
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:49 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:49 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:37:49 -<==    Updates: 1
2020-03-18 16:37:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:37:49 -==> Parameters: 469(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:49 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:37:49 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:37:49 -<==    Updates: 1
2020-03-18 16:37:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:37:49 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:37:49 -<==      Total: 1
2020-03-18 16:37:49 -耗时 : 144
2020-03-18 16:41:30 -此处进行解密+验签+身份验证
2020-03-18 16:41:30 -解密：
2020-03-18 16:41:30 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:41:30 -此处进行解密+验签+身份验证
2020-03-18 16:41:30 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 16:41:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 16:41:30 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:41:30 -==> Parameters: 04(String), 04(String)
2020-03-18 16:41:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 16:41:30 -<==      Total: 1
2020-03-18 16:41:30 -耗时 : 9
2020-03-18 16:41:30 -耗时 : 9
2020-03-18 16:41:30 -此处进行解密+验签+身份验证
2020-03-18 16:41:30 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"FCCAF9D077377790DD37417A7806F937","version_no":"450000000145206","login_type":"token","token":"469|CQXQ0TBTPY5XEE9VOJKW04G6TK0VY4VU","sys_user_account":""}
2020-03-18 16:41:30 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:41:30 -token值=======469|CQXQ0TBTPY5XEE9VOJKW04G6TK0VY4VU
2020-03-18 16:41:30 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 16:41:30 -==> Parameters: 469(String)
2020-03-18 16:41:30 -<==      Total: 1
2020-03-18 16:41:30 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:41:30 -==> Parameters: 25(String)
2020-03-18 16:41:30 -<==      Total: 1
2020-03-18 16:41:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:41:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:41:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:41:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:41:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:41:30 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:41:30 -耗时 : 52
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:41:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:41:35 -==> Parameters: 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -耗时 : 13
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -解密：
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:41:35 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:41:35 -==> Parameters: 01(String), 01(String)
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:41:35 -<==      Total: 4
2020-03-18 16:41:35 -耗时 : 9
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:41:35 -此处进行解密+验签+身份验证
2020-03-18 16:41:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:41:35 -==> Parameters: 469(String)
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:41:35 -<==      Total: 2
2020-03-18 16:41:35 -耗时 : 18
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:41:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:41:35 -==> Parameters: 469(String)
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:41:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:41:35 -==> Parameters: 
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -耗时 : 10
2020-03-18 16:41:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:41:35 -==> Parameters: 469(String), 469(String)
2020-03-18 16:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:41:35 -<==      Total: 3
2020-03-18 16:41:35 -耗时 : 15
2020-03-18 16:41:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:41:35 -==> Parameters: 469(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:41:35 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:41:35 -==> Parameters: 469(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:41:35 -==> Parameters: 469(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:41:35 -==> Parameters: 
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:41:35 -==> Parameters: 
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:41:35 -==> Parameters: 469(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:41:35 -==> Parameters: 469(String), 469(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -耗时 : 169
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:41:35 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:41:35 -<==    Updates: 1
2020-03-18 16:41:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:41:35 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:41:35 -<==      Total: 1
2020-03-18 16:41:35 -耗时 : 199
2020-03-18 16:42:02 -此处进行解密+验签+身份验证
2020-03-18 16:42:02 -解密：
2020-03-18 16:42:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:42:02 -此处进行解密+验签+身份验证
2020-03-18 16:42:02 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-18 16:42:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-18 16:42:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:42:02 -==> Parameters: 04(String), 04(String)
2020-03-18 16:42:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-18 16:42:02 -耗时 : 8
2020-03-18 16:42:02 -<==      Total: 1
2020-03-18 16:42:02 -耗时 : 20
2020-03-18 16:42:02 -此处进行解密+验签+身份验证
2020-03-18 16:42:02 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"FCCAF9D077377790DD37417A7806F937","version_no":"450000000145206","login_type":"token","token":"469|CQXQ0TBTPY5XEE9VOJKW04G6TK0VY4VU","sys_user_account":""}
2020-03-18 16:42:02 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:42:02 -token值=======469|CQXQ0TBTPY5XEE9VOJKW04G6TK0VY4VU
2020-03-18 16:42:02 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-18 16:42:02 -==> Parameters: 469(String)
2020-03-18 16:42:02 -<==      Total: 1
2020-03-18 16:42:02 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:42:02 -==> Parameters: 25(String)
2020-03-18 16:42:02 -<==      Total: 1
2020-03-18 16:42:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:42:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:42:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:42:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:42:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:42:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:42:02 -耗时 : 66
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:42:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:42:07 -==> Parameters: 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -耗时 : 12
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -解密：
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:42:07 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:42:07 -==> Parameters: 01(String), 01(String)
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:42:07 -<==      Total: 4
2020-03-18 16:42:07 -耗时 : 20
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:42:07 -此处进行解密+验签+身份验证
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:42:07 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:42:07 -==> Parameters: 
2020-03-18 16:42:07 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:42:07 -==> Parameters: 469(String)
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:42:07 -<==      Total: 2
2020-03-18 16:42:07 -耗时 : 11
2020-03-18 16:42:07 -<==      Total: 3
2020-03-18 16:42:07 -耗时 : 11
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:42:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:42:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:42:07 -==> Parameters: 469(String)
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:42:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:42:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:42:07 -==> Parameters: 469(String), 469(String)
2020-03-18 16:42:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:42:07 -==> Parameters: 469(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -耗时 : 12
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:42:07 -==> Parameters: 469(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:42:07 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:42:07 -==> Parameters: 469(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:42:07 -==> Parameters: 
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:42:07 -==> Parameters: 
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:42:07 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:42:07 -==> Parameters: 469(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:42:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:42:07 -==> Parameters: 469(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:42:07 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -耗时 : 130
2020-03-18 16:42:07 -<==    Updates: 1
2020-03-18 16:42:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:42:07 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:42:07 -<==      Total: 1
2020-03-18 16:42:07 -耗时 : 153
2020-03-18 16:43:49 -此处进行解密+验签+身份验证
2020-03-18 16:43:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:49 -此处进行解密+验签+身份验证
2020-03-18 16:43:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:43:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:49 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:43:49 -==> Parameters: 469(String)
2020-03-18 16:43:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:43:49 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:43:49 -==> Parameters: 469(String), 469(String)
2020-03-18 16:43:49 -<==      Total: 82
2020-03-18 16:43:49 -耗时 : 41
2020-03-18 16:43:51 -此处进行解密+验签+身份验证
2020-03-18 16:43:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 16:43:51 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 16:43:51 -==> Parameters: 469(String)
2020-03-18 16:43:51 -<==      Total: 82
2020-03-18 16:43:51 -耗时 : 48
2020-03-18 16:43:53 -此处进行解密+验签+身份验证
2020-03-18 16:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 16:43:53 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-18 16:43:53 -==> Parameters: 469(String)
2020-03-18 16:43:53 -<==      Total: 0
2020-03-18 16:43:53 -耗时 : 28
2020-03-18 16:43:55 -此处进行解密+验签+身份验证
2020-03-18 16:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:55 -此处进行解密+验签+身份验证
2020-03-18 16:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:55 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:43:55 -==> Parameters: 469(String)
2020-03-18 16:43:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:43:55 -<==      Total: 0
2020-03-18 16:43:55 -耗时 : 15
2020-03-18 16:43:55 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:43:55 -==> Parameters: 469(String)
2020-03-18 16:43:55 -<==      Total: 0
2020-03-18 16:43:55 -耗时 : 10
2020-03-18 16:43:57 -此处进行解密+验签+身份验证
2020-03-18 16:43:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:43:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:43:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:43:57 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:43:57 -==> Parameters: 469(String)
2020-03-18 16:43:57 -<==      Total: 0
2020-03-18 16:43:57 -耗时 : 14
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:44:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:44:10 -==> Parameters: 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -耗时 : 12
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -解密：
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:44:10 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:44:10 -==> Parameters: 01(String), 01(String)
2020-03-18 16:44:10 -<==      Total: 4
2020-03-18 16:44:10 -耗时 : 15
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:44:10 -此处进行解密+验签+身份验证
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:44:10 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:44:10 -==> Parameters: 
2020-03-18 16:44:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:10 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:44:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:44:10 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:44:10 -==> Parameters: 469(String)
2020-03-18 16:44:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:44:10 -==> Parameters: 469(String)
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:44:10 -<==      Total: 3
2020-03-18 16:44:10 -耗时 : 9
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:44:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:44:10 -<==      Total: 2
2020-03-18 16:44:10 -耗时 : 9
2020-03-18 16:44:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:10 -耗时 : 13
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:44:10 -<==    Updates: 1
2020-03-18 16:44:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:44:10 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:44:10 -<==    Updates: 1
2020-03-18 16:44:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:44:10 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:44:10 -<==    Updates: 1
2020-03-18 16:44:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:44:10 -==> Parameters: 
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:44:10 -<==    Updates: 1
2020-03-18 16:44:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:44:10 -==> Parameters: 
2020-03-18 16:44:10 -<==    Updates: 1
2020-03-18 16:44:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:10 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:10 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:44:10 -<==      Total: 1
2020-03-18 16:44:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:10 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:44:11 -<==    Updates: 1
2020-03-18 16:44:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:11 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:11 -<==    Updates: 1
2020-03-18 16:44:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:11 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:11 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -耗时 : 131
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:11 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:44:11 -<==    Updates: 1
2020-03-18 16:44:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:11 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -耗时 : 142
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:44:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:44:11 -==> Parameters: 469(String)
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -耗时 : 10
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -解密：
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:44:11 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:44:11 -==> Parameters: 01(String), 01(String)
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:11 -<==      Total: 4
2020-03-18 16:44:11 -耗时 : 14
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:44:11 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:44:11 -==> Parameters: 469(String)
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:44:11 -<==      Total: 2
2020-03-18 16:44:11 -耗时 : 9
2020-03-18 16:44:11 -此处进行解密+验签+身份验证
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:44:11 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:44:11 -==> Parameters: 
2020-03-18 16:44:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:44:11 -==> Parameters: 469(String)
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:11 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:11 -<==      Total: 3
2020-03-18 16:44:11 -耗时 : 12
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:44:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:11 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -耗时 : 19
2020-03-18 16:44:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:44:11 -<==      Total: 1
2020-03-18 16:44:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:11 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:44:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:11 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:44:12 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:44:12 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:44:12 -==> Parameters: 
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:44:12 -==> Parameters: 
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:12 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:44:12 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:44:12 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -耗时 : 158
2020-03-18 16:44:12 -<==    Updates: 1
2020-03-18 16:44:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:44:12 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:44:12 -<==      Total: 1
2020-03-18 16:44:12 -耗时 : 147
2020-03-18 16:44:15 -<==      Total: 7
2020-03-18 16:44:15 -耗时 : 26076
2020-03-18 16:44:51 -此处进行解密+验签+身份验证
2020-03-18 16:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:44:51 -此处进行解密+验签+身份验证
2020-03-18 16:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:44:51 -==> Parameters: 469(String)
2020-03-18 16:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:44:51 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:44:51 -==> Parameters: 469(String), 469(String)
2020-03-18 16:44:51 -<==      Total: 7
2020-03-18 16:44:51 -耗时 : 19
2020-03-18 16:44:51 -<==      Total: 82
2020-03-18 16:44:51 -耗时 : 44
2020-03-18 16:44:54 -此处进行解密+验签+身份验证
2020-03-18 16:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 16:44:54 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 16:44:54 -==> Parameters: 469(String)
2020-03-18 16:44:54 -<==      Total: 82
2020-03-18 16:44:54 -耗时 : 10
2020-03-18 16:44:58 -此处进行解密+验签+身份验证
2020-03-18 16:44:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:58 -此处进行解密+验签+身份验证
2020-03-18 16:44:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:44:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:44:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:44:58 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:44:58 -==> Parameters: 469(String)
2020-03-18 16:44:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:44:58 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:44:58 -==> Parameters: 469(String)
2020-03-18 16:44:58 -<==      Total: 0
2020-03-18 16:44:58 -耗时 : 13
2020-03-18 16:44:58 -<==      Total: 0
2020-03-18 16:44:58 -耗时 : 11
2020-03-18 16:45:13 -此处进行解密+验签+身份验证
2020-03-18 16:45:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:45:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:45:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:45:13 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:45:13 -==> Parameters: 469(String)
2020-03-18 16:45:13 -<==      Total: 0
2020-03-18 16:45:13 -耗时 : 13
2020-03-18 16:46:06 -此处进行解密+验签+身份验证
2020-03-18 16:46:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:46:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:46:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:46:06 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null AND sn like concat('%',?,'%') ORDER BY id desc limit 0,10 
2020-03-18 16:46:06 -==> Parameters: 469(String), aqsd(String)
2020-03-18 16:46:06 -<==      Total: 0
2020-03-18 16:46:06 -耗时 : 19
2020-03-18 16:46:20 -此处进行解密+验签+身份验证
2020-03-18 16:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:46:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:46:20 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' AND sn like concat('%',?,'%') ORDER BY id desc limit 0,10 
2020-03-18 16:46:20 -==> Parameters: 469(String), asd(String)
2020-03-18 16:46:20 -<==      Total: 0
2020-03-18 16:46:20 -耗时 : 13
2020-03-18 16:46:46 -此处进行解密+验签+身份验证
2020-03-18 16:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:46:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:46:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:46:46 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null AND sn like concat('%',?,'%') ORDER BY id desc limit 0,10 
2020-03-18 16:46:46 -==> Parameters: 469(String), sssss(String)
2020-03-18 16:46:46 -<==      Total: 0
2020-03-18 16:46:46 -耗时 : 11
2020-03-18 16:48:01 -此处进行解密+验签+身份验证
2020-03-18 16:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:48:01 -此处进行解密+验签+身份验证
2020-03-18 16:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-18 16:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-18 16:48:01 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:01 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:01 -==> Parameters: 469(String)
2020-03-18 16:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-18 16:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -耗时 : 10
2020-03-18 16:48:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:01 -==> Parameters: 469(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:01 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:01 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-18 16:48:01 -<==    Updates: 1
2020-03-18 16:48:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:01 -==> Parameters: 469(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:01 -==> Parameters: recallFlag(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:01 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-18 16:48:01 -<==    Updates: 1
2020-03-18 16:48:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:01 -==> Parameters: 
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:01 -==> Parameters: collegeFlag(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:01 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-18 16:48:01 -<==    Updates: 1
2020-03-18 16:48:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:01 -==> Parameters: 469(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:01 -==> Parameters: cardFlag(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:01 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-18 16:48:01 -<==    Updates: 1
2020-03-18 16:48:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:01 -==> Parameters: appImgFlag(String), 469(String)
2020-03-18 16:48:01 -<==      Total: 1
2020-03-18 16:48:01 -耗时 : 147
2020-03-18 16:48:06 -此处进行解密+验签+身份验证
2020-03-18 16:48:06 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-18 16:48:06 -token值=======469|CQXQ0TBTPY5XEE9VOJKW04G6TK0VY4VU
2020-03-18 16:48:06 -VerifyTokenServiceImpl -- isToken方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceStringCommands.convertLettuceAccessException(LettuceStringCommands.java:799)
	at org.springframework.data.redis.connection.lettuce.LettuceStringCommands.get(LettuceStringCommands.java:68)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:253)
	at org.springframework.data.redis.core.DefaultValueOperations$1.inRedis(DefaultValueOperations.java:57)
	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:59)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:95)
	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:53)
	at com.example.longecological.config.redis.RedisUtils.get(RedisUtils.java:114)
	at com.example.longecological.service.common.impl.VerifyTokenServiceImpl.isToken(VerifyTokenServiceImpl.java:46)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl.userLogOutOper(UserLoginServiceImpl.java:330)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl.userLogOut(UserLoginServiceImpl.java:319)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl$$FastClassBySpringCGLIB$$b1492584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl$$EnhancerBySpringCGLIB$$6ac58514.userLogOut(<generated>)
	at com.example.longecological.controller.user.UserLoginController.userLogOut(UserLoginController.java:85)
	at com.example.longecological.controller.user.UserLoginController$$FastClassBySpringCGLIB$$77717560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor104.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.user.UserLoginController$$EnhancerBySpringCGLIB$$d3cf1b37.userLogOut(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-18 16:48:06 -耗时 : 10
2020-03-18 16:48:06 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-18 16:48:06 -Reconnected to 120.25.164.176:10379
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@122d3ed8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6d133dbd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4a96b0bd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@31368cc9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3b28002b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4ec99bf3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@10544d00 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@53a8a66b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@393832c9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3bac201e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-18 16:48:17 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 16:48:17 -==> Parameters: 13322990711(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 16:48:17 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 164817(String), 181(Integer)
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:48:17 -==> Parameters: 26(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:48:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:48:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:48:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:48:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:48:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:48:17 -耗时 : 115
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:17 -==> Parameters: 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -耗时 : 8
2020-03-18 16:48:17 -解密：
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:48:17 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:48:17 -==> Parameters: 01(String), 01(String)
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:17 -<==      Total: 4
2020-03-18 16:48:17 -耗时 : 9
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:17 -此处进行解密+验签+身份验证
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:48:17 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:48:17 -==> Parameters: 181(String)
2020-03-18 16:48:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:48:17 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:17 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:48:17 -==> Parameters: 
2020-03-18 16:48:17 -<==      Total: 2
2020-03-18 16:48:17 -耗时 : 8
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:48:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:17 -==> Parameters: 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -<==      Total: 3
2020-03-18 16:48:17 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:48:17 -耗时 : 9
2020-03-18 16:48:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:48:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:17 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -耗时 : 7
2020-03-18 16:48:17 -<==      Total: 2
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 2
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:48:17 -<==    Updates: 2
2020-03-18 16:48:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:17 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:48:17 -<==    Updates: 2
2020-03-18 16:48:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:17 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:17 -==> Parameters: 
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:17 -==> Parameters: 
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:17 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:17 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -耗时 : 140
2020-03-18 16:48:17 -<==    Updates: 1
2020-03-18 16:48:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:17 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:48:17 -<==      Total: 1
2020-03-18 16:48:17 -耗时 : 141
2020-03-18 16:48:23 -此处进行解密+验签+身份验证
2020-03-18 16:48:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:23 -此处进行解密+验签+身份验证
2020-03-18 16:48:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:48:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:23 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:48:23 -==> Parameters: 181(String)
2020-03-18 16:48:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:48:23 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:48:23 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:23 -<==      Total: 1171
2020-03-18 16:48:23 -耗时 : 60
2020-03-18 16:48:28 -此处进行解密+验签+身份验证
2020-03-18 16:48:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 16:48:28 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 16:48:28 -==> Parameters: 181(String)
2020-03-18 16:48:28 -<==      Total: 1170
2020-03-18 16:48:28 -耗时 : 18
2020-03-18 16:48:29 -此处进行解密+验签+身份验证
2020-03-18 16:48:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:29 -此处进行解密+验签+身份验证
2020-03-18 16:48:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:48:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:29 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:48:29 -==> Parameters: 181(String)
2020-03-18 16:48:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:48:29 -<==      Total: 7
2020-03-18 16:48:29 -耗时 : 10
2020-03-18 16:48:29 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:48:29 -==> Parameters: 181(String)
2020-03-18 16:48:29 -<==      Total: 10
2020-03-18 16:48:29 -耗时 : 13
2020-03-18 16:48:43 -此处进行解密+验签+身份验证
2020-03-18 16:48:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:48:43 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:48:43 -==> Parameters: 181(String)
2020-03-18 16:48:43 -<==      Total: 0
2020-03-18 16:48:43 -耗时 : 11
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:44 -==> Parameters: 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -耗时 : 29
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -解密：
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:48:44 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:48:44 -==> Parameters: 01(String), 01(String)
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:44 -<==      Total: 4
2020-03-18 16:48:44 -耗时 : 8
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:48:44 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:48:44 -==> Parameters: 181(String)
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:44 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:48:44 -==> Parameters: 
2020-03-18 16:48:44 -<==      Total: 2
2020-03-18 16:48:44 -耗时 : 10
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:48:44 -<==      Total: 3
2020-03-18 16:48:44 -耗时 : 12
2020-03-18 16:48:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:44 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:44 -==> Parameters: 181(String)
2020-03-18 16:48:44 -<==      Total: 2
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:48:44 -此处进行解密+验签+身份验证
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:44 -耗时 : 11
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:44 -<==    Updates: 2
2020-03-18 16:48:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:44 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:48:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:48:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:44 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:48:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:48:44 -<==      Total: 2
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:48:44 -<==    Updates: 1
2020-03-18 16:48:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:44 -==> Parameters: 
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:48:44 -<==    Updates: 2
2020-03-18 16:48:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:44 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:48:44 -<==    Updates: 1
2020-03-18 16:48:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:44 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:48:44 -<==    Updates: 1
2020-03-18 16:48:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:44 -==> Parameters: 
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:48:44 -<==    Updates: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -耗时 : 130
2020-03-18 16:48:44 -<==    Updates: 1
2020-03-18 16:48:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:44 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:44 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:48:44 -<==    Updates: 1
2020-03-18 16:48:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:44 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:48:44 -<==      Total: 1
2020-03-18 16:48:44 -耗时 : 139
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:45 -==> Parameters: 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -耗时 : 16
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -解密：
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:45 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:48:45 -==> Parameters: 01(String), 01(String)
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:45 -<==      Total: 4
2020-03-18 16:48:45 -耗时 : 16
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:48:45 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:48:45 -==> Parameters: 181(String)
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -<==      Total: 2
2020-03-18 16:48:45 -耗时 : 8
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:48:45 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:48:45 -==> Parameters: 
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:45 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 3
2020-03-18 16:48:45 -此处进行解密+验签+身份验证
2020-03-18 16:48:45 -耗时 : 9
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:48:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:48:45 -==> Parameters: 181(String)
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -耗时 : 8
2020-03-18 16:48:45 -<==      Total: 2
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:48:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:48:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:48:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:45 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -<==    Updates: 2
2020-03-18 16:48:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:45 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 2
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:48:45 -<==    Updates: 2
2020-03-18 16:48:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:48:45 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:45 -<==    Updates: 1
2020-03-18 16:48:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:45 -==> Parameters: 
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:48:45 -<==    Updates: 1
2020-03-18 16:48:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:48:45 -==> Parameters: 
2020-03-18 16:48:45 -<==    Updates: 1
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:45 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:48:45 -<==    Updates: 1
2020-03-18 16:48:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:48:45 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:45 -<==    Updates: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -耗时 : 137
2020-03-18 16:48:45 -<==      Total: 1
2020-03-18 16:48:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:48:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:48:45 -<==    Updates: 1
2020-03-18 16:48:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:48:45 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:48:46 -<==      Total: 1
2020-03-18 16:48:46 -耗时 : 137
2020-03-18 16:48:53 -<==      Total: 1595
2020-03-18 16:48:53 -耗时 : 30244
2020-03-18 16:48:56 -此处进行解密+验签+身份验证
2020-03-18 16:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:56 -此处进行解密+验签+身份验证
2020-03-18 16:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:48:56 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:48:56 -==> Parameters: 181(String)
2020-03-18 16:48:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:48:56 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:48:56 -==> Parameters: 181(String), 181(String)
2020-03-18 16:48:56 -<==      Total: 1595
2020-03-18 16:48:56 -耗时 : 23
2020-03-18 16:48:56 -<==      Total: 1171
2020-03-18 16:48:56 -耗时 : 57
2020-03-18 16:48:58 -此处进行解密+验签+身份验证
2020-03-18 16:48:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:48:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:48:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 16:48:58 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 16:48:58 -==> Parameters: 181(String)
2020-03-18 16:48:58 -<==      Total: 1170
2020-03-18 16:48:58 -耗时 : 20
2020-03-18 16:49:01 -此处进行解密+验签+身份验证
2020-03-18 16:49:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:49:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:49:01 -此处进行解密+验签+身份验证
2020-03-18 16:49:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:49:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:49:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:49:01 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:49:01 -==> Parameters: 181(String)
2020-03-18 16:49:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:49:01 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:49:01 -==> Parameters: 181(String)
2020-03-18 16:49:01 -<==      Total: 7
2020-03-18 16:49:01 -耗时 : 13
2020-03-18 16:49:01 -<==      Total: 10
2020-03-18 16:49:01 -耗时 : 13
2020-03-18 16:49:06 -此处进行解密+验签+身份验证
2020-03-18 16:49:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:49:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:49:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:49:06 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:49:06 -==> Parameters: 181(String)
2020-03-18 16:49:06 -<==      Total: 0
2020-03-18 16:49:06 -耗时 : 12
2020-03-18 16:49:21 -此处进行解密+验签+身份验证
2020-03-18 16:49:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:49:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:49:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:49:21 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null AND sn like concat('%',?,'%') ORDER BY id desc limit 0,10 
2020-03-18 16:49:21 -==> Parameters: 181(String), aaa(String)
2020-03-18 16:49:21 -<==      Total: 0
2020-03-18 16:49:21 -耗时 : 12
2020-03-18 16:49:43 -此处进行解密+验签+身份验证
2020-03-18 16:49:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:49:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:49:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:49:43 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:49:43 -==> Parameters: 181(String)
2020-03-18 16:49:43 -<==      Total: 0
2020-03-18 16:49:43 -耗时 : 12
2020-03-18 16:50:02 -此处进行解密+验签+身份验证
2020-03-18 16:50:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:50:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:50:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:50:02 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null AND sn like concat('%',?,'%') ORDER BY id desc limit 0,10 
2020-03-18 16:50:02 -==> Parameters: 181(String), aaa(String)
2020-03-18 16:50:02 -<==      Total: 0
2020-03-18 16:50:02 -耗时 : 12
2020-03-18 16:50:14 -此处进行解密+验签+身份验证
2020-03-18 16:50:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:50:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:50:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:50:14 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:50:14 -==> Parameters: 181(String)
2020-03-18 16:50:14 -<==      Total: 0
2020-03-18 16:50:14 -耗时 : 11
2020-03-18 16:50:24 -此处进行解密+验签+身份验证
2020-03-18 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:50:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:50:24 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null AND sn like concat('%',?,'%') ORDER BY id desc limit 0,10 
2020-03-18 16:50:24 -==> Parameters: 181(String), aaa(String)
2020-03-18 16:50:24 -<==      Total: 0
2020-03-18 16:50:24 -耗时 : 11
2020-03-18 16:50:42 -此处进行解密+验签+身份验证
2020-03-18 16:50:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:50:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:50:42 -此处进行解密+验签+身份验证
2020-03-18 16:50:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:50:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:50:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:50:42 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:50:42 -==> Parameters: 181(String)
2020-03-18 16:50:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:50:42 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:50:42 -==> Parameters: 181(String)
2020-03-18 16:50:42 -<==      Total: 7
2020-03-18 16:50:42 -耗时 : 12
2020-03-18 16:50:42 -<==      Total: 10
2020-03-18 16:50:42 -耗时 : 12
2020-03-18 16:50:48 -此处进行解密+验签+身份验证
2020-03-18 16:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:50:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:50:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:50:48 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:50:48 -==> Parameters: 181(String)
2020-03-18 16:50:48 -<==      Total: 0
2020-03-18 16:50:48 -耗时 : 13
2020-03-18 16:51:01 -此处进行解密+验签+身份验证
2020-03-18 16:51:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:51:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:51:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:51:01 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:51:01 -==> Parameters: 181(String)
2020-03-18 16:51:01 -<==      Total: 10
2020-03-18 16:51:01 -耗时 : 14
2020-03-18 16:51:06 -此处进行解密+验签+身份验证
2020-03-18 16:51:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:51:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:51:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:51:06 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:51:06 -==> Parameters: 181(String)
2020-03-18 16:51:06 -<==      Total: 10
2020-03-18 16:51:06 -耗时 : 13
2020-03-18 16:51:21 -此处进行解密+验签+身份验证
2020-03-18 16:51:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:51:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:51:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:51:21 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:51:21 -==> Parameters: 181(String)
2020-03-18 16:51:21 -<==      Total: 0
2020-03-18 16:51:21 -耗时 : 13
2020-03-18 16:51:28 -此处进行解密+验签+身份验证
2020-03-18 16:51:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:51:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:51:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:51:28 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:51:28 -==> Parameters: 181(String)
2020-03-18 16:51:28 -<==      Total: 0
2020-03-18 16:51:28 -耗时 : 11
2020-03-18 16:51:35 -此处进行解密+验签+身份验证
2020-03-18 16:51:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:51:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:51:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:51:35 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:51:35 -==> Parameters: 181(String)
2020-03-18 16:51:35 -<==      Total: 10
2020-03-18 16:51:35 -耗时 : 12
2020-03-18 16:52:43 -此处进行解密+验签+身份验证
2020-03-18 16:52:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:52:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:52:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 16:52:43 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-18 16:52:43 -==> Parameters: 181(String)
2020-03-18 16:52:43 -<==      Total: 10
2020-03-18 16:52:43 -耗时 : 14
2020-03-18 16:52:51 -此处进行解密+验签+身份验证
2020-03-18 16:52:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:52:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:52:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/unbindTraditionalPos
2020-03-18 16:52:51 -==>  Preparing: INSERT INTO t_user_trapos_unbind_record_info ( user_id, sn, cre_date, cre_time ) values (?,?,?,?) 
2020-03-18 16:52:51 -==> Parameters: 181(String), 20203173000(String), 20200318(String), 165251(String)
2020-03-18 16:52:51 -<==    Updates: 1
2020-03-18 16:52:51 -耗时 : 48
2020-03-18 16:52:51 -此处进行解密+验签+身份验证
2020-03-18 16:52:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:52:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:52:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 16:52:51 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-18 16:52:51 -==> Parameters: 181(String)
2020-03-18 16:52:51 -<==      Total: 9
2020-03-18 16:52:51 -耗时 : 206
2020-03-18 16:53:08 -此处进行解密+验签+身份验证
2020-03-18 16:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:53:08 -此处进行解密+验签+身份验证
2020-03-18 16:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:53:08 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:53:08 -==> Parameters: 181(String)
2020-03-18 16:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:53:08 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:53:08 -==> Parameters: 181(String)
2020-03-18 16:53:08 -<==      Total: 7
2020-03-18 16:53:08 -耗时 : 12
2020-03-18 16:53:08 -<==      Total: 10
2020-03-18 16:53:08 -耗时 : 13
2020-03-18 16:53:14 -此处进行解密+验签+身份验证
2020-03-18 16:53:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:53:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:53:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:53:14 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:53:14 -==> Parameters: 181(String)
2020-03-18 16:53:14 -<==      Total: 0
2020-03-18 16:53:14 -耗时 : 12
2020-03-18 16:53:30 -此处进行解密+验签+身份验证
2020-03-18 16:53:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:53:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:53:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/unbindTraditionalPos
2020-03-18 16:53:30 -==>  Preparing: INSERT INTO t_user_trapos_unbind_record_info ( user_id, sn, cre_date, cre_time ) values (?,?,?,?) 
2020-03-18 16:53:30 -==> Parameters: 181(String), 20203171011(String), 20200318(String), 165330(String)
2020-03-18 16:53:30 -<==    Updates: 1
2020-03-18 16:53:30 -耗时 : 24
2020-03-18 16:53:30 -此处进行解密+验签+身份验证
2020-03-18 16:53:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:53:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:53:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 16:53:30 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-18 16:53:30 -==> Parameters: 181(String)
2020-03-18 16:53:30 -<==      Total: 8
2020-03-18 16:53:30 -耗时 : 208
2020-03-18 16:56:12 -Starting LongEcologicalApplication on PC-201905161910 with PID 7780 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-18 16:56:12 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-18 16:56:12 -No active profile set, falling back to default profiles: default
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:13 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-18 16:56:14 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 16:56:14 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 16:56:14 -Finished Spring Data repository scanning in 85ms. Found 0 repository interfaces.
2020-03-18 16:56:14 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-18 16:56:14 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-18 16:56:14 -Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2020-03-18 16:56:14 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$5788bd09] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 16:56:15 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$520ca1a9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-18 16:56:15 -Tomcat initialized with port(s): 8080 (http)
2020-03-18 16:56:15 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-18 16:56:15 -Starting service [Tomcat]
2020-03-18 16:56:15 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-18 16:56:15 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-18 16:56:15 -Initializing Spring embedded WebApplicationContext
2020-03-18 16:56:15 -Root WebApplicationContext: initialization completed in 3021 ms
2020-03-18 16:56:15 -Filter xssFilter was not registered (disabled)
2020-03-18 16:56:16 -HikariPool-1 - Starting...
2020-03-18 16:56:16 -HikariPool-1 - Start completed.
2020-03-18 16:56:16 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-18 16:56:16 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-18 16:56:16 -HHH000206: hibernate.properties not found
2020-03-18 16:56:16 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-18 16:56:16 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-18 16:56:17 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-18 16:56:17 -Using default implementation for ThreadExecutor
2020-03-18 16:56:17 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-18 16:56:17 -Quartz Scheduler v.2.3.0 created.
2020-03-18 16:56:17 -RAMJobStore initialized.
2020-03-18 16:56:17 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-18 16:56:17 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-18 16:56:17 -Quartz scheduler version: 2.3.0
2020-03-18 16:56:17 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@383cdd4d
2020-03-18 16:56:18 -STAET TaskExecutorConfig
2020-03-18 16:56:18 -Initializing ExecutorService
2020-03-18 16:56:18 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-18 16:56:18 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-18 16:56:18 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-18 16:56:18 -Initializing ExecutorService 'taskScheduler'
2020-03-18 16:56:19 -Starting Quartz Scheduler now
2020-03-18 16:56:19 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-18 16:56:19 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-18 16:56:19 -Using a shared selector for servlet write/read
2020-03-18 16:56:19 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-18 16:56:19 -Started LongEcologicalApplication in 7.075 seconds (JVM running for 8.302)
2020-03-18 16:56:39 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-18 16:56:39 -Initializing Servlet 'dispatcherServlet'
2020-03-18 16:56:39 -Completed initialization in 12 ms
2020-03-18 16:56:39 -此处进行解密+验签+身份验证
2020-03-18 16:56:39 -此处进行解密+验签+身份验证
2020-03-18 16:56:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:56:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:56:39 -Starting without optional epoll library
2020-03-18 16:56:39 -Starting without optional kqueue library
2020-03-18 16:56:40 -此处进行解密+验签+身份验证
2020-03-18 16:56:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:56:40 -此处进行解密+验签+身份验证
2020-03-18 16:56:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:56:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:56:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:56:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:56:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:56:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:56:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:56:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:56:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:56:40 -耗时 : 7
2020-03-18 16:56:40 -耗时 : 8
2020-03-18 16:56:40 -耗时 : 10
2020-03-18 16:56:40 -耗时 : 11
2020-03-18 16:57:00 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -解密：{"sys_user_account":"13322990711","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","device_type":"android","device_no":"1.0.9","sign":"EFF4553AA97C43A56716153EB440498E","version_no":"450000000145206","login_type":"account"}
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-18 16:57:01 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-18 16:57:01 -==> Parameters: 13322990711(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-18 16:57:01 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200318(String), 165701(String), 181(Integer)
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-18 16:57:01 -==> Parameters: 26(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:57:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:57:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:57:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:57:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-18 16:57:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-18 16:57:01 -耗时 : 138
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:57:01 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:57:01 -==> Parameters: 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -耗时 : 10
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -解密：
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:01 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:57:01 -==> Parameters: 01(String), 01(String)
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:01 -<==      Total: 4
2020-03-18 16:57:01 -耗时 : 12
2020-03-18 16:57:01 -此处进行解密+验签+身份验证
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:57:01 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:57:01 -==> Parameters: 181(String)
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -耗时 : 11
2020-03-18 16:57:01 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:57:01 -==> Parameters: 
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:57:01 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:57:01 -==> Parameters: 181(String)
2020-03-18 16:57:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:57:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:57:01 -<==      Total: 3
2020-03-18 16:57:01 -耗时 : 24
2020-03-18 16:57:01 -<==      Total: 2
2020-03-18 16:57:01 -耗时 : 26
2020-03-18 16:57:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:01 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:01 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 2
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:57:01 -<==      Total: 2
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:57:01 -<==    Updates: 2
2020-03-18 16:57:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:57:01 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:57:01 -<==    Updates: 2
2020-03-18 16:57:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:57:01 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:57:01 -==> Parameters: 
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:57:01 -==> Parameters: 
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:01 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:01 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -耗时 : 163
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:01 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:57:01 -<==    Updates: 1
2020-03-18 16:57:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:01 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:57:01 -<==      Total: 1
2020-03-18 16:57:01 -耗时 : 219
2020-03-18 16:57:05 -此处进行解密+验签+身份验证
2020-03-18 16:57:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:05 -此处进行解密+验签+身份验证
2020-03-18 16:57:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:57:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:57:05 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:57:05 -==> Parameters: 181(String)
2020-03-18 16:57:05 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:57:05 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:05 -<==      Total: 1171
2020-03-18 16:57:05 -耗时 : 87
2020-03-18 16:57:07 -此处进行解密+验签+身份验证
2020-03-18 16:57:07 -此处进行解密+验签+身份验证
2020-03-18 16:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:57:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:57:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:57:07 -==> Parameters: 181(String)
2020-03-18 16:57:07 -<==      Total: 1
2020-03-18 16:57:07 -耗时 : 14
2020-03-18 16:57:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:07 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:07 -<==      Total: 1
2020-03-18 16:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:07 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 2
2020-03-18 16:57:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:57:08 -<==    Updates: 2
2020-03-18 16:57:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:57:08 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:08 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:57:08 -<==    Updates: 1
2020-03-18 16:57:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:57:08 -==> Parameters: 
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:08 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:08 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:57:08 -<==    Updates: 1
2020-03-18 16:57:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:08 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:08 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:57:08 -<==    Updates: 1
2020-03-18 16:57:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:08 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:57:08 -<==      Total: 1
2020-03-18 16:57:08 -耗时 : 232
2020-03-18 16:57:11 -此处进行解密+验签+身份验证
2020-03-18 16:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:11 -此处进行解密+验签+身份验证
2020-03-18 16:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:57:11 -==> Parameters: 181(String)
2020-03-18 16:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:57:12 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:57:12 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:12 -<==      Total: 1171
2020-03-18 16:57:12 -耗时 : 62
2020-03-18 16:57:14 -此处进行解密+验签+身份验证
2020-03-18 16:57:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 16:57:14 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 16:57:14 -==> Parameters: 181(String)
2020-03-18 16:57:14 -<==      Total: 1170
2020-03-18 16:57:14 -耗时 : 22
2020-03-18 16:57:16 -此处进行解密+验签+身份验证
2020-03-18 16:57:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 16:57:16 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-18 16:57:16 -==> Parameters: 181(String)
2020-03-18 16:57:16 -<==      Total: 8
2020-03-18 16:57:16 -耗时 : 13
2020-03-18 16:57:22 -此处进行解密+验签+身份验证
2020-03-18 16:57:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/unbindTraditionalPos
2020-03-18 16:57:22 -==>  Preparing: INSERT INTO t_user_trapos_unbind_record_info ( user_id, sn, cre_date, cre_time, pos_type ) values (?,?,?,?, 'epos' ) 
2020-03-18 16:57:22 -==> Parameters: 181(String), 20203171010(String), 20200318(String), 165722(String)
2020-03-18 16:57:22 -<==    Updates: 1
2020-03-18 16:57:22 -耗时 : 58
2020-03-18 16:57:22 -此处进行解密+验签+身份验证
2020-03-18 16:57:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-18 16:57:22 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-18 16:57:22 -==> Parameters: 181(String)
2020-03-18 16:57:22 -<==      Total: 7
2020-03-18 16:57:22 -耗时 : 204
2020-03-18 16:57:32 -此处进行解密+验签+身份验证
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:57:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:57:32 -==> Parameters: 181(String)
2020-03-18 16:57:32 -<==      Total: 1
2020-03-18 16:57:32 -耗时 : 13
2020-03-18 16:57:32 -此处进行解密+验签+身份验证
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:32 -此处进行解密+验签+身份验证
2020-03-18 16:57:32 -此处进行解密+验签+身份验证
2020-03-18 16:57:32 -解密：
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:32 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-18 16:57:32 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-18 16:57:32 -==> Parameters: 01(String), 01(String)
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:32 -此处进行解密+验签+身份验证
2020-03-18 16:57:32 -<==      Total: 4
2020-03-18 16:57:32 -耗时 : 10
2020-03-18 16:57:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-18 16:57:33 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-18 16:57:33 -==> Parameters: 181(String)
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:57:33 -<==      Total: 2
2020-03-18 16:57:33 -耗时 : 8
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:57:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-18 16:57:33 -此处进行解密+验签+身份验证
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:33 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:57:33 -此处进行解密+验签+身份验证
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:33 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:33 -<==      Total: 2
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:57:33 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-18 16:57:33 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-18 16:57:33 -==> Parameters: 
2020-03-18 16:57:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-18 16:57:33 -<==      Total: 2
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-18 16:57:33 -<==    Updates: 2
2020-03-18 16:57:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:57:33 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 3
2020-03-18 16:57:33 -耗时 : 12
2020-03-18 16:57:33 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-18 16:57:33 -==> Parameters: 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -耗时 : 14
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:57:33 -<==    Updates: 2
2020-03-18 16:57:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-18 16:57:33 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: recallFlag(String), 181(String)
2020-03-18 16:57:33 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-18 16:57:33 -<==    Updates: 1
2020-03-18 16:57:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:57:33 -==> Parameters: 
2020-03-18 16:57:33 -<==    Updates: 1
2020-03-18 16:57:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-18 16:57:33 -==> Parameters: 
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: collegeFlag(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-18 16:57:33 -<==    Updates: 1
2020-03-18 16:57:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:33 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:33 -<==    Updates: 1
2020-03-18 16:57:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-18 16:57:33 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: cardFlag(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-18 16:57:33 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-18 16:57:33 -<==    Updates: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -耗时 : 141
2020-03-18 16:57:33 -<==    Updates: 1
2020-03-18 16:57:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-18 16:57:33 -==> Parameters: appImgFlag(String), 181(String)
2020-03-18 16:57:33 -<==      Total: 1
2020-03-18 16:57:33 -耗时 : 167
2020-03-18 16:57:36 -<==      Total: 1595
2020-03-18 16:57:36 -耗时 : 30605
2020-03-18 16:57:42 -<==      Total: 1595
2020-03-18 16:57:42 -耗时 : 30805
2020-03-18 16:57:46 -此处进行解密+验签+身份验证
2020-03-18 16:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:46 -此处进行解密+验签+身份验证
2020-03-18 16:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-18 16:57:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-18 16:57:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-18 16:57:46 -==> Parameters: 181(String)
2020-03-18 16:57:46 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-18 16:57:46 -==> Parameters: 181(String), 181(String)
2020-03-18 16:57:46 -<==      Total: 1595
2020-03-18 16:57:46 -耗时 : 32
2020-03-18 16:57:46 -<==      Total: 1171
2020-03-18 16:57:46 -耗时 : 64
2020-03-18 16:57:47 -此处进行解密+验签+身份验证
2020-03-18 16:57:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-18 16:57:47 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-18 16:57:47 -==> Parameters: 181(String)
2020-03-18 16:57:47 -<==      Total: 1170
2020-03-18 16:57:47 -耗时 : 21
2020-03-18 16:57:48 -此处进行解密+验签+身份验证
2020-03-18 16:57:48 -此处进行解密+验签+身份验证
2020-03-18 16:57:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:57:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-18 16:57:48 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-18 16:57:48 -==> Parameters: 181(String)
2020-03-18 16:57:48 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-18 16:57:48 -==> Parameters: 181(String)
2020-03-18 16:57:48 -<==      Total: 10
2020-03-18 16:57:48 -耗时 : 12
2020-03-18 16:57:48 -<==      Total: 7
2020-03-18 16:57:48 -耗时 : 13
2020-03-18 16:57:50 -此处进行解密+验签+身份验证
2020-03-18 16:57:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-18 16:57:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-18 16:57:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-18 16:57:50 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? and pos_type='epos' ORDER BY id desc limit 0,10 
2020-03-18 16:57:50 -==> Parameters: 181(String)
2020-03-18 16:57:50 -<==      Total: 1
2020-03-18 16:57:50 -耗时 : 13
