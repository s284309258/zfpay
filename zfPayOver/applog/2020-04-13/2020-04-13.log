2020-04-13 14:32:47 -Starting LongEcologicalApplication on PC-201905161910 with PID 6292 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-13 14:32:47 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-13 14:32:47 -No active profile set, falling back to default profiles: default
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 14:32:49 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-13 14:32:49 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-13 14:32:49 -Finished Spring Data repository scanning in 145ms. Found 0 repository interfaces.
2020-04-13 14:32:49 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-13 14:32:49 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-13 14:32:50 -Finished Spring Data repository scanning in 92ms. Found 0 repository interfaces.
2020-04-13 14:32:50 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$98781fbe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-13 14:32:50 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$92fc045e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-13 14:32:51 -Tomcat initialized with port(s): 8080 (http)
2020-04-13 14:32:51 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-13 14:32:51 -Starting service [Tomcat]
2020-04-13 14:32:51 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-13 14:32:51 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-13 14:32:51 -Initializing Spring embedded WebApplicationContext
2020-04-13 14:32:51 -Root WebApplicationContext: initialization completed in 4055 ms
2020-04-13 14:32:51 -Filter xssFilter was not registered (disabled)
2020-04-13 14:32:52 -HikariPool-1 - Starting...
2020-04-13 14:32:52 -HikariPool-1 - Start completed.
2020-04-13 14:32:52 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-13 14:32:52 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-13 14:32:52 -HHH000206: hibernate.properties not found
2020-04-13 14:32:52 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-13 14:32:53 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-13 14:32:53 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-13 14:32:54 -Using default implementation for ThreadExecutor
2020-04-13 14:32:54 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-13 14:32:54 -Quartz Scheduler v.2.3.0 created.
2020-04-13 14:32:54 -RAMJobStore initialized.
2020-04-13 14:32:54 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-13 14:32:54 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-13 14:32:54 -Quartz scheduler version: 2.3.0
2020-04-13 14:32:54 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@38c460e8
2020-04-13 14:32:54 -STAET TaskExecutorConfig
2020-04-13 14:32:54 -Initializing ExecutorService
2020-04-13 14:32:54 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-13 14:32:54 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-13 14:32:55 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-13 14:32:55 -Initializing ExecutorService 'taskScheduler'
2020-04-13 14:32:55 -Starting Quartz Scheduler now
2020-04-13 14:32:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-13 14:32:55 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-13 14:32:55 -Using a shared selector for servlet write/read
2020-04-13 14:32:55 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-13 14:32:55 -Started LongEcologicalApplication in 9.639 seconds (JVM running for 11.654)
2020-04-13 14:35:47 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-13 14:35:47 -Initializing Servlet 'dispatcherServlet'
2020-04-13 14:35:47 -Completed initialization in 20 ms
2020-04-13 14:35:47 -此处进行解密+验签+身份验证
2020-04-13 14:35:47 -此处进行解密+验签+身份验证
2020-04-13 14:35:47 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-13 14:35:48 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-13 14:35:48 -Starting without optional epoll library
2020-04-13 14:35:48 -Starting without optional kqueue library
2020-04-13 14:35:48 -解密：
2020-04-13 14:35:48 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-13 14:35:48 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-04-13 14:35:48 -==> Parameters: 04(String), 04(String)
2020-04-13 14:35:49 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-13 14:35:49 -耗时 : 1287
2020-04-13 14:35:49 -<==      Total: 1
2020-04-13 14:35:49 -耗时 : 424
2020-04-13 14:35:49 -此处进行解密+验签+身份验证
2020-04-13 14:35:49 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"BA9F13BFF766417681E506546606D32C","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP"}
2020-04-13 14:35:49 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-13 14:35:49 -token值=======426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP
2020-04-13 14:35:49 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-13 14:35:49 -==> Parameters: 426(String)
2020-04-13 14:35:49 -<==      Total: 1
2020-04-13 14:35:49 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-13 14:35:49 -==> Parameters: 25(String)
2020-04-13 14:35:49 -<==      Total: 1
2020-04-13 14:35:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-13 14:35:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-13 14:35:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-13 14:35:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-13 14:35:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-13 14:35:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-13 14:35:49 -耗时 : 137
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 14:35:52 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 14:35:52 -==> Parameters: 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -耗时 : 6
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-13 14:35:52 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-13 14:35:52 -==> Parameters: 426(String)
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:52 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 14:35:52 -==> Parameters: 426(String)
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -耗时 : 4
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 14:35:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 14:35:52 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -解密：
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-13 14:35:52 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-04-13 14:35:52 -==> Parameters: 01(String), 01(String)
2020-04-13 14:35:52 -<==      Total: 4
2020-04-13 14:35:52 -耗时 : 3
2020-04-13 14:35:52 -<==      Total: 2
2020-04-13 14:35:52 -耗时 : 185
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:52 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:52 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 14:35:52 -<==    Updates: 1
2020-04-13 14:35:52 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 14:35:52 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:52 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:52 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 14:35:52 -<==    Updates: 1
2020-04-13 14:35:52 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 14:35:52 -==> Parameters: 
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:52 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:52 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 14:35:52 -<==    Updates: 1
2020-04-13 14:35:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 14:35:52 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:52 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:52 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 14:35:52 -<==    Updates: 1
2020-04-13 14:35:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:52 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -耗时 : 345
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 14:35:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 14:35:52 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:52 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 14:35:52 -此处进行解密+验签+身份验证
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:52 -<==      Total: 1
2020-04-13 14:35:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:52 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 14:35:52 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-13 14:35:52 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-13 14:35:52 -==> Parameters: 
2020-04-13 14:35:53 -<==    Updates: 1
2020-04-13 14:35:53 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 14:35:53 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:53 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 14:35:53 -<==      Total: 3
2020-04-13 14:35:53 -耗时 : 27
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:53 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 14:35:53 -<==    Updates: 1
2020-04-13 14:35:53 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 14:35:53 -==> Parameters: 
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:53 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:53 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 14:35:53 -<==    Updates: 1
2020-04-13 14:35:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 14:35:53 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:53 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:35:53 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 14:35:53 -<==    Updates: 1
2020-04-13 14:35:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:35:53 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 14:35:53 -<==      Total: 1
2020-04-13 14:35:53 -耗时 : 134
2020-04-13 14:35:55 -此处进行解密+验签+身份验证
2020-04-13 14:35:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-13 14:35:55 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-13 14:35:55 -==> Parameters: 426(String)
2020-04-13 14:35:55 -此处进行解密+验签+身份验证
2020-04-13 14:35:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:35:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:35:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-13 14:35:55 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-13 14:35:55 -==> Parameters: 426(String), 426(String)
2020-04-13 14:35:56 -<==      Total: 204
2020-04-13 14:35:56 -耗时 : 361
2020-04-13 14:35:56 -<==      Total: 630
2020-04-13 14:35:56 -耗时 : 617
2020-04-13 14:38:18 -此处进行解密+验签+身份验证
2020-04-13 14:38:18 -此处进行解密+验签+身份验证
2020-04-13 14:38:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 14:38:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 14:38:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 14:38:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 14:38:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 14:38:18 -==> Parameters: 426(String)
2020-04-13 14:38:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 14:38:18 -==> Parameters: 426(String), 426(String)
2020-04-13 14:38:18 -<==      Total: 1
2020-04-13 14:38:18 -耗时 : 7
2020-04-13 14:38:18 -<==      Total: 1
2020-04-13 14:38:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:38:18 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 14:38:18 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:38:19 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 14:38:19 -<==    Updates: 1
2020-04-13 14:38:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 14:38:19 -==> Parameters: 426(String), 426(String)
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:38:19 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:38:19 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 14:38:19 -<==    Updates: 1
2020-04-13 14:38:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 14:38:19 -==> Parameters: 
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:38:19 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:38:19 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 14:38:19 -<==    Updates: 1
2020-04-13 14:38:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 14:38:19 -==> Parameters: 426(String), 426(String)
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:38:19 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 14:38:19 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 14:38:19 -<==    Updates: 1
2020-04-13 14:38:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 14:38:19 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 14:38:19 -<==      Total: 1
2020-04-13 14:38:19 -耗时 : 156
2020-04-13 14:38:39 -此处进行解密+验签+身份验证
2020-04-13 14:38:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:39 -此处进行解密+验签+身份验证
2020-04-13 14:38:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-04-13 14:38:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-04-13 14:38:39 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-13 14:38:39 -==> Parameters: 426(String)
2020-04-13 14:38:39 -<==      Total: 1
2020-04-13 14:38:39 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-04-13 14:38:39 -==> Parameters: 426(String)
2020-04-13 14:38:39 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-04-13 14:38:39 -==> Parameters: 426(String)
2020-04-13 14:38:39 -<==      Total: 1
2020-04-13 14:38:39 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-13 14:38:39 -==> Parameters: 426(String)
2020-04-13 14:38:39 -<==      Total: 10
2020-04-13 14:38:39 -耗时 : 63
2020-04-13 14:38:39 -<==      Total: 1
2020-04-13 14:38:39 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-04-13 14:38:39 -==> Parameters: 426(String)
2020-04-13 14:38:39 -<==      Total: 1
2020-04-13 14:38:39 -耗时 : 75
2020-04-13 14:38:42 -此处进行解密+验签+身份验证
2020-04-13 14:38:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-04-13 14:38:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-13 14:38:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-13 14:38:42 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-04-13 14:38:42 -==> Parameters: 2309(String)
2020-04-13 14:38:42 -<==      Total: 1
2020-04-13 14:38:42 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-13 14:38:42 -==> Parameters: 2309(String)
2020-04-13 14:38:42 -<==      Total: 1
2020-04-13 14:38:42 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2309 and pos_type='epos' 
2020-04-13 14:38:42 -==> Parameters: 
2020-04-13 14:38:42 -此处进行解密+验签+身份验证
2020-04-13 14:38:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-13 14:38:42 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2309 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2309 and cre_month=202004 and pos_type is null 
2020-04-13 14:38:42 -==> Parameters: 
2020-04-13 14:38:43 -此处进行解密+验签+身份验证
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-13 14:38:43 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-13 14:38:43 -==> Parameters: 2309(String), 2309(String), 1(String)
2020-04-13 14:38:43 -<==      Total: 1
2020-04-13 14:38:43 -耗时 : 188
2020-04-13 14:38:43 -此处进行解密+验签+身份验证
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-13 14:38:43 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-13 14:38:43 -==> Parameters: 2309(String), 2309(String), 0(String)
2020-04-13 14:38:43 -此处进行解密+验签+身份验证
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-13 14:38:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-13 14:38:43 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-13 14:38:43 -==> Parameters: 2309(String), 2309(String)
2020-04-13 14:38:43 -<==      Total: 1
2020-04-13 14:38:43 -耗时 : 246
2020-04-13 14:38:43 -<==      Total: 1
2020-04-13 14:38:43 -耗时 : 119
2020-04-13 14:38:43 -<==      Total: 0
2020-04-13 14:38:43 -耗时 : 152
2020-04-13 14:38:43 -<==      Total: 1
2020-04-13 14:38:43 -耗时 : 384
2020-04-13 14:38:48 -此处进行解密+验签+身份验证
2020-04-13 14:38:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-04-13 14:38:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-04-13 14:38:48 -==> Parameters: 426(String)
2020-04-13 14:38:48 -<==      Total: 1
2020-04-13 14:38:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-04-13 14:38:48 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 14:38:48 -此处进行解密+验签+身份验证
2020-04-13 14:38:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-04-13 14:38:48 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-04-13 14:38:48 -==> Parameters: 426(String)
2020-04-13 14:38:48 -<==      Total: 1
2020-04-13 14:38:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-13 14:38:48 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 14:38:48 -<==      Total: 1
2020-04-13 14:38:48 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-04-13 14:38:48 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 14:38:48 -<==      Total: 1
2020-04-13 14:38:48 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-13 14:38:48 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 14:38:49 -<==      Total: 1
2020-04-13 14:38:49 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-13 14:38:49 -==> Parameters: 426(String), 20200213(String), 426(String), 20200213(String), 20200413(String), 426(String)
2020-04-13 14:38:50 -<==      Total: 1
2020-04-13 14:38:50 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-04-13 14:38:50 -==> Parameters: 426(String)
2020-04-13 14:38:50 -<==      Total: 1
2020-04-13 14:38:50 -耗时 : 2349
2020-04-13 14:38:50 -<==      Total: 1
2020-04-13 14:38:50 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-13 14:38:50 -==> Parameters: 426(String), 20200213(String), 426(String), 20200213(String), 20200413(String), 426(String)
2020-04-13 14:38:51 -<==      Total: 1
2020-04-13 14:38:51 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-04-13 14:38:51 -==> Parameters: 426(String)
2020-04-13 14:38:51 -<==      Total: 1
2020-04-13 14:38:51 -耗时 : 3174
2020-04-13 14:38:54 -此处进行解密+验签+身份验证
2020-04-13 14:38:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 14:38:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 14:38:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-04-13 14:38:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 14:38:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 14:38:54 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-04-13 14:38:54 -==> Parameters: 426(String), 01(String)
2020-04-13 14:38:54 -<==      Total: 1
2020-04-13 14:38:54 -==>  Preparing: select * from t_sys_pos_policy_define where policy_type=3 and manager_id=? and id in(select policy_id from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1) order by policy_quantity asc 
2020-04-13 14:38:54 -==> Parameters: 25(String), 000006027280394103(String)
2020-04-13 14:38:54 -<==      Total: 4
2020-04-13 14:38:54 -耗时 : 175
2020-04-13 15:21:51 -此处进行解密+验签+身份验证
2020-04-13 15:21:51 -此处进行解密+验签+身份验证
2020-04-13 15:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 15:21:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 15:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 15:21:51 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 15:21:51 -==> Parameters: 426(String)
2020-04-13 15:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 15:21:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -耗时 : 16
2020-04-13 15:21:51 -==> Parameters: 426(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:21:51 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:21:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 15:21:51 -<==    Updates: 1
2020-04-13 15:21:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 15:21:51 -==> Parameters: 426(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:21:51 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:21:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 15:21:51 -<==    Updates: 1
2020-04-13 15:21:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 15:21:51 -==> Parameters: 
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:21:51 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:21:51 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 15:21:51 -<==    Updates: 1
2020-04-13 15:21:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 15:21:51 -==> Parameters: 426(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:21:51 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:21:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 15:21:51 -<==    Updates: 1
2020-04-13 15:21:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:21:51 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 15:21:51 -<==      Total: 1
2020-04-13 15:21:51 -耗时 : 131
2020-04-13 15:21:55 -此处进行解密+验签+身份验证
2020-04-13 15:21:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:55 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-04-13 15:21:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-13 15:21:55 -==> Parameters: 202004(String), 426(String)
2020-04-13 15:21:55 -此处进行解密+验签+身份验证
2020-04-13 15:21:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-04-13 15:21:55 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-04-13 15:21:55 -==> Parameters: 426(String)
2020-04-13 15:21:56 -<==      Total: 1
2020-04-13 15:21:56 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-04-13 15:21:56 -==> Parameters: 426(String), 426(String)
2020-04-13 15:21:56 -<==      Total: 1
2020-04-13 15:21:56 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-04-13 15:21:56 -==> Parameters: 426(String)
2020-04-13 15:21:56 -<==      Total: 0
2020-04-13 15:21:56 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-13 15:21:56 -==> Parameters: 202004(String), 426(String)
2020-04-13 15:21:56 -<==      Total: 1
2020-04-13 15:21:56 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-04-13 15:21:56 -==> Parameters: 426(String)
2020-04-13 15:21:56 -<==      Total: 0
2020-04-13 15:21:56 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-13 15:21:56 -==> Parameters: 202004(String), 426(String)
2020-04-13 15:21:56 -<==      Total: 1
2020-04-13 15:21:56 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-04-13 15:21:56 -==> Parameters: 426(String)
2020-04-13 15:21:56 -<==      Total: 0
2020-04-13 15:21:56 -耗时 : 63
2020-04-13 15:21:57 -<==      Total: 1
2020-04-13 15:21:57 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-04-13 15:21:57 -==> Parameters: 426(String), 426(String)
2020-04-13 15:21:57 -<==      Total: 1
2020-04-13 15:21:57 -耗时 : 1370
2020-04-13 15:21:58 -此处进行解密+验签+身份验证
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:58 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-13 15:21:58 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-13 15:21:58 -==> Parameters: 426(String)
2020-04-13 15:21:58 -<==      Total: 1
2020-04-13 15:21:58 -耗时 : 11
2020-04-13 15:21:58 -此处进行解密+验签+身份验证
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:58 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-13 15:21:58 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-13 15:21:58 -==> Parameters: 426(String), 202004(String)
2020-04-13 15:21:58 -<==      Total: 0
2020-04-13 15:21:58 -耗时 : 3
2020-04-13 15:21:58 -此处进行解密+验签+身份验证
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:58 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-13 15:21:58 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-13 15:21:58 -==> Parameters: 426(String), 202004(String)
2020-04-13 15:21:58 -<==      Total: 0
2020-04-13 15:21:58 -耗时 : 2
2020-04-13 15:21:58 -此处进行解密+验签+身份验证
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:21:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:21:58 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-13 15:21:58 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-13 15:21:58 -==> Parameters: 426(String), 202004(String)
2020-04-13 15:21:58 -<==      Total: 0
2020-04-13 15:21:58 -耗时 : 4
2020-04-13 15:22:05 -此处进行解密+验签+身份验证
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:22:05 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-13 15:22:05 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-13 15:22:05 -==> Parameters: 426(String)
2020-04-13 15:22:05 -<==      Total: 1
2020-04-13 15:22:05 -耗时 : 2
2020-04-13 15:22:05 -此处进行解密+验签+身份验证
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:22:05 -此处进行解密+验签+身份验证
2020-04-13 15:22:05 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-13 15:22:05 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-13 15:22:05 -==> Parameters: 426(String), 202004(String)
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:22:05 -<==      Total: 0
2020-04-13 15:22:05 -耗时 : 2
2020-04-13 15:22:05 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-13 15:22:05 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-13 15:22:05 -==> Parameters: 426(String), 202004(String)
2020-04-13 15:22:05 -<==      Total: 0
2020-04-13 15:22:05 -耗时 : 2
2020-04-13 15:22:05 -此处进行解密+验签+身份验证
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:22:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:22:05 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-13 15:22:05 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-13 15:22:05 -==> Parameters: 426(String), 202004(String)
2020-04-13 15:22:05 -<==      Total: 0
2020-04-13 15:22:05 -耗时 : 8
2020-04-13 15:33:41 -Starting LongEcologicalApplication on PC-201905161910 with PID 12208 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-13 15:33:41 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-13 15:33:41 -No active profile set, falling back to default profiles: default
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-13 15:33:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-13 15:33:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-13 15:33:42 -Finished Spring Data repository scanning in 66ms. Found 0 repository interfaces.
2020-04-13 15:33:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-13 15:33:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-13 15:33:43 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-04-13 15:33:43 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$a2a2834f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-13 15:33:43 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$9d2667ef] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-13 15:33:44 -Tomcat initialized with port(s): 8080 (http)
2020-04-13 15:33:44 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-13 15:33:44 -Starting service [Tomcat]
2020-04-13 15:33:44 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-13 15:33:44 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-13 15:33:44 -Initializing Spring embedded WebApplicationContext
2020-04-13 15:33:44 -Root WebApplicationContext: initialization completed in 2386 ms
2020-04-13 15:33:44 -Filter xssFilter was not registered (disabled)
2020-04-13 15:33:44 -HikariPool-1 - Starting...
2020-04-13 15:33:44 -HikariPool-1 - Start completed.
2020-04-13 15:33:44 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-13 15:33:45 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-13 15:33:45 -HHH000206: hibernate.properties not found
2020-04-13 15:33:45 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-13 15:33:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-13 15:33:45 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-13 15:33:46 -Using default implementation for ThreadExecutor
2020-04-13 15:33:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-13 15:33:46 -Quartz Scheduler v.2.3.0 created.
2020-04-13 15:33:46 -RAMJobStore initialized.
2020-04-13 15:33:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-13 15:33:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-13 15:33:46 -Quartz scheduler version: 2.3.0
2020-04-13 15:33:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@179ee36b
2020-04-13 15:33:46 -STAET TaskExecutorConfig
2020-04-13 15:33:46 -Initializing ExecutorService
2020-04-13 15:33:46 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-13 15:33:46 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-13 15:33:46 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-13 15:33:47 -Initializing ExecutorService 'taskScheduler'
2020-04-13 15:33:47 -Starting Quartz Scheduler now
2020-04-13 15:33:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-13 15:33:47 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-13 15:33:47 -Using a shared selector for servlet write/read
2020-04-13 15:33:47 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-13 15:33:47 -Started LongEcologicalApplication in 6.064 seconds (JVM running for 7.051)
2020-04-13 15:34:03 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-13 15:34:03 -Initializing Servlet 'dispatcherServlet'
2020-04-13 15:34:03 -Completed initialization in 14 ms
2020-04-13 15:34:03 -此处进行解密+验签+身份验证
2020-04-13 15:34:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:34:03 -Starting without optional epoll library
2020-04-13 15:34:03 -Starting without optional kqueue library
2020-04-13 15:34:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:34:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 15:34:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 15:34:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 15:34:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 15:34:04 -==> Parameters: 426(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:34:04 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:34:04 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 15:34:04 -<==    Updates: 1
2020-04-13 15:34:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 15:34:04 -==> Parameters: 426(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:34:04 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:34:04 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 15:34:04 -<==    Updates: 1
2020-04-13 15:34:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 15:34:04 -==> Parameters: 
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:34:04 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:34:04 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 15:34:04 -<==    Updates: 1
2020-04-13 15:34:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 15:34:04 -==> Parameters: 426(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:34:04 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 15:34:04 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 15:34:04 -<==    Updates: 1
2020-04-13 15:34:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 15:34:04 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 15:34:04 -<==      Total: 1
2020-04-13 15:34:04 -耗时 : 165
2020-04-13 15:34:07 -此处进行解密+验签+身份验证
2020-04-13 15:34:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:34:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:34:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-04-13 15:34:07 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-04-13 15:34:07 -==> Parameters: 426(String)
2020-04-13 15:34:07 -<==      Total: 1
2020-04-13 15:34:07 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-04-13 15:34:07 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 15:34:07 -此处进行解密+验签+身份验证
2020-04-13 15:34:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:34:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:34:07 -<==      Total: 1
2020-04-13 15:34:07 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-13 15:34:07 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:34:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-04-13 15:34:07 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-04-13 15:34:07 -==> Parameters: 426(String)
2020-04-13 15:34:07 -<==      Total: 1
2020-04-13 15:34:07 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-04-13 15:34:07 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 15:34:08 -<==      Total: 1
2020-04-13 15:34:08 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-13 15:34:08 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:34:08 -<==      Total: 1
2020-04-13 15:34:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-13 15:34:08 -==> Parameters: 426(String), 20200213(String), 426(String), 20200213(String), 20200413(String), 426(String)
2020-04-13 15:34:09 -<==      Total: 1
2020-04-13 15:34:09 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-04-13 15:34:09 -==> Parameters: 426(String)
2020-04-13 15:34:09 -<==      Total: 1
2020-04-13 15:34:09 -耗时 : 2454
2020-04-13 15:34:09 -<==      Total: 1
2020-04-13 15:34:09 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-13 15:34:09 -==> Parameters: 426(String), 20200213(String), 426(String), 20200213(String), 20200413(String), 426(String)
2020-04-13 15:34:10 -<==      Total: 1
2020-04-13 15:34:10 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-04-13 15:34:10 -==> Parameters: 426(String)
2020-04-13 15:34:10 -<==      Total: 1
2020-04-13 15:34:10 -耗时 : 3278
2020-04-13 15:34:14 -此处进行解密+验签+身份验证
2020-04-13 15:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:34:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getExcellentMerchantTraditionalPosList
2020-04-13 15:34:14 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance >= 50000 AND t2.cre_month = ? ) ORDER BY t.id desc limit 0,10 
2020-04-13 15:34:14 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 15:34:14 -<==      Total: 0
2020-04-13 15:34:14 -耗时 : 68
2020-04-13 15:41:10 -此处进行解密+验签+身份验证
2020-04-13 15:41:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getExcellentMerchantTraditionalPosList
2020-04-13 15:41:10 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance >= 50000 AND t2.cre_month = ? ) ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:10 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 15:41:10 -<==      Total: 0
2020-04-13 15:41:10 -耗时 : 15
2020-04-13 15:41:17 -此处进行解密+验签+身份验证
2020-04-13 15:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-04-13 15:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 15:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 15:41:17 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-04-13 15:41:17 -==> Parameters: 426(String), 01(String)
2020-04-13 15:41:17 -<==      Total: 1
2020-04-13 15:41:17 -==>  Preparing: select * from t_sys_pos_policy_define where policy_type=3 and manager_id=? and id in(select policy_id from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1) order by policy_quantity asc 
2020-04-13 15:41:17 -==> Parameters: 25(String), 000006027280394103(String)
2020-04-13 15:41:17 -<==      Total: 4
2020-04-13 15:41:17 -耗时 : 32
2020-04-13 15:41:20 -此处进行解密+验签+身份验证
2020-04-13 15:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-04-13 15:41:20 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:20 -==> Parameters: 426(String)
2020-04-13 15:41:20 -<==      Total: 10
2020-04-13 15:41:20 -耗时 : 14
2020-04-13 15:41:23 -此处进行解密+验签+身份验证
2020-04-13 15:41:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getActiveMerchantTraditionalPosList
2020-04-13 15:41:23 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance>=10 AND t2.merchant_num>=2) ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:23 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:41:24 -<==      Total: 10
2020-04-13 15:41:24 -耗时 : 708
2020-04-13 15:41:30 -此处进行解密+验签+身份验证
2020-04-13 15:41:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getActiveMerchantTraditionalPosList
2020-04-13 15:41:30 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND t.id < ? AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance>=10 AND t2.merchant_num>=2) ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:30 -==> Parameters: 426(String), 22654(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:41:30 -<==      Total: 6
2020-04-13 15:41:30 -耗时 : 546
2020-04-13 15:41:35 -此处进行解密+验签+身份验证
2020-04-13 15:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getActiveMerchantTraditionalPosList
2020-04-13 15:41:35 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND t.id < ? AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance>=10 AND t2.merchant_num>=2) ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:35 -==> Parameters: 426(String), 503(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:41:35 -<==      Total: 0
2020-04-13 15:41:35 -耗时 : 2
2020-04-13 15:41:37 -此处进行解密+验签+身份验证
2020-04-13 15:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getActiveMerchantTraditionalPosList
2020-04-13 15:41:37 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND t.id < ? AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance>=10 AND t2.merchant_num>=2) ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:37 -==> Parameters: 426(String), 503(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:41:37 -<==      Total: 0
2020-04-13 15:41:37 -耗时 : 6
2020-04-13 15:41:44 -此处进行解密+验签+身份验证
2020-04-13 15:41:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 15:41:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 15:41:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getActiveMerchantTraditionalPosList
2020-04-13 15:41:44 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' and t1.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance>=10 AND t2.merchant_num>=2) ORDER BY t.id desc limit 0,10 
2020-04-13 15:41:44 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 15:41:45 -<==      Total: 10
2020-04-13 15:41:45 -耗时 : 444
2020-04-13 16:06:34 -此处进行解密+验签+身份验证
2020-04-13 16:06:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:06:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:06:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-04-13 16:06:34 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-04-13 16:06:34 -==> Parameters: 426(String)
2020-04-13 16:06:34 -<==      Total: 1
2020-04-13 16:06:34 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-04-13 16:06:34 -==> Parameters: 426(String), 426(String), 202004(String)
2020-04-13 16:06:34 -<==      Total: 1
2020-04-13 16:06:34 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-04-13 16:06:34 -==> Parameters: 426(String), 426(String), 20200314(String), 20200413(String), 426(String)
2020-04-13 16:06:35 -<==      Total: 1
2020-04-13 16:06:35 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-04-13 16:06:35 -==> Parameters: 426(String), 20200213(String), 426(String), 20200213(String), 20200413(String), 426(String)
2020-04-13 16:06:35 -<==      Total: 1
2020-04-13 16:06:35 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-04-13 16:06:35 -==> Parameters: 426(String)
2020-04-13 16:06:35 -<==      Total: 1
2020-04-13 16:06:35 -耗时 : 642
2020-04-13 16:06:40 -此处进行解密+验签+身份验证
2020-04-13 16:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:06:40 -此处进行解密+验签+身份验证
2020-04-13 16:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:06:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 16:06:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 16:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 16:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 16:06:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 16:06:40 -==> Parameters: 426(String), 426(String)
2020-04-13 16:06:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 16:06:40 -==> Parameters: 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -耗时 : 21
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:06:40 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:06:40 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 16:06:40 -<==    Updates: 1
2020-04-13 16:06:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 16:06:40 -==> Parameters: 426(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:06:40 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:06:40 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 16:06:40 -<==    Updates: 1
2020-04-13 16:06:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 16:06:40 -==> Parameters: 
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:06:40 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:06:40 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 16:06:40 -<==    Updates: 1
2020-04-13 16:06:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 16:06:40 -==> Parameters: 426(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:06:40 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:06:40 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 16:06:40 -<==    Updates: 1
2020-04-13 16:06:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:06:40 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 16:06:40 -<==      Total: 1
2020-04-13 16:06:40 -耗时 : 135
2020-04-13 16:19:42 -此处进行解密+验签+身份验证
2020-04-13 16:19:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-13 16:19:42 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-13 16:19:42 -==> Parameters: 426(String)
2020-04-13 16:19:42 -此处进行解密+验签+身份验证
2020-04-13 16:19:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-13 16:19:42 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-13 16:19:42 -==> Parameters: 426(String), 426(String)
2020-04-13 16:19:42 -<==      Total: 204
2020-04-13 16:19:42 -耗时 : 162
2020-04-13 16:19:42 -<==      Total: 630
2020-04-13 16:19:42 -耗时 : 480
2020-04-13 16:19:45 -此处进行解密+验签+身份验证
2020-04-13 16:19:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:45 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-04-13 16:19:45 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-04-13 16:19:45 -==> Parameters: 426(String)
2020-04-13 16:19:45 -<==      Total: 11
2020-04-13 16:19:45 -耗时 : 63
2020-04-13 16:19:46 -此处进行解密+验签+身份验证
2020-04-13 16:19:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-04-13 16:19:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-04-13 16:19:46 -==> Parameters: 426(String)
2020-04-13 16:19:46 -<==      Total: 7
2020-04-13 16:19:46 -耗时 : 16
2020-04-13 16:19:48 -此处进行解密+验签+身份验证
2020-04-13 16:19:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-13 16:19:48 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-13 16:19:48 -==> Parameters: 426(String)
2020-04-13 16:19:48 -<==      Total: 204
2020-04-13 16:19:48 -耗时 : 112
2020-04-13 16:19:51 -此处进行解密+验签+身份验证
2020-04-13 16:19:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 16:19:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 16:19:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 16:19:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 16:19:51 -==> Parameters: 426(String), 426(String)
2020-04-13 16:19:51 -此处进行解密+验签+身份验证
2020-04-13 16:19:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 16:19:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 16:19:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 16:19:51 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 16:19:51 -==> Parameters: 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -耗时 : 4
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:19:51 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:19:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 16:19:51 -<==    Updates: 1
2020-04-13 16:19:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 16:19:51 -==> Parameters: 426(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:19:51 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:19:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 16:19:51 -<==    Updates: 1
2020-04-13 16:19:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 16:19:51 -==> Parameters: 
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:19:51 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:19:51 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 16:19:51 -<==    Updates: 1
2020-04-13 16:19:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 16:19:51 -==> Parameters: 426(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:19:51 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 16:19:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 16:19:51 -<==    Updates: 1
2020-04-13 16:19:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 16:19:51 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 16:19:51 -<==      Total: 1
2020-04-13 16:19:51 -耗时 : 111
2020-04-13 17:14:52 -此处进行解密+验签+身份验证
2020-04-13 17:14:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:52 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-04-13 17:14:52 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-04-13 17:14:52 -==> Parameters: 426(String)
2020-04-13 17:14:52 -<==      Total: 10
2020-04-13 17:14:52 -耗时 : 30
2020-04-13 17:14:55 -此处进行解密+验签+身份验证
2020-04-13 17:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 17:14:55 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 17:14:55 -==> Parameters: 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -耗时 : 2
2020-04-13 17:14:55 -此处进行解密+验签+身份验证
2020-04-13 17:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 17:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:14:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 17:14:55 -==> Parameters: 426(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:14:55 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:14:55 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 17:14:55 -<==    Updates: 1
2020-04-13 17:14:55 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 17:14:55 -==> Parameters: 426(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:14:55 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:14:55 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 17:14:55 -<==    Updates: 1
2020-04-13 17:14:55 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 17:14:55 -==> Parameters: 
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:14:55 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:14:55 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 17:14:55 -<==    Updates: 1
2020-04-13 17:14:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 17:14:55 -==> Parameters: 426(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:14:55 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:14:55 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 17:14:55 -<==    Updates: 1
2020-04-13 17:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:14:55 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 17:14:55 -<==      Total: 1
2020-04-13 17:14:55 -耗时 : 82
2020-04-13 17:14:56 -此处进行解密+验签+身份验证
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:56 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-04-13 17:14:56 -此处进行解密+验签+身份验证
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:56 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:14:56 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-04-13 17:14:56 -==> Parameters: 25(String), 20200413(String)
2020-04-13 17:14:56 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-04-13 17:14:56 -==> Parameters: 25(String), 20200413(String)
2020-04-13 17:14:56 -<==      Total: 0
2020-04-13 17:14:56 -耗时 : 11
2020-04-13 17:14:56 -<==      Total: 0
2020-04-13 17:14:56 -耗时 : 25
2020-04-13 17:14:56 -此处进行解密+验签+身份验证
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:56 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:14:56 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-04-13 17:14:56 -==> Parameters: 426(String)
2020-04-13 17:14:56 -<==      Total: 0
2020-04-13 17:14:56 -耗时 : 5
2020-04-13 17:14:56 -此处进行解密+验签+身份验证
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:56 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-04-13 17:14:56 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-04-13 17:14:56 -==> Parameters: 426(String)
2020-04-13 17:14:56 -<==      Total: 1
2020-04-13 17:14:56 -耗时 : 43
2020-04-13 17:14:59 -此处进行解密+验签+身份验证
2020-04-13 17:14:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:14:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:14:59 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:14:59 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type='epos' order by t.id desc limit 0,10 
2020-04-13 17:14:59 -==> Parameters: 426(String)
2020-04-13 17:14:59 -<==      Total: 0
2020-04-13 17:14:59 -耗时 : 2
2020-04-13 17:15:02 -此处进行解密+验签+身份验证
2020-04-13 17:15:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:02 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyDetail
2020-04-13 17:15:02 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t.sn_list, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.id = ? 
2020-04-13 17:15:02 -==> Parameters: 63(String)
2020-04-13 17:15:02 -<==      Total: 1
2020-04-13 17:15:02 -耗时 : 3
2020-04-13 17:15:17 -此处进行解密+验签+身份验证
2020-04-13 17:15:17 -此处进行解密+验签+身份验证
2020-04-13 17:15:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:17 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-04-13 17:15:17 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:15:17 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-04-13 17:15:17 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-04-13 17:15:17 -==> Parameters: 426(String)
2020-04-13 17:15:17 -==> Parameters: 426(String)
2020-04-13 17:15:17 -<==      Total: 1
2020-04-13 17:15:17 -<==      Total: 0
2020-04-13 17:15:17 -耗时 : 2
2020-04-13 17:15:17 -耗时 : 2
2020-04-13 17:15:19 -此处进行解密+验签+身份验证
2020-04-13 17:15:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:19 -此处进行解密+验签+身份验证
2020-04-13 17:15:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 17:15:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:15:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:15:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 17:15:19 -==> Parameters: 426(String), 426(String)
2020-04-13 17:15:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 17:15:19 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 17:15:19 -==> Parameters: 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -耗时 : 1
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:19 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:19 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 17:15:19 -<==    Updates: 1
2020-04-13 17:15:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 17:15:19 -==> Parameters: 426(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:19 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:19 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 17:15:19 -<==    Updates: 1
2020-04-13 17:15:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 17:15:19 -==> Parameters: 
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:19 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:19 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 17:15:19 -<==    Updates: 1
2020-04-13 17:15:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 17:15:19 -==> Parameters: 426(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:19 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:19 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 17:15:19 -<==    Updates: 1
2020-04-13 17:15:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:19 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 17:15:19 -<==      Total: 1
2020-04-13 17:15:19 -耗时 : 65
2020-04-13 17:15:21 -此处进行解密+验签+身份验证
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:15:21 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-04-13 17:15:21 -==> Parameters: 25(String), 20200413(String)
2020-04-13 17:15:21 -<==      Total: 0
2020-04-13 17:15:21 -耗时 : 4
2020-04-13 17:15:21 -此处进行解密+验签+身份验证
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:21 -此处进行解密+验签+身份验证
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:21 -此处进行解密+验签+身份验证
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:21 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-04-13 17:15:21 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-04-13 17:15:21 -==> Parameters: 426(String)
2020-04-13 17:15:21 -==> Parameters: 426(String)
2020-04-13 17:15:21 -<==      Total: 0
2020-04-13 17:15:21 -耗时 : 2
2020-04-13 17:15:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-04-13 17:15:21 -<==      Total: 1
2020-04-13 17:15:21 -耗时 : 2
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:15:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:15:21 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-04-13 17:15:21 -==> Parameters: 25(String), 20200413(String)
2020-04-13 17:15:21 -<==      Total: 0
2020-04-13 17:15:21 -耗时 : 4
2020-04-13 17:15:24 -此处进行解密+验签+身份验证
2020-04-13 17:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:24 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:15:24 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type='epos' order by t.id desc limit 0,10 
2020-04-13 17:15:24 -==> Parameters: 426(String)
2020-04-13 17:15:24 -<==      Total: 0
2020-04-13 17:15:24 -耗时 : 2
2020-04-13 17:15:31 -此处进行解密+验签+身份验证
2020-04-13 17:15:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyDetail
2020-04-13 17:15:31 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t.sn_list, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.id = ? 
2020-04-13 17:15:31 -==> Parameters: 63(String)
2020-04-13 17:15:31 -<==      Total: 1
2020-04-13 17:15:31 -耗时 : 3
2020-04-13 17:15:39 -此处进行解密+验签+身份验证
2020-04-13 17:15:39 -此处进行解密+验签+身份验证
2020-04-13 17:15:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:39 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-04-13 17:15:39 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:15:39 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-04-13 17:15:39 -==> Parameters: 426(String)
2020-04-13 17:15:39 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-04-13 17:15:39 -==> Parameters: 426(String)
2020-04-13 17:15:39 -<==      Total: 0
2020-04-13 17:15:39 -<==      Total: 1
2020-04-13 17:15:39 -耗时 : 4
2020-04-13 17:15:39 -耗时 : 4
2020-04-13 17:15:47 -此处进行解密+验签+身份验证
2020-04-13 17:15:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:47 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-04-13 17:15:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:15:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:15:47 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-04-13 17:15:47 -==> Parameters: 25(String), 20200413(String)
2020-04-13 17:15:47 -<==      Total: 0
2020-04-13 17:15:47 -耗时 : 4
2020-04-13 17:15:48 -此处进行解密+验签+身份验证
2020-04-13 17:15:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:48 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosRewardRecordList
2020-04-13 17:15:48 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type='epos' order by t.id desc limit 0,10 
2020-04-13 17:15:48 -==> Parameters: 426(String)
2020-04-13 17:15:48 -<==      Total: 0
2020-04-13 17:15:48 -耗时 : 7
2020-04-13 17:15:50 -此处进行解密+验签+身份验证
2020-04-13 17:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:50 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-04-13 17:15:50 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-04-13 17:15:50 -==> Parameters: 426(String)
2020-04-13 17:15:50 -<==      Total: 1
2020-04-13 17:15:50 -耗时 : 2
2020-04-13 17:15:50 -此处进行解密+验签+身份验证
2020-04-13 17:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:50 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-04-13 17:15:50 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-04-13 17:15:50 -==> Parameters: 426(String)
2020-04-13 17:15:50 -<==      Total: 0
2020-04-13 17:15:50 -耗时 : 2
2020-04-13 17:15:51 -此处进行解密+验签+身份验证
2020-04-13 17:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:51 -此处进行解密+验签+身份验证
2020-04-13 17:15:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-13 17:15:51 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-13 17:15:51 -==> Parameters: 426(String)
2020-04-13 17:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-13 17:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -耗时 : 2
2020-04-13 17:15:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-13 17:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-13 17:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-13 17:15:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 17:15:51 -==> Parameters: 426(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:51 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-13 17:15:51 -<==    Updates: 1
2020-04-13 17:15:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-13 17:15:51 -==> Parameters: 426(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:51 -==> Parameters: recallFlag(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-13 17:15:51 -<==    Updates: 1
2020-04-13 17:15:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-13 17:15:51 -==> Parameters: 
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:51 -==> Parameters: collegeFlag(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:51 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-13 17:15:51 -<==    Updates: 1
2020-04-13 17:15:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-13 17:15:51 -==> Parameters: 426(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:51 -==> Parameters: cardFlag(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-13 17:15:51 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-13 17:15:51 -<==    Updates: 1
2020-04-13 17:15:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-13 17:15:51 -==> Parameters: appImgFlag(String), 426(String)
2020-04-13 17:15:51 -<==      Total: 1
2020-04-13 17:15:51 -耗时 : 76
