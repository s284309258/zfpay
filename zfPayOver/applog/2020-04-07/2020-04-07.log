2020-04-07 10:07:01 -Starting LongEcologicalApplication on PC-201905161910 with PID 7032 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-07 10:07:01 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-07 10:07:01 -No active profile set, falling back to default profiles: default
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:02 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 10:07:03 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-07 10:07:03 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-07 10:07:03 -Finished Spring Data repository scanning in 151ms. Found 0 repository interfaces.
2020-04-07 10:07:03 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-07 10:07:03 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-07 10:07:03 -Finished Spring Data repository scanning in 72ms. Found 0 repository interfaces.
2020-04-07 10:07:04 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$4f829292] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-07 10:07:04 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4a067732] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-07 10:07:05 -Tomcat initialized with port(s): 8080 (http)
2020-04-07 10:07:05 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-07 10:07:05 -Starting service [Tomcat]
2020-04-07 10:07:05 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-07 10:07:05 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-07 10:07:05 -Initializing Spring embedded WebApplicationContext
2020-04-07 10:07:05 -Root WebApplicationContext: initialization completed in 3725 ms
2020-04-07 10:07:05 -Filter xssFilter was not registered (disabled)
2020-04-07 10:07:06 -HikariPool-1 - Starting...
2020-04-07 10:07:06 -HikariPool-1 - Start completed.
2020-04-07 10:07:06 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-07 10:07:06 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-07 10:07:06 -HHH000206: hibernate.properties not found
2020-04-07 10:07:06 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-07 10:07:07 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-07 10:07:07 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-07 10:07:07 -Using default implementation for ThreadExecutor
2020-04-07 10:07:07 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-07 10:07:07 -Quartz Scheduler v.2.3.0 created.
2020-04-07 10:07:07 -RAMJobStore initialized.
2020-04-07 10:07:07 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-07 10:07:07 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-07 10:07:07 -Quartz scheduler version: 2.3.0
2020-04-07 10:07:07 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1ad1c363
2020-04-07 10:07:08 -STAET TaskExecutorConfig
2020-04-07 10:07:08 -Initializing ExecutorService
2020-04-07 10:07:08 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-07 10:07:08 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-07 10:07:08 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-07 10:07:09 -Initializing ExecutorService 'taskScheduler'
2020-04-07 10:07:09 -Starting Quartz Scheduler now
2020-04-07 10:07:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-07 10:07:09 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-07 10:07:09 -Using a shared selector for servlet write/read
2020-04-07 10:07:09 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-07 10:07:09 -Started LongEcologicalApplication in 8.307 seconds (JVM running for 10.059)
2020-04-07 10:37:23 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-07 10:37:23 -Initializing Servlet 'dispatcherServlet'
2020-04-07 10:37:23 -Completed initialization in 14 ms
2020-04-07 10:37:23 -此处进行解密+验签+身份验证
2020-04-07 10:37:23 -此处进行解密+验签+身份验证
2020-04-07 10:37:23 -此处进行解密+验签+身份验证
2020-04-07 10:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:37:24 -Starting without optional epoll library
2020-04-07 10:37:24 -Starting without optional kqueue library
2020-04-07 10:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-07 10:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-04-07 10:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-04-07 10:37:24 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-07 10:37:24 -==> Parameters: 1(String), 426(String), applyRateFlag(String)
2020-04-07 10:37:24 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-04-07 10:37:24 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-04-07 10:37:24 -==> Parameters: 426(String), 426(String)
2020-04-07 10:37:24 -==> Parameters: 426(String), 426(String)
2020-04-07 10:37:25 -<==    Updates: 1
2020-04-07 10:37:25 -耗时 : 254
2020-04-07 10:37:25 -<==      Total: 47
2020-04-07 10:37:25 -耗时 : 435
2020-04-07 10:37:25 -<==      Total: 294
2020-04-07 10:37:25 -耗时 : 578
2020-04-07 10:37:29 -此处进行解密+验签+身份验证
2020-04-07 10:37:29 -此处进行解密+验签+身份验证
2020-04-07 10:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:37:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-07 10:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 10:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 10:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 10:37:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-07 10:37:29 -==> Parameters: 426(String)
2020-04-07 10:37:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 10:37:29 -==> Parameters: 426(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:37:29 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -耗时 : 70
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:37:29 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 10:37:29 -<==    Updates: 1
2020-04-07 10:37:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 10:37:29 -==> Parameters: 426(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:37:29 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:37:29 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 10:37:29 -<==    Updates: 1
2020-04-07 10:37:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 10:37:29 -==> Parameters: 
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:37:29 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:37:29 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 10:37:29 -<==    Updates: 1
2020-04-07 10:37:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 10:37:29 -==> Parameters: 426(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:37:29 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:37:29 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 10:37:29 -<==    Updates: 1
2020-04-07 10:37:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:37:29 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 10:37:29 -<==      Total: 1
2020-04-07 10:37:29 -耗时 : 184
2020-04-07 10:40:49 -此处进行解密+验签+身份验证
2020-04-07 10:40:49 -此处进行解密+验签+身份验证
2020-04-07 10:40:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:49 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-07 10:40:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 10:40:49 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-07 10:40:49 -==> Parameters: 426(String)
2020-04-07 10:40:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 10:40:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -耗时 : 2
2020-04-07 10:40:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 10:40:49 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:49 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:49 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 10:40:49 -<==    Updates: 1
2020-04-07 10:40:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 10:40:49 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:49 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:49 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 10:40:49 -<==    Updates: 1
2020-04-07 10:40:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 10:40:49 -==> Parameters: 
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:49 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:49 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 10:40:49 -<==    Updates: 1
2020-04-07 10:40:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 10:40:49 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:49 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:49 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 10:40:49 -<==    Updates: 1
2020-04-07 10:40:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:49 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 10:40:49 -<==      Total: 1
2020-04-07 10:40:49 -耗时 : 86
2020-04-07 10:40:52 -此处进行解密+验签+身份验证
2020-04-07 10:40:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:52 -此处进行解密+验签+身份验证
2020-04-07 10:40:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-04-07 10:40:52 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-04-07 10:40:52 -==> Parameters: 426(String)
2020-04-07 10:40:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:52 -<==      Total: 1
2020-04-07 10:40:52 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-04-07 10:40:52 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:52 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-04-07 10:40:52 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-07 10:40:52 -==> Parameters: 202004(String), 426(String)
2020-04-07 10:40:52 -<==      Total: 1
2020-04-07 10:40:52 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-04-07 10:40:52 -==> Parameters: 426(String)
2020-04-07 10:40:52 -<==      Total: 0
2020-04-07 10:40:52 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-07 10:40:52 -==> Parameters: 202004(String), 426(String)
2020-04-07 10:40:52 -<==      Total: 1
2020-04-07 10:40:52 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-04-07 10:40:52 -==> Parameters: 426(String)
2020-04-07 10:40:52 -<==      Total: 0
2020-04-07 10:40:52 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-07 10:40:52 -==> Parameters: 202004(String), 426(String)
2020-04-07 10:40:52 -<==      Total: 1
2020-04-07 10:40:52 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-04-07 10:40:52 -==> Parameters: 426(String)
2020-04-07 10:40:52 -<==      Total: 0
2020-04-07 10:40:52 -耗时 : 116
2020-04-07 10:40:54 -此处进行解密+验签+身份验证
2020-04-07 10:40:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:54 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 10:40:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 10:40:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 10:40:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 10:40:54 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:54 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:54 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 10:40:54 -<==    Updates: 1
2020-04-07 10:40:54 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 10:40:54 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-04-07 10:40:54 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:54 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:54 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 10:40:54 -<==    Updates: 1
2020-04-07 10:40:54 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 10:40:54 -==> Parameters: 
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:54 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:54 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 10:40:54 -<==    Updates: 1
2020-04-07 10:40:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 10:40:54 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:54 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 10:40:54 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 10:40:54 -<==    Updates: 1
2020-04-07 10:40:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 10:40:54 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -耗时 : 386
2020-04-07 10:40:54 -<==      Total: 1
2020-04-07 10:40:54 -耗时 : 1635
2020-04-07 10:40:56 -此处进行解密+验签+身份验证
2020-04-07 10:40:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-07 10:40:56 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-07 10:40:56 -此处进行解密+验签+身份验证
2020-04-07 10:40:56 -==> Parameters: 426(String)
2020-04-07 10:40:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:40:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:40:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-07 10:40:56 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-07 10:40:56 -==> Parameters: 426(String), 426(String)
2020-04-07 10:40:56 -<==      Total: 204
2020-04-07 10:40:56 -耗时 : 374
2020-04-07 10:40:56 -<==      Total: 630
2020-04-07 10:40:56 -耗时 : 516
2020-04-07 10:41:06 -此处进行解密+验签+身份验证
2020-04-07 10:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-04-07 10:41:06 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-04-07 10:41:06 -==> Parameters: 426(String), MPOS(String)
2020-04-07 10:41:06 -此处进行解密+验签+身份验证
2020-04-07 10:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-04-07 10:41:06 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-04-07 10:41:06 -==> Parameters: 426(String), TraditionalPOS(String)
2020-04-07 10:41:06 -<==      Total: 10
2020-04-07 10:41:06 -耗时 : 61
2020-04-07 10:41:06 -<==      Total: 8
2020-04-07 10:41:06 -耗时 : 85
2020-04-07 10:43:34 -此处进行解密+验签+身份验证
2020-04-07 10:43:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:43:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:43:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-04-07 10:43:34 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-04-07 10:43:34 -==> Parameters: 1130(String), M351846115970(String)
2020-04-07 10:43:34 -<==      Total: 1
2020-04-07 10:43:34 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-07 10:43:34 -==> Parameters: M351846115970(String)
2020-04-07 10:43:34 -<==      Total: 1
2020-04-07 10:43:34 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-04-07 10:43:34 -==> Parameters: 426_20191217113727(String)
2020-04-07 10:43:34 -<==      Total: 1
2020-04-07 10:43:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1130
2020-04-07 10:43:34 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-04-07 10:43:34 -==> Parameters: 1130(String)
2020-04-07 10:43:34 -<==      Total: 1
2020-04-07 10:43:34 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1130,save content:{referer_id=426, parent_chain=426, user_tel=13825299956, id_card=411325198306124936, real_name=刘红振, algebra=2, cre_date=20190304, cre_time=131223, login_password=13cf3124cd612783c8160a50bcce0fa1, manager_id=25, pay_password=d019379afb5c9b342d97c11f22b92b59, id=1130, auth_status=09, status=0}
2020-04-07 10:43:34 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-04-07 10:43:34 -==> Parameters: 426_20191217113727(String)
2020-04-07 10:43:34 -<==      Total: 1
2020-04-07 10:43:34 -耗时 : 201
2020-04-07 10:43:35 -此处进行解密+验签+身份验证
2020-04-07 10:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 10:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 10:43:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-04-07 10:43:35 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-04-07 10:43:35 -==> Parameters: 426(String), M351846115970(String)
2020-04-07 10:43:35 -<==      Total: 1
2020-04-07 10:43:35 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-04-07 10:43:35 -==> Parameters: 
2020-04-07 10:43:35 -<==      Total: 101
2020-04-07 10:43:35 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-07 10:43:35 -==> Parameters: M351846115970(String)
2020-04-07 10:43:35 -<==      Total: 1
2020-04-07 10:43:35 -耗时 : 131
2020-04-07 11:34:11 -此处进行解密+验签+身份验证
2020-04-07 11:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 11:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 11:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 11:34:11 -此处进行解密+验签+身份验证
2020-04-07 11:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 11:34:11 -==> Parameters: 426(String), 426(String)
2020-04-07 11:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-07 11:34:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-07 11:34:11 -==> Parameters: 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -耗时 : 9
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:34:11 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:34:11 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 11:34:11 -<==    Updates: 1
2020-04-07 11:34:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 11:34:11 -==> Parameters: 426(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:34:11 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:34:11 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 11:34:11 -<==    Updates: 1
2020-04-07 11:34:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 11:34:11 -==> Parameters: 
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:34:11 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:34:11 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 11:34:11 -<==    Updates: 1
2020-04-07 11:34:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 11:34:11 -==> Parameters: 426(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:34:11 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:34:11 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 11:34:11 -<==    Updates: 1
2020-04-07 11:34:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:34:11 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 11:34:11 -<==      Total: 1
2020-04-07 11:34:11 -耗时 : 134
2020-04-07 11:34:13 -此处进行解密+验签+身份验证
2020-04-07 11:34:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-04-07 11:34:13 -此处进行解密+验签+身份验证
2020-04-07 11:34:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:13 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-04-07 11:34:13 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-07 11:34:13 -==> Parameters: 426(String)
2020-04-07 11:34:13 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-04-07 11:34:13 -==> Parameters: 426(String)
2020-04-07 11:34:13 -<==      Total: 1
2020-04-07 11:34:13 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-04-07 11:34:13 -==> Parameters: 426(String)
2020-04-07 11:34:13 -<==      Total: 10
2020-04-07 11:34:13 -耗时 : 18
2020-04-07 11:34:13 -<==      Total: 1
2020-04-07 11:34:13 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-07 11:34:13 -==> Parameters: 426(String)
2020-04-07 11:34:13 -<==      Total: 1
2020-04-07 11:34:13 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-04-07 11:34:13 -==> Parameters: 426(String)
2020-04-07 11:34:13 -<==      Total: 1
2020-04-07 11:34:13 -耗时 : 27
2020-04-07 11:34:16 -此处进行解密+验签+身份验证
2020-04-07 11:34:16 -此处进行解密+验签+身份验证
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-04-07 11:34:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:34:16 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-04-07 11:34:16 -==> Parameters: 2621(String)
2020-04-07 11:34:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202004 and pos_type is null 
2020-04-07 11:34:16 -==> Parameters: 
2020-04-07 11:34:16 -<==      Total: 1
2020-04-07 11:34:16 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-07 11:34:16 -==> Parameters: 2621(String)
2020-04-07 11:34:16 -<==      Total: 1
2020-04-07 11:34:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2621 and pos_type='epos' 
2020-04-07 11:34:16 -==> Parameters: 
2020-04-07 11:34:16 -此处进行解密+验签+身份验证
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:34:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 11:34:16 -==> Parameters: 2621(String), 2621(String)
2020-04-07 11:34:16 -此处进行解密+验签+身份验证
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:34:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:34:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 11:34:16 -==> Parameters: 2621(String), 2621(String), 0(String)
2020-04-07 11:34:17 -此处进行解密+验签+身份验证
2020-04-07 11:34:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:34:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:34:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:34:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:34:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:34:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 11:34:17 -==> Parameters: 2621(String), 2621(String), 1(String)
2020-04-07 11:34:17 -<==      Total: 1
2020-04-07 11:34:17 -耗时 : 285
2020-04-07 11:34:17 -<==      Total: 1
2020-04-07 11:34:17 -耗时 : 206
2020-04-07 11:34:17 -<==      Total: 0
2020-04-07 11:34:17 -耗时 : 163
2020-04-07 11:34:17 -<==      Total: 1
2020-04-07 11:34:17 -耗时 : 321
2020-04-07 11:34:17 -<==      Total: 1
2020-04-07 11:34:17 -耗时 : 90
2020-04-07 11:35:09 -此处进行解密+验签+身份验证
2020-04-07 11:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:35:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:35:09 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202005 and pos_type is null 
2020-04-07 11:35:09 -==> Parameters: 
2020-04-07 11:35:09 -<==      Total: 1
2020-04-07 11:35:09 -耗时 : 140
2020-04-07 11:46:10 -Starting LongEcologicalApplication on PC-201905161910 with PID 11964 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-07 11:46:10 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-07 11:46:10 -No active profile set, falling back to default profiles: default
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 11:46:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-07 11:46:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-07 11:46:11 -Finished Spring Data repository scanning in 72ms. Found 0 repository interfaces.
2020-04-07 11:46:12 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-07 11:46:12 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-07 11:46:12 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-04-07 11:46:12 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c31918e9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-07 11:46:12 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bd9cfd89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-07 11:46:13 -Tomcat initialized with port(s): 8080 (http)
2020-04-07 11:46:13 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-07 11:46:13 -Starting service [Tomcat]
2020-04-07 11:46:13 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-07 11:46:13 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-07 11:46:13 -Initializing Spring embedded WebApplicationContext
2020-04-07 11:46:13 -Root WebApplicationContext: initialization completed in 2292 ms
2020-04-07 11:46:13 -Filter xssFilter was not registered (disabled)
2020-04-07 11:46:13 -HikariPool-1 - Starting...
2020-04-07 11:46:13 -HikariPool-1 - Start completed.
2020-04-07 11:46:13 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-07 11:46:13 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-07 11:46:13 -HHH000206: hibernate.properties not found
2020-04-07 11:46:14 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-07 11:46:14 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-07 11:46:14 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-07 11:46:15 -Using default implementation for ThreadExecutor
2020-04-07 11:46:15 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-07 11:46:15 -Quartz Scheduler v.2.3.0 created.
2020-04-07 11:46:15 -RAMJobStore initialized.
2020-04-07 11:46:15 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-07 11:46:15 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-07 11:46:15 -Quartz scheduler version: 2.3.0
2020-04-07 11:46:15 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4607d78b
2020-04-07 11:46:15 -STAET TaskExecutorConfig
2020-04-07 11:46:15 -Initializing ExecutorService
2020-04-07 11:46:15 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-07 11:46:15 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-07 11:46:15 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-07 11:46:16 -Initializing ExecutorService 'taskScheduler'
2020-04-07 11:46:16 -Starting Quartz Scheduler now
2020-04-07 11:46:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-07 11:46:16 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-07 11:46:16 -Using a shared selector for servlet write/read
2020-04-07 11:46:16 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-07 11:46:16 -Started LongEcologicalApplication in 6.013 seconds (JVM running for 7.088)
2020-04-07 11:46:28 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-07 11:46:28 -Initializing Servlet 'dispatcherServlet'
2020-04-07 11:46:28 -Completed initialization in 11 ms
2020-04-07 11:46:28 -此处进行解密+验签+身份验证
2020-04-07 11:46:28 -此处进行解密+验签+身份验证
2020-04-07 11:46:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:28 -Starting without optional epoll library
2020-04-07 11:46:28 -Starting without optional kqueue library
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 11:46:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 11:46:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-07 11:46:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 11:46:29 -==> Parameters: 426(String), 426(String)
2020-04-07 11:46:29 -==> Parameters: 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -耗时 : 46
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:29 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:29 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 11:46:29 -<==    Updates: 1
2020-04-07 11:46:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 11:46:29 -==> Parameters: 426(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:29 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:29 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 11:46:29 -<==    Updates: 1
2020-04-07 11:46:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 11:46:29 -==> Parameters: 
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:29 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:29 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 11:46:29 -<==    Updates: 1
2020-04-07 11:46:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 11:46:29 -==> Parameters: 426(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:29 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:29 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 11:46:29 -<==    Updates: 1
2020-04-07 11:46:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:29 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -耗时 : 158
2020-04-07 11:46:29 -此处进行解密+验签+身份验证
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-07 11:46:29 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-07 11:46:29 -==> Parameters: 426(String)
2020-04-07 11:46:29 -<==      Total: 1
2020-04-07 11:46:29 -耗时 : 6
2020-04-07 11:46:29 -此处进行解密+验签+身份验证
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:29 -此处进行解密+验签+身份验证
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:29 -此处进行解密+验签+身份验证
2020-04-07 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-07 11:46:29 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-07 11:46:29 -==> Parameters: 426(String), 202004(String)
2020-04-07 11:46:29 -<==      Total: 0
2020-04-07 11:46:29 -耗时 : 8
2020-04-07 11:46:29 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-07 11:46:29 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-07 11:46:29 -==> Parameters: 426(String), 202004(String)
2020-04-07 11:46:29 -==> Parameters: 426(String), 202004(String)
2020-04-07 11:46:29 -<==      Total: 0
2020-04-07 11:46:29 -<==      Total: 0
2020-04-07 11:46:29 -耗时 : 26
2020-04-07 11:46:29 -耗时 : 21
2020-04-07 11:46:38 -此处进行解密+验签+身份验证
2020-04-07 11:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 11:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 11:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 11:46:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 11:46:38 -==> Parameters: 426(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:38 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:38 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 11:46:38 -<==    Updates: 1
2020-04-07 11:46:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 11:46:38 -==> Parameters: 426(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:38 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:38 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 11:46:38 -<==    Updates: 1
2020-04-07 11:46:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 11:46:38 -==> Parameters: 
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:38 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:38 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 11:46:38 -<==    Updates: 1
2020-04-07 11:46:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 11:46:38 -==> Parameters: 426(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:38 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 11:46:38 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 11:46:38 -<==    Updates: 1
2020-04-07 11:46:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 11:46:38 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 11:46:38 -<==      Total: 1
2020-04-07 11:46:38 -耗时 : 148
2020-04-07 11:46:43 -此处进行解密+验签+身份验证
2020-04-07 11:46:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-04-07 11:46:43 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-07 11:46:43 -==> Parameters: 426(String)
2020-04-07 11:46:43 -<==      Total: 1
2020-04-07 11:46:43 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-04-07 11:46:43 -==> Parameters: 426(String)
2020-04-07 11:46:43 -此处进行解密+验签+身份验证
2020-04-07 11:46:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-04-07 11:46:43 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-04-07 11:46:43 -==> Parameters: 426(String)
2020-04-07 11:46:43 -<==      Total: 1
2020-04-07 11:46:43 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-07 11:46:43 -==> Parameters: 426(String)
2020-04-07 11:46:43 -<==      Total: 1
2020-04-07 11:46:43 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-04-07 11:46:43 -==> Parameters: 426(String)
2020-04-07 11:46:43 -<==      Total: 1
2020-04-07 11:46:43 -<==      Total: 10
2020-04-07 11:46:43 -耗时 : 84
2020-04-07 11:46:43 -耗时 : 61
2020-04-07 11:46:48 -此处进行解密+验签+身份验证
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:46:48 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-04-07 11:46:48 -==> Parameters: 2621(String)
2020-04-07 11:46:48 -此处进行解密+验签+身份验证
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:46:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202004 and pos_type is null 
2020-04-07 11:46:48 -==> Parameters: 
2020-04-07 11:46:48 -<==      Total: 1
2020-04-07 11:46:48 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-07 11:46:48 -==> Parameters: 2621(String)
2020-04-07 11:46:48 -<==      Total: 1
2020-04-07 11:46:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2621 and pos_type='epos' 
2020-04-07 11:46:48 -==> Parameters: 
2020-04-07 11:46:48 -此处进行解密+验签+身份验证
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:46:48 -此处进行解密+验签+身份验证
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:46:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:46:48 -==> Parameters: 2621(String), 2621(String), 0(String)
2020-04-07 11:46:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 11:46:48 -==> Parameters: 2621(String), 2621(String), 1(String)
2020-04-07 11:46:48 -此处进行解密+验签+身份验证
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:46:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:46:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 11:46:48 -==> Parameters: 2621(String), 2621(String)
2020-04-07 11:46:48 -<==      Total: 1
2020-04-07 11:46:48 -耗时 : 130
2020-04-07 11:46:48 -<==      Total: 1
2020-04-07 11:46:48 -耗时 : 152
2020-04-07 11:46:48 -<==      Total: 0
2020-04-07 11:46:48 -耗时 : 157
2020-04-07 11:46:48 -<==      Total: 1
2020-04-07 11:46:48 -耗时 : 223
2020-04-07 11:46:48 -<==      Total: 1
2020-04-07 11:46:48 -耗时 : 225
2020-04-07 11:46:59 -此处进行解密+验签+身份验证
2020-04-07 11:46:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:46:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:46:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:46:59 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202003 and pos_type is null 
2020-04-07 11:46:59 -==> Parameters: 
2020-04-07 11:46:59 -<==      Total: 1
2020-04-07 11:46:59 -耗时 : 80
2020-04-07 11:47:10 -此处进行解密+验签+身份验证
2020-04-07 11:47:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:47:10 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202001 and pos_type is null 
2020-04-07 11:47:10 -==> Parameters: 
2020-04-07 11:47:10 -<==      Total: 1
2020-04-07 11:47:10 -耗时 : 20
2020-04-07 11:47:17 -此处进行解密+验签+身份验证
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:17 -此处进行解密+验签+身份验证
2020-04-07 11:47:17 -此处进行解密+验签+身份验证
2020-04-07 11:47:17 -此处进行解密+验签+身份验证
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:17 -此处进行解密+验签+身份验证
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-04-07 11:47:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2621 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2621 and cre_month=202001 
2020-04-07 11:47:17 -==> Parameters: 
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:17 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 11:47:17 -==> Parameters: 2621(String), 2621(String), 0(String)
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:17 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 11:47:17 -==> Parameters: 2621(String), 2621(String)
2020-04-07 11:47:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:17 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-04-07 11:47:17 -==> Parameters: 2621(String)
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:17 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 11:47:17 -==> Parameters: 2621(String), 2621(String), 1(String)
2020-04-07 11:47:17 -<==      Total: 1
2020-04-07 11:47:17 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-04-07 11:47:17 -==> Parameters: 2621(String)
2020-04-07 11:47:17 -<==      Total: 1
2020-04-07 11:47:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2621 
2020-04-07 11:47:17 -==> Parameters: 
2020-04-07 11:47:17 -<==      Total: 0
2020-04-07 11:47:17 -耗时 : 203
2020-04-07 11:47:17 -<==      Total: 0
2020-04-07 11:47:17 -耗时 : 206
2020-04-07 11:47:17 -<==      Total: 0
2020-04-07 11:47:17 -耗时 : 200
2020-04-07 11:47:17 -<==      Total: 1
2020-04-07 11:47:17 -耗时 : 395
2020-04-07 11:47:17 -<==      Total: 1
2020-04-07 11:47:17 -耗时 : 449
2020-04-07 11:47:24 -此处进行解密+验签+身份验证
2020-04-07 11:47:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-04-07 11:47:24 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2621 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2621 and cre_month=202003 
2020-04-07 11:47:24 -==> Parameters: 
2020-04-07 11:47:24 -<==      Total: 1
2020-04-07 11:47:24 -耗时 : 285
2020-04-07 11:47:31 -此处进行解密+验签+身份验证
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:31 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-04-07 11:47:31 -==> Parameters: 2621(String)
2020-04-07 11:47:31 -此处进行解密+验签+身份验证
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:47:31 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type='epos' ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202003 and pos_type='epos' 
2020-04-07 11:47:31 -==> Parameters: 
2020-04-07 11:47:31 -<==      Total: 1
2020-04-07 11:47:31 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-04-07 11:47:31 -==> Parameters: 2621(String)
2020-04-07 11:47:31 -<==      Total: 1
2020-04-07 11:47:31 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2621 and pos_type='epos' 
2020-04-07 11:47:31 -==> Parameters: 
2020-04-07 11:47:31 -此处进行解密+验签+身份验证
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:31 -此处进行解密+验签+身份验证
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:31 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 11:47:31 -此处进行解密+验签+身份验证
2020-04-07 11:47:31 -==> Parameters: 2621(String), 2621(String)
2020-04-07 11:47:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 11:47:31 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 11:47:31 -==> Parameters: 2621(String), 2621(String), 0(String)
2020-04-07 11:47:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 11:47:31 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 11:47:31 -==> Parameters: 2621(String), 2621(String), 1(String)
2020-04-07 11:47:31 -<==      Total: 1
2020-04-07 11:47:31 -耗时 : 148
2020-04-07 11:47:31 -<==      Total: 1
2020-04-07 11:47:31 -耗时 : 133
2020-04-07 11:47:31 -<==      Total: 1
2020-04-07 11:47:31 -耗时 : 140
2020-04-07 11:47:31 -<==      Total: 0
2020-04-07 11:47:31 -耗时 : 135
2020-04-07 11:47:31 -<==      Total: 1
2020-04-07 11:47:31 -耗时 : 158
2020-04-07 11:47:37 -此处进行解密+验签+身份验证
2020-04-07 11:47:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 11:47:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 11:47:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 11:47:37 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type='epos' ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202004 and pos_type='epos' 
2020-04-07 11:47:37 -==> Parameters: 
2020-04-07 11:47:37 -<==      Total: 1
2020-04-07 11:47:37 -耗时 : 75
2020-04-07 13:03:48 -此处进行解密+验签+身份验证
2020-04-07 13:03:48 -此处进行解密+验签+身份验证
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-04-07 13:03:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:48 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-04-07 13:03:48 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:48 -==> Parameters: 2621(String), 2621(String)
2020-04-07 13:03:48 -==> Parameters: 2621(String)
2020-04-07 13:03:48 -<==      Total: 1
2020-04-07 13:03:48 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-04-07 13:03:48 -==> Parameters: 2621(String)
2020-04-07 13:03:48 -<==      Total: 1
2020-04-07 13:03:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2621 
2020-04-07 13:03:48 -==> Parameters: 
2020-04-07 13:03:48 -此处进行解密+验签+身份验证
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:48 -此处进行解密+验签+身份验证
2020-04-07 13:03:48 -此处进行解密+验签+身份验证
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:48 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:48 -==> Parameters: 2621(String), 2621(String), 1(String)
2020-04-07 13:03:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-04-07 13:03:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2621 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2621 and cre_month=202004 
2020-04-07 13:03:48 -==> Parameters: 
2020-04-07 13:03:48 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:48 -==> Parameters: 2621(String), 2621(String), 0(String)
2020-04-07 13:03:48 -<==      Total: 0
2020-04-07 13:03:48 -耗时 : 222
2020-04-07 13:03:48 -<==      Total: 0
2020-04-07 13:03:48 -耗时 : 154
2020-04-07 13:03:48 -<==      Total: 0
2020-04-07 13:03:48 -耗时 : 164
2020-04-07 13:03:48 -<==      Total: 1
2020-04-07 13:03:48 -耗时 : 330
2020-04-07 13:03:49 -<==      Total: 1
2020-04-07 13:03:49 -耗时 : 366
2020-04-07 13:03:50 -此处进行解密+验签+身份验证
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:50 -此处进行解密+验签+身份验证
2020-04-07 13:03:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:50 -==> Parameters: 2621(String), 2621(String)
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:50 -此处进行解密+验签+身份验证
2020-04-07 13:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:50 -此处进行解密+验签+身份验证
2020-04-07 13:03:50 -此处进行解密+验签+身份验证
2020-04-07 13:03:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:50 -==> Parameters: 2621(String), 2621(String), 1(String)
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 13:03:50 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-04-07 13:03:50 -==> Parameters: 2621(String)
2020-04-07 13:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2621
2020-04-07 13:03:50 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2621 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2621 and cre_month=202004 and pos_type is null 
2020-04-07 13:03:50 -==> Parameters: 
2020-04-07 13:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2621 , return
2020-04-07 13:03:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:50 -==> Parameters: 2621(String), 2621(String), 0(String)
2020-04-07 13:03:50 -<==      Total: 1
2020-04-07 13:03:50 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-07 13:03:50 -==> Parameters: 2621(String)
2020-04-07 13:03:50 -<==      Total: 1
2020-04-07 13:03:50 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2621 and pos_type='epos' 
2020-04-07 13:03:50 -==> Parameters: 
2020-04-07 13:03:50 -<==      Total: 0
2020-04-07 13:03:50 -<==      Total: 1
2020-04-07 13:03:50 -耗时 : 111
2020-04-07 13:03:50 -耗时 : 97
2020-04-07 13:03:50 -<==      Total: 1
2020-04-07 13:03:50 -耗时 : 106
2020-04-07 13:03:50 -<==      Total: 1
2020-04-07 13:03:50 -耗时 : 165
2020-04-07 13:03:50 -<==      Total: 1
2020-04-07 13:03:50 -耗时 : 169
2020-04-07 13:03:54 -此处进行解密+验签+身份验证
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-04-07 13:03:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2309 and pos_type is null ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2309 and cre_month=202004 and pos_type is null 
2020-04-07 13:03:54 -==> Parameters: 
2020-04-07 13:03:54 -此处进行解密+验签+身份验证
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-07 13:03:54 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-04-07 13:03:54 -==> Parameters: 2309(String)
2020-04-07 13:03:54 -<==      Total: 1
2020-04-07 13:03:54 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-04-07 13:03:54 -==> Parameters: 2309(String)
2020-04-07 13:03:54 -<==      Total: 1
2020-04-07 13:03:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2309 and pos_type='epos' 
2020-04-07 13:03:54 -==> Parameters: 
2020-04-07 13:03:54 -此处进行解密+验签+身份验证
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 13:03:54 -此处进行解密+验签+身份验证
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-07 13:03:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:54 -==> Parameters: 2309(String), 2309(String), 0(String)
2020-04-07 13:03:54 -此处进行解密+验签+身份验证
2020-04-07 13:03:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-07 13:03:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-04-07 13:03:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:54 -==> Parameters: 2309(String), 2309(String)
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2309
2020-04-07 13:03:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2309 , return
2020-04-07 13:03:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-04-07 13:03:54 -==> Parameters: 2309(String), 2309(String), 1(String)
2020-04-07 13:03:54 -<==      Total: 1
2020-04-07 13:03:54 -耗时 : 186
2020-04-07 13:03:54 -<==      Total: 1
2020-04-07 13:03:54 -耗时 : 130
2020-04-07 13:03:54 -<==      Total: 0
2020-04-07 13:03:54 -耗时 : 146
2020-04-07 13:03:54 -<==      Total: 1
2020-04-07 13:03:54 -耗时 : 142
2020-04-07 13:03:54 -<==      Total: 1
2020-04-07 13:03:54 -耗时 : 213
2020-04-07 13:03:58 -此处进行解密+验签+身份验证
2020-04-07 13:03:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:58 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-07 13:03:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-07 13:03:58 -==> Parameters: 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -耗时 : 10
2020-04-07 13:03:58 -此处进行解密+验签+身份验证
2020-04-07 13:03:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-04-07 13:03:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-04-07 13:03:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-07 13:03:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-04-07 13:03:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-04-07 13:03:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 13:03:58 -==> Parameters: 426(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 13:03:58 -==> Parameters: applyRateFlag(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 13:03:58 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-04-07 13:03:58 -<==    Updates: 1
2020-04-07 13:03:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-07 13:03:58 -==> Parameters: 426(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 13:03:58 -==> Parameters: recallFlag(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 13:03:58 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-04-07 13:03:58 -<==    Updates: 1
2020-04-07 13:03:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-07 13:03:58 -==> Parameters: 
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 13:03:58 -==> Parameters: collegeFlag(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 13:03:58 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-04-07 13:03:58 -<==    Updates: 1
2020-04-07 13:03:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-07 13:03:58 -==> Parameters: 426(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 13:03:58 -==> Parameters: cardFlag(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-07 13:03:58 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-04-07 13:03:58 -<==    Updates: 1
2020-04-07 13:03:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-07 13:03:58 -==> Parameters: appImgFlag(String), 426(String)
2020-04-07 13:03:58 -<==      Total: 1
2020-04-07 13:03:58 -耗时 : 109
2020-04-07 17:45:00 -Starting LongEcologicalApplication on PC-201905161910 with PID 1156 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-07 17:45:00 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-07 17:45:00 -No active profile set, falling back to default profiles: default
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:01 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-07 17:45:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-07 17:45:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-07 17:45:02 -Finished Spring Data repository scanning in 100ms. Found 0 repository interfaces.
2020-04-07 17:45:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-07 17:45:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-07 17:45:02 -Finished Spring Data repository scanning in 60ms. Found 0 repository interfaces.
2020-04-07 17:45:02 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b8464884] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-07 17:45:02 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b2ca2d24] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-07 17:45:03 -Tomcat initialized with port(s): 8080 (http)
2020-04-07 17:45:03 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-07 17:45:03 -Starting service [Tomcat]
2020-04-07 17:45:03 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-07 17:45:03 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-07 17:45:03 -Initializing Spring embedded WebApplicationContext
2020-04-07 17:45:03 -Root WebApplicationContext: initialization completed in 3083 ms
2020-04-07 17:45:03 -Filter xssFilter was not registered (disabled)
2020-04-07 17:45:04 -HikariPool-1 - Starting...
2020-04-07 17:45:04 -HikariPool-1 - Start completed.
2020-04-07 17:45:04 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-07 17:45:04 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-07 17:45:04 -HHH000206: hibernate.properties not found
2020-04-07 17:45:04 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-07 17:45:04 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-07 17:45:04 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-07 17:45:05 -Using default implementation for ThreadExecutor
2020-04-07 17:45:05 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-07 17:45:05 -Quartz Scheduler v.2.3.0 created.
2020-04-07 17:45:05 -RAMJobStore initialized.
2020-04-07 17:45:05 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-07 17:45:05 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-07 17:45:05 -Quartz scheduler version: 2.3.0
2020-04-07 17:45:05 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2cae5fa7
2020-04-07 17:45:05 -STAET TaskExecutorConfig
2020-04-07 17:45:05 -Initializing ExecutorService
2020-04-07 17:45:05 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-07 17:45:06 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-07 17:45:06 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-07 17:45:06 -Initializing ExecutorService 'taskScheduler'
2020-04-07 17:45:06 -Starting Quartz Scheduler now
2020-04-07 17:45:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-07 17:45:06 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-07 17:45:06 -Using a shared selector for servlet write/read
2020-04-07 17:45:06 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-07 17:45:06 -Started LongEcologicalApplication in 6.556 seconds (JVM running for 7.92)
2020-04-07 17:45:18 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-07 17:45:18 -Initializing Servlet 'dispatcherServlet'
2020-04-07 17:45:18 -Completed initialization in 10 ms
2020-04-07 17:45:19 -此处进行解密+验签+身份验证
2020-04-07 17:45:19 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"BA9F13BFF766417681E506546606D32C","device_no":"1.1.4","device_type":"android","sys_user_account":"","token":"426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP"}
2020-04-07 17:45:19 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-07 17:45:19 -token值=======426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP
2020-04-07 17:45:19 -Starting without optional epoll library
2020-04-07 17:45:19 -Starting without optional kqueue library
2020-04-07 17:45:20 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-07 17:45:20 -==> Parameters: 426(String)
2020-04-07 17:45:20 -<==      Total: 1
2020-04-07 17:45:20 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-07 17:45:20 -==> Parameters: 25(String)
2020-04-07 17:45:20 -<==      Total: 1
2020-04-07 17:45:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-07 17:45:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-07 17:45:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-07 17:45:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-07 17:45:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-07 17:45:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-07 17:45:20 -耗时 : 610
