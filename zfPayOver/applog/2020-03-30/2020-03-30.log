2020-03-30 11:32:34 -Starting LongEcologicalApplication on PC-201905161910 with PID 1180 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-30 11:32:34 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-30 11:32:34 -No active profile set, falling back to default profiles: default
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:34 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 11:32:35 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-30 11:32:35 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-30 11:32:35 -Finished Spring Data repository scanning in 77ms. Found 0 repository interfaces.
2020-03-30 11:32:35 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-30 11:32:35 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-30 11:32:35 -Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2020-03-30 11:32:35 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$2be36482] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-30 11:32:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$26674922] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-30 11:32:36 -Tomcat initialized with port(s): 8080 (http)
2020-03-30 11:32:36 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-30 11:32:36 -Starting service [Tomcat]
2020-03-30 11:32:36 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-30 11:32:36 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-30 11:32:36 -Initializing Spring embedded WebApplicationContext
2020-03-30 11:32:36 -Root WebApplicationContext: initialization completed in 2012 ms
2020-03-30 11:32:36 -Filter xssFilter was not registered (disabled)
2020-03-30 11:32:36 -HikariPool-1 - Starting...
2020-03-30 11:32:36 -HikariPool-1 - Start completed.
2020-03-30 11:32:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-30 11:32:36 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-30 11:32:36 -HHH000206: hibernate.properties not found
2020-03-30 11:32:37 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-30 11:32:37 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-30 11:32:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-30 11:32:38 -Using default implementation for ThreadExecutor
2020-03-30 11:32:38 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-30 11:32:38 -Quartz Scheduler v.2.3.0 created.
2020-03-30 11:32:38 -RAMJobStore initialized.
2020-03-30 11:32:38 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-30 11:32:38 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-30 11:32:38 -Quartz scheduler version: 2.3.0
2020-03-30 11:32:38 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@200d1a3d
2020-03-30 11:32:38 -STAET TaskExecutorConfig
2020-03-30 11:32:38 -Initializing ExecutorService
2020-03-30 11:32:38 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-30 11:32:38 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-30 11:32:38 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-30 11:32:39 -Initializing ExecutorService 'taskScheduler'
2020-03-30 11:32:39 -Starting Quartz Scheduler now
2020-03-30 11:32:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-30 11:32:39 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-30 11:32:39 -Using a shared selector for servlet write/read
2020-03-30 11:32:39 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-30 11:32:39 -Started LongEcologicalApplication in 6.078 seconds (JVM running for 7.666)
2020-03-30 11:40:57 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-30 11:40:57 -Initializing Servlet 'dispatcherServlet'
2020-03-30 11:40:57 -Completed initialization in 13 ms
2020-03-30 11:40:58 -此处进行解密+验签+身份验证
2020-03-30 11:40:58 -此处进行解密+验签+身份验证
2020-03-30 11:40:58 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-30 11:40:58 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-30 11:40:58 -Starting without optional epoll library
2020-03-30 11:40:58 -Starting without optional kqueue library
2020-03-30 11:40:58 -解密：
2020-03-30 11:40:58 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-30 11:40:58 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-30 11:40:58 -==> Parameters: 04(String), 04(String)
2020-03-30 11:40:58 -<==      Total: 1
2020-03-30 11:40:58 -耗时 : 44
2020-03-30 11:40:59 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-30 11:40:59 -耗时 : 968
2020-03-30 11:40:59 -此处进行解密+验签+身份验证
2020-03-30 11:40:59 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"6994C37FADC9DE97FCDAA2A5DE7C5D5A","device_no":"1.0.9","device_type":"android","sys_user_account":"","token":"426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP"}
2020-03-30 11:40:59 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-30 11:40:59 -token值=======426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP
2020-03-30 11:40:59 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-30 11:40:59 -==> Parameters: 426(String)
2020-03-30 11:40:59 -<==      Total: 1
2020-03-30 11:40:59 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-30 11:40:59 -==> Parameters: 25(String)
2020-03-30 11:40:59 -<==      Total: 1
2020-03-30 11:40:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-30 11:40:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-30 11:40:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-30 11:40:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-30 11:40:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-30 11:40:59 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-30 11:40:59 -耗时 : 51
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-30 11:41:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-30 11:41:02 -==> Parameters: 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -耗时 : 7
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -解密：
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-30 11:41:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-30 11:41:02 -==> Parameters: 01(String), 01(String)
2020-03-30 11:41:02 -<==      Total: 4
2020-03-30 11:41:02 -耗时 : 3
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-30 11:41:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-30 11:41:02 -==> Parameters: 426(String)
2020-03-30 11:41:02 -<==      Total: 2
2020-03-30 11:41:02 -耗时 : 14
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-30 11:41:02 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-30 11:41:02 -==> Parameters: 
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -<==      Total: 3
2020-03-30 11:41:02 -耗时 : 8
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:02 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-30 11:41:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-30 11:41:02 -==> Parameters: 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -耗时 : 6
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-30 11:41:02 -此处进行解密+验签+身份验证
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-30 11:41:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-30 11:41:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-30 11:41:02 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-30 11:41:02 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-30 11:41:02 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: recallFlag(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-30 11:41:02 -==> Parameters: recallFlag(String), 426(String)
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==> Parameters: 
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: collegeFlag(String), 426(String)
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-30 11:41:02 -==> Parameters: 
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: collegeFlag(String), 426(String)
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:02 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: cardFlag(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-30 11:41:02 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-30 11:41:02 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: cardFlag(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: appImgFlag(String), 426(String)
2020-03-30 11:41:02 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -耗时 : 124
2020-03-30 11:41:02 -<==    Updates: 1
2020-03-30 11:41:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:41:02 -==> Parameters: appImgFlag(String), 426(String)
2020-03-30 11:41:02 -<==      Total: 1
2020-03-30 11:41:02 -耗时 : 91
2020-03-30 11:41:14 -此处进行解密+验签+身份验证
2020-03-30 11:41:14 -此处进行解密+验签+身份验证
2020-03-30 11:41:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-30 11:41:14 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-30 11:41:14 -==> Parameters: 426(String)
2020-03-30 11:41:14 -<==      Total: 1
2020-03-30 11:41:14 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-30 11:41:14 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:14 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-30 11:41:14 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-30 11:41:14 -==> Parameters: 202003(String), 426(String)
2020-03-30 11:41:14 -<==      Total: 1
2020-03-30 11:41:14 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-30 11:41:14 -==> Parameters: 426(String)
2020-03-30 11:41:14 -<==      Total: 0
2020-03-30 11:41:14 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-30 11:41:14 -==> Parameters: 202003(String), 426(String)
2020-03-30 11:41:14 -<==      Total: 1
2020-03-30 11:41:14 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-30 11:41:14 -==> Parameters: 426(String)
2020-03-30 11:41:14 -<==      Total: 0
2020-03-30 11:41:14 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-30 11:41:14 -==> Parameters: 202003(String), 426(String)
2020-03-30 11:41:14 -<==      Total: 1
2020-03-30 11:41:14 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-30 11:41:14 -==> Parameters: 426(String)
2020-03-30 11:41:14 -<==      Total: 0
2020-03-30 11:41:14 -耗时 : 88
2020-03-30 11:41:15 -<==      Total: 1
2020-03-30 11:41:15 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-30 11:41:15 -==> Parameters: 426(String), 426(String)
2020-03-30 11:41:16 -<==      Total: 1
2020-03-30 11:41:16 -耗时 : 1335
2020-03-30 11:41:17 -此处进行解密+验签+身份验证
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:17 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-30 11:41:17 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-30 11:41:17 -==> Parameters: 426(String)
2020-03-30 11:41:17 -<==      Total: 1
2020-03-30 11:41:17 -耗时 : 8
2020-03-30 11:41:17 -此处进行解密+验签+身份验证
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:17 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:41:17 -此处进行解密+验签+身份验证
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:17 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-30 11:41:17 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-30 11:41:17 -==> Parameters: 426(String), 202003(String)
2020-03-30 11:41:17 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-30 11:41:17 -==> Parameters: 426(String), 202003(String)
2020-03-30 11:41:17 -此处进行解密+验签+身份验证
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:17 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:41:17 -<==      Total: 1
2020-03-30 11:41:17 -耗时 : 7
2020-03-30 11:41:17 -<==      Total: 1
2020-03-30 11:41:17 -耗时 : 30
2020-03-30 11:41:17 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-30 11:41:17 -==> Parameters: 426(String), 202003(String)
2020-03-30 11:41:17 -<==      Total: 1
2020-03-30 11:41:17 -耗时 : 5
2020-03-30 11:41:33 -此处进行解密+验签+身份验证
2020-03-30 11:41:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-30 11:41:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-30 11:41:33 -==> Parameters: 426(String), 202002(String)
2020-03-30 11:41:33 -<==      Total: 1
2020-03-30 11:41:33 -耗时 : 3
2020-03-30 11:41:33 -此处进行解密+验签+身份验证
2020-03-30 11:41:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:41:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-30 11:41:33 -==> Parameters: 426(String), 202002(String)
2020-03-30 11:41:33 -<==      Total: 1
2020-03-30 11:41:33 -耗时 : 2
2020-03-30 11:41:33 -此处进行解密+验签+身份验证
2020-03-30 11:41:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:41:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:41:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:41:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-30 11:41:33 -==> Parameters: 426(String), 202002(String)
2020-03-30 11:41:33 -<==      Total: 0
2020-03-30 11:41:33 -耗时 : 3
2020-03-30 11:43:24 -此处进行解密+验签+身份验证
2020-03-30 11:43:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:43:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:43:24 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:43:24 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-30 11:43:24 -==> Parameters: 426(String), 202001(String)
2020-03-30 11:43:24 -<==      Total: 1
2020-03-30 11:43:24 -耗时 : 5
2020-03-30 11:43:24 -此处进行解密+验签+身份验证
2020-03-30 11:43:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:43:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:43:24 -此处进行解密+验签+身份验证
2020-03-30 11:43:24 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-30 11:43:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:43:24 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-30 11:43:24 -==> Parameters: 426(String), 202001(String)
2020-03-30 11:43:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:43:24 -<==      Total: 1
2020-03-30 11:43:24 -耗时 : 3
2020-03-30 11:43:24 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:43:24 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-30 11:43:24 -==> Parameters: 426(String), 202001(String)
2020-03-30 11:43:24 -<==      Total: 0
2020-03-30 11:43:24 -耗时 : 2
2020-03-30 11:43:55 -此处进行解密+验签+身份验证
2020-03-30 11:43:55 -此处进行解密+验签+身份验证
2020-03-30 11:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:43:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:43:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:43:55 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-30 11:43:55 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-30 11:43:55 -==> Parameters: 426(String), 202003(String)
2020-03-30 11:43:55 -==> Parameters: 426(String), 202003(String)
2020-03-30 11:43:55 -<==      Total: 1
2020-03-30 11:43:55 -耗时 : 2
2020-03-30 11:43:55 -<==      Total: 1
2020-03-30 11:43:55 -耗时 : 4
2020-03-30 11:43:55 -此处进行解密+验签+身份验证
2020-03-30 11:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:43:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:43:55 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-30 11:43:55 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-30 11:43:55 -==> Parameters: 426(String), 202003(String)
2020-03-30 11:43:55 -<==      Total: 1
2020-03-30 11:43:55 -耗时 : 2
2020-03-30 11:44:08 -此处进行解密+验签+身份验证
2020-03-30 11:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:44:08 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-30 11:44:08 -==> Parameters: 426(String), 202002(String)
2020-03-30 11:44:08 -<==      Total: 0
2020-03-30 11:44:08 -耗时 : 2
2020-03-30 11:44:08 -此处进行解密+验签+身份验证
2020-03-30 11:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-30 11:44:08 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-30 11:44:08 -==> Parameters: 426(String), 202002(String)
2020-03-30 11:44:08 -<==      Total: 1
2020-03-30 11:44:08 -耗时 : 2
2020-03-30 11:44:08 -此处进行解密+验签+身份验证
2020-03-30 11:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:44:08 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-30 11:44:08 -==> Parameters: 426(String), 202002(String)
2020-03-30 11:44:08 -<==      Total: 1
2020-03-30 11:44:08 -耗时 : 3
2020-03-30 11:44:14 -此处进行解密+验签+身份验证
2020-03-30 11:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:44:14 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-30 11:44:14 -==> Parameters: 426(String), 202001(String)
2020-03-30 11:44:14 -<==      Total: 1
2020-03-30 11:44:14 -耗时 : 2
2020-03-30 11:44:14 -此处进行解密+验签+身份验证
2020-03-30 11:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-30 11:44:14 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-30 11:44:14 -==> Parameters: 426(String), 202001(String)
2020-03-30 11:44:14 -<==      Total: 0
2020-03-30 11:44:14 -耗时 : 3
2020-03-30 11:44:14 -此处进行解密+验签+身份验证
2020-03-30 11:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-30 11:44:14 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-30 11:44:14 -==> Parameters: 426(String), 202001(String)
2020-03-30 11:44:14 -<==      Total: 1
2020-03-30 11:44:14 -耗时 : 1
2020-03-30 11:44:43 -此处进行解密+验签+身份验证
2020-03-30 11:44:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:44:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:44:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-30 11:44:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-30 11:44:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-30 11:44:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-30 11:44:43 -==> Parameters: 426(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:44:43 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:44:43 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-30 11:44:43 -<==    Updates: 1
2020-03-30 11:44:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-30 11:44:43 -==> Parameters: 426(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:44:43 -==> Parameters: recallFlag(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:44:43 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-30 11:44:43 -<==    Updates: 1
2020-03-30 11:44:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-30 11:44:43 -==> Parameters: 
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:44:43 -==> Parameters: collegeFlag(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:44:43 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-30 11:44:43 -<==    Updates: 1
2020-03-30 11:44:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-30 11:44:43 -==> Parameters: 426(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:44:43 -==> Parameters: cardFlag(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-30 11:44:43 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-30 11:44:43 -<==    Updates: 1
2020-03-30 11:44:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-30 11:44:43 -==> Parameters: appImgFlag(String), 426(String)
2020-03-30 11:44:43 -<==      Total: 1
2020-03-30 11:44:43 -耗时 : 107
2020-03-30 11:45:19 -此处进行解密+验签+身份验证
2020-03-30 11:45:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:45:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:45:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-30 11:45:19 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-30 11:45:19 -==> Parameters: 1(String), 426(String), applyRateFlag(String)
2020-03-30 11:45:19 -<==    Updates: 1
2020-03-30 11:45:19 -耗时 : 45
2020-03-30 11:45:19 -此处进行解密+验签+身份验证
2020-03-30 11:45:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:45:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:45:19 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-30 11:45:19 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-30 11:45:19 -==> Parameters: 426(String), 426(String)
2020-03-30 11:45:19 -<==      Total: 49
2020-03-30 11:45:19 -耗时 : 177
2020-03-30 11:45:19 -此处进行解密+验签+身份验证
2020-03-30 11:45:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:45:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:45:19 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-30 11:45:19 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-30 11:45:19 -==> Parameters: 426(String), 426(String)
2020-03-30 11:45:19 -<==      Total: 294
2020-03-30 11:45:19 -耗时 : 320
2020-03-30 11:45:27 -此处进行解密+验签+身份验证
2020-03-30 11:45:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:45:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:45:27 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-30 11:45:27 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? order by cast(rate as decimal(20,2)) 
2020-03-30 11:45:27 -==> Parameters: 1(String)
2020-03-30 11:45:27 -<==      Total: 10
2020-03-30 11:45:27 -耗时 : 37
2020-03-30 11:46:14 -此处进行解密+验签+身份验证
2020-03-30 11:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:46:14 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-30 11:46:14 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? order by cast(rate as decimal(20,2)) 
2020-03-30 11:46:14 -==> Parameters: 1(String)
2020-03-30 11:46:14 -<==      Total: 10
2020-03-30 11:46:14 -耗时 : 2
2020-03-30 11:46:29 -此处进行解密+验签+身份验证
2020-03-30 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/addApplyRateTraditionalPos
2020-03-30 11:46:29 -==>  Preparing: insert into t_user_apply_cardrate_trapos_record_info(user_id, sn, credit_card_rate_old, credit_card_rate_new, card_settle_price, cre_date, cre_time,pos_type) select ?, t.sn, t1.credit_card_rate, ?, t.card_settle_price, ?, ?, t.pos_type FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and find_in_set(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) 
2020-03-30 11:46:29 -==> Parameters: 426(String), 0.530(String), 20200330(String), 114629(String), 426(String), 000006026221521105(String), 426(String)
2020-03-30 11:46:29 -<==    Updates: 1
2020-03-30 11:46:29 -耗时 : 132
2020-03-30 11:46:29 -此处进行解密+验签+身份验证
2020-03-30 11:46:29 -此处进行解密+验签+身份验证
2020-03-30 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-30 11:46:29 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-30 11:46:29 -==> Parameters: 426(String), 426(String)
2020-03-30 11:46:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 11:46:29 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-30 11:46:29 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-30 11:46:29 -==> Parameters: 426(String), 426(String)
2020-03-30 11:46:29 -<==      Total: 48
2020-03-30 11:46:29 -耗时 : 105
2020-03-30 11:46:29 -<==      Total: 294
2020-03-30 11:46:29 -耗时 : 410
2020-03-30 12:07:10 -Starting LongEcologicalApplication on PC-201905161910 with PID 2972 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-30 12:07:10 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-30 12:07:10 -No active profile set, falling back to default profiles: default
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-30 12:07:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-30 12:07:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-30 12:07:11 -Finished Spring Data repository scanning in 64ms. Found 0 repository interfaces.
2020-03-30 12:07:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-30 12:07:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-30 12:07:11 -Finished Spring Data repository scanning in 42ms. Found 0 repository interfaces.
2020-03-30 12:07:12 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8ad623fb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-30 12:07:12 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$855a089b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-30 12:07:13 -Tomcat initialized with port(s): 8080 (http)
2020-03-30 12:07:13 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-30 12:07:13 -Starting service [Tomcat]
2020-03-30 12:07:13 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-30 12:07:13 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-30 12:07:13 -Initializing Spring embedded WebApplicationContext
2020-03-30 12:07:13 -Root WebApplicationContext: initialization completed in 2249 ms
2020-03-30 12:07:13 -Filter xssFilter was not registered (disabled)
2020-03-30 12:07:13 -HikariPool-1 - Starting...
2020-03-30 12:07:13 -HikariPool-1 - Start completed.
2020-03-30 12:07:13 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-30 12:07:13 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-30 12:07:13 -HHH000206: hibernate.properties not found
2020-03-30 12:07:14 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-30 12:07:14 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-30 12:07:14 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-30 12:07:15 -Using default implementation for ThreadExecutor
2020-03-30 12:07:15 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-30 12:07:15 -Quartz Scheduler v.2.3.0 created.
2020-03-30 12:07:15 -RAMJobStore initialized.
2020-03-30 12:07:15 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-30 12:07:15 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-30 12:07:15 -Quartz scheduler version: 2.3.0
2020-03-30 12:07:15 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6c9e74f3
2020-03-30 12:07:15 -STAET TaskExecutorConfig
2020-03-30 12:07:15 -Initializing ExecutorService
2020-03-30 12:07:15 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-30 12:07:16 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-30 12:07:16 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-30 12:07:16 -Initializing ExecutorService 'taskScheduler'
2020-03-30 12:07:16 -Starting Quartz Scheduler now
2020-03-30 12:07:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-30 12:07:17 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-30 12:07:17 -Using a shared selector for servlet write/read
2020-03-30 12:07:17 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-30 12:07:17 -Started LongEcologicalApplication in 6.802 seconds (JVM running for 8.912)
2020-03-30 12:07:31 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-30 12:07:31 -Initializing Servlet 'dispatcherServlet'
2020-03-30 12:07:31 -Completed initialization in 17 ms
2020-03-30 12:07:31 -此处进行解密+验签+身份验证
2020-03-30 12:07:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:07:31 -Starting without optional epoll library
2020-03-30 12:07:31 -Starting without optional kqueue library
2020-03-30 12:07:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:07:32 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-30 12:07:32 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? order by cast(rate as decimal(20,2)) 
2020-03-30 12:07:32 -==> Parameters: 1(String)
2020-03-30 12:07:32 -<==      Total: 10
2020-03-30 12:07:32 -耗时 : 56
2020-03-30 12:07:36 -此处进行解密+验签+身份验证
2020-03-30 12:07:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:07:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:07:36 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/addApplyRateTraditionalPos
2020-03-30 12:07:41 -==>  Preparing: select sum(cnt) as cnt from ( select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where find_in_set(sn,?) and `status`='00' union all select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where find_in_set(sn,?) and `status`='00' ) tb 
2020-03-30 12:07:41 -==> Parameters: 000006026221520181(String), 000006026221520181(String)
2020-03-30 12:07:41 -<==      Total: 1
2020-03-30 12:10:06 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m52s628ms875µs556ns).
2020-03-30 12:10:06 -==>  Preparing: insert into t_user_apply_cardrate_trapos_record_info(user_id, sn, credit_card_rate_old, credit_card_rate_new, card_settle_price, cre_date, cre_time,pos_type) select ?, t.sn, t1.credit_card_rate, ?, t.card_settle_price, ?, ?, t.pos_type FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and find_in_set(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) 
2020-03-30 12:10:06 -==> Parameters: 426(String), 0.530(String), 20200330(String), 120736(String), 426(String), 000006026221520181(String), 426(String)
2020-03-30 12:10:06 -<==    Updates: 1
2020-03-30 12:10:06 -耗时 : 150351
2020-03-30 12:10:14 -此处进行解密+验签+身份验证
2020-03-30 12:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:10:14 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposRecordList
2020-03-30 12:10:14 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_mpos_record_info where user_id = ? order by id desc limit 0,10 
2020-03-30 12:10:14 -==> Parameters: 426(String)
2020-03-30 12:10:14 -<==      Total: 0
2020-03-30 12:10:14 -耗时 : 56
2020-03-30 12:10:14 -此处进行解密+验签+身份验证
2020-03-30 12:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:10:14 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-30 12:10:14 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-30 12:10:14 -==> Parameters: 426(String)
2020-03-30 12:10:14 -<==      Total: 2
2020-03-30 12:10:14 -耗时 : 23
2020-03-30 12:10:16 -此处进行解密+验签+身份验证
2020-03-30 12:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:10:16 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-30 12:10:16 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type='epos' order by id desc limit 0,10 
2020-03-30 12:10:16 -==> Parameters: 426(String)
2020-03-30 12:10:16 -<==      Total: 0
2020-03-30 12:10:16 -耗时 : 4
2020-03-30 12:10:29 -此处进行解密+验签+身份验证
2020-03-30 12:10:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:10:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:10:29 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-30 12:10:29 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? order by cast(rate as decimal(20,2)) 
2020-03-30 12:10:29 -==> Parameters: 1(String)
2020-03-30 12:10:29 -<==      Total: 10
2020-03-30 12:10:29 -耗时 : 7
2020-03-30 12:10:32 -此处进行解密+验签+身份验证
2020-03-30 12:10:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-30 12:10:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-30 12:10:32 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/addApplyRateTraditionalPos
2020-03-30 12:10:33 -==>  Preparing: select sum(cnt) as cnt from ( select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where find_in_set(sn,?) and `status`='00' union all select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where find_in_set(sn,?) and `status`='00' ) tb 
2020-03-30 12:10:33 -==> Parameters: 000006026221520181(String), 000006026221520181(String)
2020-03-30 12:10:33 -<==      Total: 1
2020-03-30 12:10:37 -耗时 : 5003
2020-03-30 18:33:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-30 18:33:01 -Shutting down ExecutorService 'taskScheduler'
2020-03-30 18:33:01 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-30 18:33:01 -Shutting down Quartz Scheduler
2020-03-30 18:33:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-30 18:33:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-30 18:33:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-30 18:33:01 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-30 18:33:01 -HikariPool-1 - Shutdown initiated...
2020-03-30 18:33:01 -HikariPool-1 - Shutdown completed.
