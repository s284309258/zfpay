2020-06-17 14:08:03 -Starting LongEcologicalApplication on PC-201905161910 with PID 18636 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-06-17 14:08:03 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-06-17 14:08:03 -No active profile set, falling back to default profiles: default
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'userMapper' and 'com.example.longecological.mapper.user.UserMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'userRoleMapper' and 'com.example.longecological.mapper.user.UserRoleMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 14:08:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-17 14:08:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-17 14:08:04 -Finished Spring Data repository scanning in 45ms. Found 0 repository interfaces.
2020-06-17 14:08:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-17 14:08:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-17 14:08:04 -Finished Spring Data repository scanning in 36ms. Found 0 repository interfaces.
2020-06-17 14:08:05 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$663ee0d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-17 14:08:05 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$60c2c574] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-17 14:08:05 -Tomcat initialized with port(s): 8080 (http)
2020-06-17 14:08:05 -Initializing ProtocolHandler ["http-nio-8080"]
2020-06-17 14:08:05 -Starting service [Tomcat]
2020-06-17 14:08:05 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-06-17 14:08:05 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;D:\360Downloads\apache-maven-3.6.1\apache-maven-3.6.1\bin;"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;";;C:\Program Files\python;C:\Program Files\python\Scripts;;D:\BtSoft\panel\script;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-06-17 14:08:05 -Initializing Spring embedded WebApplicationContext
2020-06-17 14:08:05 -Root WebApplicationContext: initialization completed in 1976 ms
2020-06-17 14:08:05 -Filter xssFilter was not registered (disabled)
2020-06-17 14:08:06 -HikariPool-1 - Starting...
2020-06-17 14:08:06 -HikariPool-1 - Start completed.
2020-06-17 14:08:06 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-06-17 14:08:06 -HHH000412: Hibernate Core {5.3.7.Final}
2020-06-17 14:08:06 -HHH000206: hibernate.properties not found
2020-06-17 14:08:06 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-06-17 14:08:06 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-06-17 14:08:06 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-06-17 14:08:07 -Using default implementation for ThreadExecutor
2020-06-17 14:08:07 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-06-17 14:08:07 -Quartz Scheduler v.2.3.0 created.
2020-06-17 14:08:07 -RAMJobStore initialized.
2020-06-17 14:08:07 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-06-17 14:08:07 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-06-17 14:08:07 -Quartz scheduler version: 2.3.0
2020-06-17 14:08:07 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4cae66a8
2020-06-17 14:08:07 -STAET TaskExecutorConfig
2020-06-17 14:08:07 -Initializing ExecutorService
2020-06-17 14:08:07 -Initializing ExecutorService 'getAsyncExecutor'
2020-06-17 14:08:08 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-06-17 14:08:08 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-06-17 14:08:08 -Initializing ExecutorService 'taskScheduler'
2020-06-17 14:08:08 -Starting Quartz Scheduler now
2020-06-17 14:08:08 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-06-17 14:08:08 -Starting ProtocolHandler ["http-nio-8080"]
2020-06-17 14:08:08 -Using a shared selector for servlet write/read
2020-06-17 14:08:08 -Tomcat started on port(s): 8080 (http) with context path ''
2020-06-17 14:08:08 -Started LongEcologicalApplication in 5.39 seconds (JVM running for 6.281)
2020-06-17 14:16:42 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-17 14:16:42 -Initializing Servlet 'dispatcherServlet'
2020-06-17 14:16:42 -Completed initialization in 16 ms
2020-06-17 14:16:42 -此处进行解密+验签+身份验证
2020-06-17 14:16:42 -此处进行解密+验签+身份验证
2020-06-17 14:16:42 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-06-17 14:16:43 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-06-17 14:16:43 -Starting without optional epoll library
2020-06-17 14:16:43 -Starting without optional kqueue library
2020-06-17 14:16:43 -解密：
2020-06-17 14:16:43 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-17 14:16:43 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-17 14:16:43 -==> Parameters: 04(String), 04(String)
2020-06-17 14:16:43 -<==      Total: 1
2020-06-17 14:16:43 -耗时 : 99
2020-06-17 14:16:44 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-06-17 14:16:44 -耗时 : 1119
2020-06-17 14:16:44 -此处进行解密+验签+身份验证
2020-06-17 14:16:44 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"3A515D20743080C485215B1DE8634278","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|1L1AV9E9OK7A7LSAQZZO95OBV09VTPSK"}
2020-06-17 14:16:44 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-17 14:16:44 -token值=======181|1L1AV9E9OK7A7LSAQZZO95OBV09VTPSK
2020-06-17 14:16:44 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-06-17 14:16:44 -==> Parameters: 181(String)
2020-06-17 14:16:44 -<==      Total: 1
2020-06-17 14:16:44 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-06-17 14:16:44 -==> Parameters: 26(String)
2020-06-17 14:16:44 -<==      Total: 1
2020-06-17 14:16:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-17 14:16:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-17 14:16:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-17 14:16:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-17 14:16:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-17 14:16:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-17 14:16:44 -耗时 : 50
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-17 14:16:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-17 14:16:47 -==> Parameters: 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -耗时 : 9
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 14:16:47 -解密：
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 14:16:47 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-17 14:16:47 -==> Parameters: 01(String), 01(String)
2020-06-17 14:16:47 -<==      Total: 4
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-06-17 14:16:47 -耗时 : 4
2020-06-17 14:16:47 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-06-17 14:16:47 -==> Parameters: 181(String)
2020-06-17 14:16:47 -<==      Total: 2
2020-06-17 14:16:47 -耗时 : 20
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-17 14:16:47 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-06-17 14:16:47 -==> Parameters: 
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-17 14:16:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-17 14:16:47 -==> Parameters: 181(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 3
2020-06-17 14:16:47 -耗时 : 10
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-17 14:16:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-17 14:16:47 -==> Parameters: 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -耗时 : 3
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 2
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-17 14:16:47 -此处进行解密+验签+身份验证
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 14:16:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-17 14:16:47 -<==    Updates: 2
2020-06-17 14:16:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-17 14:16:47 -==> Parameters: 181(String), 181(String)
2020-06-17 14:16:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-17 14:16:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-17 14:16:47 -==> Parameters: 181(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: recallFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 2
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-17 14:16:47 -<==    Updates: 2
2020-06-17 14:16:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-17 14:16:47 -==> Parameters: 181(String), 181(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-17 14:16:47 -==> Parameters: 
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: recallFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: collegeFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-17 14:16:47 -==> Parameters: 
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: 181(String), 181(String)
2020-06-17 14:16:47 -==> Parameters: collegeFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: cardFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-17 14:16:47 -==> Parameters: 181(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: cardFlag(String), 181(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: appImgFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 1
2020-06-17 14:16:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-17 14:16:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-17 14:16:47 -<==      Total: 39
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: cashFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 0
2020-06-17 14:16:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-17 14:16:47 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: appImgFlag(String), 181(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -耗时 : 159
2020-06-17 14:16:47 -<==      Total: 39
2020-06-17 14:16:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-17 14:16:47 -==> Parameters: cashFlag(String), 181(String)
2020-06-17 14:16:47 -<==      Total: 0
2020-06-17 14:16:47 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-17 14:16:47 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-17 14:16:47 -<==    Updates: 1
2020-06-17 14:16:47 -耗时 : 87
2020-06-17 15:39:08 -此处进行解密+验签+身份验证
2020-06-17 15:39:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 15:39:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 15:39:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-06-17 15:39:08 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by sn 
2020-06-17 15:39:08 -==> Parameters: 181(String)
2020-06-17 15:39:08 -此处进行解密+验签+身份验证
2020-06-17 15:39:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 15:39:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 15:39:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-06-17 15:39:08 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-06-17 15:39:08 -==> Parameters: 181(String), 181(String)
2020-06-17 15:39:08 -<==      Total: 1288
2020-06-17 15:39:08 -耗时 : 735
2020-06-17 15:39:08 -<==      Total: 1611
2020-06-17 15:39:08 -耗时 : 864
2020-06-17 15:39:15 -此处进行解密+验签+身份验证
2020-06-17 15:39:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 15:39:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 15:39:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-06-17 15:39:15 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' AND pos_type is null order by sn 
2020-06-17 15:39:15 -==> Parameters: 181(String)
2020-06-17 15:39:16 -<==      Total: 966
2020-06-17 15:39:16 -耗时 : 158
2020-06-17 15:46:06 -此处进行解密+验签+身份验证
2020-06-17 15:46:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 15:46:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 15:46:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-06-17 15:46:06 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by sn 
2020-06-17 15:46:06 -==> Parameters: 181(String)
2020-06-17 15:46:06 -<==      Total: 1288
2020-06-17 15:46:06 -耗时 : 206
2020-06-17 15:46:07 -此处进行解密+验签+身份验证
2020-06-17 15:46:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 15:46:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 15:46:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-06-17 15:46:07 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' AND pos_type is null order by sn 
2020-06-17 15:46:07 -==> Parameters: 181(String)
2020-06-17 15:46:07 -<==      Total: 966
2020-06-17 15:46:07 -耗时 : 104
2020-06-17 16:03:42 -此处进行解密+验签+身份验证
2020-06-17 16:03:42 -此处进行解密+验签+身份验证
2020-06-17 16:03:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:03:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:03:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:03:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:03:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-06-17 16:03:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-06-17 16:03:42 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-06-17 16:03:42 -==> Parameters: 181(String)
2020-06-17 16:03:43 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-06-17 16:03:43 -==> Parameters: 181(String), 00000302J8NL01087408(String)
2020-06-17 16:03:43 -<==      Total: 144
2020-06-17 16:03:43 -耗时 : 47
2020-06-17 16:03:43 -<==      Total: 1
2020-06-17 16:03:43 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-06-17 16:03:43 -==> Parameters: 
2020-06-17 16:03:43 -<==      Total: 101
2020-06-17 16:03:43 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-06-17 16:03:43 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 16:03:43 -<==      Total: 1
2020-06-17 16:03:43 -耗时 : 725
2020-06-17 16:30:07 -此处进行解密+验签+身份验证
2020-06-17 16:30:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:30:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:30:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-06-17 16:30:07 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-06-17 16:30:07 -==> Parameters: 181(String)
2020-06-17 16:30:07 -此处进行解密+验签+身份验证
2020-06-17 16:30:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:30:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:30:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-06-17 16:30:07 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-06-17 16:30:07 -==> Parameters: 181(String), 00000302J8NL01087408(String)
2020-06-17 16:30:07 -<==      Total: 144
2020-06-17 16:30:07 -耗时 : 45
2020-06-17 16:30:07 -<==      Total: 1
2020-06-17 16:30:07 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-06-17 16:30:07 -==> Parameters: 
2020-06-17 16:30:07 -<==      Total: 101
2020-06-17 16:30:07 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-06-17 16:30:07 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 16:30:07 -<==      Total: 1
2020-06-17 16:30:07 -耗时 : 179
2020-06-17 16:33:12 -Starting LongEcologicalApplication on PC-201905161910 with PID 6100 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-06-17 16:33:12 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-06-17 16:33:12 -No active profile set, falling back to default profiles: default
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'userMapper' and 'com.example.longecological.mapper.user.UserMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'userRoleMapper' and 'com.example.longecological.mapper.user.UserRoleMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 16:33:13 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-17 16:33:13 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-17 16:33:13 -Finished Spring Data repository scanning in 34ms. Found 0 repository interfaces.
2020-06-17 16:33:13 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-17 16:33:13 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-17 16:33:13 -Finished Spring Data repository scanning in 19ms. Found 0 repository interfaces.
2020-06-17 16:33:13 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$1e1a8270] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-17 16:33:13 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$189e6710] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-17 16:33:14 -Tomcat initialized with port(s): 8080 (http)
2020-06-17 16:33:14 -Initializing ProtocolHandler ["http-nio-8080"]
2020-06-17 16:33:14 -Starting service [Tomcat]
2020-06-17 16:33:14 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-06-17 16:33:14 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;D:\360Downloads\apache-maven-3.6.1\apache-maven-3.6.1\bin;"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;";;C:\Program Files\python;C:\Program Files\python\Scripts;;D:\BtSoft\panel\script;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-06-17 16:33:14 -Initializing Spring embedded WebApplicationContext
2020-06-17 16:33:14 -Root WebApplicationContext: initialization completed in 1793 ms
2020-06-17 16:33:14 -Filter xssFilter was not registered (disabled)
2020-06-17 16:33:14 -HikariPool-1 - Starting...
2020-06-17 16:33:14 -HikariPool-1 - Start completed.
2020-06-17 16:33:15 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-06-17 16:33:15 -HHH000412: Hibernate Core {5.3.7.Final}
2020-06-17 16:33:15 -HHH000206: hibernate.properties not found
2020-06-17 16:33:15 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-06-17 16:33:15 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-06-17 16:33:15 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-06-17 16:33:16 -Using default implementation for ThreadExecutor
2020-06-17 16:33:16 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-06-17 16:33:16 -Quartz Scheduler v.2.3.0 created.
2020-06-17 16:33:16 -RAMJobStore initialized.
2020-06-17 16:33:16 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-06-17 16:33:16 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-06-17 16:33:16 -Quartz scheduler version: 2.3.0
2020-06-17 16:33:16 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@511d568f
2020-06-17 16:33:16 -STAET TaskExecutorConfig
2020-06-17 16:33:16 -Initializing ExecutorService
2020-06-17 16:33:16 -Initializing ExecutorService 'getAsyncExecutor'
2020-06-17 16:33:16 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-06-17 16:33:17 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-06-17 16:33:17 -Initializing ExecutorService 'taskScheduler'
2020-06-17 16:33:17 -Starting Quartz Scheduler now
2020-06-17 16:33:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-06-17 16:33:17 -Starting ProtocolHandler ["http-nio-8080"]
2020-06-17 16:33:17 -Using a shared selector for servlet write/read
2020-06-17 16:33:17 -Tomcat started on port(s): 8080 (http) with context path ''
2020-06-17 16:33:17 -Started LongEcologicalApplication in 5.674 seconds (JVM running for 7.069)
2020-06-17 16:34:49 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-17 16:34:49 -Initializing Servlet 'dispatcherServlet'
2020-06-17 16:34:49 -Completed initialization in 17 ms
2020-06-17 16:34:49 -此处进行解密+验签+身份验证
2020-06-17 16:34:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:34:50 -Starting without optional epoll library
2020-06-17 16:34:50 -Starting without optional kqueue library
2020-06-17 16:34:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:34:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-06-17 16:34:50 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by sn 
2020-06-17 16:34:50 -==> Parameters: 181(String)
2020-06-17 16:34:50 -<==      Total: 1288
2020-06-17 16:34:50 -耗时 : 192
2020-06-17 16:34:51 -此处进行解密+验签+身份验证
2020-06-17 16:34:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:34:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:34:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-06-17 16:34:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' AND pos_type is null order by sn 
2020-06-17 16:34:51 -==> Parameters: 181(String)
2020-06-17 16:34:51 -<==      Total: 966
2020-06-17 16:34:51 -耗时 : 102
2020-06-17 16:35:03 -此处进行解密+验签+身份验证
2020-06-17 16:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-06-17 16:35:03 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-06-17 16:35:03 -==> Parameters: 181(String)
2020-06-17 16:35:03 -<==      Total: 144
2020-06-17 16:35:03 -耗时 : 29
2020-06-17 16:35:03 -此处进行解密+验签+身份验证
2020-06-17 16:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 16:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 16:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-06-17 16:35:22 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-06-17 16:35:22 -==> Parameters: 181(String), 00000302J8NL01087408(String)
2020-06-17 16:35:22 -<==      Total: 1
2020-06-17 16:35:22 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-06-17 16:35:22 -==> Parameters: 
2020-06-17 16:35:22 -<==      Total: 101
2020-06-17 16:35:22 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-06-17 16:35:22 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 16:35:22 -<==      Total: 1
2020-06-17 16:35:31 -耗时 : 27480
2020-06-17 17:22:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-06-17 17:22:44 -Shutting down ExecutorService 'taskScheduler'
2020-06-17 17:22:44 -Shutting down ExecutorService 'getAsyncExecutor'
2020-06-17 17:22:44 -Shutting down Quartz Scheduler
2020-06-17 17:22:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-06-17 17:22:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-06-17 17:22:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-06-17 17:22:44 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-06-17 17:22:44 -HikariPool-1 - Shutdown initiated...
2020-06-17 17:22:44 -HikariPool-1 - Shutdown completed.
2020-06-17 17:23:09 -Starting LongEcologicalApplication on PC-201905161910 with PID 18780 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-06-17 17:23:09 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-06-17 17:23:09 -No active profile set, falling back to default profiles: default
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'userMapper' and 'com.example.longecological.mapper.user.UserMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'userRoleMapper' and 'com.example.longecological.mapper.user.UserRoleMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-17 17:23:10 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-17 17:23:10 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-17 17:23:10 -Finished Spring Data repository scanning in 38ms. Found 0 repository interfaces.
2020-06-17 17:23:10 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-17 17:23:10 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-17 17:23:10 -Finished Spring Data repository scanning in 18ms. Found 0 repository interfaces.
2020-06-17 17:23:10 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$2b10c98d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-17 17:23:10 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2594ae2d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-17 17:23:11 -Tomcat initialized with port(s): 8080 (http)
2020-06-17 17:23:11 -Initializing ProtocolHandler ["http-nio-8080"]
2020-06-17 17:23:11 -Starting service [Tomcat]
2020-06-17 17:23:11 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-06-17 17:23:11 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;D:\360Downloads\apache-maven-3.6.1\apache-maven-3.6.1\bin;"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;";;C:\Program Files\python;C:\Program Files\python\Scripts;;D:\BtSoft\panel\script;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-06-17 17:23:11 -Initializing Spring embedded WebApplicationContext
2020-06-17 17:23:11 -Root WebApplicationContext: initialization completed in 2314 ms
2020-06-17 17:23:11 -Filter xssFilter was not registered (disabled)
2020-06-17 17:23:12 -HikariPool-1 - Starting...
2020-06-17 17:23:12 -HikariPool-1 - Start completed.
2020-06-17 17:23:12 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-06-17 17:23:12 -HHH000412: Hibernate Core {5.3.7.Final}
2020-06-17 17:23:12 -HHH000206: hibernate.properties not found
2020-06-17 17:23:12 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-06-17 17:23:12 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-06-17 17:23:12 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-06-17 17:23:13 -Using default implementation for ThreadExecutor
2020-06-17 17:23:13 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-06-17 17:23:13 -Quartz Scheduler v.2.3.0 created.
2020-06-17 17:23:13 -RAMJobStore initialized.
2020-06-17 17:23:13 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-06-17 17:23:13 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-06-17 17:23:13 -Quartz scheduler version: 2.3.0
2020-06-17 17:23:13 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@309e3f34
2020-06-17 17:23:13 -STAET TaskExecutorConfig
2020-06-17 17:23:13 -Initializing ExecutorService
2020-06-17 17:23:13 -Initializing ExecutorService 'getAsyncExecutor'
2020-06-17 17:23:14 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-06-17 17:23:14 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-06-17 17:23:14 -Initializing ExecutorService 'taskScheduler'
2020-06-17 17:23:15 -Starting Quartz Scheduler now
2020-06-17 17:23:15 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-06-17 17:23:15 -Starting ProtocolHandler ["http-nio-8080"]
2020-06-17 17:23:15 -Using a shared selector for servlet write/read
2020-06-17 17:23:15 -Tomcat started on port(s): 8080 (http) with context path ''
2020-06-17 17:23:15 -Started LongEcologicalApplication in 6.79 seconds (JVM running for 7.941)
2020-06-17 17:24:00 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-17 17:24:00 -Initializing Servlet 'dispatcherServlet'
2020-06-17 17:24:00 -Completed initialization in 16 ms
2020-06-17 17:24:01 -此处进行解密+验签+身份验证
2020-06-17 17:24:01 -此处进行解密+验签+身份验证
2020-06-17 17:24:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 17:24:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 17:24:01 -Starting without optional epoll library
2020-06-17 17:24:01 -Starting without optional kqueue library
2020-06-17 17:24:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 17:24:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 17:24:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-06-17 17:24:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-06-17 17:24:01 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-06-17 17:24:01 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-06-17 17:24:01 -==> Parameters: 181(String), 00000302J8NL01087408(String)
2020-06-17 17:24:01 -==> Parameters: 181(String)
2020-06-17 17:24:01 -<==      Total: 144
2020-06-17 17:24:01 -耗时 : 121
2020-06-17 17:24:01 -<==      Total: 1
2020-06-17 17:24:01 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-06-17 17:24:01 -==> Parameters: 
2020-06-17 17:24:01 -<==      Total: 101
2020-06-17 17:24:01 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-06-17 17:24:01 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 17:24:01 -<==      Total: 1
2020-06-17 17:24:05 -==>  Preparing: select policy_id,policy_name from t_sys_pos_policy_info where sn=? and module_type=2 
2020-06-17 17:24:05 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 17:24:05 -<==      Total: 1
2020-06-17 17:24:14 -==>  Preparing: select policy_id,policy_name from t_sys_pos_policy_info where sn=? and module_type=3 
2020-06-17 17:24:14 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 17:24:14 -<==      Total: 2
2020-06-17 17:24:57 -耗时 : 55653
2020-06-17 17:25:10 -此处进行解密+验签+身份验证
2020-06-17 17:25:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 17:25:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 17:25:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-06-17 17:25:10 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by sn 
2020-06-17 17:25:10 -==> Parameters: 181(String)
2020-06-17 17:25:10 -<==      Total: 1288
2020-06-17 17:25:10 -耗时 : 110
2020-06-17 17:25:11 -此处进行解密+验签+身份验证
2020-06-17 17:25:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 17:25:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 17:25:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-06-17 17:25:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' AND pos_type is null order by sn 
2020-06-17 17:25:11 -==> Parameters: 181(String)
2020-06-17 17:25:11 -<==      Total: 966
2020-06-17 17:25:11 -耗时 : 136
2020-06-17 17:25:21 -此处进行解密+验签+身份验证
2020-06-17 17:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 17:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 17:25:21 -此处进行解密+验签+身份验证
2020-06-17 17:25:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-06-17 17:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-17 17:25:21 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-06-17 17:25:21 -==> Parameters: 181(String), 00000302J8NL01087408(String)
2020-06-17 17:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-17 17:25:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-06-17 17:25:21 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-06-17 17:25:21 -==> Parameters: 181(String)
2020-06-17 17:25:21 -<==      Total: 1
2020-06-17 17:25:21 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-06-17 17:25:21 -==> Parameters: 
2020-06-17 17:25:21 -<==      Total: 101
2020-06-17 17:25:21 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-06-17 17:25:21 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 17:25:21 -<==      Total: 1
2020-06-17 17:25:21 -==>  Preparing: select policy_id,policy_name from t_sys_pos_policy_info where sn=? and module_type=2 
2020-06-17 17:25:21 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 17:25:21 -<==      Total: 1
2020-06-17 17:25:21 -==>  Preparing: select policy_id,policy_name from t_sys_pos_policy_info where sn=? and module_type=3 
2020-06-17 17:25:21 -==> Parameters: 00000302J8NL01087408(String)
2020-06-17 17:25:21 -<==      Total: 2
2020-06-17 17:25:21 -耗时 : 55
2020-06-17 17:25:21 -<==      Total: 144
2020-06-17 17:25:21 -耗时 : 79
2020-06-17 21:02:34 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-06-17 21:02:34 -Shutting down ExecutorService 'taskScheduler'
2020-06-17 21:02:34 -Shutting down ExecutorService 'getAsyncExecutor'
2020-06-17 21:02:34 -Shutting down Quartz Scheduler
2020-06-17 21:02:34 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-06-17 21:02:34 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-06-17 21:02:34 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-06-17 21:02:34 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-06-17 21:02:34 -HikariPool-1 - Shutdown initiated...
2020-06-17 21:02:34 -HikariPool-1 - Shutdown completed.
