2020-03-16 10:06:15 -Starting LongEcologicalApplication on PC-201905161910 with PID 20744 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 10:06:15 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 10:06:15 -No active profile set, falling back to default profiles: default
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 10:06:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 10:06:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 10:06:16 -Finished Spring Data repository scanning in 79ms. Found 0 repository interfaces.
2020-03-16 10:06:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 10:06:17 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 10:06:17 -Finished Spring Data repository scanning in 50ms. Found 0 repository interfaces.
2020-03-16 10:06:17 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c3b567c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 10:06:17 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$be394c68] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 10:06:17 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 10:06:17 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 10:06:17 -Starting service [Tomcat]
2020-03-16 10:06:17 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 10:06:17 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 10:06:18 -Initializing Spring embedded WebApplicationContext
2020-03-16 10:06:18 -Root WebApplicationContext: initialization completed in 2248 ms
2020-03-16 10:06:18 -Filter xssFilter was not registered (disabled)
2020-03-16 10:06:18 -HikariPool-1 - Starting...
2020-03-16 10:06:18 -HikariPool-1 - Start completed.
2020-03-16 10:06:18 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 10:06:18 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 10:06:18 -HHH000206: hibernate.properties not found
2020-03-16 10:06:19 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 10:06:19 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 10:06:19 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 10:06:20 -Using default implementation for ThreadExecutor
2020-03-16 10:06:20 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 10:06:20 -Quartz Scheduler v.2.3.0 created.
2020-03-16 10:06:20 -RAMJobStore initialized.
2020-03-16 10:06:20 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 10:06:20 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 10:06:20 -Quartz scheduler version: 2.3.0
2020-03-16 10:06:20 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4bf4680c
2020-03-16 10:06:20 -STAET TaskExecutorConfig
2020-03-16 10:06:20 -Initializing ExecutorService
2020-03-16 10:06:20 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 10:06:20 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 10:06:21 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 10:06:21 -Initializing ExecutorService 'taskScheduler'
2020-03-16 10:06:21 -Starting Quartz Scheduler now
2020-03-16 10:06:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 10:06:21 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 10:06:21 -Using a shared selector for servlet write/read
2020-03-16 10:06:21 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 10:06:21 -Started LongEcologicalApplication in 6.335 seconds (JVM running for 7.478)
2020-03-16 10:07:53 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 10:07:53 -Initializing Servlet 'dispatcherServlet'
2020-03-16 10:07:53 -Completed initialization in 15 ms
2020-03-16 10:07:53 -此处进行解密+验签+身份验证
2020-03-16 10:07:53 -此处进行解密+验签+身份验证
2020-03-16 10:07:53 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-16 10:07:53 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-16 10:07:53 -Starting without optional epoll library
2020-03-16 10:07:53 -Starting without optional kqueue library
2020-03-16 10:07:53 -解密：
2020-03-16 10:07:53 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 10:07:53 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 10:07:53 -==> Parameters: 04(String), 04(String)
2020-03-16 10:07:53 -<==      Total: 0
2020-03-16 10:07:53 -耗时 : 57
2020-03-16 10:07:53 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-16 10:07:53 -耗时 : 627
2020-03-16 10:07:53 -此处进行解密+验签+身份验证
2020-03-16 10:07:53 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"90A57B8E3635CC002809E064D50F2D26","version_no":"450000000145206","login_type":"token","token":"469|XYSQOMB8GN5BO9KI7TZP6UXQ4U8FYEYM","sys_user_account":""}
2020-03-16 10:07:53 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 10:07:53 -token值=======469|XYSQOMB8GN5BO9KI7TZP6UXQ4U8FYEYM
2020-03-16 10:07:53 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 10:07:53 -==> Parameters: 469(String)
2020-03-16 10:07:53 -<==      Total: 1
2020-03-16 10:07:53 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 10:07:53 -==> Parameters: 25(String)
2020-03-16 10:07:53 -<==      Total: 1
2020-03-16 10:07:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 10:07:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 10:07:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 10:07:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 10:07:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 10:07:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 10:07:53 -耗时 : 82
2020-03-16 10:07:57 -此处进行解密+验签+身份验证
2020-03-16 10:07:57 -此处进行解密+验签+身份验证
2020-03-16 10:07:57 -解密：
2020-03-16 10:07:57 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 10:07:57 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-16 10:07:57 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-16 10:07:57 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-16 10:07:57 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 10:07:57 -==> Parameters: 04(String), 04(String)
2020-03-16 10:07:57 -耗时 : 10
2020-03-16 10:07:57 -<==      Total: 0
2020-03-16 10:07:57 -耗时 : 22
2020-03-16 10:07:57 -此处进行解密+验签+身份验证
2020-03-16 10:07:57 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"90A57B8E3635CC002809E064D50F2D26","version_no":"450000000145206","login_type":"token","token":"469|XYSQOMB8GN5BO9KI7TZP6UXQ4U8FYEYM","sys_user_account":""}
2020-03-16 10:07:57 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 10:07:57 -token值=======469|XYSQOMB8GN5BO9KI7TZP6UXQ4U8FYEYM
2020-03-16 10:07:57 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 10:07:57 -==> Parameters: 469(String)
2020-03-16 10:07:57 -<==      Total: 1
2020-03-16 10:07:57 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 10:07:57 -==> Parameters: 25(String)
2020-03-16 10:07:57 -<==      Total: 1
2020-03-16 10:07:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 10:07:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 10:07:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 10:07:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 10:07:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 10:07:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 10:07:57 -耗时 : 76
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 10:08:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 10:08:02 -==> Parameters: 469(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -耗时 : 27
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -解密：
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 10:08:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 10:08:02 -==> Parameters: 01(String), 01(String)
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:02 -<==      Total: 9
2020-03-16 10:08:02 -耗时 : 16
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 10:08:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 10:08:02 -==> Parameters: 469(String)
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -耗时 : 16
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 10:08:02 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 10:08:02 -==> Parameters: 
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:02 -<==      Total: 3
2020-03-16 10:08:02 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:02 -耗时 : 16
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 10:08:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:02 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:02 -此处进行解密+验签+身份验证
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 10:08:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 10:08:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 10:08:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 10:08:02 -==> Parameters: 469(String)
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 10:08:02 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -耗时 : 22
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 10:08:02 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 10:08:02 -==> Parameters: 
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 10:08:02 -==> Parameters: 
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:02 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 10:08:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:02 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 10:08:02 -<==      Total: 1
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -耗时 : 221
2020-03-16 10:08:02 -<==    Updates: 2
2020-03-16 10:08:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:02 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 10:08:02 -<==      Total: 2
2020-03-16 10:08:02 -耗时 : 204
2020-03-16 10:08:11 -此处进行解密+验签+身份验证
2020-03-16 10:08:11 -此处进行解密+验签+身份验证
2020-03-16 10:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 10:08:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 10:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 10:08:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 10:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 10:08:11 -==> Parameters: 469(String)
2020-03-16 10:08:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:11 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 1
2020-03-16 10:08:11 -耗时 : 22
2020-03-16 10:08:11 -<==      Total: 1
2020-03-16 10:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:11 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 2
2020-03-16 10:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:11 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 10:08:11 -<==    Updates: 2
2020-03-16 10:08:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 10:08:11 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 1
2020-03-16 10:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:11 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 2
2020-03-16 10:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:11 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 10:08:11 -<==    Updates: 2
2020-03-16 10:08:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 10:08:11 -==> Parameters: 
2020-03-16 10:08:11 -<==      Total: 1
2020-03-16 10:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:11 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 2
2020-03-16 10:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:11 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 10:08:11 -<==    Updates: 2
2020-03-16 10:08:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:11 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 1
2020-03-16 10:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:11 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 2
2020-03-16 10:08:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:11 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 10:08:11 -<==    Updates: 2
2020-03-16 10:08:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:11 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 10:08:11 -<==      Total: 2
2020-03-16 10:08:11 -耗时 : 198
2020-03-16 10:08:12 -此处进行解密+验签+身份验证
2020-03-16 10:08:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:12 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-16 10:08:12 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-16 10:08:12 -==> Parameters: 469(String)
2020-03-16 10:08:12 -<==      Total: 10
2020-03-16 10:08:12 -耗时 : 42
2020-03-16 10:08:13 -此处进行解密+验签+身份验证
2020-03-16 10:08:13 -此处进行解密+验签+身份验证
2020-03-16 10:08:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:08:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:08:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 10:08:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 10:08:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 10:08:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 10:08:13 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 10:08:13 -==> Parameters: 469(String)
2020-03-16 10:08:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:13 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:13 -<==      Total: 1
2020-03-16 10:08:13 -耗时 : 21
2020-03-16 10:08:13 -<==      Total: 1
2020-03-16 10:08:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:13 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 10:08:13 -<==      Total: 2
2020-03-16 10:08:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:13 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 10:08:13 -<==    Updates: 2
2020-03-16 10:08:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 10:08:13 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:13 -<==      Total: 1
2020-03-16 10:08:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:13 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 10:08:13 -<==      Total: 2
2020-03-16 10:08:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:13 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 10:08:13 -<==    Updates: 2
2020-03-16 10:08:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 10:08:13 -==> Parameters: 
2020-03-16 10:08:13 -<==      Total: 1
2020-03-16 10:08:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:13 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 10:08:13 -<==      Total: 2
2020-03-16 10:08:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:13 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 10:08:13 -<==    Updates: 2
2020-03-16 10:08:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:08:13 -==> Parameters: 469(String), 469(String)
2020-03-16 10:08:14 -<==      Total: 1
2020-03-16 10:08:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:14 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 10:08:14 -<==      Total: 2
2020-03-16 10:08:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:08:14 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 10:08:14 -<==    Updates: 2
2020-03-16 10:08:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:08:14 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 10:08:14 -<==      Total: 2
2020-03-16 10:08:14 -耗时 : 205
2020-03-16 10:09:55 -此处进行解密+验签+身份验证
2020-03-16 10:09:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:09:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:09:55 -此处进行解密+验签+身份验证
2020-03-16 10:09:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:09:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:09:55 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-16 10:09:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-16 10:09:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-16 10:09:55 -==> Parameters: 202003(String), 469(String)
2020-03-16 10:09:55 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-16 10:09:55 -==> Parameters: 469(String)
2020-03-16 10:09:55 -<==      Total: 1
2020-03-16 10:09:55 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-16 10:09:55 -==> Parameters: 469(String)
2020-03-16 10:09:55 -<==      Total: 1
2020-03-16 10:09:55 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-16 10:09:55 -==> Parameters: 469(String), 469(String)
2020-03-16 10:09:55 -<==      Total: 0
2020-03-16 10:09:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-16 10:09:55 -==> Parameters: 202003(String), 469(String)
2020-03-16 10:09:55 -<==      Total: 1
2020-03-16 10:09:55 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-16 10:09:55 -==> Parameters: 469(String)
2020-03-16 10:09:55 -<==      Total: 0
2020-03-16 10:09:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-16 10:09:55 -==> Parameters: 202003(String), 469(String)
2020-03-16 10:09:55 -<==      Total: 1
2020-03-16 10:09:55 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-16 10:09:55 -==> Parameters: 469(String)
2020-03-16 10:09:55 -<==      Total: 1
2020-03-16 10:09:55 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-16 10:09:55 -==> Parameters: 469(String), 469(String)
2020-03-16 10:09:55 -<==      Total: 0
2020-03-16 10:09:55 -耗时 : 92
2020-03-16 10:09:55 -<==      Total: 1
2020-03-16 10:09:55 -耗时 : 103
2020-03-16 10:09:56 -此处进行解密+验签+身份验证
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:09:56 -此处进行解密+验签+身份验证
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:09:56 -此处进行解密+验签+身份验证
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:09:56 -此处进行解密+验签+身份验证
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:09:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:09:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 10:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:09:56 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-16 10:09:56 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 10:09:56 -==> Parameters: 469(String)
2020-03-16 10:09:56 -==> Parameters: 469(String), 202003(String)
2020-03-16 10:09:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 10:09:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-16 10:09:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 10:09:57 -==> Parameters: 469(String), 202003(String)
2020-03-16 10:09:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-16 10:09:57 -==> Parameters: 469(String), 202003(String)
2020-03-16 10:09:57 -<==      Total: 1
2020-03-16 10:09:57 -耗时 : 20
2020-03-16 10:09:57 -<==      Total: 1
2020-03-16 10:09:57 -耗时 : 24
2020-03-16 10:09:57 -<==      Total: 1
2020-03-16 10:09:57 -耗时 : 20
2020-03-16 10:09:57 -<==      Total: 1
2020-03-16 10:09:57 -耗时 : 14
2020-03-16 10:10:06 -此处进行解密+验签+身份验证
2020-03-16 10:10:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:10:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:10:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 10:10:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 10:10:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 10:10:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:10:06 -==> Parameters: 469(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 1
2020-03-16 10:10:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:06 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 2
2020-03-16 10:10:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 10:10:06 -<==    Updates: 2
2020-03-16 10:10:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 10:10:06 -==> Parameters: 469(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 1
2020-03-16 10:10:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:06 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 2
2020-03-16 10:10:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 10:10:06 -<==    Updates: 2
2020-03-16 10:10:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 10:10:06 -==> Parameters: 
2020-03-16 10:10:06 -<==      Total: 1
2020-03-16 10:10:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:06 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 2
2020-03-16 10:10:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:06 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 10:10:06 -<==    Updates: 2
2020-03-16 10:10:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:10:06 -==> Parameters: 469(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 1
2020-03-16 10:10:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:06 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 2
2020-03-16 10:10:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 10:10:06 -<==    Updates: 2
2020-03-16 10:10:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:06 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 10:10:06 -<==      Total: 2
2020-03-16 10:10:06 -耗时 : 197
2020-03-16 10:10:43 -此处进行解密+验签+身份验证
2020-03-16 10:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:10:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-16 10:10:43 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-16 10:10:43 -==> Parameters: 1(String), 469(String), collegeFlag(String)
2020-03-16 10:10:43 -<==    Updates: 2
2020-03-16 10:10:43 -耗时 : 23
2020-03-16 10:10:43 -此处进行解密+验签+身份验证
2020-03-16 10:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:10:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:10:43 -请求地址 : http://192.168.191.1:8080/api/sys/moneylockercollege/getMoneyLockerCollegeList
2020-03-16 10:10:43 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,cacheKey:zfpay_sys_money_locker_college_list_0
2020-03-16 10:10:43 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,has cacheKey:zfpay_sys_money_locker_college_list_0 , return
2020-03-16 10:10:43 -耗时 : 9
2020-03-16 10:10:48 -此处进行解密+验签+身份验证
2020-03-16 10:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:10:48 -此处进行解密+验签+身份验证
2020-03-16 10:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 10:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 10:10:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 10:10:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 10:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 10:10:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 10:10:48 -==> Parameters: 469(String)
2020-03-16 10:10:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 10:10:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:10:48 -==> Parameters: 469(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 1
2020-03-16 10:10:48 -耗时 : 19
2020-03-16 10:10:48 -<==      Total: 1
2020-03-16 10:10:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:48 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 2
2020-03-16 10:10:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:48 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 10:10:48 -<==    Updates: 2
2020-03-16 10:10:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 10:10:48 -==> Parameters: 469(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 1
2020-03-16 10:10:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:48 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 2
2020-03-16 10:10:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:48 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 10:10:48 -<==    Updates: 2
2020-03-16 10:10:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 10:10:48 -==> Parameters: 
2020-03-16 10:10:48 -<==      Total: 1
2020-03-16 10:10:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:48 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 2
2020-03-16 10:10:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:48 -==> Parameters: 0(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 10:10:48 -<==    Updates: 2
2020-03-16 10:10:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 10:10:48 -==> Parameters: 469(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 1
2020-03-16 10:10:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:48 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 2
2020-03-16 10:10:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 10:10:48 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 10:10:48 -<==    Updates: 2
2020-03-16 10:10:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 10:10:48 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 10:10:48 -<==      Total: 2
2020-03-16 10:10:48 -耗时 : 195
2020-03-16 10:11:45 -此处进行解密+验签+身份验证
2020-03-16 10:11:45 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 10:11:45 -token值=======469|XYSQOMB8GN5BO9KI7TZP6UXQ4U8FYEYM
2020-03-16 10:11:45 -耗时 : 19
2020-03-16 11:09:15 -此处进行解密+验签+身份验证
2020-03-16 11:09:15 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-16 11:09:15 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 11:09:15 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 11:09:15 -==> Parameters: 15019499979(String)
2020-03-16 11:09:15 -<==      Total: 1
2020-03-16 11:09:15 -UserInfoServiceImpl -- userLoginOper方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.config.redis.RedisUtils.exists(RedisUtils.java:104)
	at com.example.longecological.config.redis.RedisUtils.remove(RedisUtils.java:92)
	at com.example.longecological.service.common.impl.VerifyTokenServiceImpl.setToken(VerifyTokenServiceImpl.java:59)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl.userLoginOper(UserLoginServiceImpl.java:110)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl.userLogin(UserLoginServiceImpl.java:75)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl$$FastClassBySpringCGLIB$$b1492584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl$$EnhancerBySpringCGLIB$$b4500073.userLogin(<generated>)
	at com.example.longecological.controller.user.UserLoginController.userLogin(UserLoginController.java:39)
	at com.example.longecological.controller.user.UserLoginController$$FastClassBySpringCGLIB$$77717560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor103.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.user.UserLoginController$$EnhancerBySpringCGLIB$$b4adcf9b.userLogin(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-16 11:09:15 -耗时 : 37
2020-03-16 11:09:15 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-16 11:09:15 -Reconnected to 120.25.164.176:10379
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 11:09:22 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 11:09:22 -==> Parameters: 15019499979(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 11:09:22 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 110922(String), 469(Integer)
2020-03-16 11:09:22 -<==    Updates: 1
2020-03-16 11:09:22 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 11:09:22 -==> Parameters: 25(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 11:09:22 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 11:09:22 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 11:09:22 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 11:09:22 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 11:09:22 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 11:09:22 -耗时 : 90
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:09:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:09:22 -==> Parameters: 469(String)
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -耗时 : 8
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -解密：
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 11:09:22 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:22 -==> Parameters: 01(String), 01(String)
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:22 -<==      Total: 12
2020-03-16 11:09:22 -耗时 : 8
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:22 -此处进行解密+验签+身份验证
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 11:09:22 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 11:09:22 -==> Parameters: 469(String)
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -耗时 : 7
2020-03-16 11:09:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:09:22 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:09:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:09:22 -==> Parameters: 469(String)
2020-03-16 11:09:22 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:09:22 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 11:09:22 -==> Parameters: 
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -耗时 : 12
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:09:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:09:22 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 3
2020-03-16 11:09:22 -耗时 : 14
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:09:22 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:09:22 -==> Parameters: 
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:09:22 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:09:22 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:09:22 -==> Parameters: 
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -耗时 : 122
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:09:22 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 1
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:09:22 -<==    Updates: 2
2020-03-16 11:09:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:22 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:09:22 -<==      Total: 2
2020-03-16 11:09:22 -耗时 : 183
2020-03-16 11:09:25 -此处进行解密+验签+身份验证
2020-03-16 11:09:25 -此处进行解密+验签+身份验证
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:25 -此处进行解密+验签+身份验证
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:25 -此处进行解密+验签+身份验证
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-16 11:09:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:09:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-16 11:09:25 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-16 11:09:25 -==> Parameters: 469(String)
2020-03-16 11:09:25 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-16 11:09:25 -==> Parameters: 469(String)
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:25 -<==      Total: 0
2020-03-16 11:09:25 -耗时 : 13
2020-03-16 11:09:25 -<==      Total: 0
2020-03-16 11:09:25 -耗时 : 9
2020-03-16 11:09:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:25 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-16 11:09:25 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:25 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-16 11:09:25 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:25 -<==      Total: 0
2020-03-16 11:09:25 -耗时 : 27
2020-03-16 11:09:25 -<==      Total: 0
2020-03-16 11:09:25 -耗时 : 38
2020-03-16 11:09:27 -此处进行解密+验签+身份验证
2020-03-16 11:09:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:28 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:09:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:28 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-16 11:09:28 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:28 -<==      Total: 0
2020-03-16 11:09:28 -耗时 : 23
2020-03-16 11:09:31 -此处进行解密+验签+身份验证
2020-03-16 11:09:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:09:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:31 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-16 11:09:31 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:31 -<==      Total: 0
2020-03-16 11:09:31 -耗时 : 22
2020-03-16 11:09:35 -此处进行解密+验签+身份验证
2020-03-16 11:09:35 -此处进行解密+验签+身份验证
2020-03-16 11:09:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:09:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:09:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:09:35 -==> Parameters: 469(String)
2020-03-16 11:09:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:35 -<==      Total: 1
2020-03-16 11:09:35 -耗时 : 11
2020-03-16 11:09:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:09:35 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 1
2020-03-16 11:09:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:35 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 2
2020-03-16 11:09:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:35 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:09:35 -<==    Updates: 2
2020-03-16 11:09:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:09:35 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 1
2020-03-16 11:09:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:35 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 2
2020-03-16 11:09:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:35 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:09:35 -<==    Updates: 2
2020-03-16 11:09:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:09:35 -==> Parameters: 
2020-03-16 11:09:35 -<==      Total: 1
2020-03-16 11:09:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:35 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 2
2020-03-16 11:09:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:35 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:09:35 -<==    Updates: 2
2020-03-16 11:09:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:09:35 -==> Parameters: 469(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 1
2020-03-16 11:09:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:35 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 2
2020-03-16 11:09:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:09:35 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:09:35 -<==    Updates: 2
2020-03-16 11:09:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:09:35 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:09:35 -<==      Total: 2
2020-03-16 11:09:35 -耗时 : 117
2020-03-16 11:09:36 -此处进行解密+验签+身份验证
2020-03-16 11:09:36 -此处进行解密+验签+身份验证
2020-03-16 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:37 -此处进行解密+验签+身份验证
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:37 -此处进行解密+验签+身份验证
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:37 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:37 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:37 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-16 11:09:37 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-16 11:09:37 -==> Parameters: 469(String)
2020-03-16 11:09:37 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:09:37 -<==      Total: 0
2020-03-16 11:09:37 -耗时 : 10
2020-03-16 11:09:37 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-16 11:09:37 -==> Parameters: 469(String)
2020-03-16 11:09:37 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-16 11:09:37 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-16 11:09:37 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:37 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:37 -<==      Total: 0
2020-03-16 11:09:37 -耗时 : 10
2020-03-16 11:09:37 -<==      Total: 0
2020-03-16 11:09:37 -耗时 : 30
2020-03-16 11:09:37 -<==      Total: 0
2020-03-16 11:09:37 -耗时 : 39
2020-03-16 11:09:39 -此处进行解密+验签+身份验证
2020-03-16 11:09:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:39 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:09:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:39 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-16 11:09:39 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:39 -<==      Total: 0
2020-03-16 11:09:39 -耗时 : 23
2020-03-16 11:09:41 -此处进行解密+验签+身份验证
2020-03-16 11:09:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:41 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:09:41 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-16 11:09:41 -==> Parameters: 469(String)
2020-03-16 11:09:41 -<==      Total: 0
2020-03-16 11:09:41 -耗时 : 9
2020-03-16 11:09:43 -此处进行解密+验签+身份验证
2020-03-16 11:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:43 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:09:43 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type='epos' order by t.id desc limit 0,10 
2020-03-16 11:09:43 -==> Parameters: 469(String)
2020-03-16 11:09:43 -<==      Total: 0
2020-03-16 11:09:43 -耗时 : 11
2020-03-16 11:09:47 -此处进行解密+验签+身份验证
2020-03-16 11:09:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:09:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:09:47 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-16 11:09:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:09:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:09:47 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-16 11:09:47 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:09:47 -<==      Total: 0
2020-03-16 11:09:47 -耗时 : 21
2020-03-16 11:10:04 -此处进行解密+验签+身份验证
2020-03-16 11:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:04 -此处进行解密+验签+身份验证
2020-03-16 11:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:10:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:10:04 -==> Parameters: 469(String)
2020-03-16 11:10:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:10:04 -<==      Total: 1
2020-03-16 11:10:04 -耗时 : 11
2020-03-16 11:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:10:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:10:04 -==> Parameters: 469(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 1
2020-03-16 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:04 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 2
2020-03-16 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:04 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:10:04 -<==    Updates: 2
2020-03-16 11:10:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:10:04 -==> Parameters: 469(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 1
2020-03-16 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:04 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 2
2020-03-16 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:04 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:10:04 -<==    Updates: 2
2020-03-16 11:10:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:10:04 -==> Parameters: 
2020-03-16 11:10:04 -<==      Total: 1
2020-03-16 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:04 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 2
2020-03-16 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:04 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:10:04 -<==    Updates: 2
2020-03-16 11:10:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:10:04 -==> Parameters: 469(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 1
2020-03-16 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:04 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 2
2020-03-16 11:10:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:04 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:10:04 -<==    Updates: 2
2020-03-16 11:10:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:04 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:10:04 -<==      Total: 2
2020-03-16 11:10:04 -耗时 : 116
2020-03-16 11:10:12 -此处进行解密+验签+身份验证
2020-03-16 11:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:12 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-16 11:10:12 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-16 11:10:12 -==> Parameters: 469(String)
2020-03-16 11:10:12 -<==      Total: 10
2020-03-16 11:10:12 -耗时 : 10
2020-03-16 11:10:14 -此处进行解密+验签+身份验证
2020-03-16 11:10:14 -此处进行解密+验签+身份验证
2020-03-16 11:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:10:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:10:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:10:14 -==> Parameters: 469(String)
2020-03-16 11:10:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:10:14 -<==      Total: 1
2020-03-16 11:10:14 -耗时 : 10
2020-03-16 11:10:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:10:14 -==> Parameters: 469(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 1
2020-03-16 11:10:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:14 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 2
2020-03-16 11:10:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:14 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:10:14 -<==    Updates: 2
2020-03-16 11:10:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:10:14 -==> Parameters: 469(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 1
2020-03-16 11:10:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:14 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 2
2020-03-16 11:10:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:14 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:10:14 -<==    Updates: 2
2020-03-16 11:10:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:10:14 -==> Parameters: 
2020-03-16 11:10:14 -<==      Total: 1
2020-03-16 11:10:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:14 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 2
2020-03-16 11:10:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:14 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:10:14 -<==    Updates: 2
2020-03-16 11:10:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:10:14 -==> Parameters: 469(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 1
2020-03-16 11:10:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:14 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 2
2020-03-16 11:10:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:10:14 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:10:14 -<==    Updates: 2
2020-03-16 11:10:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:10:14 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:10:14 -<==      Total: 2
2020-03-16 11:10:14 -耗时 : 119
2020-03-16 11:10:16 -此处进行解密+验签+身份验证
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:16 -此处进行解密+验签+身份验证
2020-03-16 11:10:16 -此处进行解密+验签+身份验证
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:16 -此处进行解密+验签+身份验证
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:10:16 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-16 11:10:16 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-16 11:10:16 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-16 11:10:16 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:10:16 -==> Parameters: 469(String)
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:10:16 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-16 11:10:16 -==> Parameters: 469(String)
2020-03-16 11:10:16 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:10:16 -<==      Total: 0
2020-03-16 11:10:16 -耗时 : 9
2020-03-16 11:10:16 -<==      Total: 0
2020-03-16 11:10:16 -耗时 : 15
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:10:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:10:16 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-16 11:10:16 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:10:16 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-16 11:10:16 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:10:16 -<==      Total: 0
2020-03-16 11:10:16 -耗时 : 30
2020-03-16 11:10:16 -<==      Total: 0
2020-03-16 11:10:16 -耗时 : 28
2020-03-16 11:17:13 -此处进行解密+验签+身份验证
2020-03-16 11:17:13 -此处进行解密+验签+身份验证
2020-03-16 11:17:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:17:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:17:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:17:13 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:17:13 -==> Parameters: 469(String)
2020-03-16 11:17:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:17:13 -<==      Total: 1
2020-03-16 11:17:13 -耗时 : 10
2020-03-16 11:17:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:17:13 -==> Parameters: 469(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 1
2020-03-16 11:17:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:17:13 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 2
2020-03-16 11:17:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:17:13 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:17:13 -<==    Updates: 2
2020-03-16 11:17:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:17:13 -==> Parameters: 469(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 1
2020-03-16 11:17:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:17:13 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 2
2020-03-16 11:17:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:17:13 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:17:13 -<==    Updates: 2
2020-03-16 11:17:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:17:13 -==> Parameters: 
2020-03-16 11:17:13 -<==      Total: 1
2020-03-16 11:17:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:17:13 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 2
2020-03-16 11:17:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:17:13 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:17:13 -<==    Updates: 2
2020-03-16 11:17:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:17:13 -==> Parameters: 469(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 1
2020-03-16 11:17:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:17:13 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 2
2020-03-16 11:17:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:17:13 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:17:13 -<==    Updates: 2
2020-03-16 11:17:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:17:13 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:17:13 -<==      Total: 2
2020-03-16 11:17:13 -耗时 : 121
2020-03-16 11:17:17 -此处进行解密+验签+身份验证
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:17 -此处进行解密+验签+身份验证
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:17 -此处进行解密+验签+身份验证
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:17 -此处进行解密+验签+身份验证
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:17 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:17:17 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:17:17 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:17:17 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-16 11:17:17 -==> Parameters: 469(String)
2020-03-16 11:17:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:17:17 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-16 11:17:17 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-16 11:17:17 -==> Parameters: 469(String)
2020-03-16 11:17:17 -<==      Total: 0
2020-03-16 11:17:17 -耗时 : 13
2020-03-16 11:17:17 -<==      Total: 0
2020-03-16 11:17:17 -耗时 : 9
2020-03-16 11:17:17 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-16 11:17:17 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:17:17 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-16 11:17:17 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:17:17 -<==      Total: 0
2020-03-16 11:17:17 -耗时 : 28
2020-03-16 11:17:17 -<==      Total: 0
2020-03-16 11:17:17 -耗时 : 38
2020-03-16 11:17:19 -此处进行解密+验签+身份验证
2020-03-16 11:17:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:19 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:17:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:17:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:17:19 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-16 11:17:19 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:17:19 -<==      Total: 0
2020-03-16 11:17:19 -耗时 : 24
2020-03-16 11:17:21 -此处进行解密+验签+身份验证
2020-03-16 11:17:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-16 11:17:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:17:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:17:21 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-16 11:17:21 -==> Parameters: 25(String), 20200316(String)
2020-03-16 11:17:21 -<==      Total: 1
2020-03-16 11:17:21 -耗时 : 23
2020-03-16 11:17:24 -此处进行解密+验签+身份验证
2020-03-16 11:17:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:24 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityDetail
2020-03-16 11:17:24 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-16 11:17:24 -==> Parameters: 19(String)
2020-03-16 11:17:24 -<==      Total: 0
2020-03-16 11:17:24 -耗时 : 10
2020-03-16 11:17:26 -此处进行解密+验签+身份验证
2020-03-16 11:17:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:17:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:17:26 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposPartActivityInfo
2020-03-16 11:17:26 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-16 11:17:26 -==> Parameters: 19(String)
2020-03-16 11:17:26 -<==      Total: 0
2020-03-16 11:17:26 -耗时 : 9
2020-03-16 11:19:04 -此处进行解密+验签+身份验证
2020-03-16 11:19:04 -此处进行解密+验签+身份验证
2020-03-16 11:19:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:04 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-16 11:19:04 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-16 11:19:04 -==> Parameters: 469(String)
2020-03-16 11:19:04 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-16 11:19:04 -<==      Total: 0
2020-03-16 11:19:04 -耗时 : 11
2020-03-16 11:19:04 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-16 11:19:04 -==> Parameters: 469(String)
2020-03-16 11:19:04 -<==      Total: 0
2020-03-16 11:19:04 -耗时 : 16
2020-03-16 11:19:06 -此处进行解密+验签+身份验证
2020-03-16 11:19:06 -此处进行解密+验签+身份验证
2020-03-16 11:19:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:19:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:19:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:19:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:19:06 -==> Parameters: 469(String)
2020-03-16 11:19:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:19:06 -<==      Total: 1
2020-03-16 11:19:06 -耗时 : 9
2020-03-16 11:19:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:19:06 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 1
2020-03-16 11:19:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:06 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 2
2020-03-16 11:19:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:19:06 -<==    Updates: 2
2020-03-16 11:19:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:19:06 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 1
2020-03-16 11:19:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:06 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 2
2020-03-16 11:19:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:19:06 -<==    Updates: 2
2020-03-16 11:19:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:19:06 -==> Parameters: 
2020-03-16 11:19:06 -<==      Total: 1
2020-03-16 11:19:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:06 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 2
2020-03-16 11:19:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:06 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:19:06 -<==    Updates: 2
2020-03-16 11:19:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:19:06 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 1
2020-03-16 11:19:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:06 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 2
2020-03-16 11:19:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:19:06 -<==    Updates: 2
2020-03-16 11:19:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:06 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:19:06 -<==      Total: 2
2020-03-16 11:19:06 -耗时 : 129
2020-03-16 11:19:08 -此处进行解密+验签+身份验证
2020-03-16 11:19:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:08 -此处进行解密+验签+身份验证
2020-03-16 11:19:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 11:19:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 11:19:08 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 11:19:08 -==> Parameters: 469(String)
2020-03-16 11:19:08 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 11:19:08 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:08 -<==      Total: 98
2020-03-16 11:19:08 -耗时 : 42
2020-03-16 11:19:10 -此处进行解密+验签+身份验证
2020-03-16 11:19:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:10 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 11:19:10 -==> Parameters: 469(String)
2020-03-16 11:19:10 -<==      Total: 0
2020-03-16 11:19:10 -耗时 : 15
2020-03-16 11:19:11 -此处进行解密+验签+身份验证
2020-03-16 11:19:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 11:19:11 -==> Parameters: 469(String)
2020-03-16 11:19:11 -<==      Total: 0
2020-03-16 11:19:11 -耗时 : 14
2020-03-16 11:19:11 -此处进行解密+验签+身份验证
2020-03-16 11:19:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 11:19:11 -==> Parameters: 469(String)
2020-03-16 11:19:11 -<==      Total: 20
2020-03-16 11:19:11 -耗时 : 15
2020-03-16 11:19:12 -此处进行解密+验签+身份验证
2020-03-16 11:19:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 11:19:12 -==> Parameters: 469(String)
2020-03-16 11:19:12 -<==      Total: 20
2020-03-16 11:19:12 -耗时 : 14
2020-03-16 11:19:13 -此处进行解密+验签+身份验证
2020-03-16 11:19:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:13 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 11:19:13 -==> Parameters: 469(String)
2020-03-16 11:19:13 -<==      Total: 20
2020-03-16 11:19:13 -耗时 : 14
2020-03-16 11:19:14 -此处进行解密+验签+身份验证
2020-03-16 11:19:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 11:19:14 -==> Parameters: 469(String)
2020-03-16 11:19:14 -<==      Total: 0
2020-03-16 11:19:14 -耗时 : 21
2020-03-16 11:19:14 -此处进行解密+验签+身份验证
2020-03-16 11:19:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:19:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 11:19:14 -==> Parameters: 469(String)
2020-03-16 11:19:14 -<==      Total: 0
2020-03-16 11:19:14 -耗时 : 15
2020-03-16 11:19:21 -此处进行解密+验签+身份验证
2020-03-16 11:19:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:21 -此处进行解密+验签+身份验证
2020-03-16 11:19:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 11:19:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 11:19:21 -==> Parameters: 469(String)
2020-03-16 11:19:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:19:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:19:21 -<==      Total: 1
2020-03-16 11:19:21 -耗时 : 11
2020-03-16 11:19:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:19:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:19:21 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 1
2020-03-16 11:19:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:21 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 2
2020-03-16 11:19:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:19:21 -<==    Updates: 2
2020-03-16 11:19:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:19:21 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 1
2020-03-16 11:19:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:21 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 2
2020-03-16 11:19:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:19:21 -<==    Updates: 2
2020-03-16 11:19:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:19:21 -==> Parameters: 
2020-03-16 11:19:21 -<==      Total: 1
2020-03-16 11:19:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:21 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 2
2020-03-16 11:19:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:21 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:19:21 -<==    Updates: 2
2020-03-16 11:19:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:19:21 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 1
2020-03-16 11:19:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:21 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 2
2020-03-16 11:19:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:19:21 -<==    Updates: 2
2020-03-16 11:19:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:21 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:19:21 -<==      Total: 2
2020-03-16 11:19:21 -耗时 : 110
2020-03-16 11:19:22 -<==      Total: 4
2020-03-16 11:19:22 -耗时 : 13846
2020-03-16 11:19:23 -此处进行解密+验签+身份验证
2020-03-16 11:19:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:19:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:19:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 11:19:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 11:19:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 11:19:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:19:23 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 1
2020-03-16 11:19:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:23 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 2
2020-03-16 11:19:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:23 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 11:19:23 -<==    Updates: 2
2020-03-16 11:19:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 11:19:23 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 1
2020-03-16 11:19:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:23 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 2
2020-03-16 11:19:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:23 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 11:19:23 -<==    Updates: 2
2020-03-16 11:19:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 11:19:23 -==> Parameters: 
2020-03-16 11:19:23 -<==      Total: 1
2020-03-16 11:19:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:23 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 2
2020-03-16 11:19:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:23 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 11:19:23 -<==    Updates: 2
2020-03-16 11:19:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 11:19:23 -==> Parameters: 469(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 1
2020-03-16 11:19:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:23 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 2
2020-03-16 11:19:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 11:19:23 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 11:19:23 -<==    Updates: 2
2020-03-16 11:19:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 11:19:23 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 11:19:23 -<==      Total: 2
2020-03-16 11:19:23 -耗时 : 112
2020-03-16 11:26:16 -此处进行解密+验签+身份验证
2020-03-16 11:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:16 -此处进行解密+验签+身份验证
2020-03-16 11:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:16 -解密异常：{end_number=, token=469|L6UP0BJ91G2UDJCRLC5HHD2A9ZMS1EQS, start_number=, sign=72C8E80EE2EB099F6C8A6012ABD0D009}
2020-03-16 11:26:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 11:26:16 -耗时 : 0
2020-03-16 11:26:16 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-16 11:26:16 -Reconnected to 120.25.164.176:10379
2020-03-16 11:26:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3e1a8cef (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@403c7394 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7280f40e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@18976345 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3919c71 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2092ff44 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@55475fdc (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@76e9837a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7994fbc2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4e4b536b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 11:26:16 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 11:26:16 -==> Parameters: 469(String), 469(String)
2020-03-16 11:26:16 -<==      Total: 4
2020-03-16 11:26:16 -耗时 : 111
2020-03-16 11:26:18 -此处进行解密+验签+身份验证
2020-03-16 11:26:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:26:18 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 11:26:18 -==> Parameters: 469(String)
2020-03-16 11:26:18 -<==      Total: 10
2020-03-16 11:26:18 -耗时 : 28
2020-03-16 11:26:22 -此处进行解密+验签+身份验证
2020-03-16 11:26:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:22 -此处进行解密+验签+身份验证
2020-03-16 11:26:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 11:26:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 11:26:22 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 11:26:22 -==> Parameters: 469(String), MPOS(String)
2020-03-16 11:26:22 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 11:26:22 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-16 11:26:22 -<==      Total: 0
2020-03-16 11:26:22 -耗时 : 23
2020-03-16 11:26:22 -<==      Total: 0
2020-03-16 11:26:22 -耗时 : 24
2020-03-16 11:26:24 -此处进行解密+验签+身份验证
2020-03-16 11:26:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 11:26:24 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 11:26:24 -==> Parameters: 469(String), epos(String)
2020-03-16 11:26:24 -<==      Total: 1
2020-03-16 11:26:24 -耗时 : 21
2020-03-16 11:26:25 -此处进行解密+验签+身份验证
2020-03-16 11:26:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 11:26:25 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 11:26:25 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-16 11:26:25 -<==      Total: 0
2020-03-16 11:26:25 -耗时 : 22
2020-03-16 11:26:27 -此处进行解密+验签+身份验证
2020-03-16 11:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 11:26:27 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 11:26:27 -==> Parameters: 469(String), TrafficCard(String)
2020-03-16 11:26:27 -<==      Total: 0
2020-03-16 11:26:27 -耗时 : 23
2020-03-16 11:26:41 -此处进行解密+验签+身份验证
2020-03-16 11:26:41 -此处进行解密+验签+身份验证
2020-03-16 11:26:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:26:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:26:41 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 11:26:41 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 11:26:41 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 11:26:41 -==> Parameters: 469(String)
2020-03-16 11:26:41 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 11:26:41 -==> Parameters: 469(String), E20200308050(String)
2020-03-16 11:26:41 -<==      Total: 2
2020-03-16 11:26:41 -耗时 : 20
2020-03-16 11:26:41 -<==      Total: 1
2020-03-16 11:26:41 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 11:26:41 -==> Parameters: 
2020-03-16 11:26:41 -<==      Total: 94
2020-03-16 11:26:41 -耗时 : 45
2020-03-16 11:27:06 -此处进行解密+验签+身份验证
2020-03-16 11:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:27:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-16 11:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 11:27:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 11:27:06 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-16 11:27:06 -==> Parameters: 469(String), E20200308050,E20200308100,E20200308101,E20200308102,E20200308103(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String)
2020-03-16 11:27:07 -<==      Total: 1
2020-03-16 11:27:07 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? , ? , ? , ? , ? ) 
2020-03-16 11:27:07 -==> Parameters: 469(String), E20200308050(String), E20200308100(String), E20200308101(String), E20200308102(String), E20200308103(String)
2020-03-16 11:27:07 -<==      Total: 1
2020-03-16 11:27:07 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and is_reward='0' and sn in ( ? , ? , ? , ? , ? ) 
2020-03-16 11:27:07 -==> Parameters: 469(String), E20200308050(String), E20200308100(String), E20200308101(String), E20200308102(String), E20200308103(String)
2020-03-16 11:27:07 -<==      Total: 1
2020-03-16 11:27:07 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-16 11:27:07 -==> Parameters: 691(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String), 20200316(String), 112707(String), 0.485(String), 1(String), 469(String), E20200308050,E20200308100,E20200308101,E20200308102,E20200308103(String), 691(String)
2020-03-16 11:27:07 -<==    Updates: 5
2020-03-16 11:27:07 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-16 11:27:07 -==> Parameters: 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String), 20200316(String), 112707(String), 691(String), E20200308050,E20200308100,E20200308101,E20200308102,E20200308103(String)
2020-03-16 11:27:07 -<==    Updates: 0
2020-03-16 11:27:07 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-16 11:27:07 -==> Parameters: 20200316(String), 112707(String), 469(String), E20200308050,E20200308100,E20200308101,E20200308102,E20200308103(String)
2020-03-16 11:27:07 -<==    Updates: 5
2020-03-16 11:27:07 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) 
2020-03-16 11:27:07 -==> Parameters: 469_20200316112707(String), E20200308050(String), 691(String), null, 2020-03-16 11:27:07(String), 469(String), 469_20200316112707(String), E20200308100(String), 691(String), null, 2020-03-16 11:27:07(String), 469(String), 469_20200316112707(String), E20200308101(String), 691(String), null, 2020-03-16 11:27:07(String), 469(String), 469_20200316112707(String), E20200308102(String), 691(String), null, 2020-03-16 11:27:07(String), 469(String), 469_20200316112707(String), E20200308103(String), 691(String), null, 2020-03-16 11:27:07(String), 469(String)
2020-03-16 11:27:07 -<==    Updates: 5
2020-03-16 11:27:07 -耗时 : 240
2020-03-16 11:27:07 -此处进行解密+验签+身份验证
2020-03-16 11:27:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:27:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:27:07 -此处进行解密+验签+身份验证
2020-03-16 11:27:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 11:27:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 11:27:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 11:27:07 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 11:27:07 -==> Parameters: 469(String), 469(String)
2020-03-16 11:27:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 11:27:07 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 11:27:07 -==> Parameters: 469(String)
2020-03-16 11:27:07 -<==      Total: 4
2020-03-16 11:27:07 -耗时 : 14
2020-03-16 11:27:07 -<==      Total: 5
2020-03-16 11:27:07 -耗时 : 23
2020-03-16 15:03:42 -Starting LongEcologicalApplication on PC-201905161910 with PID 14996 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 15:03:42 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 15:03:42 -No active profile set, falling back to default profiles: default
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:03:43 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:03:43 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:03:43 -Finished Spring Data repository scanning in 128ms. Found 0 repository interfaces.
2020-03-16 15:03:43 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:03:43 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:03:44 -Finished Spring Data repository scanning in 53ms. Found 0 repository interfaces.
2020-03-16 15:03:44 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$20bb96f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:03:44 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fc8f9e0f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:03:45 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 15:03:45 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 15:03:45 -Starting service [Tomcat]
2020-03-16 15:03:45 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 15:03:45 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 15:03:46 -Initializing Spring embedded WebApplicationContext
2020-03-16 15:03:46 -Root WebApplicationContext: initialization completed in 3920 ms
2020-03-16 15:03:46 -Filter xssFilter was not registered (disabled)
2020-03-16 15:03:46 -HikariPool-1 - Starting...
2020-03-16 15:03:47 -HikariPool-1 - Start completed.
2020-03-16 15:03:47 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 15:03:47 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 15:03:47 -HHH000206: hibernate.properties not found
2020-03-16 15:03:47 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 15:03:47 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 15:03:47 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:03:48 -Using default implementation for ThreadExecutor
2020-03-16 15:03:48 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 15:03:48 -Quartz Scheduler v.2.3.0 created.
2020-03-16 15:03:48 -RAMJobStore initialized.
2020-03-16 15:03:48 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 15:03:48 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 15:03:48 -Quartz scheduler version: 2.3.0
2020-03-16 15:03:48 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@ac4915e
2020-03-16 15:03:48 -STAET TaskExecutorConfig
2020-03-16 15:03:48 -Initializing ExecutorService
2020-03-16 15:03:48 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 15:03:49 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 15:03:49 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 15:03:49 -Initializing ExecutorService 'taskScheduler'
2020-03-16 15:03:49 -Starting Quartz Scheduler now
2020-03-16 15:03:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 15:03:49 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 15:03:49 -Using a shared selector for servlet write/read
2020-03-16 15:03:49 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 15:03:49 -Started LongEcologicalApplication in 8.408 seconds (JVM running for 9.425)
2020-03-16 15:09:04 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 15:09:04 -Initializing Servlet 'dispatcherServlet'
2020-03-16 15:09:04 -Completed initialization in 10 ms
2020-03-16 15:09:04 -此处进行解密+验签+身份验证
2020-03-16 15:09:04 -此处进行解密+验签+身份验证
2020-03-16 15:09:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:04 -Starting without optional epoll library
2020-03-16 15:09:04 -Starting without optional kqueue library
2020-03-16 15:09:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:09:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:09:05 -耗时 : 4
2020-03-16 15:09:05 -耗时 : 7
2020-03-16 15:09:07 -此处进行解密+验签+身份验证
2020-03-16 15:09:07 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-16 15:09:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 15:09:07 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 15:09:07 -==> Parameters: 15019499979(String)
2020-03-16 15:09:07 -<==      Total: 1
2020-03-16 15:09:07 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 15:09:07 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 150907(String), 469(Integer)
2020-03-16 15:09:07 -<==    Updates: 1
2020-03-16 15:09:07 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 15:09:07 -==> Parameters: 25(String)
2020-03-16 15:09:07 -<==      Total: 1
2020-03-16 15:09:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 15:09:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 15:09:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 15:09:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 15:09:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 15:09:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 15:09:08 -耗时 : 174
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -解密：
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 15:09:08 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 15:09:08 -==> Parameters: 01(String), 01(String)
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:09:08 -==> Parameters: 469(String)
2020-03-16 15:09:08 -<==      Total: 12
2020-03-16 15:09:08 -耗时 : 16
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -耗时 : 22
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:08 -此处进行解密+验签+身份验证
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 15:09:08 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 15:09:08 -==> Parameters: 469(String)
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -耗时 : 11
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:09:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:09:08 -==> Parameters: 469(String)
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:09:08 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 15:09:08 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 15:09:08 -==> Parameters: 
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -耗时 : 10
2020-03-16 15:09:08 -<==      Total: 3
2020-03-16 15:09:08 -耗时 : 13
2020-03-16 15:09:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:09:08 -==> Parameters: 469(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:09:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:09:08 -==> Parameters: 469(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:09:08 -==> Parameters: 469(String), 469(String)
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:09:08 -==> Parameters: 469(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:09:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:09:08 -==> Parameters: 
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:09:08 -==> Parameters: 
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:09:08 -==> Parameters: 469(String), 469(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:09:08 -==> Parameters: 469(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 1
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:09:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:09:08 -<==    Updates: 2
2020-03-16 15:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:09:08 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -耗时 : 160
2020-03-16 15:09:08 -<==      Total: 2
2020-03-16 15:09:08 -耗时 : 143
2020-03-16 15:09:17 -此处进行解密+验签+身份验证
2020-03-16 15:09:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:17 -此处进行解密+验签+身份验证
2020-03-16 15:09:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 15:09:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-16 15:09:17 -==> Parameters: 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-16 15:09:17 -==> Parameters: 469(String)
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-16 15:09:17 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-16 15:09:17 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 15:09:17 -==> Parameters: 469(String), 469(String), 20200215(String), 20200316(String), 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 15:09:17 -==> Parameters: 469(String), 469(String), 20200215(String), 20200316(String), 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 15:09:17 -==> Parameters: 469(String), 20200116(String), 469(String), 20200116(String), 20200316(String), 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 15:09:17 -==> Parameters: 469(String), 20200116(String), 469(String), 20200116(String), 20200316(String), 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-16 15:09:17 -==> Parameters: 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-16 15:09:17 -耗时 : 46
2020-03-16 15:09:17 -==> Parameters: 469(String)
2020-03-16 15:09:17 -<==      Total: 1
2020-03-16 15:09:17 -耗时 : 69
2020-03-16 15:09:18 -此处进行解密+验签+身份验证
2020-03-16 15:09:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:09:18 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:09:18 -==> Parameters: 469(String)
2020-03-16 15:09:18 -<==      Total: 10
2020-03-16 15:09:18 -耗时 : 13
2020-03-16 15:09:23 -此处进行解密+验签+身份验证
2020-03-16 15:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:09:23 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:09:23 -==> Parameters: 469(String), 7726(String)
2020-03-16 15:09:23 -<==      Total: 10
2020-03-16 15:09:23 -耗时 : 13
2020-03-16 15:09:26 -此处进行解密+验签+身份验证
2020-03-16 15:09:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:09:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:09:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:09:26 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:09:26 -==> Parameters: 469(String), 7716(String)
2020-03-16 15:09:26 -<==      Total: 5
2020-03-16 15:09:26 -耗时 : 13
2020-03-16 15:18:10 -此处进行解密+验签+身份验证
2020-03-16 15:18:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:10 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:10 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:18:10 -<==      Total: 0
2020-03-16 15:18:10 -耗时 : 14
2020-03-16 15:18:14 -此处进行解密+验签+身份验证
2020-03-16 15:18:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:14 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:14 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:18:14 -<==      Total: 0
2020-03-16 15:18:14 -耗时 : 12
2020-03-16 15:18:19 -此处进行解密+验签+身份验证
2020-03-16 15:18:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:19 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:19 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:18:19 -<==      Total: 0
2020-03-16 15:18:19 -耗时 : 11
2020-03-16 15:18:26 -此处进行解密+验签+身份验证
2020-03-16 15:18:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:26 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:26 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:18:26 -<==      Total: 0
2020-03-16 15:18:26 -耗时 : 13
2020-03-16 15:18:29 -此处进行解密+验签+身份验证
2020-03-16 15:18:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:29 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:29 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:18:29 -<==      Total: 0
2020-03-16 15:18:29 -耗时 : 14
2020-03-16 15:18:36 -此处进行解密+验签+身份验证
2020-03-16 15:18:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:36 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:36 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:18:36 -<==      Total: 0
2020-03-16 15:18:36 -耗时 : 13
2020-03-16 15:18:51 -此处进行解密+验签+身份验证
2020-03-16 15:18:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:18:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:18:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:18:51 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:18:51 -==> Parameters: 469(String)
2020-03-16 15:18:51 -<==      Total: 10
2020-03-16 15:18:51 -耗时 : 13
2020-03-16 15:19:38 -此处进行解密+验签+身份验证
2020-03-16 15:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:19:38 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:19:38 -==> Parameters: 469(String), 7726(String)
2020-03-16 15:19:38 -<==      Total: 10
2020-03-16 15:19:38 -耗时 : 12
2020-03-16 15:19:44 -此处进行解密+验签+身份验证
2020-03-16 15:19:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:19:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:19:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:19:44 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@33895ed1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 15:19:44 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:19:44 -==> Parameters: 469(String), 7716(String)
2020-03-16 15:19:44 -<==      Total: 5
2020-03-16 15:19:44 -耗时 : 22
2020-03-16 15:19:54 -此处进行解密+验签+身份验证
2020-03-16 15:19:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:19:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:19:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:19:54 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:19:54 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:19:54 -<==      Total: 0
2020-03-16 15:19:54 -耗时 : 13
2020-03-16 15:19:59 -此处进行解密+验签+身份验证
2020-03-16 15:19:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:19:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:19:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:19:59 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:19:59 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:19:59 -<==      Total: 0
2020-03-16 15:19:59 -耗时 : 13
2020-03-16 15:20:03 -此处进行解密+验签+身份验证
2020-03-16 15:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:20:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:20:03 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:20:03 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:20:03 -<==      Total: 0
2020-03-16 15:20:03 -耗时 : 12
2020-03-16 15:20:07 -此处进行解密+验签+身份验证
2020-03-16 15:20:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:20:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:20:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:20:07 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:20:07 -==> Parameters: 469(String), 7711(String)
2020-03-16 15:20:07 -<==      Total: 0
2020-03-16 15:20:07 -耗时 : 11
2020-03-16 15:21:18 -此处进行解密+验签+身份验证
2020-03-16 15:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:21:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:21:18 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:21:18 -==> Parameters: 469(String)
2020-03-16 15:21:18 -<==      Total: 10
2020-03-16 15:21:18 -耗时 : 14
2020-03-16 15:25:46 -Starting LongEcologicalApplication on PC-201905161910 with PID 12420 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 15:25:46 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 15:25:46 -No active profile set, falling back to default profiles: default
2020-03-16 15:25:48 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:48 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:48 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:25:49 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:25:49 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:25:49 -Finished Spring Data repository scanning in 110ms. Found 0 repository interfaces.
2020-03-16 15:25:49 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:25:49 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:25:49 -Finished Spring Data repository scanning in 73ms. Found 0 repository interfaces.
2020-03-16 15:25:50 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$2365a4c2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:25:50 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1de98962] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:25:51 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 15:25:51 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 15:25:51 -Starting service [Tomcat]
2020-03-16 15:25:51 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 15:25:51 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 15:25:51 -Initializing Spring embedded WebApplicationContext
2020-03-16 15:25:51 -Root WebApplicationContext: initialization completed in 4885 ms
2020-03-16 15:25:51 -Filter xssFilter was not registered (disabled)
2020-03-16 15:25:52 -HikariPool-1 - Starting...
2020-03-16 15:25:52 -HikariPool-1 - Start completed.
2020-03-16 15:25:52 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 15:25:52 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 15:25:52 -HHH000206: hibernate.properties not found
2020-03-16 15:25:52 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 15:25:53 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 15:25:53 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:25:54 -Using default implementation for ThreadExecutor
2020-03-16 15:25:54 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 15:25:54 -Quartz Scheduler v.2.3.0 created.
2020-03-16 15:25:54 -RAMJobStore initialized.
2020-03-16 15:25:54 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 15:25:54 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 15:25:54 -Quartz scheduler version: 2.3.0
2020-03-16 15:25:54 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2f60e66a
2020-03-16 15:25:54 -STAET TaskExecutorConfig
2020-03-16 15:25:54 -Initializing ExecutorService
2020-03-16 15:25:54 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 15:25:55 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 15:25:55 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 15:25:55 -Initializing ExecutorService 'taskScheduler'
2020-03-16 15:25:55 -Starting Quartz Scheduler now
2020-03-16 15:25:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 15:25:55 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 15:25:56 -Using a shared selector for servlet write/read
2020-03-16 15:25:56 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 15:25:56 -Started LongEcologicalApplication in 10.587 seconds (JVM running for 12.592)
2020-03-16 15:27:35 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 15:27:35 -Initializing Servlet 'dispatcherServlet'
2020-03-16 15:27:36 -Completed initialization in 23 ms
2020-03-16 15:27:36 -此处进行解密+验签+身份验证
2020-03-16 15:27:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:27:36 -Starting without optional epoll library
2020-03-16 15:27:36 -Starting without optional kqueue library
2020-03-16 15:27:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:27:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:27:54 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:27:54 -==> Parameters: 469(String)
2020-03-16 15:27:54 -<==      Total: 10
2020-03-16 15:27:54 -耗时 : 17745
2020-03-16 15:30:52 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:30:52 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 15:30:52 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 15:30:52 -Shutting down Quartz Scheduler
2020-03-16 15:30:52 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 15:30:52 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:30:52 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 15:30:52 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:30:52 -HikariPool-1 - Shutdown initiated...
2020-03-16 15:30:52 -HikariPool-1 - Shutdown completed.
2020-03-16 15:31:25 -Starting LongEcologicalApplication on PC-201905161910 with PID 10172 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 15:31:25 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 15:31:25 -No active profile set, falling back to default profiles: default
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:31:26 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:31:26 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:31:27 -Finished Spring Data repository scanning in 133ms. Found 0 repository interfaces.
2020-03-16 15:31:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:31:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:31:27 -Finished Spring Data repository scanning in 116ms. Found 0 repository interfaces.
2020-03-16 15:31:27 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8121b85f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:31:27 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7ba59cff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:31:28 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 15:31:28 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 15:31:28 -Starting service [Tomcat]
2020-03-16 15:31:28 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 15:31:28 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 15:31:29 -Initializing Spring embedded WebApplicationContext
2020-03-16 15:31:29 -Root WebApplicationContext: initialization completed in 3623 ms
2020-03-16 15:31:29 -Filter xssFilter was not registered (disabled)
2020-03-16 15:31:29 -HikariPool-1 - Starting...
2020-03-16 15:31:29 -HikariPool-1 - Start completed.
2020-03-16 15:31:29 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 15:31:29 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 15:31:29 -HHH000206: hibernate.properties not found
2020-03-16 15:31:30 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 15:31:30 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 15:31:30 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:31:31 -Using default implementation for ThreadExecutor
2020-03-16 15:31:31 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 15:31:31 -Quartz Scheduler v.2.3.0 created.
2020-03-16 15:31:31 -RAMJobStore initialized.
2020-03-16 15:31:31 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 15:31:31 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 15:31:31 -Quartz scheduler version: 2.3.0
2020-03-16 15:31:31 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@18ff1520
2020-03-16 15:31:31 -STAET TaskExecutorConfig
2020-03-16 15:31:31 -Initializing ExecutorService
2020-03-16 15:31:31 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 15:31:32 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 15:31:32 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 15:31:33 -Initializing ExecutorService 'taskScheduler'
2020-03-16 15:31:33 -Starting Quartz Scheduler now
2020-03-16 15:31:33 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 15:31:33 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 15:31:33 -Using a shared selector for servlet write/read
2020-03-16 15:31:33 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 15:31:33 -Started LongEcologicalApplication in 8.887 seconds (JVM running for 10.338)
2020-03-16 15:31:56 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 15:31:56 -Initializing Servlet 'dispatcherServlet'
2020-03-16 15:31:56 -Completed initialization in 17 ms
2020-03-16 15:31:56 -此处进行解密+验签+身份验证
2020-03-16 15:31:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:31:56 -Starting without optional epoll library
2020-03-16 15:31:56 -Starting without optional kqueue library
2020-03-16 15:31:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:31:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:31:59 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:31:59 -==> Parameters: 469(String)
2020-03-16 15:31:59 -<==      Total: 5
2020-03-16 15:31:59 -耗时 : 2458
2020-03-16 15:32:14 -此处进行解密+验签+身份验证
2020-03-16 15:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:16 -此处进行解密+验签+身份验证
2020-03-16 15:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:16 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:16 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-16 15:32:16 -<==      Total: 0
2020-03-16 15:32:16 -耗时 : 2292
2020-03-16 15:32:16 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-16 15:32:16 -==> Parameters: 469(String), E20200308108(String)
2020-03-16 15:32:16 -<==      Total: 1
2020-03-16 15:32:16 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-16 15:32:16 -==> Parameters: E20200308108(String)
2020-03-16 15:32:16 -<==      Total: 0
2020-03-16 15:32:16 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-16 15:32:16 -==> Parameters: E20200308108(String)
2020-03-16 15:32:16 -<==      Total: 1
2020-03-16 15:32:16 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-16 15:32:16 -==> Parameters: E20200308108(String), 469(String)
2020-03-16 15:32:16 -<==      Total: 1
2020-03-16 15:32:16 -耗时 : 45
2020-03-16 15:32:22 -此处进行解密+验签+身份验证
2020-03-16 15:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:22 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:22 -==> Parameters: 469(String)
2020-03-16 15:32:22 -<==      Total: 5
2020-03-16 15:32:22 -耗时 : 19
2020-03-16 15:32:23 -此处进行解密+验签+身份验证
2020-03-16 15:32:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:23 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:23 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:32:23 -<==      Total: 0
2020-03-16 15:32:23 -耗时 : 22
2020-03-16 15:32:25 -此处进行解密+验签+身份验证
2020-03-16 15:32:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:25 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:25 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:32:25 -<==      Total: 0
2020-03-16 15:32:25 -耗时 : 21
2020-03-16 15:32:26 -此处进行解密+验签+身份验证
2020-03-16 15:32:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:26 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:26 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:32:26 -<==      Total: 0
2020-03-16 15:32:26 -耗时 : 21
2020-03-16 15:32:31 -此处进行解密+验签+身份验证
2020-03-16 15:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:31 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:31 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:32:31 -<==      Total: 0
2020-03-16 15:32:31 -耗时 : 22
2020-03-16 15:32:33 -此处进行解密+验签+身份验证
2020-03-16 15:32:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:33 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:33 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:32:33 -<==      Total: 0
2020-03-16 15:32:33 -耗时 : 19
2020-03-16 15:32:39 -此处进行解密+验签+身份验证
2020-03-16 15:32:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 15:32:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-16 15:32:39 -==> Parameters: 469(String)
2020-03-16 15:32:39 -<==      Total: 1
2020-03-16 15:32:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-16 15:32:39 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-16 15:32:39 -<==      Total: 1
2020-03-16 15:32:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 15:32:39 -==> Parameters: 469(String), 469(String), 20200215(String), 20200316(String), 469(String)
2020-03-16 15:32:39 -<==      Total: 1
2020-03-16 15:32:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 15:32:39 -==> Parameters: 469(String), 20200116(String), 469(String), 20200116(String), 20200316(String), 469(String)
2020-03-16 15:32:39 -<==      Total: 1
2020-03-16 15:32:39 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-16 15:32:39 -==> Parameters: 469(String)
2020-03-16 15:32:39 -<==      Total: 1
2020-03-16 15:32:39 -耗时 : 81
2020-03-16 15:32:43 -此处进行解密+验签+身份验证
2020-03-16 15:32:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:32:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:32:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:32:43 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:32:43 -==> Parameters: 469(String)
2020-03-16 15:32:43 -<==      Total: 10
2020-03-16 15:32:43 -耗时 : 20
2020-03-16 15:33:29 -此处进行解密+验签+身份验证
2020-03-16 15:33:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:33:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:33:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:33:29 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:33:29 -==> Parameters: 469(String)
2020-03-16 15:33:29 -<==      Total: 10
2020-03-16 15:33:29 -耗时 : 12
2020-03-16 15:33:33 -此处进行解密+验签+身份验证
2020-03-16 15:33:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:33:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:33:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:33:33 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:33:33 -==> Parameters: 469(String)
2020-03-16 15:33:33 -<==      Total: 10
2020-03-16 15:33:33 -耗时 : 21
2020-03-16 15:33:40 -此处进行解密+验签+身份验证
2020-03-16 15:33:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:33:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:33:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:33:40 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:33:40 -==> Parameters: 469(String)
2020-03-16 15:33:40 -<==      Total: 10
2020-03-16 15:33:40 -耗时 : 22
2020-03-16 15:33:46 -此处进行解密+验签+身份验证
2020-03-16 15:33:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:33:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:33:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:33:46 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:33:46 -==> Parameters: 469(String)
2020-03-16 15:33:46 -<==      Total: 10
2020-03-16 15:33:46 -耗时 : 21
2020-03-16 15:34:04 -此处进行解密+验签+身份验证
2020-03-16 15:34:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:34:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:34:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:34:04 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:34:04 -==> Parameters: 469(String)
2020-03-16 15:34:05 -<==      Total: 10
2020-03-16 15:34:05 -耗时 : 21
2020-03-16 15:35:29 -此处进行解密+验签+身份验证
2020-03-16 15:35:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:35:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:35:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:35:29 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:35:29 -==> Parameters: 469(String)
2020-03-16 15:35:29 -<==      Total: 10
2020-03-16 15:35:29 -耗时 : 21
2020-03-16 15:36:55 -此处进行解密+验签+身份验证
2020-03-16 15:36:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:36:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:36:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:36:55 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:36:55 -==> Parameters: 469(String)
2020-03-16 15:36:55 -<==      Total: 5
2020-03-16 15:36:55 -耗时 : 19
2020-03-16 15:37:00 -此处进行解密+验签+身份验证
2020-03-16 15:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:37:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:37:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:37:00 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:37:00 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:37:00 -<==      Total: 0
2020-03-16 15:37:00 -耗时 : 20
2020-03-16 15:37:18 -此处进行解密+验签+身份验证
2020-03-16 15:37:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:37:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:37:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:37:25 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:37:25 -==> Parameters: 469(String), 7736(String)
2020-03-16 15:37:25 -<==      Total: 0
2020-03-16 15:37:25 -耗时 : 7139
2020-03-16 15:37:31 -此处进行解密+验签+身份验证
2020-03-16 15:37:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:37:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:37:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:37:38 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:37:38 -==> Parameters: 469(String)
2020-03-16 15:37:38 -<==      Total: 10
2020-03-16 15:37:38 -耗时 : 7369
2020-03-16 15:37:44 -此处进行解密+验签+身份验证
2020-03-16 15:37:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:37:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:37:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:37:53 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:37:53 -==> Parameters: 469(String)
2020-03-16 15:37:53 -<==      Total: 10
2020-03-16 15:37:53 -耗时 : 8340
2020-03-16 15:39:29 -此处进行解密+验签+身份验证
2020-03-16 15:39:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:39:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:39:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-16 15:39:29 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-16 15:39:29 -==> Parameters: 469(String), EPOS20200113057(String)
2020-03-16 15:39:29 -<==      Total: 1
2020-03-16 15:39:29 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-16 15:39:29 -==> Parameters: EPOS20200113057(String)
2020-03-16 15:39:29 -<==      Total: 0
2020-03-16 15:39:29 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-16 15:39:29 -==> Parameters: EPOS20200113057(String)
2020-03-16 15:39:29 -<==      Total: 1
2020-03-16 15:39:29 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type='epos' and sn=? and user_id=? 
2020-03-16 15:39:29 -==> Parameters: EPOS20200113057(String), 469(String)
2020-03-16 15:39:29 -<==      Total: 1
2020-03-16 15:39:29 -耗时 : 66
2020-03-16 15:40:11 -此处进行解密+验签+身份验证
2020-03-16 15:40:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:40:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:40:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 15:40:11 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:40:11 -==> Parameters: 469(String)
2020-03-16 15:40:11 -<==      Total: 10
2020-03-16 15:40:11 -耗时 : 20
2020-03-16 15:40:30 -此处进行解密+验签+身份验证
2020-03-16 15:40:30 -此处进行解密+验签+身份验证
2020-03-16 15:40:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:40:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:40:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:40:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:40:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 15:40:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 15:40:30 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 15:40:30 -==> Parameters: 469(String)
2020-03-16 15:40:30 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 15:40:30 -==> Parameters: 469(String)
2020-03-16 15:40:30 -<==      Total: 1
2020-03-16 15:40:30 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:40:30 -==> Parameters: 469(String)
2020-03-16 15:40:30 -<==      Total: 3
2020-03-16 15:40:30 -耗时 : 21
2020-03-16 15:40:30 -<==      Total: 1
2020-03-16 15:40:30 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:40:30 -==> Parameters: 469(String)
2020-03-16 15:40:30 -<==      Total: 1
2020-03-16 15:40:30 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:40:30 -==> Parameters: 469(String)
2020-03-16 15:40:30 -<==      Total: 1
2020-03-16 15:40:30 -耗时 : 40
2020-03-16 15:42:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:42:40 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 15:42:40 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 15:42:40 -Shutting down Quartz Scheduler
2020-03-16 15:42:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 15:42:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:42:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 15:42:40 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:42:40 -HikariPool-1 - Shutdown initiated...
2020-03-16 15:42:40 -HikariPool-1 - Shutdown completed.
2020-03-16 15:43:09 -Starting LongEcologicalApplication on PC-201905161910 with PID 12916 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 15:43:09 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 15:43:09 -No active profile set, falling back to default profiles: default
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:43:10 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:43:10 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:43:11 -Finished Spring Data repository scanning in 96ms. Found 0 repository interfaces.
2020-03-16 15:43:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:43:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:43:11 -Finished Spring Data repository scanning in 70ms. Found 0 repository interfaces.
2020-03-16 15:43:12 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$a7df1e44] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:43:12 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a26302e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:43:12 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 15:43:12 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 15:43:12 -Starting service [Tomcat]
2020-03-16 15:43:12 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 15:43:12 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 15:43:13 -Initializing Spring embedded WebApplicationContext
2020-03-16 15:43:13 -Root WebApplicationContext: initialization completed in 3577 ms
2020-03-16 15:43:13 -Filter xssFilter was not registered (disabled)
2020-03-16 15:43:13 -HikariPool-1 - Starting...
2020-03-16 15:43:13 -HikariPool-1 - Start completed.
2020-03-16 15:43:13 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 15:43:13 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 15:43:13 -HHH000206: hibernate.properties not found
2020-03-16 15:43:14 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 15:43:14 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 15:43:14 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:43:15 -Using default implementation for ThreadExecutor
2020-03-16 15:43:15 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 15:43:15 -Quartz Scheduler v.2.3.0 created.
2020-03-16 15:43:15 -RAMJobStore initialized.
2020-03-16 15:43:15 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 15:43:15 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 15:43:15 -Quartz scheduler version: 2.3.0
2020-03-16 15:43:15 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6eab92f3
2020-03-16 15:43:15 -STAET TaskExecutorConfig
2020-03-16 15:43:15 -Initializing ExecutorService
2020-03-16 15:43:15 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 15:43:16 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 15:43:16 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 15:43:17 -Initializing ExecutorService 'taskScheduler'
2020-03-16 15:43:17 -Starting Quartz Scheduler now
2020-03-16 15:43:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 15:43:17 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 15:43:17 -Using a shared selector for servlet write/read
2020-03-16 15:43:17 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 15:43:17 -Started LongEcologicalApplication in 9.223 seconds (JVM running for 10.563)
2020-03-16 15:43:27 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 15:43:27 -Initializing Servlet 'dispatcherServlet'
2020-03-16 15:43:27 -Completed initialization in 19 ms
2020-03-16 15:43:27 -此处进行解密+验签+身份验证
2020-03-16 15:43:27 -此处进行解密+验签+身份验证
2020-03-16 15:43:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:43:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:43:27 -Starting without optional epoll library
2020-03-16 15:43:27 -Starting without optional kqueue library
2020-03-16 15:43:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:43:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:43:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 15:43:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 15:43:28 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 15:43:28 -==> Parameters: 469(String)
2020-03-16 15:43:28 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 15:43:28 -==> Parameters: 469(String)
2020-03-16 15:43:28 -<==      Total: 3
2020-03-16 15:43:28 -<==      Total: 1
2020-03-16 15:43:28 -耗时 : 72
2020-03-16 15:43:28 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:43:28 -==> Parameters: 469(String)
2020-03-16 15:43:28 -<==      Total: 1
2020-03-16 15:43:28 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:43:28 -==> Parameters: 469(String)
2020-03-16 15:43:28 -<==      Total: 1
2020-03-16 15:43:28 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_pos_act_num,cast((pos_num-act_num) as char) as e_pos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:43:28 -==> Parameters: 469(String)
2020-03-16 15:43:28 -<==      Total: 1
2020-03-16 15:43:28 -耗时 : 113
2020-03-16 15:47:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:47:01 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 15:47:01 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 15:47:01 -Shutting down Quartz Scheduler
2020-03-16 15:47:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 15:47:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:47:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 15:47:01 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:47:01 -HikariPool-1 - Shutdown initiated...
2020-03-16 15:47:01 -HikariPool-1 - Shutdown completed.
2020-03-16 15:48:02 -Starting LongEcologicalApplication on PC-201905161910 with PID 15268 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 15:48:02 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 15:48:02 -No active profile set, falling back to default profiles: default
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 15:48:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:48:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:48:04 -Finished Spring Data repository scanning in 101ms. Found 0 repository interfaces.
2020-03-16 15:48:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 15:48:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 15:48:04 -Finished Spring Data repository scanning in 40ms. Found 0 repository interfaces.
2020-03-16 15:48:05 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$33a6b305] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:48:05 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2e2a97a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 15:48:06 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 15:48:06 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 15:48:06 -Starting service [Tomcat]
2020-03-16 15:48:06 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 15:48:06 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 15:48:06 -Initializing Spring embedded WebApplicationContext
2020-03-16 15:48:06 -Root WebApplicationContext: initialization completed in 3260 ms
2020-03-16 15:48:06 -Filter xssFilter was not registered (disabled)
2020-03-16 15:48:06 -HikariPool-1 - Starting...
2020-03-16 15:48:06 -HikariPool-1 - Start completed.
2020-03-16 15:48:07 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 15:48:07 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 15:48:07 -HHH000206: hibernate.properties not found
2020-03-16 15:48:07 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 15:48:07 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 15:48:07 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:48:08 -Using default implementation for ThreadExecutor
2020-03-16 15:48:08 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 15:48:08 -Quartz Scheduler v.2.3.0 created.
2020-03-16 15:48:08 -RAMJobStore initialized.
2020-03-16 15:48:08 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 15:48:08 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 15:48:08 -Quartz scheduler version: 2.3.0
2020-03-16 15:48:08 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@719bb60d
2020-03-16 15:48:08 -STAET TaskExecutorConfig
2020-03-16 15:48:08 -Initializing ExecutorService
2020-03-16 15:48:08 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 15:48:09 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 15:48:09 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 15:48:10 -Initializing ExecutorService 'taskScheduler'
2020-03-16 15:48:10 -Starting Quartz Scheduler now
2020-03-16 15:48:10 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 15:48:10 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 15:48:10 -Using a shared selector for servlet write/read
2020-03-16 15:48:10 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 15:48:10 -Started LongEcologicalApplication in 8.333 seconds (JVM running for 9.755)
2020-03-16 15:48:41 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 15:48:41 -Initializing Servlet 'dispatcherServlet'
2020-03-16 15:48:41 -Completed initialization in 19 ms
2020-03-16 15:48:41 -此处进行解密+验签+身份验证
2020-03-16 15:48:41 -此处进行解密+验签+身份验证
2020-03-16 15:48:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:41 -Starting without optional epoll library
2020-03-16 15:48:41 -Starting without optional kqueue library
2020-03-16 15:48:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 15:48:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 15:48:42 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 15:48:42 -==> Parameters: 469(String)
2020-03-16 15:48:42 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 15:48:42 -==> Parameters: 469(String)
2020-03-16 15:48:42 -<==      Total: 3
2020-03-16 15:48:42 -<==      Total: 1
2020-03-16 15:48:42 -耗时 : 69
2020-03-16 15:48:42 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:48:42 -==> Parameters: 469(String)
2020-03-16 15:48:42 -<==      Total: 1
2020-03-16 15:48:42 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:48:42 -==> Parameters: 469(String)
2020-03-16 15:48:42 -<==      Total: 1
2020-03-16 15:48:42 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:48:42 -==> Parameters: 469(String)
2020-03-16 15:48:42 -<==      Total: 1
2020-03-16 15:48:42 -耗时 : 98
2020-03-16 15:48:56 -此处进行解密+验签+身份验证
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:56 -此处进行解密+验签+身份验证
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:48:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:48:56 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type is null 
2020-03-16 15:48:56 -==> Parameters: 
2020-03-16 15:48:56 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-16 15:48:56 -==> Parameters: 1842(String)
2020-03-16 15:48:56 -<==      Total: 1
2020-03-16 15:48:56 -耗时 : 18
2020-03-16 15:48:56 -此处进行解密+验签+身份验证
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:56 -<==      Total: 1
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:56 -此处进行解密+验签+身份验证
2020-03-16 15:48:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:56 -此处进行解密+验签+身份验证
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:48:57 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1842,save content:{referer_id=469, parent_chain=469, user_tel=15013555652, id_card=441523199409226802, real_name=叶梦蝶, algebra=2, cre_date=20191016, cre_time=110732, login_password=6eee2e7ad6a2cf8a8c65be8aefbc81a5, manager_id=25, pay_password=a718b8f970250ec381b54757cb2798c9, id=1842, auth_status=09, status=0}
2020-03-16 15:48:57 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:48:57 -==> Parameters: 1842(String)
2020-03-16 15:48:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:48:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:48:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:48:57 -<==      Total: 1
2020-03-16 15:48:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:48:57 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:48:57 -==> Parameters: 1842(String)
2020-03-16 15:48:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:48:57 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:48:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:48:57 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:48:57 -<==      Total: 1
2020-03-16 15:48:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-16 15:48:57 -==> Parameters: 
2020-03-16 15:48:57 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:48:57 -<==      Total: 0
2020-03-16 15:48:57 -耗时 : 31
2020-03-16 15:48:57 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:48:57 -<==      Total: 0
2020-03-16 15:48:57 -耗时 : 31
2020-03-16 15:48:57 -<==      Total: 1
2020-03-16 15:48:57 -耗时 : 90
2020-03-16 15:48:57 -<==      Total: 0
2020-03-16 15:48:57 -耗时 : 46
2020-03-16 15:49:02 -此处进行解密+验签+身份验证
2020-03-16 15:49:02 -此处进行解密+验签+身份验证
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:02 -此处进行解密+验签+身份验证
2020-03-16 15:49:02 -此处进行解密+验签+身份验证
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:02 -此处进行解密+验签+身份验证
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:02 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:49:02 -==> Parameters: 
2020-03-16 15:49:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:02 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:49:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:02 -==> Parameters: 1842(String)
2020-03-16 15:49:02 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:02 -<==      Total: 1
2020-03-16 15:49:02 -耗时 : 16
2020-03-16 15:49:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:02 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:02 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:02 -<==      Total: 0
2020-03-16 15:49:02 -耗时 : 29
2020-03-16 15:49:02 -<==      Total: 0
2020-03-16 15:49:02 -耗时 : 35
2020-03-16 15:49:02 -<==      Total: 0
2020-03-16 15:49:02 -耗时 : 37
2020-03-16 15:49:02 -<==      Total: 0
2020-03-16 15:49:02 -耗时 : 36
2020-03-16 15:49:08 -此处进行解密+验签+身份验证
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:08 -此处进行解密+验签+身份验证
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:08 -此处进行解密+验签+身份验证
2020-03-16 15:49:08 -此处进行解密+验签+身份验证
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:08 -此处进行解密+验签+身份验证
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type is null 
2020-03-16 15:49:08 -==> Parameters: 
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:08 -<==      Total: 1
2020-03-16 15:49:08 -耗时 : 13
2020-03-16 15:49:08 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:49:08 -==> Parameters: 1842(String)
2020-03-16 15:49:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:08 -<==      Total: 1
2020-03-16 15:49:08 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:49:08 -==> Parameters: 1842(String)
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:08 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:08 -<==      Total: 1
2020-03-16 15:49:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-16 15:49:08 -==> Parameters: 
2020-03-16 15:49:08 -<==      Total: 0
2020-03-16 15:49:08 -耗时 : 22
2020-03-16 15:49:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:08 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:08 -<==      Total: 1
2020-03-16 15:49:08 -耗时 : 41
2020-03-16 15:49:08 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:08 -<==      Total: 0
2020-03-16 15:49:08 -耗时 : 35
2020-03-16 15:49:08 -<==      Total: 0
2020-03-16 15:49:08 -耗时 : 37
2020-03-16 15:49:20 -此处进行解密+验签+身份验证
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:20 -此处进行解密+验签+身份验证
2020-03-16 15:49:20 -此处进行解密+验签+身份验证
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:20 -此处进行解密+验签+身份验证
2020-03-16 15:49:20 -此处进行解密+验签+身份验证
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:20 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:20 -==> Parameters: 
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:20 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:49:20 -==> Parameters: 1842(String)
2020-03-16 15:49:20 -<==      Total: 1
2020-03-16 15:49:20 -耗时 : 12
2020-03-16 15:49:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:20 -<==      Total: 0
2020-03-16 15:49:20 -耗时 : 23
2020-03-16 15:49:20 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:20 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:20 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:20 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:20 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:20 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:20 -<==      Total: 0
2020-03-16 15:49:20 -耗时 : 33
2020-03-16 15:49:20 -<==      Total: 0
2020-03-16 15:49:20 -耗时 : 31
2020-03-16 15:49:20 -<==      Total: 0
2020-03-16 15:49:20 -耗时 : 35
2020-03-16 15:49:40 -此处进行解密+验签+身份验证
2020-03-16 15:49:40 -此处进行解密+验签+身份验证
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:40 -此处进行解密+验签+身份验证
2020-03-16 15:49:40 -此处进行解密+验签+身份验证
2020-03-16 15:49:40 -此处进行解密+验签+身份验证
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:40 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1842 and cre_month=202003 
2020-03-16 15:49:40 -==> Parameters: 
2020-03-16 15:49:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:40 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-16 15:49:40 -==> Parameters: 1842(String)
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:40 -<==      Total: 1
2020-03-16 15:49:40 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:49:40 -==> Parameters: 1842(String)
2020-03-16 15:49:40 -<==      Total: 1
2020-03-16 15:49:40 -耗时 : 23
2020-03-16 15:49:40 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:40 -<==      Total: 1
2020-03-16 15:49:40 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:40 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1842 
2020-03-16 15:49:40 -==> Parameters: 
2020-03-16 15:49:40 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:40 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:40 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:40 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:40 -<==      Total: 1
2020-03-16 15:49:40 -耗时 : 49
2020-03-16 15:49:40 -<==      Total: 0
2020-03-16 15:49:40 -耗时 : 48
2020-03-16 15:49:40 -<==      Total: 0
2020-03-16 15:49:40 -<==      Total: 0
2020-03-16 15:49:40 -耗时 : 53
2020-03-16 15:49:40 -耗时 : 50
2020-03-16 15:49:42 -此处进行解密+验签+身份验证
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:42 -此处进行解密+验签+身份验证
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:42 -此处进行解密+验签+身份验证
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:42 -此处进行解密+验签+身份验证
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:42 -此处进行解密+验签+身份验证
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:42 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type is null 
2020-03-16 15:49:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:42 -==> Parameters: 
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:42 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:49:42 -==> Parameters: 1842(String)
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:42 -<==      Total: 1
2020-03-16 15:49:42 -耗时 : 10
2020-03-16 15:49:42 -<==      Total: 1
2020-03-16 15:49:42 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:49:42 -==> Parameters: 1842(String)
2020-03-16 15:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:42 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:42 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:42 -<==      Total: 1
2020-03-16 15:49:42 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-16 15:49:42 -==> Parameters: 
2020-03-16 15:49:42 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:42 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:42 -<==      Total: 1
2020-03-16 15:49:42 -耗时 : 36
2020-03-16 15:49:42 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:42 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:42 -<==      Total: 0
2020-03-16 15:49:42 -耗时 : 32
2020-03-16 15:49:42 -<==      Total: 0
2020-03-16 15:49:42 -耗时 : 33
2020-03-16 15:49:42 -<==      Total: 0
2020-03-16 15:49:42 -耗时 : 33
2020-03-16 15:49:44 -此处进行解密+验签+身份验证
2020-03-16 15:49:44 -此处进行解密+验签+身份验证
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:44 -此处进行解密+验签+身份验证
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:44 -此处进行解密+验签+身份验证
2020-03-16 15:49:44 -此处进行解密+验签+身份验证
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-16 15:49:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1842 and cre_month=202003 
2020-03-16 15:49:44 -==> Parameters: 
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:44 -<==      Total: 1
2020-03-16 15:49:44 -耗时 : 12
2020-03-16 15:49:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:44 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-16 15:49:44 -==> Parameters: 1842(String)
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:44 -<==      Total: 1
2020-03-16 15:49:44 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:49:44 -==> Parameters: 1842(String)
2020-03-16 15:49:44 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:44 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:44 -<==      Total: 1
2020-03-16 15:49:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1842 
2020-03-16 15:49:44 -==> Parameters: 
2020-03-16 15:49:44 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:44 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:44 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:44 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:44 -<==      Total: 1
2020-03-16 15:49:44 -耗时 : 36
2020-03-16 15:49:44 -<==      Total: 0
2020-03-16 15:49:44 -耗时 : 30
2020-03-16 15:49:44 -<==      Total: 0
2020-03-16 15:49:44 -<==      Total: 0
2020-03-16 15:49:44 -耗时 : 33
2020-03-16 15:49:44 -耗时 : 33
2020-03-16 15:49:45 -此处进行解密+验签+身份验证
2020-03-16 15:49:45 -此处进行解密+验签+身份验证
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:45 -此处进行解密+验签+身份验证
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:45 -此处进行解密+验签+身份验证
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:45 -此处进行解密+验签+身份验证
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:45 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:49:45 -==> Parameters: 
2020-03-16 15:49:45 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:49:45 -==> Parameters: 1842(String)
2020-03-16 15:49:45 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:45 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:45 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:45 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:45 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:45 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:45 -<==      Total: 0
2020-03-16 15:49:45 -耗时 : 21
2020-03-16 15:49:45 -<==      Total: 0
2020-03-16 15:49:45 -耗时 : 25
2020-03-16 15:49:45 -<==      Total: 1
2020-03-16 15:49:45 -耗时 : 21
2020-03-16 15:49:45 -<==      Total: 0
2020-03-16 15:49:45 -<==      Total: 0
2020-03-16 15:49:45 -耗时 : 29
2020-03-16 15:49:45 -耗时 : 30
2020-03-16 15:49:51 -此处进行解密+验签+身份验证
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:51 -此处进行解密+验签+身份验证
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:51 -此处进行解密+验签+身份验证
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:51 -此处进行解密+验签+身份验证
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:51 -此处进行解密+验签+身份验证
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-16 15:49:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1842 and cre_month=202003 
2020-03-16 15:49:51 -==> Parameters: 
2020-03-16 15:49:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:51 -<==      Total: 1
2020-03-16 15:49:51 -耗时 : 9
2020-03-16 15:49:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:51 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-16 15:49:51 -==> Parameters: 1842(String)
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:51 -<==      Total: 1
2020-03-16 15:49:51 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:49:51 -==> Parameters: 1842(String)
2020-03-16 15:49:51 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:51 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:51 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:51 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:51 -<==      Total: 1
2020-03-16 15:49:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1842 
2020-03-16 15:49:51 -==> Parameters: 
2020-03-16 15:49:51 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:51 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:51 -<==      Total: 0
2020-03-16 15:49:51 -耗时 : 29
2020-03-16 15:49:51 -<==      Total: 1
2020-03-16 15:49:51 -耗时 : 42
2020-03-16 15:49:51 -<==      Total: 0
2020-03-16 15:49:51 -耗时 : 29
2020-03-16 15:49:51 -<==      Total: 0
2020-03-16 15:49:51 -耗时 : 32
2020-03-16 15:49:55 -此处进行解密+验签+身份验证
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:55 -此处进行解密+验签+身份验证
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:55 -此处进行解密+验签+身份验证
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:55 -此处进行解密+验签+身份验证
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:55 -此处进行解密+验签+身份验证
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:55 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:49:55 -==> Parameters: 
2020-03-16 15:49:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:55 -<==      Total: 1
2020-03-16 15:49:55 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:49:55 -耗时 : 12
2020-03-16 15:49:55 -==> Parameters: 1842(String)
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:55 -<==      Total: 0
2020-03-16 15:49:55 -耗时 : 21
2020-03-16 15:49:55 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:55 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:55 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:55 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:55 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:55 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:55 -<==      Total: 0
2020-03-16 15:49:55 -耗时 : 32
2020-03-16 15:49:55 -<==      Total: 0
2020-03-16 15:49:55 -耗时 : 34
2020-03-16 15:49:55 -<==      Total: 0
2020-03-16 15:49:55 -耗时 : 33
2020-03-16 15:49:56 -此处进行解密+验签+身份验证
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:56 -此处进行解密+验签+身份验证
2020-03-16 15:49:56 -此处进行解密+验签+身份验证
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:56 -此处进行解密+验签+身份验证
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:56 -此处进行解密+验签+身份验证
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:49:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:56 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:49:56 -==> Parameters: 1842(String)
2020-03-16 15:49:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:56 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type is null 
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-16 15:49:56 -==> Parameters: 
2020-03-16 15:49:56 -<==      Total: 1
2020-03-16 15:49:56 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:49:56 -==> Parameters: 1842(String)
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-16 15:49:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:56 -==> Parameters: 1842(String), 1842(String)
2020-03-16 15:49:56 -<==      Total: 1
2020-03-16 15:49:56 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-16 15:49:56 -==> Parameters: 
2020-03-16 15:49:56 -<==      Total: 1
2020-03-16 15:49:56 -耗时 : 19
2020-03-16 15:49:56 -<==      Total: 0
2020-03-16 15:49:56 -耗时 : 23
2020-03-16 15:49:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:56 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-16 15:49:56 -<==      Total: 1
2020-03-16 15:49:56 -耗时 : 36
2020-03-16 15:49:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:49:56 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-16 15:49:56 -<==      Total: 0
2020-03-16 15:49:56 -耗时 : 31
2020-03-16 15:49:56 -<==      Total: 0
2020-03-16 15:49:56 -耗时 : 32
2020-03-16 15:50:03 -此处进行解密+验签+身份验证
2020-03-16 15:50:03 -此处进行解密+验签+身份验证
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:50:03 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 15:50:03 -==> Parameters: 
2020-03-16 15:50:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:03 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:50:03 -<==      Total: 1
2020-03-16 15:50:03 -==> Parameters: 691(String)
2020-03-16 15:50:03 -耗时 : 14
2020-03-16 15:50:03 -此处进行解密+验签+身份验证
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:03 -<==      Total: 1
2020-03-16 15:50:03 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:50:03 -==> Parameters: 691(String)
2020-03-16 15:50:03 -此处进行解密+验签+身份验证
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:03 -此处进行解密+验签+身份验证
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:03 -<==      Total: 1
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:03 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:50:03 -==> Parameters: 
2020-03-16 15:50:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:03 -<==      Total: 1
2020-03-16 15:50:03 -耗时 : 37
2020-03-16 15:50:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:03 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:03 -==> Parameters: 691(String), 691(String)
2020-03-16 15:50:03 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:03 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:50:03 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:03 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:50:03 -<==      Total: 10
2020-03-16 15:50:03 -耗时 : 35
2020-03-16 15:50:03 -<==      Total: 0
2020-03-16 15:50:03 -耗时 : 36
2020-03-16 15:50:03 -<==      Total: 10
2020-03-16 15:50:03 -耗时 : 35
2020-03-16 15:50:05 -此处进行解密+验签+身份验证
2020-03-16 15:50:05 -此处进行解密+验签+身份验证
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:05 -此处进行解密+验签+身份验证
2020-03-16 15:50:05 -此处进行解密+验签+身份验证
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:05 -此处进行解密+验签+身份验证
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:50:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:50:05 -==> Parameters: 
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:05 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:50:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:05 -==> Parameters: 691(String), 691(String)
2020-03-16 15:50:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:05 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:50:05 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:50:05 -==> Parameters: 691(String)
2020-03-16 15:50:05 -<==      Total: 10
2020-03-16 15:50:05 -耗时 : 24
2020-03-16 15:50:05 -<==      Total: 1
2020-03-16 15:50:05 -耗时 : 27
2020-03-16 15:50:05 -<==      Total: 10
2020-03-16 15:50:05 -耗时 : 27
2020-03-16 15:50:05 -<==      Total: 0
2020-03-16 15:50:05 -耗时 : 34
2020-03-16 15:50:05 -<==      Total: 1
2020-03-16 15:50:05 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:50:05 -==> Parameters: 691(String)
2020-03-16 15:50:05 -<==      Total: 1
2020-03-16 15:50:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:50:05 -==> Parameters: 
2020-03-16 15:50:05 -<==      Total: 1
2020-03-16 15:50:05 -耗时 : 58
2020-03-16 15:50:08 -此处进行解密+验签+身份验证
2020-03-16 15:50:08 -此处进行解密+验签+身份验证
2020-03-16 15:50:08 -此处进行解密+验签+身份验证
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:08 -此处进行解密+验签+身份验证
2020-03-16 15:50:08 -此处进行解密+验签+身份验证
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:50:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:50:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 15:50:08 -==> Parameters: 
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:08 -<==      Total: 1
2020-03-16 15:50:08 -耗时 : 11
2020-03-16 15:50:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:08 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:50:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:08 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:50:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:08 -==> Parameters: 691(String), 691(String)
2020-03-16 15:50:08 -<==      Total: 10
2020-03-16 15:50:08 -耗时 : 23
2020-03-16 15:50:08 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:50:08 -==> Parameters: 691(String)
2020-03-16 15:50:08 -<==      Total: 0
2020-03-16 15:50:08 -耗时 : 32
2020-03-16 15:50:08 -<==      Total: 10
2020-03-16 15:50:08 -耗时 : 32
2020-03-16 15:50:08 -<==      Total: 1
2020-03-16 15:50:08 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:50:08 -==> Parameters: 691(String)
2020-03-16 15:50:08 -<==      Total: 1
2020-03-16 15:50:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:50:08 -==> Parameters: 
2020-03-16 15:50:08 -<==      Total: 1
2020-03-16 15:50:08 -耗时 : 63
2020-03-16 15:50:10 -此处进行解密+验签+身份验证
2020-03-16 15:50:10 -此处进行解密+验签+身份验证
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:10 -此处进行解密+验签+身份验证
2020-03-16 15:50:10 -此处进行解密+验签+身份验证
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:10 -此处进行解密+验签+身份验证
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-16 15:50:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-16 15:50:10 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=691 and cre_month=202003 
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:10 -==> Parameters: 
2020-03-16 15:50:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:50:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:10 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-16 15:50:10 -==> Parameters: 691(String)
2020-03-16 15:50:10 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:10 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:10 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:50:10 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:50:10 -<==      Total: 1
2020-03-16 15:50:10 -耗时 : 25
2020-03-16 15:50:10 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:10 -==> Parameters: 691(String), 691(String)
2020-03-16 15:50:10 -<==      Total: 1
2020-03-16 15:50:10 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:50:10 -==> Parameters: 691(String)
2020-03-16 15:50:10 -<==      Total: 1
2020-03-16 15:50:10 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=691 
2020-03-16 15:50:10 -==> Parameters: 
2020-03-16 15:50:10 -<==      Total: 4
2020-03-16 15:50:10 -耗时 : 44
2020-03-16 15:50:10 -<==      Total: 10
2020-03-16 15:50:10 -耗时 : 49
2020-03-16 15:50:10 -<==      Total: 10
2020-03-16 15:50:10 -耗时 : 53
2020-03-16 15:50:10 -<==      Total: 1
2020-03-16 15:50:10 -耗时 : 69
2020-03-16 15:50:11 -此处进行解密+验签+身份验证
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:11 -此处进行解密+验签+身份验证
2020-03-16 15:50:11 -此处进行解密+验签+身份验证
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:11 -此处进行解密+验签+身份验证
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:11 -此处进行解密+验签+身份验证
2020-03-16 15:50:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:50:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:11 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 15:50:11 -==> Parameters: 
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:11 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:50:11 -==> Parameters: 691(String)
2020-03-16 15:50:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:11 -<==      Total: 1
2020-03-16 15:50:11 -耗时 : 10
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:11 -<==      Total: 1
2020-03-16 15:50:11 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:50:11 -==> Parameters: 691(String)
2020-03-16 15:50:11 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:11 -==> Parameters: 691(String), 691(String)
2020-03-16 15:50:11 -<==      Total: 1
2020-03-16 15:50:11 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:50:11 -==> Parameters: 
2020-03-16 15:50:11 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:11 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:50:11 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:11 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:50:11 -<==      Total: 1
2020-03-16 15:50:11 -<==      Total: 10
2020-03-16 15:50:11 -耗时 : 42
2020-03-16 15:50:11 -耗时 : 33
2020-03-16 15:50:11 -<==      Total: 0
2020-03-16 15:50:11 -耗时 : 33
2020-03-16 15:50:11 -<==      Total: 10
2020-03-16 15:50:11 -耗时 : 32
2020-03-16 15:50:17 -此处进行解密+验签+身份验证
2020-03-16 15:50:17 -此处进行解密+验签+身份验证
2020-03-16 15:50:17 -此处进行解密+验签+身份验证
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:17 -此处进行解密+验签+身份验证
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:17 -此处进行解密+验签+身份验证
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:50:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:50:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:50:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:50:17 -==> Parameters: 
2020-03-16 15:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:50:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:17 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:50:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:17 -==> Parameters: 691(String), 691(String)
2020-03-16 15:50:17 -<==      Total: 0
2020-03-16 15:50:17 -耗时 : 20
2020-03-16 15:50:17 -<==      Total: 1
2020-03-16 15:50:17 -耗时 : 18
2020-03-16 15:50:17 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:50:17 -==> Parameters: 691(String)
2020-03-16 15:50:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:50:17 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:50:17 -<==      Total: 10
2020-03-16 15:50:17 -耗时 : 24
2020-03-16 15:50:17 -<==      Total: 10
2020-03-16 15:50:17 -<==      Total: 1
2020-03-16 15:50:17 -耗时 : 43
2020-03-16 15:50:17 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:50:17 -==> Parameters: 691(String)
2020-03-16 15:50:17 -<==      Total: 1
2020-03-16 15:50:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:50:17 -==> Parameters: 
2020-03-16 15:50:17 -<==      Total: 1
2020-03-16 15:50:17 -耗时 : 71
2020-03-16 15:55:16 -此处进行解密+验签+身份验证
2020-03-16 15:55:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:16 -此处进行解密+验签+身份验证
2020-03-16 15:55:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:55:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:55:21 -此处进行解密+验签+身份验证
2020-03-16 15:55:21 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 15:55:21 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:55:21 -==> Parameters: 
2020-03-16 15:55:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:21 -==> Parameters: 691(String)
2020-03-16 15:55:21 -此处进行解密+验签+身份验证
2020-03-16 15:55:21 -此处进行解密+验签+身份验证
2020-03-16 15:55:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:21 -<==      Total: 1
2020-03-16 15:55:31 -<==      Total: 1
2020-03-16 15:55:31 -耗时 : 10296
2020-03-16 15:55:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:55:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:31 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:55:31 -==> Parameters: 691(String)
2020-03-16 15:55:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:55:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:55:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:31 -<==      Total: 1
2020-03-16 15:55:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:31 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:55:31 -==> Parameters: 
2020-03-16 15:55:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:31 -<==      Total: 1
2020-03-16 15:55:31 -耗时 : 15122
2020-03-16 15:55:31 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:55:31 -==> Parameters: 691(String), 691(String)
2020-03-16 15:55:31 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:55:31 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:55:31 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:55:31 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:55:31 -<==      Total: 10
2020-03-16 15:55:31 -耗时 : 31
2020-03-16 15:55:31 -<==      Total: 0
2020-03-16 15:55:31 -耗时 : 25
2020-03-16 15:55:31 -<==      Total: 10
2020-03-16 15:55:31 -耗时 : 34
2020-03-16 15:55:34 -此处进行解密+验签+身份验证
2020-03-16 15:55:34 -此处进行解密+验签+身份验证
2020-03-16 15:55:34 -此处进行解密+验签+身份验证
2020-03-16 15:55:34 -此处进行解密+验签+身份验证
2020-03-16 15:55:34 -此处进行解密+验签+身份验证
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:55:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:55:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:55:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:55:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:34 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:55:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:55:34 -==> Parameters: 
2020-03-16 15:55:34 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:55:34 -==> Parameters: 691(String), 691(String)
2020-03-16 15:55:36 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:55:36 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:55:36 -<==      Total: 1
2020-03-16 15:55:36 -耗时 : 2093
2020-03-16 15:55:36 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:55:36 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:55:36 -<==      Total: 10
2020-03-16 15:55:36 -耗时 : 2098
2020-03-16 15:55:36 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:55:36 -<==      Total: 10
2020-03-16 15:55:36 -耗时 : 2101
2020-03-16 15:55:36 -==> Parameters: 691(String)
2020-03-16 15:55:36 -<==      Total: 0
2020-03-16 15:55:36 -耗时 : 2102
2020-03-16 15:55:36 -<==      Total: 1
2020-03-16 15:55:41 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:55:41 -==> Parameters: 691(String)
2020-03-16 15:55:41 -<==      Total: 1
2020-03-16 15:56:21 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:21 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:21 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:21 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:21 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -此处进行解密+验签+身份验证
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:56:23 -==> Parameters: 
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:56:23 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 15:56:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:56:23 -==> Parameters: 469(String)
2020-03-16 15:56:23 -==> Parameters: 469(String)
2020-03-16 15:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 15:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:56:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:56:24 -==> Parameters: 469(String)
2020-03-16 15:56:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:56:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:56:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:56:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:56:24 -<==      Total: 1
2020-03-16 15:56:24 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 15:56:24 -==> Parameters: 
2020-03-16 15:56:24 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 15:56:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 15:56:24 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 15:56:24 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 15:56:24 -==> Parameters: 469(String)
2020-03-16 15:56:24 -==> Parameters: 469(String)
2020-03-16 15:56:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:56:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:56:24 -==> Parameters: 469(String)
2020-03-16 15:56:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:56:25 -耗时 : 50953
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -耗时 : 1705
2020-03-16 15:56:25 -<==      Total: 3
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -耗时 : 1720
2020-03-16 15:56:25 -耗时 : 1718
2020-03-16 15:56:25 -<==      Total: 3
2020-03-16 15:56:25 -耗时 : 1720
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:56:25 -耗时 : 1726
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:56:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:56:25 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 15:56:25 -==> Parameters: 
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -耗时 : 1742
2020-03-16 15:56:25 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:56:25 -==> Parameters: 469(String)
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==> Parameters: 469(String)
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:56:25 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:56:25 -==> Parameters: 469(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:56:25 -==> Parameters: 469(String)
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:56:25 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 3
2020-03-16 15:56:25 -耗时 : 1741
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -耗时 : 1737
2020-03-16 15:56:25 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:56:25 -==> Parameters: 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:56:25 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -耗时 : 1749
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -耗时 : 1755
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:56:25 -==> Parameters: 
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:56:25 -==> Parameters: 
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:56:25 -==> Parameters: 
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:56:25 -==> Parameters: 
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:56:25 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -耗时 : 1846
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:56:25 -==> Parameters: 469(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 1
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:56:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -耗时 : 1905
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:56:25 -<==    Updates: 2
2020-03-16 15:56:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:56:25 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -耗时 : 1917
2020-03-16 15:56:25 -<==      Total: 2
2020-03-16 15:56:25 -耗时 : 1913
2020-03-16 15:56:26 -解密：
2020-03-16 15:56:26 -解密：
2020-03-16 15:56:26 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 15:56:26 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 15:56:26 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 15:56:26 -==> Parameters: 01(String), 01(String)
2020-03-16 15:56:26 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 15:56:26 -==> Parameters: 01(String), 01(String)
2020-03-16 15:56:26 -<==      Total: 12
2020-03-16 15:56:26 -耗时 : 9
2020-03-16 15:56:26 -<==      Total: 12
2020-03-16 15:56:26 -耗时 : 10
2020-03-16 15:58:33 -此处进行解密+验签+身份验证
2020-03-16 15:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:33 -此处进行解密+验签+身份验证
2020-03-16 15:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 15:58:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 15:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 15:58:33 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 15:58:33 -==> Parameters: 469(String)
2020-03-16 15:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 15:58:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:58:33 -==> Parameters: 469(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 1
2020-03-16 15:58:33 -耗时 : 19
2020-03-16 15:58:33 -<==      Total: 1
2020-03-16 15:58:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:58:33 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 2
2020-03-16 15:58:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:58:33 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 15:58:33 -<==    Updates: 2
2020-03-16 15:58:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 15:58:33 -==> Parameters: 469(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 1
2020-03-16 15:58:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:58:33 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 2
2020-03-16 15:58:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:58:33 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 15:58:33 -<==    Updates: 2
2020-03-16 15:58:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 15:58:33 -==> Parameters: 
2020-03-16 15:58:33 -<==      Total: 1
2020-03-16 15:58:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:58:33 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 2
2020-03-16 15:58:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:58:33 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 15:58:33 -<==    Updates: 2
2020-03-16 15:58:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 15:58:33 -==> Parameters: 469(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 1
2020-03-16 15:58:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:58:33 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 2
2020-03-16 15:58:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 15:58:33 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 15:58:33 -<==    Updates: 2
2020-03-16 15:58:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 15:58:33 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 15:58:33 -<==      Total: 2
2020-03-16 15:58:33 -耗时 : 186
2020-03-16 15:58:40 -此处进行解密+验签+身份验证
2020-03-16 15:58:40 -此处进行解密+验签+身份验证
2020-03-16 15:58:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 15:58:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 15:58:40 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 15:58:40 -==> Parameters: 469(String)
2020-03-16 15:58:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 15:58:40 -==> Parameters: 469(String)
2020-03-16 15:58:40 -<==      Total: 3
2020-03-16 15:58:40 -耗时 : 9
2020-03-16 15:58:40 -<==      Total: 1
2020-03-16 15:58:40 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 15:58:40 -==> Parameters: 469(String)
2020-03-16 15:58:40 -<==      Total: 1
2020-03-16 15:58:40 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:58:40 -==> Parameters: 469(String)
2020-03-16 15:58:40 -<==      Total: 1
2020-03-16 15:58:40 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:58:40 -==> Parameters: 469(String)
2020-03-16 15:58:40 -<==      Total: 1
2020-03-16 15:58:40 -耗时 : 33
2020-03-16 15:58:42 -此处进行解密+验签+身份验证
2020-03-16 15:58:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:42 -此处进行解密+验签+身份验证
2020-03-16 15:58:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:58:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:58:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 15:58:44 -==> Parameters: 
2020-03-16 15:58:44 -此处进行解密+验签+身份验证
2020-03-16 15:58:44 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 15:58:44 -此处进行解密+验签+身份验证
2020-03-16 15:58:44 -==> Parameters: 691(String)
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:44 -此处进行解密+验签+身份验证
2020-03-16 15:58:44 -<==      Total: 1
2020-03-16 15:58:44 -耗时 : 2179
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:44 -<==      Total: 1
2020-03-16 15:58:44 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 15:58:44 -==> Parameters: 691(String)
2020-03-16 15:58:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:58:44 -<==      Total: 1
2020-03-16 15:58:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:58:44 -==> Parameters: 
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:58:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:44 -<==      Total: 1
2020-03-16 15:58:44 -耗时 : 2212
2020-03-16 15:58:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:58:44 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:58:44 -<==      Total: 0
2020-03-16 15:58:44 -耗时 : 19
2020-03-16 15:58:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 15:58:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:58:44 -==> Parameters: 691(String), 691(String)
2020-03-16 15:58:44 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:58:44 -<==      Total: 10
2020-03-16 15:58:44 -<==      Total: 10
2020-03-16 15:58:44 -耗时 : 32
2020-03-16 15:58:44 -耗时 : 32
2020-03-16 15:58:52 -此处进行解密+验签+身份验证
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:52 -此处进行解密+验签+身份验证
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:52 -此处进行解密+验签+身份验证
2020-03-16 15:58:52 -此处进行解密+验签+身份验证
2020-03-16 15:58:52 -此处进行解密+验签+身份验证
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 15:58:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:58:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 15:58:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type='epos' 
2020-03-16 15:58:54 -==> Parameters: 
2020-03-16 15:58:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 15:58:54 -==> Parameters: 691(String), 691(String)
2020-03-16 15:58:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 15:58:54 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 15:58:54 -==> Parameters: 691(String)
2020-03-16 15:58:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 15:58:54 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 15:58:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 15:58:54 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 15:58:54 -<==      Total: 1
2020-03-16 15:58:54 -<==      Total: 10
2020-03-16 15:58:54 -耗时 : 2013
2020-03-16 15:58:54 -耗时 : 2021
2020-03-16 15:58:54 -<==      Total: 0
2020-03-16 15:58:54 -耗时 : 2016
2020-03-16 15:58:54 -<==      Total: 1
2020-03-16 15:58:54 -<==      Total: 10
2020-03-16 15:58:54 -耗时 : 2022
2020-03-16 15:58:54 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 15:58:54 -==> Parameters: 691(String)
2020-03-16 15:58:54 -<==      Total: 1
2020-03-16 15:58:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 15:58:54 -==> Parameters: 
2020-03-16 15:58:54 -<==      Total: 1
2020-03-16 15:58:54 -耗时 : 2053
2020-03-16 15:59:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:59:44 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 15:59:44 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 15:59:44 -Shutting down Quartz Scheduler
2020-03-16 15:59:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 15:59:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 15:59:44 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 15:59:44 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 15:59:44 -HikariPool-1 - Shutdown initiated...
2020-03-16 15:59:44 -HikariPool-1 - Shutdown completed.
2020-03-16 16:00:27 -Starting LongEcologicalApplication on PC-201905161910 with PID 9384 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 16:00:27 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 16:00:27 -No active profile set, falling back to default profiles: default
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:28 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:00:29 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 16:00:29 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 16:00:29 -Finished Spring Data repository scanning in 147ms. Found 0 repository interfaces.
2020-03-16 16:00:29 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 16:00:29 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 16:00:29 -Finished Spring Data repository scanning in 299ms. Found 0 repository interfaces.
2020-03-16 16:00:30 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$64991c95] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 16:00:30 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5f1d0135] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 16:00:31 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 16:00:31 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 16:00:31 -Starting service [Tomcat]
2020-03-16 16:00:31 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 16:00:31 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 16:00:31 -Initializing Spring embedded WebApplicationContext
2020-03-16 16:00:31 -Root WebApplicationContext: initialization completed in 4030 ms
2020-03-16 16:00:31 -Filter xssFilter was not registered (disabled)
2020-03-16 16:00:31 -HikariPool-1 - Starting...
2020-03-16 16:00:32 -HikariPool-1 - Start completed.
2020-03-16 16:00:32 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 16:00:32 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 16:00:32 -HHH000206: hibernate.properties not found
2020-03-16 16:00:32 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 16:00:32 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 16:00:32 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 16:00:33 -Using default implementation for ThreadExecutor
2020-03-16 16:00:33 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 16:00:33 -Quartz Scheduler v.2.3.0 created.
2020-03-16 16:00:33 -RAMJobStore initialized.
2020-03-16 16:00:33 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 16:00:33 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 16:00:33 -Quartz scheduler version: 2.3.0
2020-03-16 16:00:33 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6e78177b
2020-03-16 16:00:34 -STAET TaskExecutorConfig
2020-03-16 16:00:34 -Initializing ExecutorService
2020-03-16 16:00:34 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 16:00:34 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 16:00:34 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 16:00:35 -Initializing ExecutorService 'taskScheduler'
2020-03-16 16:00:35 -Starting Quartz Scheduler now
2020-03-16 16:00:35 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 16:00:35 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 16:00:35 -Using a shared selector for servlet write/read
2020-03-16 16:00:35 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 16:00:35 -Started LongEcologicalApplication in 9.304 seconds (JVM running for 10.74)
2020-03-16 16:01:04 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 16:01:04 -Initializing Servlet 'dispatcherServlet'
2020-03-16 16:01:04 -Completed initialization in 17 ms
2020-03-16 16:01:05 -此处进行解密+验签+身份验证
2020-03-16 16:01:05 -此处进行解密+验签+身份验证
2020-03-16 16:01:05 -此处进行解密+验签+身份验证
2020-03-16 16:01:05 -此处进行解密+验签+身份验证
2020-03-16 16:01:05 -此处进行解密+验签+身份验证
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:05 -Starting without optional epoll library
2020-03-16 16:01:05 -Starting without optional kqueue library
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 16:01:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 16:01:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 16:01:08 -==> Parameters: 
2020-03-16 16:01:08 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 16:01:08 -==> Parameters: 691(String)
2020-03-16 16:01:08 -<==      Total: 1
2020-03-16 16:01:08 -耗时 : 2384
2020-03-16 16:01:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:08 -<==      Total: 1
2020-03-16 16:01:08 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:01:08 -==> Parameters: 691(String)
2020-03-16 16:01:08 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 16:01:08 -<==      Total: 0
2020-03-16 16:01:08 -耗时 : 2407
2020-03-16 16:01:08 -<==      Total: 1
2020-03-16 16:01:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 16:01:08 -==> Parameters: 
2020-03-16 16:01:08 -<==      Total: 1
2020-03-16 16:01:08 -耗时 : 2426
2020-03-16 16:01:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:08 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 16:01:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:01:08 -<==      Total: 10
2020-03-16 16:01:08 -<==      Total: 10
2020-03-16 16:01:08 -耗时 : 2511
2020-03-16 16:01:08 -耗时 : 2511
2020-03-16 16:01:10 -此处进行解密+验签+身份验证
2020-03-16 16:01:10 -此处进行解密+验签+身份验证
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:10 -此处进行解密+验签+身份验证
2020-03-16 16:01:10 -此处进行解密+验签+身份验证
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:10 -此处进行解密+验签+身份验证
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 16:01:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:10 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type='epos' 
2020-03-16 16:01:10 -==> Parameters: 
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:10 -<==      Total: 1
2020-03-16 16:01:10 -耗时 : 13
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:12 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 16:01:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:12 -==> Parameters: 691(String)
2020-03-16 16:01:12 -==> Parameters: 691(String), 691(String)
2020-03-16 16:01:12 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 16:01:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:12 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 16:01:12 -<==      Total: 10
2020-03-16 16:01:12 -耗时 : 2069
2020-03-16 16:01:12 -<==      Total: 1
2020-03-16 16:01:12 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:01:12 -==> Parameters: 691(String)
2020-03-16 16:01:12 -<==      Total: 10
2020-03-16 16:01:12 -耗时 : 2072
2020-03-16 16:01:12 -<==      Total: 0
2020-03-16 16:01:12 -<==      Total: 1
2020-03-16 16:01:12 -耗时 : 2079
2020-03-16 16:01:12 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 16:01:12 -==> Parameters: 
2020-03-16 16:01:12 -<==      Total: 1
2020-03-16 16:01:12 -耗时 : 2093
2020-03-16 16:01:46 -此处进行解密+验签+身份验证
2020-03-16 16:01:46 -此处进行解密+验签+身份验证
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:46 -此处进行解密+验签+身份验证
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:46 -此处进行解密+验签+身份验证
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:46 -此处进行解密+验签+身份验证
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 16:01:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:46 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type is null 
2020-03-16 16:01:46 -==> Parameters: 
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:46 -<==      Total: 1
2020-03-16 16:01:46 -耗时 : 14
2020-03-16 16:01:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:46 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 16:01:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:46 -==> Parameters: 691(String), 691(String)
2020-03-16 16:01:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:46 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 16:01:46 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-16 16:01:46 -==> Parameters: 691(String)
2020-03-16 16:01:46 -<==      Total: 10
2020-03-16 16:01:46 -<==      Total: 10
2020-03-16 16:01:46 -耗时 : 33
2020-03-16 16:01:46 -耗时 : 39
2020-03-16 16:01:46 -<==      Total: 0
2020-03-16 16:01:46 -耗时 : 34
2020-03-16 16:01:46 -<==      Total: 1
2020-03-16 16:01:46 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:01:46 -==> Parameters: 691(String)
2020-03-16 16:01:46 -<==      Total: 1
2020-03-16 16:01:46 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 16:01:46 -==> Parameters: 
2020-03-16 16:01:46 -<==      Total: 1
2020-03-16 16:01:46 -耗时 : 74
2020-03-16 16:01:51 -此处进行解密+验签+身份验证
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:51 -此处进行解密+验签+身份验证
2020-03-16 16:01:51 -此处进行解密+验签+身份验证
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:51 -此处进行解密+验签+身份验证
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:51 -此处进行解密+验签+身份验证
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:01:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-16 16:01:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=691 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=691 and cre_month=202003 and pos_type='epos' 
2020-03-16 16:01:51 -==> Parameters: 
2020-03-16 16:01:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:51 -<==      Total: 1
2020-03-16 16:01:51 -耗时 : 14
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:01:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:51 -==> Parameters: 691(String), 691(String), 1(String)
2020-03-16 16:01:51 -==> Parameters: 691(String), 691(String), 0(String)
2020-03-16 16:01:51 -<==      Total: 10
2020-03-16 16:01:51 -耗时 : 33
2020-03-16 16:01:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 16:01:51 -==> Parameters: 691(String), 691(String)
2020-03-16 16:01:51 -<==      Total: 0
2020-03-16 16:01:51 -耗时 : 36
2020-03-16 16:01:51 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-16 16:01:51 -==> Parameters: 691(String)
2020-03-16 16:01:51 -<==      Total: 1
2020-03-16 16:01:55 -<==      Total: 10
2020-03-16 16:01:55 -耗时 : 4558
2020-03-16 16:01:55 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:01:55 -==> Parameters: 691(String)
2020-03-16 16:01:55 -<==      Total: 1
2020-03-16 16:02:02 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=691 and pos_type='epos' 
2020-03-16 16:02:02 -==> Parameters: 
2020-03-16 16:02:02 -<==      Total: 1
2020-03-16 16:02:02 -耗时 : 11139
2020-03-16 16:03:40 -此处进行解密+验签+身份验证
2020-03-16 16:03:40 -此处进行解密+验签+身份验证
2020-03-16 16:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:03:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:03:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:03:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:03:40 -==> Parameters: 469(String)
2020-03-16 16:03:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:03:40 -==> Parameters: 469(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 1
2020-03-16 16:03:40 -耗时 : 21
2020-03-16 16:03:40 -<==      Total: 1
2020-03-16 16:03:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:03:40 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 2
2020-03-16 16:03:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:03:40 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:03:40 -<==    Updates: 2
2020-03-16 16:03:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:03:40 -==> Parameters: 469(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 1
2020-03-16 16:03:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:03:40 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 2
2020-03-16 16:03:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:03:40 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:03:40 -<==    Updates: 2
2020-03-16 16:03:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:03:40 -==> Parameters: 
2020-03-16 16:03:40 -<==      Total: 1
2020-03-16 16:03:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:03:40 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 2
2020-03-16 16:03:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:03:40 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:03:40 -<==    Updates: 2
2020-03-16 16:03:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:03:40 -==> Parameters: 469(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 1
2020-03-16 16:03:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:03:40 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 2
2020-03-16 16:03:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:03:40 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:03:40 -<==    Updates: 2
2020-03-16 16:03:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:03:40 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:03:40 -<==      Total: 2
2020-03-16 16:03:40 -耗时 : 135
2020-03-16 16:03:58 -此处进行解密+验签+身份验证
2020-03-16 16:03:58 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 16:03:58 -token值=======469|BICS0UYPQGMUS6E7SMOBNU32RW99TTCW
2020-03-16 16:03:58 -耗时 : 45
2020-03-16 16:04:07 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -解密：{"sys_user_account":"13763349409","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"2C2D629FA8BFA5533EF7B0AC744E9A2C","version_no":"450000000145206","login_type":"account"}
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:04:08 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 16:04:08 -==> Parameters: 13763349409(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 16:04:08 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 160408(String), 691(Integer)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:04:08 -==> Parameters: 25(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:04:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:04:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:04:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:04:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:04:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:04:08 -耗时 : 123
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -解密：
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:04:08 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:04:08 -==> Parameters: 01(String), 01(String)
2020-03-16 16:04:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:04:08 -==> Parameters: 691(String)
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -耗时 : 15
2020-03-16 16:04:08 -<==      Total: 12
2020-03-16 16:04:08 -耗时 : 20
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:08 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:08 -==> Parameters: 
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:08 -<==      Total: 3
2020-03-16 16:04:08 -耗时 : 15
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:08 -此处进行解密+验签+身份验证
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:04:08 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:04:08 -==> Parameters: 691(String)
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:04:08 -<==      Total: 2
2020-03-16 16:04:08 -耗时 : 9
2020-03-16 16:04:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:04:08 -==> Parameters: 691(String)
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -耗时 : 12
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:04:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:04:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:04:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:04:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:04:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:04:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:04:08 -==> Parameters: 
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:04:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:04:08 -==> Parameters: 
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -耗时 : 140
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:04:08 -==> Parameters: 691(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:04:08 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:04:08 -<==    Updates: 1
2020-03-16 16:04:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:04:08 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:04:08 -<==      Total: 1
2020-03-16 16:04:08 -耗时 : 227
2020-03-16 16:04:11 -此处进行解密+验签+身份验证
2020-03-16 16:04:11 -此处进行解密+验签+身份验证
2020-03-16 16:04:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:04:11 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:04:11 -==> Parameters: 691(String)
2020-03-16 16:04:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:04:11 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:04:11 -==> Parameters: 691(String)
2020-03-16 16:04:11 -<==      Total: 1
2020-03-16 16:04:11 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:04:11 -==> Parameters: 691(String)
2020-03-16 16:04:11 -<==      Total: 0
2020-03-16 16:04:11 -耗时 : 14
2020-03-16 16:04:11 -<==      Total: 1
2020-03-16 16:04:11 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:04:11 -==> Parameters: 691(String)
2020-03-16 16:04:11 -<==      Total: 1
2020-03-16 16:04:11 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:04:11 -==> Parameters: 691(String)
2020-03-16 16:04:11 -<==      Total: 1
2020-03-16 16:04:11 -耗时 : 39
2020-03-16 16:04:17 -此处进行解密+验签+身份验证
2020-03-16 16:04:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:17 -此处进行解密+验签+身份验证
2020-03-16 16:04:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:04:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:04:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:04:17 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:04:17 -==> Parameters: 691(String)
2020-03-16 16:04:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:04:17 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:04:17 -==> Parameters: 691(String)
2020-03-16 16:04:17 -<==      Total: 1
2020-03-16 16:04:17 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:04:17 -==> Parameters: 691(String)
2020-03-16 16:04:17 -<==      Total: 0
2020-03-16 16:04:17 -耗时 : 14
2020-03-16 16:04:17 -<==      Total: 1
2020-03-16 16:04:17 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:04:17 -==> Parameters: 691(String)
2020-03-16 16:04:17 -<==      Total: 1
2020-03-16 16:04:17 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:04:17 -==> Parameters: 691(String)
2020-03-16 16:04:17 -<==      Total: 1
2020-03-16 16:04:17 -耗时 : 68
2020-03-16 16:05:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 16:05:47 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 16:05:47 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 16:05:47 -Shutting down Quartz Scheduler
2020-03-16 16:05:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 16:05:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 16:05:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 16:05:47 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 16:05:47 -HikariPool-1 - Shutdown initiated...
2020-03-16 16:05:47 -HikariPool-1 - Shutdown completed.
2020-03-16 16:06:06 -Starting LongEcologicalApplication on PC-201905161910 with PID 6084 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 16:06:06 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 16:06:06 -No active profile set, falling back to default profiles: default
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 16:06:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 16:06:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 16:06:08 -Finished Spring Data repository scanning in 132ms. Found 0 repository interfaces.
2020-03-16 16:06:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 16:06:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 16:06:08 -Finished Spring Data repository scanning in 63ms. Found 0 repository interfaces.
2020-03-16 16:06:08 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$826a5e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 16:06:08 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2aa8a87] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 16:06:09 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 16:06:09 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 16:06:09 -Starting service [Tomcat]
2020-03-16 16:06:09 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 16:06:09 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 16:06:09 -Initializing Spring embedded WebApplicationContext
2020-03-16 16:06:09 -Root WebApplicationContext: initialization completed in 3131 ms
2020-03-16 16:06:09 -Filter xssFilter was not registered (disabled)
2020-03-16 16:06:10 -HikariPool-1 - Starting...
2020-03-16 16:06:10 -HikariPool-1 - Start completed.
2020-03-16 16:06:10 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 16:06:10 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 16:06:10 -HHH000206: hibernate.properties not found
2020-03-16 16:06:10 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 16:06:11 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 16:06:11 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 16:06:11 -Using default implementation for ThreadExecutor
2020-03-16 16:06:11 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 16:06:11 -Quartz Scheduler v.2.3.0 created.
2020-03-16 16:06:11 -RAMJobStore initialized.
2020-03-16 16:06:11 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 16:06:11 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 16:06:11 -Quartz scheduler version: 2.3.0
2020-03-16 16:06:11 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@231d3ce
2020-03-16 16:06:12 -STAET TaskExecutorConfig
2020-03-16 16:06:12 -Initializing ExecutorService
2020-03-16 16:06:12 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 16:06:12 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 16:06:13 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 16:06:13 -Initializing ExecutorService 'taskScheduler'
2020-03-16 16:06:13 -Starting Quartz Scheduler now
2020-03-16 16:06:13 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 16:06:13 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 16:06:13 -Using a shared selector for servlet write/read
2020-03-16 16:06:13 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 16:06:13 -Started LongEcologicalApplication in 8.084 seconds (JVM running for 11.167)
2020-03-16 16:07:07 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 16:07:07 -Initializing Servlet 'dispatcherServlet'
2020-03-16 16:07:07 -Completed initialization in 13 ms
2020-03-16 16:07:07 -此处进行解密+验签+身份验证
2020-03-16 16:07:07 -此处进行解密+验签+身份验证
2020-03-16 16:07:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:07:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:07:07 -Starting without optional epoll library
2020-03-16 16:07:07 -Starting without optional kqueue library
2020-03-16 16:07:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:07:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:07:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:07:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:07:08 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:07:08 -==> Parameters: 691(String)
2020-03-16 16:07:08 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:07:08 -==> Parameters: 691(String)
2020-03-16 16:07:08 -<==      Total: 0
2020-03-16 16:07:08 -耗时 : 67
2020-03-16 16:07:08 -<==      Total: 1
2020-03-16 16:07:08 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:07:08 -==> Parameters: 691(String)
2020-03-16 16:07:08 -<==      Total: 1
2020-03-16 16:07:08 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:07:08 -==> Parameters: 691(String)
2020-03-16 16:07:08 -<==      Total: 1
2020-03-16 16:07:08 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:07:08 -==> Parameters: 691(String)
2020-03-16 16:07:08 -<==      Total: 1
2020-03-16 16:07:08 -耗时 : 96
2020-03-16 16:07:44 -此处进行解密+验签+身份验证
2020-03-16 16:07:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:07:44 -此处进行解密+验签+身份验证
2020-03-16 16:07:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:07:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:07:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:07:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:07:44 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:07:44 -==> Parameters: 691(String)
2020-03-16 16:07:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:07:44 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:07:44 -==> Parameters: 691(String)
2020-03-16 16:07:44 -<==      Total: 0
2020-03-16 16:07:44 -耗时 : 11
2020-03-16 16:07:44 -<==      Total: 1
2020-03-16 16:07:44 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:07:44 -==> Parameters: 691(String)
2020-03-16 16:07:44 -<==      Total: 1
2020-03-16 16:07:44 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:07:44 -==> Parameters: 691(String)
2020-03-16 16:07:44 -<==      Total: 1
2020-03-16 16:07:44 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:07:44 -==> Parameters: 691(String)
2020-03-16 16:07:44 -<==      Total: 1
2020-03-16 16:07:44 -耗时 : 34
2020-03-16 16:09:00 -此处进行解密+验签+身份验证
2020-03-16 16:09:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:09:00 -此处进行解密+验签+身份验证
2020-03-16 16:09:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:09:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:09:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:09:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:09:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:09:03 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:09:03 -==> Parameters: 691(String)
2020-03-16 16:09:03 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:09:03 -==> Parameters: 691(String)
2020-03-16 16:09:03 -<==      Total: 0
2020-03-16 16:09:03 -耗时 : 9
2020-03-16 16:09:03 -<==      Total: 1
2020-03-16 16:09:17 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:09:17 -==> Parameters: 691(String)
2020-03-16 16:09:17 -<==      Total: 1
2020-03-16 16:09:20 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:09:20 -==> Parameters: 691(String)
2020-03-16 16:09:20 -<==      Total: 1
2020-03-16 16:09:29 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:09:29 -==> Parameters: 691(String)
2020-03-16 16:09:29 -<==      Total: 1
2020-03-16 16:09:55 -耗时 : 54730
2020-03-16 16:12:23 -此处进行解密+验签+身份验证
2020-03-16 16:12:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:12:23 -此处进行解密+验签+身份验证
2020-03-16 16:12:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:12:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:12:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:12:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:12:23 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:12:23 -==> Parameters: 691(String)
2020-03-16 16:12:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:12:29 -<==      Total: 0
2020-03-16 16:12:29 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:12:29 -耗时 : 6838
2020-03-16 16:12:29 -==> Parameters: 691(String)
2020-03-16 16:12:30 -<==      Total: 1
2020-03-16 16:12:32 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:12:32 -==> Parameters: 691(String)
2020-03-16 16:12:32 -<==      Total: 1
2020-03-16 16:12:33 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:12:33 -==> Parameters: 691(String)
2020-03-16 16:12:33 -<==      Total: 1
2020-03-16 16:12:38 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:12:38 -==> Parameters: 691(String)
2020-03-16 16:12:38 -<==      Total: 1
2020-03-16 16:12:40 -耗时 : 17414
2020-03-16 16:14:55 -此处进行解密+验签+身份验证
2020-03-16 16:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:14:55 -此处进行解密+验签+身份验证
2020-03-16 16:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:14:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:14:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:14:55 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:14:55 -==> Parameters: 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -耗时 : 14
2020-03-16 16:14:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:14:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:14:55 -==> Parameters: 691(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:14:55 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:14:55 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:14:55 -<==    Updates: 1
2020-03-16 16:14:55 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:14:55 -==> Parameters: 691(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:14:55 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:14:55 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:14:55 -<==    Updates: 1
2020-03-16 16:14:55 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:14:55 -==> Parameters: 
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:14:55 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:14:55 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:14:55 -<==    Updates: 1
2020-03-16 16:14:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:14:55 -==> Parameters: 691(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:14:55 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:14:55 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:14:55 -<==    Updates: 1
2020-03-16 16:14:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:14:55 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:14:55 -<==      Total: 1
2020-03-16 16:14:55 -耗时 : 133
2020-03-16 16:15:01 -此处进行解密+验签+身份验证
2020-03-16 16:15:01 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 16:15:01 -token值=======691|I45DR2IPXB7MA9PPVXO7QEK37MJ6DRIN
2020-03-16 16:15:01 -耗时 : 46
2020-03-16 16:15:11 -此处进行解密+验签+身份验证
2020-03-16 16:15:11 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-16 16:15:11 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:15:11 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 16:15:11 -==> Parameters: 15019499979(String)
2020-03-16 16:15:11 -<==      Total: 1
2020-03-16 16:15:11 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 16:15:11 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 161511(String), 469(Integer)
2020-03-16 16:15:11 -<==    Updates: 1
2020-03-16 16:15:11 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:15:11 -==> Parameters: 25(String)
2020-03-16 16:15:11 -<==      Total: 1
2020-03-16 16:15:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:15:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:15:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:15:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:15:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:15:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:15:12 -耗时 : 108
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -解密：
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:12 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:15:12 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:15:12 -==> Parameters: 01(String), 01(String)
2020-03-16 16:15:12 -==> Parameters: 469(String)
2020-03-16 16:15:12 -<==      Total: 12
2020-03-16 16:15:12 -耗时 : 11
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -耗时 : 12
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:12 -此处进行解密+验签+身份验证
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:15:12 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:15:12 -==> Parameters: 469(String)
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -耗时 : 12
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:15:12 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:15:12 -==> Parameters: 469(String)
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -耗时 : 8
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:15:12 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:15:12 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:15:12 -==> Parameters: 
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:15:12 -<==      Total: 3
2020-03-16 16:15:12 -耗时 : 10
2020-03-16 16:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:15:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:12 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:12 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:15:12 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:15:12 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:15:12 -==> Parameters: 
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:15:12 -==> Parameters: 
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:12 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:12 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 1
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:12 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -耗时 : 124
2020-03-16 16:15:12 -<==    Updates: 2
2020-03-16 16:15:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:12 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:15:12 -<==      Total: 2
2020-03-16 16:15:12 -耗时 : 131
2020-03-16 16:15:16 -此处进行解密+验签+身份验证
2020-03-16 16:15:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:15:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:15:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:15:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:16 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 1
2020-03-16 16:15:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:16 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 2
2020-03-16 16:15:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:15:16 -<==    Updates: 2
2020-03-16 16:15:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:15:16 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 1
2020-03-16 16:15:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:16 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 2
2020-03-16 16:15:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:15:16 -<==    Updates: 2
2020-03-16 16:15:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:15:16 -==> Parameters: 
2020-03-16 16:15:16 -<==      Total: 1
2020-03-16 16:15:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:16 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 2
2020-03-16 16:15:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:16 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:15:16 -<==    Updates: 2
2020-03-16 16:15:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:16 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 1
2020-03-16 16:15:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:16 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 2
2020-03-16 16:15:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:15:16 -<==    Updates: 2
2020-03-16 16:15:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:16 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:15:16 -<==      Total: 2
2020-03-16 16:15:16 -耗时 : 118
2020-03-16 16:15:27 -此处进行解密+验签+身份验证
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:27 -此处进行解密+验签+身份验证
2020-03-16 16:15:27 -此处进行解密+验签+身份验证
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:27 -此处进行解密+验签+身份验证
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-16 16:15:27 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-16 16:15:27 -==> Parameters: 469(String)
2020-03-16 16:15:27 -<==      Total: 1
2020-03-16 16:15:27 -耗时 : 14
2020-03-16 16:15:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:15:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:15:27 -==> Parameters: 469(String), 202003(String)
2020-03-16 16:15:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-16 16:15:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:15:27 -<==      Total: 1
2020-03-16 16:15:27 -耗时 : 8
2020-03-16 16:15:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:15:27 -==> Parameters: 469(String), 202003(String)
2020-03-16 16:15:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-16 16:15:27 -==> Parameters: 469(String), 202003(String)
2020-03-16 16:15:27 -<==      Total: 1
2020-03-16 16:15:27 -耗时 : 12
2020-03-16 16:15:27 -<==      Total: 1
2020-03-16 16:15:27 -耗时 : 22
2020-03-16 16:15:45 -此处进行解密+验签+身份验证
2020-03-16 16:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:15:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:45 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 1
2020-03-16 16:15:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:45 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 2
2020-03-16 16:15:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:15:45 -<==    Updates: 2
2020-03-16 16:15:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:15:45 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 1
2020-03-16 16:15:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:45 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 2
2020-03-16 16:15:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:15:45 -<==    Updates: 2
2020-03-16 16:15:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:15:45 -==> Parameters: 
2020-03-16 16:15:45 -<==      Total: 1
2020-03-16 16:15:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:45 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 2
2020-03-16 16:15:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:45 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:15:45 -<==    Updates: 2
2020-03-16 16:15:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:15:45 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 1
2020-03-16 16:15:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:45 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 2
2020-03-16 16:15:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:15:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:15:45 -<==    Updates: 2
2020-03-16 16:15:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:15:45 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:15:45 -<==      Total: 2
2020-03-16 16:15:45 -耗时 : 121
2020-03-16 16:15:49 -此处进行解密+验签+身份验证
2020-03-16 16:15:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:49 -此处进行解密+验签+身份验证
2020-03-16 16:15:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 16:15:49 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 16:15:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:15:49 -==> Parameters: 469(String)
2020-03-16 16:15:49 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:15:49 -==> Parameters: 469(String), 469(String)
2020-03-16 16:15:49 -<==      Total: 98
2020-03-16 16:15:49 -耗时 : 42
2020-03-16 16:15:50 -此处进行解密+验签+身份验证
2020-03-16 16:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:15:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:15:51 -==> Parameters: 469(String)
2020-03-16 16:15:51 -<==      Total: 20
2020-03-16 16:15:51 -耗时 : 14
2020-03-16 16:15:51 -此处进行解密+验签+身份验证
2020-03-16 16:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:15:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:15:51 -==> Parameters: 469(String)
2020-03-16 16:15:51 -<==      Total: 20
2020-03-16 16:15:51 -耗时 : 15
2020-03-16 16:15:56 -此处进行解密+验签+身份验证
2020-03-16 16:15:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:56 -此处进行解密+验签+身份验证
2020-03-16 16:15:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:15:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:15:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:15:56 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:15:56 -==> Parameters: 469(String)
2020-03-16 16:15:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:15:56 -<==      Total: 2
2020-03-16 16:15:56 -耗时 : 11
2020-03-16 16:15:56 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:15:56 -==> Parameters: 469(String), EPOS20200113051(String)
2020-03-16 16:15:56 -<==      Total: 1
2020-03-16 16:15:56 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:15:56 -==> Parameters: 
2020-03-16 16:15:56 -<==      Total: 94
2020-03-16 16:15:56 -耗时 : 46
2020-03-16 16:16:03 -<==      Total: 4
2020-03-16 16:16:03 -耗时 : 13905
2020-03-16 16:16:40 -此处进行解密+验签+身份验证
2020-03-16 16:16:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:16:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:16:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:16:40 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:16:40 -==> Parameters: 469(String)
2020-03-16 16:16:40 -<==      Total: 20
2020-03-16 16:16:40 -耗时 : 27
2020-03-16 16:17:57 -此处进行解密+验签+身份验证
2020-03-16 16:17:57 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-16 16:17:57 -此处进行解密+验签+身份验证
2020-03-16 16:17:57 -解密：
2020-03-16 16:17:57 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:17:57 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:17:57 -==> Parameters: 04(String), 04(String)
2020-03-16 16:17:57 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-16 16:17:57 -<==      Total: 0
2020-03-16 16:17:57 -耗时 : 11
2020-03-16 16:17:57 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-16 16:17:57 -耗时 : 25
2020-03-16 16:17:57 -此处进行解密+验签+身份验证
2020-03-16 16:17:57 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"87EAA4E06D5FFD42BE17F072E3668989","version_no":"450000000145206","login_type":"token","token":"469|55HKULU7H9SFN5M395RFLGMVA9P692BS","sys_user_account":""}
2020-03-16 16:17:57 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:17:57 -token值=======469|55HKULU7H9SFN5M395RFLGMVA9P692BS
2020-03-16 16:17:57 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:17:57 -==> Parameters: 469(String)
2020-03-16 16:17:57 -<==      Total: 1
2020-03-16 16:17:57 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:17:57 -==> Parameters: 25(String)
2020-03-16 16:17:57 -<==      Total: 1
2020-03-16 16:17:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:17:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:17:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:17:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:17:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:17:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:17:57 -耗时 : 97
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:18:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:18:02 -==> Parameters: 469(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -耗时 : 10
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -解密：
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:18:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:18:02 -==> Parameters: 01(String), 01(String)
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:02 -<==      Total: 12
2020-03-16 16:18:02 -耗时 : 10
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:02 -此处进行解密+验签+身份验证
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:18:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:18:02 -==> Parameters: 469(String)
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -耗时 : 8
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:18:02 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:18:02 -==> Parameters: 
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:18:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:18:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:18:02 -==> Parameters: 469(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -耗时 : 7
2020-03-16 16:18:02 -<==      Total: 3
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:18:02 -耗时 : 23
2020-03-16 16:18:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:18:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:18:02 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:18:02 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:18:02 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:18:02 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:18:02 -==> Parameters: 
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:18:02 -==> Parameters: 
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:18:02 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:18:02 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 1
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -耗时 : 118
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:18:02 -<==    Updates: 2
2020-03-16 16:18:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:02 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:18:02 -<==      Total: 2
2020-03-16 16:18:02 -耗时 : 136
2020-03-16 16:18:08 -此处进行解密+验签+身份验证
2020-03-16 16:18:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:18:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:18:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:18:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:18:08 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 1
2020-03-16 16:18:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:08 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 2
2020-03-16 16:18:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:18:08 -<==    Updates: 2
2020-03-16 16:18:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:18:08 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 1
2020-03-16 16:18:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:08 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 2
2020-03-16 16:18:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:18:08 -<==    Updates: 2
2020-03-16 16:18:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:18:08 -==> Parameters: 
2020-03-16 16:18:08 -<==      Total: 1
2020-03-16 16:18:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:08 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 2
2020-03-16 16:18:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:08 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:18:08 -<==    Updates: 2
2020-03-16 16:18:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:18:08 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 1
2020-03-16 16:18:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:08 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 2
2020-03-16 16:18:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:18:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:18:08 -<==    Updates: 2
2020-03-16 16:18:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:18:08 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:18:08 -<==      Total: 2
2020-03-16 16:18:08 -耗时 : 110
2020-03-16 16:18:13 -此处进行解密+验签+身份验证
2020-03-16 16:18:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:13 -此处进行解密+验签+身份验证
2020-03-16 16:18:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 16:18:13 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 16:18:13 -==> Parameters: 469(String)
2020-03-16 16:18:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:18:13 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:18:13 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:13 -<==      Total: 98
2020-03-16 16:18:13 -<==      Total: 4
2020-03-16 16:18:13 -耗时 : 31
2020-03-16 16:18:13 -耗时 : 20
2020-03-16 16:18:15 -此处进行解密+验签+身份验证
2020-03-16 16:18:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:18:15 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:18:15 -==> Parameters: 469(String)
2020-03-16 16:18:15 -<==      Total: 20
2020-03-16 16:18:15 -耗时 : 18
2020-03-16 16:18:15 -此处进行解密+验签+身份验证
2020-03-16 16:18:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:18:15 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:18:15 -==> Parameters: 469(String)
2020-03-16 16:18:15 -<==      Total: 20
2020-03-16 16:18:15 -耗时 : 14
2020-03-16 16:18:18 -此处进行解密+验签+身份验证
2020-03-16 16:18:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:18 -此处进行解密+验签+身份验证
2020-03-16 16:18:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:18:18 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:18:18 -==> Parameters: 469(String)
2020-03-16 16:18:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:18:18 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:18:18 -==> Parameters: 469(String), EPOS20200113051(String)
2020-03-16 16:18:18 -<==      Total: 2
2020-03-16 16:18:18 -耗时 : 9
2020-03-16 16:18:18 -<==      Total: 1
2020-03-16 16:18:18 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:18:18 -==> Parameters: 
2020-03-16 16:18:18 -<==      Total: 94
2020-03-16 16:18:18 -耗时 : 16
2020-03-16 16:18:42 -此处进行解密+验签+身份验证
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:18:42 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-16 16:18:42 -==> Parameters: 469(String), EPOS20200113051(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String)
2020-03-16 16:18:42 -<==      Total: 1
2020-03-16 16:18:42 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and sn in ( ? ) 
2020-03-16 16:18:42 -==> Parameters: 469(String), EPOS20200113051(String)
2020-03-16 16:18:42 -<==      Total: 1
2020-03-16 16:18:42 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and is_reward='0' and sn in ( ? ) 
2020-03-16 16:18:42 -==> Parameters: 469(String), EPOS20200113051(String)
2020-03-16 16:18:42 -<==      Total: 1
2020-03-16 16:18:42 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-16 16:18:42 -==> Parameters: 691(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String), 20200316(String), 161842(String), 0.485(String), 1(String), 469(String), EPOS20200113051(String), 691(String)
2020-03-16 16:18:42 -<==    Updates: 1
2020-03-16 16:18:42 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-16 16:18:42 -==> Parameters: 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String), 20200316(String), 161842(String), 691(String), EPOS20200113051(String)
2020-03-16 16:18:42 -<==    Updates: 0
2020-03-16 16:18:42 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-16 16:18:42 -==> Parameters: 20200316(String), 161842(String), 469(String), EPOS20200113051(String)
2020-03-16 16:18:42 -<==    Updates: 1
2020-03-16 16:18:42 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-16 16:18:42 -==> Parameters: 469_20200316161842(String), EPOS20200113051(String), 691(String), epos(String), 2020-03-16 16:18:42(String), 469(String)
2020-03-16 16:18:42 -<==    Updates: 1
2020-03-16 16:18:42 -耗时 : 196
2020-03-16 16:18:42 -此处进行解密+验签+身份验证
2020-03-16 16:18:42 -此处进行解密+验签+身份验证
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:18:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:18:42 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:18:42 -==> Parameters: 469(String), 469(String)
2020-03-16 16:18:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:18:42 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:18:42 -==> Parameters: 469(String)
2020-03-16 16:18:42 -<==      Total: 4
2020-03-16 16:18:42 -耗时 : 11
2020-03-16 16:18:42 -<==      Total: 19
2020-03-16 16:18:42 -耗时 : 14
2020-03-16 16:19:16 -此处进行解密+验签+身份验证
2020-03-16 16:19:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:19:16 -此处进行解密+验签+身份验证
2020-03-16 16:19:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:19:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:19:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:19:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:19:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:19:16 -==> Parameters: 469(String)
2020-03-16 16:19:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:19:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:19:16 -<==      Total: 1
2020-03-16 16:19:16 -耗时 : 11
2020-03-16 16:19:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:19:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:19:16 -==> Parameters: 469(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 1
2020-03-16 16:19:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:16 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 2
2020-03-16 16:19:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:19:16 -<==    Updates: 2
2020-03-16 16:19:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:19:16 -==> Parameters: 469(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 1
2020-03-16 16:19:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:16 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 2
2020-03-16 16:19:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:19:16 -<==    Updates: 2
2020-03-16 16:19:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:19:16 -==> Parameters: 
2020-03-16 16:19:16 -<==      Total: 1
2020-03-16 16:19:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:16 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 2
2020-03-16 16:19:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:16 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:19:16 -<==    Updates: 2
2020-03-16 16:19:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:19:16 -==> Parameters: 469(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 1
2020-03-16 16:19:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:16 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 2
2020-03-16 16:19:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:16 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:19:16 -<==    Updates: 2
2020-03-16 16:19:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:16 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:19:16 -<==      Total: 2
2020-03-16 16:19:16 -耗时 : 113
2020-03-16 16:19:21 -此处进行解密+验签+身份验证
2020-03-16 16:19:21 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 16:19:21 -token值=======469|55HKULU7H9SFN5M395RFLGMVA9P692BS
2020-03-16 16:19:21 -耗时 : 36
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -解密：{"sys_user_account":"13763349409","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"2C2D629FA8BFA5533EF7B0AC744E9A2C","version_no":"450000000145206","login_type":"account"}
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:19:31 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 16:19:31 -==> Parameters: 13763349409(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 16:19:31 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 161931(String), 691(Integer)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:19:31 -==> Parameters: 25(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:19:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:19:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:19:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:19:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:19:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:19:31 -耗时 : 91
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -解密：
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:19:31 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:19:31 -==> Parameters: 01(String), 01(String)
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:19:31 -==> Parameters: 691(String)
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:19:31 -<==      Total: 12
2020-03-16 16:19:31 -耗时 : 11
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -耗时 : 21
2020-03-16 16:19:31 -此处进行解密+验签+身份验证
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:19:31 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:19:31 -==> Parameters: 691(String)
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:19:31 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:19:31 -==> Parameters: 
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:19:31 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:19:31 -==> Parameters: 691(String)
2020-03-16 16:19:31 -<==      Total: 2
2020-03-16 16:19:31 -耗时 : 7
2020-03-16 16:19:31 -<==      Total: 3
2020-03-16 16:19:31 -耗时 : 8
2020-03-16 16:19:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -耗时 : 13
2020-03-16 16:19:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:19:31 -==> Parameters: 691(String), 691(String)
2020-03-16 16:19:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:19:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:19:31 -==> Parameters: 691(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:19:31 -==> Parameters: 691(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:19:31 -==> Parameters: 
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:19:31 -==> Parameters: 691(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:19:31 -==> Parameters: 691(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -耗时 : 120
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:19:31 -==> Parameters: 
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:19:31 -==> Parameters: 691(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:19:31 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:19:31 -<==    Updates: 1
2020-03-16 16:19:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:19:31 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:19:31 -<==      Total: 1
2020-03-16 16:19:31 -耗时 : 199
2020-03-16 16:20:08 -此处进行解密+验签+身份验证
2020-03-16 16:20:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:20:08 -此处进行解密+验签+身份验证
2020-03-16 16:20:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:20:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:20:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:20:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:20:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:20:11 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:20:11 -==> Parameters: 691(String)
2020-03-16 16:20:11 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:20:11 -==> Parameters: 691(String)
2020-03-16 16:20:11 -<==      Total: 0
2020-03-16 16:20:11 -耗时 : 12
2020-03-16 16:20:11 -<==      Total: 1
2020-03-16 16:20:11 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:20:11 -==> Parameters: 691(String)
2020-03-16 16:20:11 -<==      Total: 1
2020-03-16 16:20:11 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:20:11 -==> Parameters: 691(String)
2020-03-16 16:20:11 -<==      Total: 1
2020-03-16 16:20:11 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:20:11 -==> Parameters: 691(String)
2020-03-16 16:20:11 -<==      Total: 1
2020-03-16 16:20:11 -耗时 : 3289
2020-03-16 16:20:44 -此处进行解密+验签+身份验证
2020-03-16 16:20:44 -此处进行解密+验签+身份验证
2020-03-16 16:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:20:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:20:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:20:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:20:44 -==> Parameters: 691(String)
2020-03-16 16:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -耗时 : 9
2020-03-16 16:20:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:20:44 -==> Parameters: 691(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:20:44 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:20:44 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:20:44 -<==    Updates: 1
2020-03-16 16:20:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:20:44 -==> Parameters: 691(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:20:44 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:20:44 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:20:44 -<==    Updates: 1
2020-03-16 16:20:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:20:44 -==> Parameters: 
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:20:44 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:20:44 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:20:44 -<==    Updates: 1
2020-03-16 16:20:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:20:44 -==> Parameters: 691(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:20:44 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:20:44 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:20:44 -<==    Updates: 1
2020-03-16 16:20:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:20:44 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:20:44 -<==      Total: 1
2020-03-16 16:20:44 -耗时 : 208
2020-03-16 16:20:50 -此处进行解密+验签+身份验证
2020-03-16 16:20:50 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 16:20:50 -token值=======691|4DJBLL8ST5TD4O9LN2WMARP7W5OSIMNG
2020-03-16 16:20:50 -耗时 : 38
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:21:05 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 16:21:05 -==> Parameters: 15019499979(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 16:21:05 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 162105(String), 469(Integer)
2020-03-16 16:21:05 -<==    Updates: 1
2020-03-16 16:21:05 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:21:05 -==> Parameters: 25(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:21:05 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:21:05 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:21:05 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:21:05 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:21:05 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:21:05 -耗时 : 116
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -解密：
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:05 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:21:05 -==> Parameters: 01(String), 01(String)
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:05 -<==      Total: 12
2020-03-16 16:21:05 -耗时 : 11
2020-03-16 16:21:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:21:05 -==> Parameters: 469(String)
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:05 -耗时 : 9
2020-03-16 16:21:05 -此处进行解密+验签+身份验证
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:21:05 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:21:05 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:21:05 -==> Parameters: 
2020-03-16 16:21:05 -==> Parameters: 469(String)
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:21:05 -<==      Total: 3
2020-03-16 16:21:05 -耗时 : 5
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -耗时 : 7
2020-03-16 16:21:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:21:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:21:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:21:05 -==> Parameters: 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -耗时 : 5
2020-03-16 16:21:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:21:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:21:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:21:05 -==> Parameters: 
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:21:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:21:05 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:21:05 -==> Parameters: 
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:21:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:21:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 1
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -耗时 : 131
2020-03-16 16:21:05 -<==    Updates: 2
2020-03-16 16:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:05 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:21:05 -<==      Total: 2
2020-03-16 16:21:05 -耗时 : 106
2020-03-16 16:21:16 -此处进行解密+验签+身份验证
2020-03-16 16:21:16 -此处进行解密+验签+身份验证
2020-03-16 16:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:21:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:21:20 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:21:20 -==> Parameters: 469(String)
2020-03-16 16:21:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7d4b6d82 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:20 -<==      Total: 3
2020-03-16 16:21:20 -耗时 : 15
2020-03-16 16:21:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@341f7bde (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:20 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:21:20 -==> Parameters: 469(String)
2020-03-16 16:21:20 -<==      Total: 1
2020-03-16 16:21:20 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:21:20 -==> Parameters: 469(String)
2020-03-16 16:21:20 -<==      Total: 1
2020-03-16 16:21:20 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:21:20 -==> Parameters: 469(String)
2020-03-16 16:21:20 -<==      Total: 1
2020-03-16 16:21:20 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:21:20 -==> Parameters: 469(String)
2020-03-16 16:21:20 -<==      Total: 1
2020-03-16 16:21:20 -耗时 : 4287
2020-03-16 16:21:41 -此处进行解密+验签+身份验证
2020-03-16 16:21:41 -此处进行解密+验签+身份验证
2020-03-16 16:21:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:21:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:21:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:21:41 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:21:41 -==> Parameters: 469(String)
2020-03-16 16:21:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:21:41 -<==      Total: 1
2020-03-16 16:21:41 -耗时 : 10
2020-03-16 16:21:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:21:41 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 1
2020-03-16 16:21:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:41 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 2
2020-03-16 16:21:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:41 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:21:41 -<==    Updates: 2
2020-03-16 16:21:41 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:21:41 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 1
2020-03-16 16:21:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:41 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 2
2020-03-16 16:21:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:41 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:21:41 -<==    Updates: 2
2020-03-16 16:21:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:21:41 -==> Parameters: 
2020-03-16 16:21:41 -<==      Total: 1
2020-03-16 16:21:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:41 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 2
2020-03-16 16:21:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:41 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:21:41 -<==    Updates: 2
2020-03-16 16:21:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:21:41 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 1
2020-03-16 16:21:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:41 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 2
2020-03-16 16:21:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:21:41 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:21:41 -<==    Updates: 2
2020-03-16 16:21:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:21:41 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:21:41 -<==      Total: 2
2020-03-16 16:21:41 -耗时 : 122
2020-03-16 16:21:43 -此处进行解密+验签+身份验证
2020-03-16 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:43 -此处进行解密+验签+身份验证
2020-03-16 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 16:21:43 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 16:21:43 -==> Parameters: 469(String)
2020-03-16 16:21:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:21:43 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3f047d99 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:43 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@77057018 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:43 -<==      Total: 98
2020-03-16 16:21:43 -耗时 : 34
2020-03-16 16:21:43 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6bcfad2f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:43 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:21:43 -==> Parameters: 469(String), 469(String)
2020-03-16 16:21:49 -此处进行解密+验签+身份验证
2020-03-16 16:21:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:21:49 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@62aa7d0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:49 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@23e6e870 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:49 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5d06cbbd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:49 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@e41f3ea (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:21:49 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:21:49 -==> Parameters: 469(String)
2020-03-16 16:21:49 -<==      Total: 19
2020-03-16 16:21:49 -耗时 : 46
2020-03-16 16:21:50 -此处进行解密+验签+身份验证
2020-03-16 16:21:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:21:50 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 16:21:50 -==> Parameters: 469(String)
2020-03-16 16:21:50 -<==      Total: 5
2020-03-16 16:21:50 -耗时 : 22
2020-03-16 16:21:56 -此处进行解密+验签+身份验证
2020-03-16 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:56 -此处进行解密+验签+身份验证
2020-03-16 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:21:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:21:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:21:56 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:21:56 -==> Parameters: 469(String)
2020-03-16 16:21:56 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:21:56 -==> Parameters: 469(String), E20200308104(String)
2020-03-16 16:21:56 -<==      Total: 2
2020-03-16 16:21:56 -耗时 : 20
2020-03-16 16:21:56 -<==      Total: 1
2020-03-16 16:21:56 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:21:56 -==> Parameters: 
2020-03-16 16:21:56 -<==      Total: 94
2020-03-16 16:21:56 -耗时 : 45
2020-03-16 16:21:57 -<==      Total: 4
2020-03-16 16:21:57 -耗时 : 13894
2020-03-16 16:22:32 -此处进行解密+验签+身份验证
2020-03-16 16:22:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:22:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:22:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-16 16:22:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:22:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:22:32 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-16 16:22:32 -==> Parameters: 469(String), E20200308104,E20200308105(String), 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String)
2020-03-16 16:22:32 -<==      Total: 1
2020-03-16 16:22:32 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? , ? ) 
2020-03-16 16:22:32 -==> Parameters: 469(String), E20200308104(String), E20200308105(String)
2020-03-16 16:22:32 -<==      Total: 1
2020-03-16 16:22:32 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and is_reward='0' and sn in ( ? , ? ) 
2020-03-16 16:22:32 -==> Parameters: 469(String), E20200308104(String), E20200308105(String)
2020-03-16 16:22:32 -<==      Total: 1
2020-03-16 16:22:32 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-16 16:22:32 -==> Parameters: 691(String), 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String), 20200316(String), 162232(String), 0.48(String), 1(String), 469(String), E20200308104,E20200308105(String), 691(String)
2020-03-16 16:22:32 -<==    Updates: 2
2020-03-16 16:22:32 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-16 16:22:32 -==> Parameters: 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String), 20200316(String), 162232(String), 691(String), E20200308104,E20200308105(String)
2020-03-16 16:22:32 -<==    Updates: 0
2020-03-16 16:22:32 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-16 16:22:32 -==> Parameters: 20200316(String), 162232(String), 469(String), E20200308104,E20200308105(String)
2020-03-16 16:22:32 -<==    Updates: 2
2020-03-16 16:22:32 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) , (?,?,?,?,?,?) 
2020-03-16 16:22:32 -==> Parameters: 469_20200316162232(String), E20200308104(String), 691(String), null, 2020-03-16 16:22:32(String), 469(String), 469_20200316162232(String), E20200308105(String), 691(String), null, 2020-03-16 16:22:32(String), 469(String)
2020-03-16 16:22:32 -<==    Updates: 2
2020-03-16 16:22:32 -耗时 : 115
2020-03-16 16:22:33 -此处进行解密+验签+身份验证
2020-03-16 16:22:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:22:33 -此处进行解密+验签+身份验证
2020-03-16 16:22:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:22:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:22:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:22:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:22:33 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:22:33 -==> Parameters: 469(String), 469(String)
2020-03-16 16:22:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:22:33 -<==      Total: 4
2020-03-16 16:22:33 -耗时 : 9
2020-03-16 16:22:33 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 16:22:33 -==> Parameters: 469(String)
2020-03-16 16:22:33 -<==      Total: 3
2020-03-16 16:22:33 -耗时 : 25
2020-03-16 16:23:00 -此处进行解密+验签+身份验证
2020-03-16 16:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:00 -此处进行解密+验签+身份验证
2020-03-16 16:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:23:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:23:00 -==> Parameters: 469(String)
2020-03-16 16:23:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:23:00 -<==      Total: 1
2020-03-16 16:23:00 -耗时 : 19
2020-03-16 16:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:23:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:00 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:00 -<==      Total: 1
2020-03-16 16:23:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:00 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:23:00 -<==      Total: 2
2020-03-16 16:23:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:00 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:23:00 -<==    Updates: 2
2020-03-16 16:23:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:23:00 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:00 -<==      Total: 1
2020-03-16 16:23:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:00 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:23:00 -<==      Total: 2
2020-03-16 16:23:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:00 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:23:00 -<==    Updates: 2
2020-03-16 16:23:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:23:00 -==> Parameters: 
2020-03-16 16:23:00 -<==      Total: 1
2020-03-16 16:23:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:00 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:23:01 -<==      Total: 2
2020-03-16 16:23:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:01 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:23:01 -<==    Updates: 2
2020-03-16 16:23:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:01 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:01 -<==      Total: 1
2020-03-16 16:23:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:01 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:23:01 -<==      Total: 2
2020-03-16 16:23:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:01 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:23:01 -<==    Updates: 2
2020-03-16 16:23:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:01 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:23:01 -<==      Total: 2
2020-03-16 16:23:01 -耗时 : 197
2020-03-16 16:23:05 -此处进行解密+验签+身份验证
2020-03-16 16:23:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:23:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:23:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:23:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 1
2020-03-16 16:23:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:05 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 2
2020-03-16 16:23:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:23:05 -<==    Updates: 2
2020-03-16 16:23:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:23:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 1
2020-03-16 16:23:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:05 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 2
2020-03-16 16:23:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:23:05 -<==    Updates: 2
2020-03-16 16:23:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:23:05 -==> Parameters: 
2020-03-16 16:23:05 -<==      Total: 1
2020-03-16 16:23:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:05 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 2
2020-03-16 16:23:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:05 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:23:05 -<==    Updates: 2
2020-03-16 16:23:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:05 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 1
2020-03-16 16:23:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:05 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 2
2020-03-16 16:23:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:23:05 -<==    Updates: 2
2020-03-16 16:23:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:05 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:23:05 -<==      Total: 2
2020-03-16 16:23:05 -耗时 : 222
2020-03-16 16:23:07 -此处进行解密+验签+身份验证
2020-03-16 16:23:07 -此处进行解密+验签+身份验证
2020-03-16 16:23:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:23:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:23:09 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:23:09 -==> Parameters: 469(String)
2020-03-16 16:23:09 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:23:09 -==> Parameters: 469(String)
2020-03-16 16:23:09 -<==      Total: 1
2020-03-16 16:23:09 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:23:09 -==> Parameters: 469(String)
2020-03-16 16:23:09 -<==      Total: 1
2020-03-16 16:23:09 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:23:09 -==> Parameters: 469(String)
2020-03-16 16:23:09 -<==      Total: 3
2020-03-16 16:23:09 -耗时 : 18
2020-03-16 16:23:09 -<==      Total: 1
2020-03-16 16:23:09 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:23:09 -==> Parameters: 469(String)
2020-03-16 16:23:09 -<==      Total: 1
2020-03-16 16:23:09 -耗时 : 1915
2020-03-16 16:23:18 -此处进行解密+验签+身份验证
2020-03-16 16:23:18 -此处进行解密+验签+身份验证
2020-03-16 16:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 16:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 16:23:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 16:23:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:23:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:23:18 -==> Parameters: 469(String)
2020-03-16 16:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 16:23:18 -<==      Total: 1
2020-03-16 16:23:18 -耗时 : 11
2020-03-16 16:23:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:18 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 1
2020-03-16 16:23:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:18 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 2
2020-03-16 16:23:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 16:23:18 -<==    Updates: 2
2020-03-16 16:23:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:23:18 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 1
2020-03-16 16:23:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:18 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 2
2020-03-16 16:23:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 16:23:18 -<==    Updates: 2
2020-03-16 16:23:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:23:18 -==> Parameters: 
2020-03-16 16:23:18 -<==      Total: 1
2020-03-16 16:23:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:18 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 2
2020-03-16 16:23:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:18 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 16:23:18 -<==    Updates: 2
2020-03-16 16:23:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:18 -==> Parameters: 469(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 1
2020-03-16 16:23:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:18 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 2
2020-03-16 16:23:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 16:23:18 -<==    Updates: 2
2020-03-16 16:23:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:18 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 16:23:18 -<==      Total: 2
2020-03-16 16:23:18 -耗时 : 120
2020-03-16 16:23:24 -此处进行解密+验签+身份验证
2020-03-16 16:23:24 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 16:23:24 -token值=======469|CK0UDK8Y0UK0RBL8C0WCH2VIQM40XHNQ
2020-03-16 16:23:24 -耗时 : 33
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -解密：{"sys_user_account":"13763349409","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"2C2D629FA8BFA5533EF7B0AC744E9A2C","version_no":"450000000145206","login_type":"account"}
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:23:32 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 16:23:32 -==> Parameters: 13763349409(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 16:23:32 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 162332(String), 691(Integer)
2020-03-16 16:23:32 -<==    Updates: 1
2020-03-16 16:23:32 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:23:32 -==> Parameters: 25(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:23:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:23:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:23:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:23:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:23:32 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:23:32 -耗时 : 119
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:32 -解密：
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:32 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:23:32 -==> Parameters: 01(String), 01(String)
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:32 -<==      Total: 12
2020-03-16 16:23:32 -耗时 : 19
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:23:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:23:32 -==> Parameters: 691(String)
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:32 -此处进行解密+验签+身份验证
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:23:32 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:23:32 -==> Parameters: 691(String)
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:23:32 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:23:32 -==> Parameters: 
2020-03-16 16:23:32 -<==      Total: 2
2020-03-16 16:23:32 -耗时 : 11
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -耗时 : 16
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:23:32 -<==      Total: 3
2020-03-16 16:23:32 -耗时 : 12
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:23:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:23:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:23:32 -==> Parameters: 691(String)
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:23:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:32 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -耗时 : 7
2020-03-16 16:23:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:23:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:32 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:32 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:32 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:32 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:32 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:23:32 -<==    Updates: 1
2020-03-16 16:23:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:23:32 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:32 -<==      Total: 1
2020-03-16 16:23:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:32 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:23:32 -<==    Updates: 1
2020-03-16 16:23:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:23:32 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:33 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:23:33 -<==    Updates: 1
2020-03-16 16:23:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:23:33 -==> Parameters: 
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:33 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:33 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:23:33 -<==    Updates: 1
2020-03-16 16:23:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:33 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:23:33 -<==    Updates: 1
2020-03-16 16:23:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:23:33 -==> Parameters: 
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:33 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:23:33 -<==    Updates: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -耗时 : 120
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:33 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:23:33 -<==    Updates: 1
2020-03-16 16:23:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:33 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:33 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:23:33 -<==    Updates: 1
2020-03-16 16:23:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:33 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:23:33 -<==      Total: 1
2020-03-16 16:23:33 -耗时 : 221
2020-03-16 16:23:39 -此处进行解密+验签+身份验证
2020-03-16 16:23:39 -此处进行解密+验签+身份验证
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:39 -此处进行解密+验签+身份验证
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:39 -此处进行解密+验签+身份验证
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-16 16:23:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:23:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:23:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-16 16:23:39 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-16 16:23:39 -==> Parameters: 691(String)
2020-03-16 16:23:39 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:23:39 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:23:39 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-16 16:23:39 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:23:39 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:23:39 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:23:39 -<==      Total: 1
2020-03-16 16:23:39 -耗时 : 11
2020-03-16 16:23:39 -<==      Total: 1
2020-03-16 16:23:39 -耗时 : 21
2020-03-16 16:23:39 -<==      Total: 1
2020-03-16 16:23:39 -耗时 : 19
2020-03-16 16:23:39 -<==      Total: 1
2020-03-16 16:23:39 -耗时 : 22
2020-03-16 16:23:41 -此处进行解密+验签+身份验证
2020-03-16 16:23:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:41 -此处进行解密+验签+身份验证
2020-03-16 16:23:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:41 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-16 16:23:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-16 16:23:41 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-16 16:23:41 -==> Parameters: 691(String)
2020-03-16 16:23:41 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-16 16:23:41 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-16 16:23:41 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-16 16:23:41 -==> Parameters: 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-16 16:23:41 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-16 16:23:41 -==> Parameters: 691(String)
2020-03-16 16:23:41 -<==      Total: 0
2020-03-16 16:23:41 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-16 16:23:41 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-16 16:23:41 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-16 16:23:41 -==> Parameters: 691(String)
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -耗时 : 80
2020-03-16 16:23:41 -<==      Total: 1
2020-03-16 16:23:41 -耗时 : 88
2020-03-16 16:23:43 -此处进行解密+验签+身份验证
2020-03-16 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:23:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:23:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:43 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:43 -<==      Total: 1
2020-03-16 16:23:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:43 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:23:43 -<==      Total: 1
2020-03-16 16:23:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:23:43 -<==    Updates: 1
2020-03-16 16:23:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:23:43 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:43 -<==      Total: 1
2020-03-16 16:23:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:43 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:23:43 -<==      Total: 1
2020-03-16 16:23:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:43 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:23:43 -<==    Updates: 1
2020-03-16 16:23:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:23:43 -==> Parameters: 
2020-03-16 16:23:43 -<==      Total: 1
2020-03-16 16:23:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:43 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:23:43 -<==      Total: 1
2020-03-16 16:23:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:43 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:23:44 -<==    Updates: 1
2020-03-16 16:23:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:23:44 -==> Parameters: 691(String), 691(String)
2020-03-16 16:23:44 -<==      Total: 1
2020-03-16 16:23:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:44 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:23:44 -<==      Total: 1
2020-03-16 16:23:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:23:44 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:23:44 -<==    Updates: 1
2020-03-16 16:23:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:23:44 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:23:44 -<==      Total: 1
2020-03-16 16:23:44 -耗时 : 131
2020-03-16 16:23:47 -此处进行解密+验签+身份验证
2020-03-16 16:23:47 -此处进行解密+验签+身份验证
2020-03-16 16:23:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:47 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:23:47 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:23:47 -==> Parameters: 691(String)
2020-03-16 16:23:47 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:23:47 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:23:47 -<==      Total: 0
2020-03-16 16:23:47 -==> Parameters: 691(String)
2020-03-16 16:23:47 -耗时 : 13
2020-03-16 16:23:47 -<==      Total: 1
2020-03-16 16:23:47 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:23:47 -==> Parameters: 691(String)
2020-03-16 16:23:47 -<==      Total: 1
2020-03-16 16:23:47 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:23:47 -==> Parameters: 691(String)
2020-03-16 16:23:47 -<==      Total: 1
2020-03-16 16:23:47 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:23:47 -==> Parameters: 691(String)
2020-03-16 16:23:47 -<==      Total: 1
2020-03-16 16:23:47 -耗时 : 64
2020-03-16 16:23:58 -此处进行解密+验签+身份验证
2020-03-16 16:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:58 -此处进行解密+验签+身份验证
2020-03-16 16:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:23:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-16 16:23:58 -==> Parameters: 691(String)
2020-03-16 16:23:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-16 16:23:58 -==> Parameters: 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-16 16:23:58 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:23:58 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-16 16:23:58 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:23:58 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-16 16:23:58 -==> Parameters: 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -耗时 : 61
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:23:58 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:23:58 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-16 16:23:58 -==> Parameters: 691(String)
2020-03-16 16:23:58 -<==      Total: 1
2020-03-16 16:23:58 -耗时 : 203
2020-03-16 16:24:04 -此处进行解密+验签+身份验证
2020-03-16 16:24:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 16:24:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-16 16:24:04 -==> Parameters: 691(String)
2020-03-16 16:24:04 -<==      Total: 1
2020-03-16 16:24:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-16 16:24:04 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:24:04 -<==      Total: 1
2020-03-16 16:24:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:24:04 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:24:04 -<==      Total: 1
2020-03-16 16:24:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:24:04 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:24:04 -<==      Total: 1
2020-03-16 16:24:04 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-16 16:24:04 -==> Parameters: 691(String)
2020-03-16 16:24:04 -<==      Total: 1
2020-03-16 16:24:04 -耗时 : 103
2020-03-16 16:24:07 -此处进行解密+验签+身份验证
2020-03-16 16:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 16:24:07 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 16:24:07 -==> Parameters: 691(String)
2020-03-16 16:24:07 -<==      Total: 10
2020-03-16 16:24:07 -耗时 : 18
2020-03-16 16:24:13 -此处进行解密+验签+身份验证
2020-03-16 16:24:13 -此处进行解密+验签+身份验证
2020-03-16 16:24:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:24:13 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:24:13 -==> Parameters: 691(String)
2020-03-16 16:24:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:24:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:24:13 -<==      Total: 1
2020-03-16 16:24:13 -耗时 : 11
2020-03-16 16:24:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:24:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:24:14 -==> Parameters: 691(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:24:14 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:24:14 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:24:14 -<==    Updates: 1
2020-03-16 16:24:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:24:14 -==> Parameters: 691(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:24:14 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:24:14 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:24:14 -<==    Updates: 1
2020-03-16 16:24:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:24:14 -==> Parameters: 
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:24:14 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:24:14 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:24:14 -<==    Updates: 1
2020-03-16 16:24:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:24:14 -==> Parameters: 691(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:24:14 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:24:14 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:24:14 -<==    Updates: 1
2020-03-16 16:24:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:24:14 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:24:14 -<==      Total: 1
2020-03-16 16:24:14 -耗时 : 199
2020-03-16 16:24:19 -此处进行解密+验签+身份验证
2020-03-16 16:24:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:19 -此处进行解密+验签+身份验证
2020-03-16 16:24:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:24:19 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:24:19 -==> Parameters: 691(String)
2020-03-16 16:24:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:24:19 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:24:19 -==> Parameters: 691(String)
2020-03-16 16:24:19 -<==      Total: 1
2020-03-16 16:24:19 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:24:19 -==> Parameters: 691(String)
2020-03-16 16:24:19 -<==      Total: 0
2020-03-16 16:24:19 -耗时 : 22
2020-03-16 16:24:19 -<==      Total: 1
2020-03-16 16:24:19 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:24:19 -==> Parameters: 691(String)
2020-03-16 16:24:19 -<==      Total: 1
2020-03-16 16:24:19 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:24:19 -==> Parameters: 691(String)
2020-03-16 16:24:19 -<==      Total: 1
2020-03-16 16:24:19 -耗时 : 32
2020-03-16 16:24:36 -此处进行解密+验签+身份验证
2020-03-16 16:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:36 -此处进行解密+验签+身份验证
2020-03-16 16:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 16:24:36 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-16 16:24:36 -==> Parameters: 691(String)
2020-03-16 16:24:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-16 16:24:36 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-16 16:24:36 -==> Parameters: 691(String)
2020-03-16 16:24:36 -<==      Total: 1
2020-03-16 16:24:36 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-16 16:24:36 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:24:36 -<==      Total: 1
2020-03-16 16:24:36 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-16 16:24:36 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:24:37 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:24:37 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:24:37 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-16 16:24:37 -==> Parameters: 691(String)
2020-03-16 16:24:37 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:24:37 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -耗时 : 41
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-16 16:24:37 -==> Parameters: 691(String)
2020-03-16 16:24:37 -<==      Total: 1
2020-03-16 16:24:37 -耗时 : 72
2020-03-16 16:24:42 -此处进行解密+验签+身份验证
2020-03-16 16:24:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:24:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:24:42 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 16:24:42 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-16 16:24:42 -==> Parameters: 691(String)
2020-03-16 16:24:42 -<==      Total: 1
2020-03-16 16:24:42 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-16 16:24:42 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:24:42 -<==      Total: 1
2020-03-16 16:24:42 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:24:42 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:24:42 -<==      Total: 1
2020-03-16 16:24:42 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:24:42 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:24:42 -<==      Total: 1
2020-03-16 16:24:42 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-16 16:24:42 -==> Parameters: 691(String)
2020-03-16 16:24:43 -<==      Total: 1
2020-03-16 16:24:43 -耗时 : 69
2020-03-16 16:25:03 -此处进行解密+验签+身份验证
2020-03-16 16:25:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:03 -此处进行解密+验签+身份验证
2020-03-16 16:25:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:25:03 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:25:03 -==> Parameters: 691(String)
2020-03-16 16:25:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:25:03 -<==      Total: 0
2020-03-16 16:25:03 -耗时 : 11
2020-03-16 16:25:03 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:25:03 -==> Parameters: 691(String)
2020-03-16 16:25:03 -<==      Total: 1
2020-03-16 16:25:03 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:25:03 -==> Parameters: 691(String)
2020-03-16 16:25:03 -<==      Total: 1
2020-03-16 16:25:03 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:25:03 -==> Parameters: 691(String)
2020-03-16 16:25:03 -<==      Total: 1
2020-03-16 16:25:03 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:25:03 -==> Parameters: 691(String)
2020-03-16 16:25:03 -<==      Total: 1
2020-03-16 16:25:03 -耗时 : 59
2020-03-16 16:25:22 -此处进行解密+验签+身份验证
2020-03-16 16:25:22 -此处进行解密+验签+身份验证
2020-03-16 16:25:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:25:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:25:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:25:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:25:22 -==> Parameters: 691(String)
2020-03-16 16:25:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -耗时 : 21
2020-03-16 16:25:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:22 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:22 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:22 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:25:22 -<==    Updates: 1
2020-03-16 16:25:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:25:22 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:22 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:22 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:25:22 -<==    Updates: 1
2020-03-16 16:25:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:25:22 -==> Parameters: 
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:22 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:22 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:25:22 -<==    Updates: 1
2020-03-16 16:25:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:22 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:22 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:22 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:25:22 -<==    Updates: 1
2020-03-16 16:25:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:22 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:25:22 -<==      Total: 1
2020-03-16 16:25:22 -耗时 : 116
2020-03-16 16:25:25 -此处进行解密+验签+身份验证
2020-03-16 16:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:25 -此处进行解密+验签+身份验证
2020-03-16 16:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-16 16:25:25 -==> Parameters: 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-16 16:25:25 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:25:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:25:25 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-16 16:25:25 -==> Parameters: 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:25:25 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-16 16:25:25 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-16 16:25:25 -==> Parameters: 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -耗时 : 40
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:25:25 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:25:25 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-16 16:25:25 -==> Parameters: 691(String)
2020-03-16 16:25:25 -<==      Total: 1
2020-03-16 16:25:25 -耗时 : 75
2020-03-16 16:25:29 -此处进行解密+验签+身份验证
2020-03-16 16:25:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 16:25:29 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-16 16:25:29 -==> Parameters: 691(String)
2020-03-16 16:25:29 -<==      Total: 8
2020-03-16 16:25:29 -耗时 : 24
2020-03-16 16:25:31 -此处进行解密+验签+身份验证
2020-03-16 16:25:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-16 16:25:31 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-16 16:25:31 -==> Parameters: 691(String)
2020-03-16 16:25:31 -<==      Total: 1
2020-03-16 16:25:31 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-16 16:25:31 -==> Parameters: 691(String), 691(String), 202003(String)
2020-03-16 16:25:31 -<==      Total: 1
2020-03-16 16:25:31 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-16 16:25:31 -==> Parameters: 691(String), 691(String), 20200215(String), 20200316(String), 691(String)
2020-03-16 16:25:31 -<==      Total: 1
2020-03-16 16:25:31 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-16 16:25:31 -==> Parameters: 691(String), 20200116(String), 691(String), 20200116(String), 20200316(String), 691(String)
2020-03-16 16:25:31 -<==      Total: 1
2020-03-16 16:25:31 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-16 16:25:31 -==> Parameters: 691(String)
2020-03-16 16:25:31 -<==      Total: 1
2020-03-16 16:25:31 -耗时 : 74
2020-03-16 16:25:32 -此处进行解密+验签+身份验证
2020-03-16 16:25:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:32 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-03-16 16:25:32 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-16 16:25:32 -==> Parameters: 691(String)
2020-03-16 16:25:32 -<==      Total: 10
2020-03-16 16:25:32 -耗时 : 38
2020-03-16 16:25:35 -此处进行解密+验签+身份验证
2020-03-16 16:25:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:35 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-16 16:25:35 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-16 16:25:35 -==> Parameters: 691(String)
2020-03-16 16:25:35 -<==      Total: 10
2020-03-16 16:25:35 -耗时 : 19
2020-03-16 16:25:39 -此处进行解密+验签+身份验证
2020-03-16 16:25:39 -此处进行解密+验签+身份验证
2020-03-16 16:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-16 16:25:39 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-16 16:25:39 -==> Parameters: 691(String)
2020-03-16 16:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-16 16:25:39 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:25:39 -==> Parameters: 691(String)
2020-03-16 16:25:39 -<==      Total: 1
2020-03-16 16:25:39 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-16 16:25:39 -==> Parameters: 691(String)
2020-03-16 16:25:39 -<==      Total: 0
2020-03-16 16:25:39 -耗时 : 21
2020-03-16 16:25:39 -<==      Total: 1
2020-03-16 16:25:39 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-16 16:25:39 -==> Parameters: 691(String)
2020-03-16 16:25:39 -<==      Total: 1
2020-03-16 16:25:39 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-16 16:25:39 -==> Parameters: 691(String)
2020-03-16 16:25:39 -<==      Total: 1
2020-03-16 16:25:39 -耗时 : 30
2020-03-16 16:25:46 -此处进行解密+验签+身份验证
2020-03-16 16:25:46 -此处进行解密+验签+身份验证
2020-03-16 16:25:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:25:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:25:46 -==> Parameters: 691(String)
2020-03-16 16:25:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:25:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -耗时 : 11
2020-03-16 16:25:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:25:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:46 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:46 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:46 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:25:46 -<==    Updates: 1
2020-03-16 16:25:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:25:46 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:46 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:46 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:25:46 -<==    Updates: 1
2020-03-16 16:25:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:25:46 -==> Parameters: 
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:46 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:46 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:25:46 -<==    Updates: 1
2020-03-16 16:25:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:46 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:46 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:46 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:25:46 -<==    Updates: 1
2020-03-16 16:25:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:46 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:25:46 -<==      Total: 1
2020-03-16 16:25:46 -耗时 : 214
2020-03-16 16:25:50 -此处进行解密+验签+身份验证
2020-03-16 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-16 16:25:50 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-16 16:25:50 -==> Parameters: 1(String), 691(String), applyRateFlag(String)
2020-03-16 16:25:50 -<==    Updates: 1
2020-03-16 16:25:50 -耗时 : 14
2020-03-16 16:25:50 -此处进行解密+验签+身份验证
2020-03-16 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:50 -此处进行解密+验签+身份验证
2020-03-16 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:50 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-16 16:25:50 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-16 16:25:50 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-16 16:25:50 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:50 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-16 16:25:50 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:50 -<==      Total: 8
2020-03-16 16:25:50 -耗时 : 17
2020-03-16 16:25:50 -<==      Total: 15
2020-03-16 16:25:50 -耗时 : 40
2020-03-16 16:25:53 -此处进行解密+验签+身份验证
2020-03-16 16:25:53 -此处进行解密+验签+身份验证
2020-03-16 16:25:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:53 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:25:53 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:25:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:25:53 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:25:53 -==> Parameters: 691(String)
2020-03-16 16:25:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -耗时 : 22
2020-03-16 16:25:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:53 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:53 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:53 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:25:53 -<==    Updates: 1
2020-03-16 16:25:53 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:25:53 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:53 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:53 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:25:53 -<==    Updates: 1
2020-03-16 16:25:53 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:25:53 -==> Parameters: 
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:53 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:53 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:25:53 -<==    Updates: 1
2020-03-16 16:25:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:53 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:53 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:53 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:25:53 -<==    Updates: 1
2020-03-16 16:25:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:53 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:25:53 -<==      Total: 1
2020-03-16 16:25:53 -耗时 : 203
2020-03-16 16:25:55 -此处进行解密+验签+身份验证
2020-03-16 16:25:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-16 16:25:55 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-16 16:25:55 -==> Parameters: 1(String), 691(String), collegeFlag(String)
2020-03-16 16:25:55 -此处进行解密+验签+身份验证
2020-03-16 16:25:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:55 -<==    Updates: 1
2020-03-16 16:25:55 -耗时 : 22
2020-03-16 16:25:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:55 -请求地址 : http://192.168.191.1:8080/api/sys/moneylockercollege/getMoneyLockerCollegeList
2020-03-16 16:25:55 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,cacheKey:zfpay_sys_money_locker_college_list_0
2020-03-16 16:25:55 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,has cacheKey:zfpay_sys_money_locker_college_list_0 , return
2020-03-16 16:25:55 -耗时 : 20
2020-03-16 16:25:58 -此处进行解密+验签+身份验证
2020-03-16 16:25:58 -此处进行解密+验签+身份验证
2020-03-16 16:25:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:25:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:25:58 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:25:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:25:58 -==> Parameters: 691(String)
2020-03-16 16:25:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:25:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -耗时 : 11
2020-03-16 16:25:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:25:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:58 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:58 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:58 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:25:58 -<==    Updates: 1
2020-03-16 16:25:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:25:58 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:58 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:58 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:25:58 -<==    Updates: 1
2020-03-16 16:25:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:25:58 -==> Parameters: 
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:58 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:58 -==> Parameters: 0(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:25:58 -<==    Updates: 1
2020-03-16 16:25:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:25:58 -==> Parameters: 691(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:58 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:25:58 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:25:58 -<==    Updates: 1
2020-03-16 16:25:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:25:58 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:25:58 -<==      Total: 1
2020-03-16 16:25:58 -耗时 : 114
2020-03-16 16:27:13 -此处进行解密+验签+身份验证
2020-03-16 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:27:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:27:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:27:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:27:13 -==> Parameters: 691(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:27:13 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:27:13 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:27:13 -<==    Updates: 1
2020-03-16 16:27:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:27:13 -==> Parameters: 691(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:27:13 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:27:13 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:27:13 -<==    Updates: 1
2020-03-16 16:27:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:27:13 -==> Parameters: 
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:27:13 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:27:13 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:27:13 -<==    Updates: 1
2020-03-16 16:27:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:27:13 -==> Parameters: 691(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:27:13 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:27:13 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:27:13 -<==    Updates: 1
2020-03-16 16:27:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:27:13 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:27:13 -<==      Total: 1
2020-03-16 16:27:13 -耗时 : 119
2020-03-16 16:41:25 -此处进行解密+验签+身份验证
2020-03-16 16:41:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:25 -此处进行解密+验签+身份验证
2020-03-16 16:41:25 -解密异常：{end_number=, token=691|BZSB8K7H9KUV20XVXLCWOOO3TNO83ISO, start_number=, sign=98B92458BC0268571B7952930C6F2F80}
2020-03-16 16:41:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 16:41:25 -耗时 : 0
2020-03-16 16:41:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:25 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-16 16:41:25 -Reconnected to 120.25.164.176:10379
2020-03-16 16:41:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:41:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3a9a3f7d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@25a9f0ff (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3725c2f5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5c2f62bb (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@77a15555 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1d656d56 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@573e76f3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5b4596e9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@61f3322a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:41:25 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:41:25 -==> Parameters: 691(String), 691(String)
2020-03-16 16:41:27 -此处进行解密+验签+身份验证
2020-03-16 16:41:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:41:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:41:27 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 16:41:27 -==> Parameters: 691(String)
2020-03-16 16:41:27 -<==      Total: 8
2020-03-16 16:41:27 -耗时 : 19
2020-03-16 16:41:30 -此处进行解密+验签+身份验证
2020-03-16 16:41:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:41:30 -此处进行解密+验签+身份验证
2020-03-16 16:41:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:41:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:41:30 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:41:30 -==> Parameters: 691(String)
2020-03-16 16:41:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:41:30 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:41:30 -==> Parameters: 691(String), E20200308050(String)
2020-03-16 16:41:30 -<==      Total: 0
2020-03-16 16:41:30 -耗时 : 14
2020-03-16 16:41:30 -<==      Total: 1
2020-03-16 16:41:30 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:41:30 -==> Parameters: 
2020-03-16 16:41:30 -<==      Total: 94
2020-03-16 16:41:30 -耗时 : 29
2020-03-16 16:41:39 -<==      Total: 0
2020-03-16 16:41:39 -耗时 : 13958
2020-03-16 16:41:58 -此处进行解密+验签+身份验证
2020-03-16 16:41:58 -此处进行解密+验签+身份验证
2020-03-16 16:41:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:41:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:41:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:41:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:41:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:41:58 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:41:58 -==> Parameters: 691(String)
2020-03-16 16:41:58 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:41:58 -==> Parameters: 691(String), E20200308050(String)
2020-03-16 16:41:58 -<==      Total: 1
2020-03-16 16:41:58 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:41:58 -==> Parameters: 
2020-03-16 16:41:58 -<==      Total: 0
2020-03-16 16:41:58 -耗时 : 17
2020-03-16 16:41:58 -<==      Total: 94
2020-03-16 16:41:58 -耗时 : 23
2020-03-16 16:46:56 -此处进行解密+验签+身份验证
2020-03-16 16:46:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:46:56 -此处进行解密+验签+身份验证
2020-03-16 16:46:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:46:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:46:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:46:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:46:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:46:56 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:46:56 -==> Parameters: 691(String)
2020-03-16 16:46:56 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:46:56 -==> Parameters: 691(String), E20200308050(String)
2020-03-16 16:46:56 -<==      Total: 1
2020-03-16 16:46:56 -<==      Total: 0
2020-03-16 16:46:56 -耗时 : 17
2020-03-16 16:46:56 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:46:56 -==> Parameters: 
2020-03-16 16:46:56 -<==      Total: 94
2020-03-16 16:46:56 -耗时 : 22
2020-03-16 16:47:30 -此处进行解密+验签+身份验证
2020-03-16 16:47:30 -此处进行解密+验签+身份验证
2020-03-16 16:47:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:47:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:47:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:47:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:47:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:47:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:47:30 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:47:30 -==> Parameters: 691(String), E20200308050(String)
2020-03-16 16:47:30 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:47:30 -==> Parameters: 691(String)
2020-03-16 16:47:30 -<==      Total: 1
2020-03-16 16:47:30 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:47:30 -==> Parameters: 
2020-03-16 16:47:30 -<==      Total: 0
2020-03-16 16:47:30 -耗时 : 12
2020-03-16 16:47:30 -<==      Total: 94
2020-03-16 16:47:30 -耗时 : 22
2020-03-16 16:48:05 -此处进行解密+验签+身份验证
2020-03-16 16:48:05 -此处进行解密+验签+身份验证
2020-03-16 16:48:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:48:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:48:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:48:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:48:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:48:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:48:12 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:48:12 -==> Parameters: 691(String), E20200308050(String)
2020-03-16 16:48:12 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:48:12 -==> Parameters: 691(String)
2020-03-16 16:48:12 -<==      Total: 0
2020-03-16 16:48:12 -耗时 : 12
2020-03-16 16:48:12 -<==      Total: 1
2020-03-16 16:48:12 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:48:12 -==> Parameters: 
2020-03-16 16:48:12 -<==      Total: 94
2020-03-16 16:48:12 -耗时 : 7195
2020-03-16 16:49:04 -此处进行解密+验签+身份验证
2020-03-16 16:49:04 -此处进行解密+验签+身份验证
2020-03-16 16:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:49:04 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:49:04 -==> Parameters: 691(String)
2020-03-16 16:49:04 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:49:04 -==> Parameters: 691(String), E20200308050(String)
2020-03-16 16:49:04 -<==      Total: 1
2020-03-16 16:49:04 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:49:04 -==> Parameters: 
2020-03-16 16:49:04 -<==      Total: 0
2020-03-16 16:49:04 -耗时 : 17
2020-03-16 16:49:04 -<==      Total: 94
2020-03-16 16:49:48 -耗时 : 44066
2020-03-16 16:49:48 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=48s482ms288µs777ns).
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -解密：
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -==> Parameters: 01(String), 01(String)
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -<==      Total: 12
2020-03-16 16:49:48 -耗时 : 16
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -解密：
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:49:48 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -==> Parameters: 01(String), 01(String)
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 12
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:49:48 -==> Parameters: 
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-16 16:49:48 -<==      Total: 12
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -耗时 : 10
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 14
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:49:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -<==      Total: 3
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -耗时 : 13
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:49:48 -==> Parameters: 
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 11
2020-03-16 16:49:48 -此处进行解密+验签+身份验证
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 8
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -<==      Total: 3
2020-03-16 16:49:48 -耗时 : 8
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:49:48 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:49:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:49:48 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:49:48 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 2
2020-03-16 16:49:48 -耗时 : 11
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-16 16:49:48 -耗时 : 14
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -耗时 : 31
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:49:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-16 16:49:48 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:49:48 -==> Parameters: 691(String), 202003(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 26
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-16 16:49:48 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 2
2020-03-16 16:49:48 -耗时 : 33
2020-03-16 16:49:48 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 35
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 8
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 11
2020-03-16 16:49:48 -耗时 : 15
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 15
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-16 16:49:48 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-16 16:49:48 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 0
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-16 16:49:48 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 0
2020-03-16 16:49:48 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-16 16:49:48 -==> Parameters: 202003(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:49:48 -==> Parameters: 
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-16 16:49:48 -==> Parameters: 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 83
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 65
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:49:48 -==> Parameters: 
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:49:48 -==> Parameters: 
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 112
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:49:48 -==> Parameters: 
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 87
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 109
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:49:48 -==> Parameters: 691(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 179
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:49:48 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 185
2020-03-16 16:49:48 -<==    Updates: 1
2020-03-16 16:49:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:49:48 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:49:48 -<==      Total: 1
2020-03-16 16:49:48 -耗时 : 226
2020-03-16 16:50:04 -此处进行解密+验签+身份验证
2020-03-16 16:50:04 -此处进行解密+验签+身份验证
2020-03-16 16:50:04 -解密：
2020-03-16 16:50:04 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:50:04 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-16 16:50:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-16 16:50:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-16 16:50:04 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:50:04 -==> Parameters: 04(String), 04(String)
2020-03-16 16:50:04 -耗时 : 9
2020-03-16 16:50:04 -<==      Total: 0
2020-03-16 16:50:04 -耗时 : 18
2020-03-16 16:50:04 -此处进行解密+验签+身份验证
2020-03-16 16:50:04 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"571A40E08B56E9626623DD2B24B2FCF4","version_no":"450000000145206","login_type":"token","token":"691|BZSB8K7H9KUV20XVXLCWOOO3TNO83ISO","sys_user_account":""}
2020-03-16 16:50:04 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 16:50:04 -token值=======691|BZSB8K7H9KUV20XVXLCWOOO3TNO83ISO
2020-03-16 16:50:04 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-16 16:50:04 -==> Parameters: 691(String)
2020-03-16 16:50:04 -<==      Total: 1
2020-03-16 16:50:04 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 16:50:04 -==> Parameters: 25(String)
2020-03-16 16:50:04 -<==      Total: 1
2020-03-16 16:50:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:50:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:50:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:50:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:50:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 16:50:04 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 16:50:04 -耗时 : 51
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:50:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:50:09 -==> Parameters: 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -耗时 : 12
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -解密：
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 16:50:09 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 16:50:09 -==> Parameters: 01(String), 01(String)
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -<==      Total: 12
2020-03-16 16:50:09 -耗时 : 12
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 16:50:09 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 16:50:09 -==> Parameters: 
2020-03-16 16:50:09 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 16:50:09 -==> Parameters: 691(String)
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:09 -此处进行解密+验签+身份验证
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:09 -<==      Total: 3
2020-03-16 16:50:09 -耗时 : 8
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:50:09 -<==      Total: 2
2020-03-16 16:50:09 -耗时 : 15
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 16:50:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 16:50:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 16:50:09 -==> Parameters: 691(String)
2020-03-16 16:50:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:50:09 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 16:50:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:50:09 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -耗时 : 9
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:50:09 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 16:50:09 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:50:09 -==> Parameters: 
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 16:50:09 -==> Parameters: 
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:50:09 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 16:50:09 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 16:50:09 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:50:09 -<==    Updates: 1
2020-03-16 16:50:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 16:50:09 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -耗时 : 133
2020-03-16 16:50:09 -<==      Total: 1
2020-03-16 16:50:09 -耗时 : 126
2020-03-16 16:50:14 -此处进行解密+验签+身份验证
2020-03-16 16:50:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:14 -此处进行解密+验签+身份验证
2020-03-16 16:50:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 16:50:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 16:50:14 -==> Parameters: 691(String)
2020-03-16 16:50:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 16:50:14 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 16:50:14 -==> Parameters: 691(String), 691(String)
2020-03-16 16:50:14 -<==      Total: 0
2020-03-16 16:50:14 -耗时 : 13
2020-03-16 16:50:14 -<==      Total: 4
2020-03-16 16:50:14 -耗时 : 33
2020-03-16 16:50:17 -此处进行解密+验签+身份验证
2020-03-16 16:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 16:50:17 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-16 16:50:17 -==> Parameters: 691(String)
2020-03-16 16:50:17 -<==      Total: 11
2020-03-16 16:50:17 -耗时 : 19
2020-03-16 16:50:32 -此处进行解密+验签+身份验证
2020-03-16 16:50:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:32 -此处进行解密+验签+身份验证
2020-03-16 16:50:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:50:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:50:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:50:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:50:32 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:50:32 -==> Parameters: 691(String)
2020-03-16 16:50:32 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:50:32 -==> Parameters: 691(String), EPOS20200113051(String)
2020-03-16 16:50:32 -<==      Total: 0
2020-03-16 16:50:32 -耗时 : 15
2020-03-16 16:50:32 -<==      Total: 1
2020-03-16 16:50:32 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:50:32 -==> Parameters: 
2020-03-16 16:50:32 -<==      Total: 94
2020-03-16 16:50:32 -耗时 : 27
2020-03-16 16:51:57 -此处进行解密+验签+身份验证
2020-03-16 16:51:57 -此处进行解密+验签+身份验证
2020-03-16 16:51:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:51:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:51:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:51:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:51:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:51:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:51:57 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:51:57 -==> Parameters: 691(String), EPOS20200113051(String)
2020-03-16 16:51:57 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:51:57 -==> Parameters: 691(String)
2020-03-16 16:51:57 -<==      Total: 1
2020-03-16 16:51:57 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:51:57 -==> Parameters: 
2020-03-16 16:51:57 -<==      Total: 0
2020-03-16 16:51:57 -耗时 : 10
2020-03-16 16:51:57 -<==      Total: 94
2020-03-16 16:51:57 -耗时 : 22
2020-03-16 16:54:02 -此处进行解密+验签+身份验证
2020-03-16 16:54:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:54:02 -此处进行解密+验签+身份验证
2020-03-16 16:54:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:54:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:54:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:54:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:54:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:54:06 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 16:54:06 -==> Parameters: 691(String)
2020-03-16 16:54:06 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7b3154f9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:54:06 -<==      Total: 0
2020-03-16 16:54:06 -耗时 : 4029
2020-03-16 16:54:06 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:54:06 -==> Parameters: 691(String), EPOS20200113051(String)
2020-03-16 16:54:06 -<==      Total: 1
2020-03-16 16:54:06 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:54:06 -==> Parameters: 
2020-03-16 16:54:06 -<==      Total: 94
2020-03-16 16:54:06 -耗时 : 4048
2020-03-16 16:57:49 -此处进行解密+验签+身份验证
2020-03-16 16:57:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:57:49 -此处进行解密+验签+身份验证
2020-03-16 16:57:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 16:57:49 -解密异常：{token=691|BZSB8K7H9KUV20XVXLCWOOO3TNO83ISO, sign=98B92458BC0268571B7952930C6F2F80}
2020-03-16 16:57:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 16:57:49 -耗时 : 0
2020-03-16 16:57:49 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-16 16:57:49 -Reconnected to 120.25.164.176:10379
2020-03-16 16:57:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 16:57:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6e87bbeb (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@60b70a98 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@88e45ac (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5b85ffb5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@789edf4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5fb2c457 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@256b5928 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@51676267 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@19c9d3f2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-16 16:57:52 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 16:57:52 -==> Parameters: 691(String), EPOS20200113051(String)
2020-03-16 16:57:52 -<==      Total: 1
2020-03-16 16:57:52 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 16:57:52 -==> Parameters: 
2020-03-16 16:57:52 -<==      Total: 94
2020-03-16 16:57:52 -耗时 : 2980
2020-03-16 17:33:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 17:33:06 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 17:33:06 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 17:33:06 -Shutting down Quartz Scheduler
2020-03-16 17:33:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 17:33:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 17:33:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 17:33:06 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 17:33:06 -HikariPool-1 - Shutdown initiated...
2020-03-16 17:33:06 -HikariPool-1 - Shutdown completed.
2020-03-16 17:33:57 -Starting LongEcologicalApplication on PC-201905161910 with PID 8120 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 17:33:57 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 17:33:57 -No active profile set, falling back to default profiles: default
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:33:58 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 17:33:58 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 17:33:58 -Finished Spring Data repository scanning in 141ms. Found 0 repository interfaces.
2020-03-16 17:33:58 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 17:33:58 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 17:33:58 -Finished Spring Data repository scanning in 57ms. Found 0 repository interfaces.
2020-03-16 17:33:59 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$d20fdecf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 17:33:59 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cc93c36f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 17:34:00 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 17:34:00 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 17:34:00 -Starting service [Tomcat]
2020-03-16 17:34:00 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 17:34:00 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 17:34:00 -Initializing Spring embedded WebApplicationContext
2020-03-16 17:34:00 -Root WebApplicationContext: initialization completed in 3080 ms
2020-03-16 17:34:00 -Filter xssFilter was not registered (disabled)
2020-03-16 17:34:00 -HikariPool-1 - Starting...
2020-03-16 17:34:01 -HikariPool-1 - Start completed.
2020-03-16 17:34:01 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 17:34:01 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 17:34:01 -HHH000206: hibernate.properties not found
2020-03-16 17:34:01 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 17:34:01 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 17:34:01 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 17:34:02 -Using default implementation for ThreadExecutor
2020-03-16 17:34:02 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 17:34:02 -Quartz Scheduler v.2.3.0 created.
2020-03-16 17:34:02 -RAMJobStore initialized.
2020-03-16 17:34:02 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 17:34:02 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 17:34:02 -Quartz scheduler version: 2.3.0
2020-03-16 17:34:02 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3e38c472
2020-03-16 17:34:03 -STAET TaskExecutorConfig
2020-03-16 17:34:03 -Initializing ExecutorService
2020-03-16 17:34:03 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 17:34:03 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 17:34:03 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 17:34:04 -Initializing ExecutorService 'taskScheduler'
2020-03-16 17:34:04 -Starting Quartz Scheduler now
2020-03-16 17:34:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 17:34:04 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 17:34:04 -Using a shared selector for servlet write/read
2020-03-16 17:34:04 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 17:34:04 -Started LongEcologicalApplication in 7.875 seconds (JVM running for 9.316)
2020-03-16 17:35:03 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 17:35:03 -Initializing Servlet 'dispatcherServlet'
2020-03-16 17:35:03 -Completed initialization in 12 ms
2020-03-16 17:35:03 -此处进行解密+验签+身份验证
2020-03-16 17:35:03 -此处进行解密+验签+身份验证
2020-03-16 17:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:03 -Starting without optional epoll library
2020-03-16 17:35:03 -Starting without optional kqueue library
2020-03-16 17:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:35:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:35:03 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:35:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:35:03 -==> Parameters: 691(String)
2020-03-16 17:35:03 -==> Parameters: 691(String), 691(String)
2020-03-16 17:35:03 -<==      Total: 1
2020-03-16 17:35:03 -<==      Total: 1
2020-03-16 17:35:03 -耗时 : 61
2020-03-16 17:35:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:35:03 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 17:35:03 -<==      Total: 1
2020-03-16 17:35:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:35:03 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 17:35:03 -<==    Updates: 1
2020-03-16 17:35:03 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:35:03 -==> Parameters: 691(String), 691(String)
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:35:04 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:35:04 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 17:35:04 -<==    Updates: 1
2020-03-16 17:35:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:35:04 -==> Parameters: 
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:35:04 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:35:04 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 17:35:04 -<==    Updates: 1
2020-03-16 17:35:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:35:04 -==> Parameters: 691(String), 691(String)
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:35:04 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:35:04 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 17:35:04 -<==    Updates: 1
2020-03-16 17:35:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:35:04 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 17:35:04 -<==      Total: 1
2020-03-16 17:35:04 -耗时 : 258
2020-03-16 17:35:09 -此处进行解密+验签+身份验证
2020-03-16 17:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:09 -此处进行解密+验签+身份验证
2020-03-16 17:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:35:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 17:35:09 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:35:09 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 17:35:09 -==> Parameters: 691(String), 691(String)
2020-03-16 17:35:09 -==> Parameters: 691(String)
2020-03-16 17:35:09 -<==      Total: 0
2020-03-16 17:35:09 -耗时 : 44
2020-03-16 17:35:09 -<==      Total: 4
2020-03-16 17:35:09 -耗时 : 69
2020-03-16 17:35:12 -此处进行解密+验签+身份验证
2020-03-16 17:35:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:12 -此处进行解密+验签+身份验证
2020-03-16 17:35:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:35:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:35:13 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:35:13 -==> Parameters: 691(String), MPOS(String)
2020-03-16 17:35:13 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:35:13 -==> Parameters: 691(String), TraditionalPOS(String)
2020-03-16 17:35:13 -<==      Total: 0
2020-03-16 17:35:13 -耗时 : 22
2020-03-16 17:35:13 -<==      Total: 0
2020-03-16 17:35:13 -耗时 : 22
2020-03-16 17:35:18 -此处进行解密+验签+身份验证
2020-03-16 17:35:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:35:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:35:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:35:18 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:35:18 -==> Parameters: 691(String), epos(String)
2020-03-16 17:35:18 -<==      Total: 0
2020-03-16 17:35:18 -耗时 : 22
2020-03-16 17:36:07 -此处进行解密+验签+身份验证
2020-03-16 17:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:36:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:36:07 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:36:07 -==> Parameters: 691(String), TrafficCard(String)
2020-03-16 17:36:07 -<==      Total: 0
2020-03-16 17:36:07 -耗时 : 22
2020-03-16 17:36:09 -此处进行解密+验签+身份验证
2020-03-16 17:36:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:36:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:36:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:36:09 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:36:09 -==> Parameters: 691(String), epos(String)
2020-03-16 17:36:09 -<==      Total: 0
2020-03-16 17:36:09 -耗时 : 23
2020-03-16 17:36:24 -此处进行解密+验签+身份验证
2020-03-16 17:36:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:36:24 -此处进行解密+验签+身份验证
2020-03-16 17:36:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_691
2020-03-16 17:36:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:36:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_691 , return
2020-03-16 17:36:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:36:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:36:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:36:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:36:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:36:24 -==> Parameters: 691(String)
2020-03-16 17:36:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:36:24 -==> Parameters: 691(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -耗时 : 24
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:24 -==> Parameters: applyRateFlag(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:24 -==> Parameters: 0(Integer), 0(Integer), 691(String), applyRateFlag(String)
2020-03-16 17:36:24 -<==    Updates: 1
2020-03-16 17:36:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:36:24 -==> Parameters: 691(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:24 -==> Parameters: recallFlag(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:24 -==> Parameters: 0(Integer), 0(Integer), 691(String), recallFlag(String)
2020-03-16 17:36:24 -<==    Updates: 1
2020-03-16 17:36:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:36:24 -==> Parameters: 
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:24 -==> Parameters: collegeFlag(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:24 -==> Parameters: 15(Integer), 15(Integer), 691(String), collegeFlag(String)
2020-03-16 17:36:24 -<==    Updates: 1
2020-03-16 17:36:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:36:24 -==> Parameters: 691(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:24 -==> Parameters: cardFlag(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:24 -==> Parameters: 0(Integer), 0(Integer), 691(String), cardFlag(String)
2020-03-16 17:36:24 -<==    Updates: 1
2020-03-16 17:36:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:24 -==> Parameters: appImgFlag(String), 691(String)
2020-03-16 17:36:24 -<==      Total: 1
2020-03-16 17:36:24 -耗时 : 209
2020-03-16 17:36:30 -此处进行解密+验签+身份验证
2020-03-16 17:36:30 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-16 17:36:30 -token值=======691|BZSB8K7H9KUV20XVXLCWOOO3TNO83ISO
2020-03-16 17:36:30 -耗时 : 27
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-16 17:36:38 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-16 17:36:38 -==> Parameters: 15019499979(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-16 17:36:38 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200316(String), 173638(String), 469(Integer)
2020-03-16 17:36:38 -<==    Updates: 1
2020-03-16 17:36:38 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-16 17:36:38 -==> Parameters: 25(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 17:36:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 17:36:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 17:36:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 17:36:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-16 17:36:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-16 17:36:38 -耗时 : 94
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:36:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:36:38 -==> Parameters: 469(String)
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -解密：
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -耗时 : 17
2020-03-16 17:36:38 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-16 17:36:38 -==> Parameters: 01(String), 01(String)
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:38 -<==      Total: 12
2020-03-16 17:36:38 -耗时 : 26
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-16 17:36:38 -==> Parameters: 469(String)
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-16 17:36:38 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-16 17:36:38 -==> Parameters: 
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:38 -此处进行解密+验签+身份验证
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -耗时 : 15
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:36:38 -==> Parameters: 469(String)
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:36:38 -<==      Total: 3
2020-03-16 17:36:38 -耗时 : 22
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:36:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:36:38 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -耗时 : 24
2020-03-16 17:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:36:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:36:38 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:38 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:38 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:38 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:38 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:36:38 -<==    Updates: 2
2020-03-16 17:36:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:36:38 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:38 -<==    Updates: 2
2020-03-16 17:36:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:36:38 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:38 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:38 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:38 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:38 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:36:38 -<==    Updates: 2
2020-03-16 17:36:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:36:38 -==> Parameters: 
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:38 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:36:38 -<==    Updates: 2
2020-03-16 17:36:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:36:38 -==> Parameters: 
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:38 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:36:38 -<==      Total: 1
2020-03-16 17:36:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:38 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:36:38 -<==      Total: 2
2020-03-16 17:36:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:38 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:36:38 -<==    Updates: 2
2020-03-16 17:36:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:36:38 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:39 -<==      Total: 1
2020-03-16 17:36:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:36:39 -<==    Updates: 2
2020-03-16 17:36:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:36:39 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:39 -<==      Total: 2
2020-03-16 17:36:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:36:39 -<==      Total: 1
2020-03-16 17:36:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:36:39 -<==      Total: 2
2020-03-16 17:36:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:36:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:36:39 -<==    Updates: 2
2020-03-16 17:36:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:36:39 -<==      Total: 2
2020-03-16 17:36:39 -耗时 : 208
2020-03-16 17:36:39 -<==    Updates: 2
2020-03-16 17:36:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:36:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:36:39 -<==      Total: 2
2020-03-16 17:36:39 -耗时 : 213
2020-03-16 17:36:41 -此处进行解密+验签+身份验证
2020-03-16 17:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:41 -此处进行解密+验签+身份验证
2020-03-16 17:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:41 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:41 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:36:41 -==> Parameters: 469(String)
2020-03-16 17:36:41 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 17:36:41 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 17:36:41 -==> Parameters: 469(String), 469(String)
2020-03-16 17:36:41 -<==      Total: 98
2020-03-16 17:36:41 -耗时 : 43
2020-03-16 17:36:43 -此处进行解密+验签+身份验证
2020-03-16 17:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:43 -此处进行解密+验签+身份验证
2020-03-16 17:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:36:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:36:43 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:36:43 -==> Parameters: 469(String), MPOS(String)
2020-03-16 17:36:43 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:36:43 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-16 17:36:43 -<==      Total: 0
2020-03-16 17:36:43 -耗时 : 22
2020-03-16 17:36:43 -<==      Total: 0
2020-03-16 17:36:43 -耗时 : 23
2020-03-16 17:36:44 -此处进行解密+验签+身份验证
2020-03-16 17:36:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:44 -此处进行解密+验签+身份验证
2020-03-16 17:36:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:36:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:36:44 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:36:44 -==> Parameters: 469(String), epos(String)
2020-03-16 17:36:44 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:36:44 -==> Parameters: 469(String), TrafficCard(String)
2020-03-16 17:36:44 -<==      Total: 2
2020-03-16 17:36:44 -耗时 : 21
2020-03-16 17:36:44 -<==      Total: 0
2020-03-16 17:36:44 -耗时 : 23
2020-03-16 17:36:51 -此处进行解密+验签+身份验证
2020-03-16 17:36:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-16 17:36:51 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 17:36:51 -==> Parameters: 691(String), EPOS20200113051(String)
2020-03-16 17:36:51 -<==      Total: 1
2020-03-16 17:36:51 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-16 17:36:51 -==> Parameters: 469_20200316161842(String)
2020-03-16 17:36:51 -<==      Total: 1
2020-03-16 17:36:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:36:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:36:51 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-16 17:36:51 -==> Parameters: 469_20200316161842(String)
2020-03-16 17:36:51 -<==      Total: 1
2020-03-16 17:36:51 -耗时 : 56
2020-03-16 17:36:51 -此处进行解密+验签+身份验证
2020-03-16 17:36:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:36:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:36:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 17:36:51 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 17:36:51 -==> Parameters: 469(String), EPOS20200113051(String)
2020-03-16 17:36:51 -<==      Total: 1
2020-03-16 17:36:51 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-16 17:36:51 -==> Parameters: EPOS20200113051(String)
2020-03-16 17:36:51 -<==      Total: 0
2020-03-16 17:36:51 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 17:36:51 -==> Parameters: 
2020-03-16 17:36:51 -<==      Total: 94
2020-03-16 17:36:51 -耗时 : 63
2020-03-16 17:36:55 -<==      Total: 4
2020-03-16 17:36:55 -耗时 : 13910
2020-03-16 17:38:01 -此处进行解密+验签+身份验证
2020-03-16 17:38:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:38:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:38:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-16 17:38:01 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 17:38:01 -==> Parameters: 691(String), EPOS20200113051(String)
2020-03-16 17:38:01 -<==      Total: 1
2020-03-16 17:38:01 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-16 17:38:01 -==> Parameters: 469_20200316161842(String)
2020-03-16 17:38:01 -<==      Total: 1
2020-03-16 17:38:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:38:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:38:01 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-16 17:38:01 -==> Parameters: 469_20200316161842(String)
2020-03-16 17:38:01 -<==      Total: 1
2020-03-16 17:38:01 -耗时 : 62
2020-03-16 17:38:01 -此处进行解密+验签+身份验证
2020-03-16 17:38:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:38:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:38:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-16 17:38:01 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-16 17:38:01 -==> Parameters: 469(String), EPOS20200113051(String)
2020-03-16 17:38:01 -<==      Total: 1
2020-03-16 17:38:01 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-16 17:38:01 -==> Parameters: EPOS20200113051(String)
2020-03-16 17:38:01 -<==      Total: 0
2020-03-16 17:38:01 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 17:38:01 -==> Parameters: 
2020-03-16 17:38:01 -<==      Total: 94
2020-03-16 17:38:01 -耗时 : 50
2020-03-16 17:41:21 -Starting LongEcologicalApplication on PC-201905161910 with PID 13284 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 17:41:21 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 17:41:21 -No active profile set, falling back to default profiles: default
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:22 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:41:23 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 17:41:23 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 17:41:23 -Finished Spring Data repository scanning in 86ms. Found 0 repository interfaces.
2020-03-16 17:41:23 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 17:41:23 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 17:41:23 -Finished Spring Data repository scanning in 66ms. Found 0 repository interfaces.
2020-03-16 17:41:23 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$eff63084] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 17:41:23 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ea7a1524] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 17:41:24 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 17:41:24 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 17:41:24 -Starting service [Tomcat]
2020-03-16 17:41:24 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 17:41:24 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 17:41:24 -Initializing Spring embedded WebApplicationContext
2020-03-16 17:41:24 -Root WebApplicationContext: initialization completed in 3275 ms
2020-03-16 17:41:25 -Filter xssFilter was not registered (disabled)
2020-03-16 17:41:25 -HikariPool-1 - Starting...
2020-03-16 17:41:25 -HikariPool-1 - Start completed.
2020-03-16 17:41:25 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 17:41:26 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 17:41:26 -HHH000206: hibernate.properties not found
2020-03-16 17:41:26 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 17:41:26 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 17:41:26 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 17:41:27 -Using default implementation for ThreadExecutor
2020-03-16 17:41:27 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 17:41:27 -Quartz Scheduler v.2.3.0 created.
2020-03-16 17:41:27 -RAMJobStore initialized.
2020-03-16 17:41:27 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 17:41:27 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 17:41:27 -Quartz scheduler version: 2.3.0
2020-03-16 17:41:27 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3a917017
2020-03-16 17:41:28 -STAET TaskExecutorConfig
2020-03-16 17:41:28 -Initializing ExecutorService
2020-03-16 17:41:28 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 17:41:28 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 17:41:29 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 17:41:29 -Initializing ExecutorService 'taskScheduler'
2020-03-16 17:41:29 -Starting Quartz Scheduler now
2020-03-16 17:41:29 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 17:41:29 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 17:41:30 -Using a shared selector for servlet write/read
2020-03-16 17:41:30 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 17:41:30 -Started LongEcologicalApplication in 9.322 seconds (JVM running for 11.597)
2020-03-16 17:42:26 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 17:42:26 -Initializing Servlet 'dispatcherServlet'
2020-03-16 17:42:26 -Completed initialization in 21 ms
2020-03-16 17:42:26 -此处进行解密+验签+身份验证
2020-03-16 17:42:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:42:26 -Starting without optional epoll library
2020-03-16 17:42:26 -Starting without optional kqueue library
2020-03-16 17:42:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:42:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-16 17:42:27 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-16 17:42:27 -==> Parameters: 469(String)
2020-03-16 17:42:27 -<==      Total: 3
2020-03-16 17:42:27 -耗时 : 90
2020-03-16 17:42:31 -此处进行解密+验签+身份验证
2020-03-16 17:42:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:42:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:42:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:42:31 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:42:31 -==> Parameters: 469(String)
2020-03-16 17:42:31 -<==      Total: 98
2020-03-16 17:42:31 -耗时 : 35
2020-03-16 17:42:34 -此处进行解密+验签+身份验证
2020-03-16 17:42:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:42:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:42:34 -此处进行解密+验签+身份验证
2020-03-16 17:42:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:42:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:42:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 17:42:34 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 17:42:34 -==> Parameters: 469(String)
2020-03-16 17:42:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-16 17:42:34 -<==      Total: 2
2020-03-16 17:42:34 -耗时 : 12
2020-03-16 17:42:34 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-16 17:42:34 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:42:35 -<==      Total: 1
2020-03-16 17:42:35 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 17:42:35 -==> Parameters: 
2020-03-16 17:42:35 -<==      Total: 94
2020-03-16 17:42:35 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-16 17:42:35 -==> Parameters: M351846116651(String)
2020-03-16 17:42:35 -<==      Total: 0
2020-03-16 17:42:35 -耗时 : 63
2020-03-16 17:42:50 -此处进行解密+验签+身份验证
2020-03-16 17:42:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:42:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:42:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationMpos
2020-03-16 17:42:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:42:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:42:51 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) 
2020-03-16 17:42:51 -==> Parameters: 469(String), M351846116651(String), 0.5(String), 0.3(String), 0.00(String), 0.000(String)
2020-03-16 17:42:51 -<==      Total: 1
2020-03-16 17:42:51 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_mpos_info where user_id=? and sn in ( ? ) 
2020-03-16 17:42:51 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:42:51 -<==      Total: 1
2020-03-16 17:42:51 -==>  Preparing: select count(*) as cnt from t_user_mpos_info where user_id=? and is_ward='0' and sn in ( ? ) 
2020-03-16 17:42:51 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:42:51 -MachinesManageServiceImpl -- allocationMpos方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'is_ward' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\machines\MachinesManageMapper.xml]
### The error may involve com.example.longecological.mapper.machines.MachinesManageMapper.checkRepeatSetRewardMpos-Inline
### The error occurred while setting parameters
### SQL: select count(*) as cnt from t_user_mpos_info where user_id=?   and is_ward='0'   and sn in    (      ?    )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'is_ward' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'is_ward' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkRepeatSetRewardMpos(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationMpos(MachinesManageServiceImpl.java:508)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$94181f7c.allocationMpos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationMpos(MachinesManageController.java:225)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$4e1fbb89.allocationMpos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-16 17:42:51 -耗时 : 244
2020-03-16 17:43:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 17:43:48 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 17:43:48 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 17:43:48 -Shutting down Quartz Scheduler
2020-03-16 17:43:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 17:43:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 17:43:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 17:43:48 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 17:43:48 -HikariPool-1 - Shutdown initiated...
2020-03-16 17:43:48 -HikariPool-1 - Shutdown completed.
2020-03-16 17:44:12 -Starting LongEcologicalApplication on PC-201905161910 with PID 892 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-16 17:44:12 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-16 17:44:12 -No active profile set, falling back to default profiles: default
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-16 17:44:14 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 17:44:14 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 17:44:14 -Finished Spring Data repository scanning in 91ms. Found 0 repository interfaces.
2020-03-16 17:44:14 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-16 17:44:14 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-16 17:44:14 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-03-16 17:44:14 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b2361530] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 17:44:14 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$acb9f9d0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-16 17:44:15 -Tomcat initialized with port(s): 8080 (http)
2020-03-16 17:44:15 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-16 17:44:15 -Starting service [Tomcat]
2020-03-16 17:44:15 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-16 17:44:15 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-16 17:44:15 -Initializing Spring embedded WebApplicationContext
2020-03-16 17:44:15 -Root WebApplicationContext: initialization completed in 2986 ms
2020-03-16 17:44:15 -Filter xssFilter was not registered (disabled)
2020-03-16 17:44:16 -HikariPool-1 - Starting...
2020-03-16 17:44:16 -HikariPool-1 - Start completed.
2020-03-16 17:44:16 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-16 17:44:16 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-16 17:44:16 -HHH000206: hibernate.properties not found
2020-03-16 17:44:16 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-16 17:44:17 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-16 17:44:17 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 17:44:18 -Using default implementation for ThreadExecutor
2020-03-16 17:44:18 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-16 17:44:18 -Quartz Scheduler v.2.3.0 created.
2020-03-16 17:44:18 -RAMJobStore initialized.
2020-03-16 17:44:18 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-16 17:44:18 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-16 17:44:18 -Quartz scheduler version: 2.3.0
2020-03-16 17:44:18 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3cacc87
2020-03-16 17:44:18 -STAET TaskExecutorConfig
2020-03-16 17:44:18 -Initializing ExecutorService
2020-03-16 17:44:18 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-16 17:44:19 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-16 17:44:19 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-16 17:44:19 -Initializing ExecutorService 'taskScheduler'
2020-03-16 17:44:19 -Starting Quartz Scheduler now
2020-03-16 17:44:19 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-16 17:44:19 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-16 17:44:20 -Using a shared selector for servlet write/read
2020-03-16 17:44:20 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-16 17:44:20 -Started LongEcologicalApplication in 8.071 seconds (JVM running for 9.444)
2020-03-16 17:44:26 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-16 17:44:26 -Initializing Servlet 'dispatcherServlet'
2020-03-16 17:44:26 -Completed initialization in 11 ms
2020-03-16 17:44:27 -此处进行解密+验签+身份验证
2020-03-16 17:44:27 -此处进行解密+验签+身份验证
2020-03-16 17:44:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:27 -Starting without optional epoll library
2020-03-16 17:44:27 -Starting without optional kqueue library
2020-03-16 17:44:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:44:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:44:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:44:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:44:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:44:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:44:27 -==> Parameters: 469(String)
2020-03-16 17:44:27 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:27 -<==      Total: 1
2020-03-16 17:44:27 -<==      Total: 1
2020-03-16 17:44:27 -耗时 : 59
2020-03-16 17:44:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:27 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:44:27 -<==      Total: 2
2020-03-16 17:44:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:27 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:44:27 -<==    Updates: 2
2020-03-16 17:44:27 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:44:27 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:27 -<==      Total: 1
2020-03-16 17:44:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:27 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:44:28 -<==      Total: 2
2020-03-16 17:44:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:28 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:44:28 -<==    Updates: 2
2020-03-16 17:44:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:44:28 -==> Parameters: 
2020-03-16 17:44:28 -<==      Total: 1
2020-03-16 17:44:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:28 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:44:28 -<==      Total: 2
2020-03-16 17:44:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:28 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:44:28 -<==    Updates: 2
2020-03-16 17:44:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:44:28 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:28 -<==      Total: 1
2020-03-16 17:44:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:28 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:44:28 -<==      Total: 2
2020-03-16 17:44:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:28 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:44:28 -<==    Updates: 2
2020-03-16 17:44:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:28 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:44:28 -<==      Total: 2
2020-03-16 17:44:28 -耗时 : 247
2020-03-16 17:44:30 -此处进行解密+验签+身份验证
2020-03-16 17:44:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:44:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:44:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:44:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:44:30 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 1
2020-03-16 17:44:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:30 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 2
2020-03-16 17:44:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:30 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:44:30 -<==    Updates: 2
2020-03-16 17:44:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:44:30 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 1
2020-03-16 17:44:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:30 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 2
2020-03-16 17:44:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:30 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:44:30 -<==    Updates: 2
2020-03-16 17:44:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:44:30 -==> Parameters: 
2020-03-16 17:44:30 -<==      Total: 1
2020-03-16 17:44:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:30 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 2
2020-03-16 17:44:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:30 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:44:30 -<==    Updates: 2
2020-03-16 17:44:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:44:30 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 1
2020-03-16 17:44:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:30 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 2
2020-03-16 17:44:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:44:30 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:44:30 -<==    Updates: 2
2020-03-16 17:44:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:44:30 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:44:30 -<==      Total: 2
2020-03-16 17:44:30 -耗时 : 132
2020-03-16 17:44:31 -此处进行解密+验签+身份验证
2020-03-16 17:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:31 -此处进行解密+验签+身份验证
2020-03-16 17:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 17:44:32 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 17:44:32 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:32 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:44:32 -==> Parameters: 469(String)
2020-03-16 17:44:32 -<==      Total: 4
2020-03-16 17:44:32 -耗时 : 36
2020-03-16 17:44:32 -<==      Total: 98
2020-03-16 17:44:32 -耗时 : 77
2020-03-16 17:44:39 -此处进行解密+验签+身份验证
2020-03-16 17:44:39 -此处进行解密+验签+身份验证
2020-03-16 17:44:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 17:44:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-16 17:44:39 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 17:44:39 -==> Parameters: 469(String)
2020-03-16 17:44:39 -<==      Total: 2
2020-03-16 17:44:39 -耗时 : 13
2020-03-16 17:44:39 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-16 17:44:39 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:44:39 -<==      Total: 1
2020-03-16 17:44:39 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 17:44:39 -==> Parameters: 
2020-03-16 17:44:39 -<==      Total: 94
2020-03-16 17:44:39 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-16 17:44:39 -==> Parameters: M351846116651(String)
2020-03-16 17:44:39 -<==      Total: 0
2020-03-16 17:44:39 -耗时 : 62
2020-03-16 17:44:54 -此处进行解密+验签+身份验证
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationMpos
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:44:54 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) 
2020-03-16 17:44:54 -==> Parameters: 469(String), M351846116651(String), 0.5(String), 0.3(String), 0.00(String), 0.000(String)
2020-03-16 17:44:54 -<==      Total: 1
2020-03-16 17:44:54 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_mpos_info where user_id=? and sn in ( ? ) 
2020-03-16 17:44:54 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:44:54 -<==      Total: 1
2020-03-16 17:44:54 -==>  Preparing: select count(*) as cnt from t_user_mpos_info where user_id=? and is_reward='0' and sn in ( ? ) 
2020-03-16 17:44:54 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:44:54 -<==      Total: 1
2020-03-16 17:44:54 -==>  Preparing: INSERT INTO t_user_mpos_info ( user_id, sn, card_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, cre_date, cre_time, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ? FROM t_user_mpos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-16 17:44:54 -==> Parameters: 691(String), 0.5(String), 0.3(String), 0.00(String), 0.000(String), 20200316(String), 174454(String), 1(String), 469(String), M351846116651(String), 691(String)
2020-03-16 17:44:54 -<==    Updates: 1
2020-03-16 17:44:54 -==>  Preparing: UPDATE t_user_mpos_info SET card_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-16 17:44:54 -==> Parameters: 0.5(String), 0.3(String), 0.00(String), 0.000(String), 20200316(String), 174454(String), 691(String), M351846116651(String)
2020-03-16 17:44:54 -<==    Updates: 0
2020-03-16 17:44:54 -==>  Preparing: UPDATE t_user_mpos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-16 17:44:54 -==> Parameters: 20200316(String), 174454(String), 469(String), M351846116651(String)
2020-03-16 17:44:54 -<==    Updates: 1
2020-03-16 17:44:54 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-16 17:44:54 -==> Parameters: 469_20200316174454(String), M351846116651(String), 691(String), MPOS(String), 2020-03-16 17:44:54(String), 469(String)
2020-03-16 17:44:54 -<==    Updates: 1
2020-03-16 17:44:54 -耗时 : 285
2020-03-16 17:44:54 -此处进行解密+验签+身份验证
2020-03-16 17:44:54 -此处进行解密+验签+身份验证
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:44:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:44:54 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:44:54 -==> Parameters: 469(String)
2020-03-16 17:44:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 17:44:54 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 17:44:54 -==> Parameters: 469(String), 469(String)
2020-03-16 17:44:54 -<==      Total: 97
2020-03-16 17:44:54 -耗时 : 30
2020-03-16 17:45:08 -<==      Total: 5
2020-03-16 17:45:08 -耗时 : 13858
2020-03-16 17:45:42 -此处进行解密+验签+身份验证
2020-03-16 17:45:42 -此处进行解密+验签+身份验证
2020-03-16 17:45:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:45:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:45:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:45:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:45:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:45:42 -==> Parameters: 469(String)
2020-03-16 17:45:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:45:42 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 1
2020-03-16 17:45:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:42 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 1
2020-03-16 17:45:42 -耗时 : 22
2020-03-16 17:45:42 -<==      Total: 2
2020-03-16 17:45:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:42 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:45:42 -<==    Updates: 2
2020-03-16 17:45:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:45:42 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 1
2020-03-16 17:45:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:42 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 2
2020-03-16 17:45:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:42 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:45:42 -<==    Updates: 2
2020-03-16 17:45:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:45:42 -==> Parameters: 
2020-03-16 17:45:42 -<==      Total: 1
2020-03-16 17:45:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:42 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 2
2020-03-16 17:45:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:42 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:45:42 -<==    Updates: 2
2020-03-16 17:45:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:45:42 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 1
2020-03-16 17:45:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:42 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 2
2020-03-16 17:45:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:42 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:45:42 -<==    Updates: 2
2020-03-16 17:45:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:42 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:45:42 -<==      Total: 2
2020-03-16 17:45:42 -耗时 : 129
2020-03-16 17:45:47 -此处进行解密+验签+身份验证
2020-03-16 17:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:47 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-16 17:45:47 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-16 17:45:47 -==> Parameters: 469(String)
2020-03-16 17:45:47 -<==      Total: 10
2020-03-16 17:45:47 -耗时 : 15
2020-03-16 17:45:50 -此处进行解密+验签+身份验证
2020-03-16 17:45:50 -此处进行解密+验签+身份验证
2020-03-16 17:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:45:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:45:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:45:50 -==> Parameters: 469(String)
2020-03-16 17:45:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:45:50 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 1
2020-03-16 17:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:50 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 1
2020-03-16 17:45:50 -耗时 : 23
2020-03-16 17:45:50 -<==      Total: 2
2020-03-16 17:45:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:50 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:45:50 -<==    Updates: 2
2020-03-16 17:45:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:45:50 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 1
2020-03-16 17:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:50 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 2
2020-03-16 17:45:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:50 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:45:50 -<==    Updates: 2
2020-03-16 17:45:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:45:50 -==> Parameters: 
2020-03-16 17:45:50 -<==      Total: 1
2020-03-16 17:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:50 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 2
2020-03-16 17:45:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:50 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:45:50 -<==    Updates: 2
2020-03-16 17:45:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:45:50 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 1
2020-03-16 17:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:50 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 2
2020-03-16 17:45:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:45:50 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:45:50 -<==    Updates: 2
2020-03-16 17:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:45:50 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:45:50 -<==      Total: 2
2020-03-16 17:45:50 -耗时 : 122
2020-03-16 17:45:54 -此处进行解密+验签+身份验证
2020-03-16 17:45:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:54 -此处进行解密+验签+身份验证
2020-03-16 17:45:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:45:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:45:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:45:54 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:45:54 -==> Parameters: 469(String)
2020-03-16 17:45:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 17:45:54 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 17:45:54 -==> Parameters: 469(String), 469(String)
2020-03-16 17:45:54 -<==      Total: 5
2020-03-16 17:45:54 -耗时 : 22
2020-03-16 17:45:54 -<==      Total: 97
2020-03-16 17:45:54 -耗时 : 32
2020-03-16 17:46:34 -此处进行解密+验签+身份验证
2020-03-16 17:46:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:34 -此处进行解密+验签+身份验证
2020-03-16 17:46:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:34 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:46:34 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:46:34 -==> Parameters: 469(String)
2020-03-16 17:46:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:46:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:46:34 -<==      Total: 1
2020-03-16 17:46:34 -耗时 : 11
2020-03-16 17:46:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:46:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:46:34 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 1
2020-03-16 17:46:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:34 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 2
2020-03-16 17:46:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:34 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:46:34 -<==    Updates: 2
2020-03-16 17:46:34 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:46:34 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 1
2020-03-16 17:46:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:34 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 2
2020-03-16 17:46:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:34 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:46:34 -<==    Updates: 2
2020-03-16 17:46:34 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:46:34 -==> Parameters: 
2020-03-16 17:46:34 -<==      Total: 1
2020-03-16 17:46:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:34 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 2
2020-03-16 17:46:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:34 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:46:34 -<==    Updates: 2
2020-03-16 17:46:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:46:34 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 1
2020-03-16 17:46:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:34 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 2
2020-03-16 17:46:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:34 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:46:34 -<==    Updates: 2
2020-03-16 17:46:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:34 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:46:34 -<==      Total: 2
2020-03-16 17:46:34 -耗时 : 123
2020-03-16 17:46:35 -此处进行解密+验签+身份验证
2020-03-16 17:46:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:35 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-16 17:46:35 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-16 17:46:35 -==> Parameters: 469(String)
2020-03-16 17:46:35 -<==      Total: 10
2020-03-16 17:46:35 -耗时 : 22
2020-03-16 17:46:37 -此处进行解密+验签+身份验证
2020-03-16 17:46:37 -此处进行解密+验签+身份验证
2020-03-16 17:46:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-16 17:46:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-16 17:46:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-16 17:46:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-16 17:46:37 -==> Parameters: 469(String)
2020-03-16 17:46:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-16 17:46:37 -<==      Total: 1
2020-03-16 17:46:37 -耗时 : 12
2020-03-16 17:46:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:46:37 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 1
2020-03-16 17:46:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:37 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 2
2020-03-16 17:46:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:37 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-16 17:46:37 -<==    Updates: 2
2020-03-16 17:46:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-16 17:46:37 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 1
2020-03-16 17:46:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:37 -==> Parameters: recallFlag(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 2
2020-03-16 17:46:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:37 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-16 17:46:37 -<==    Updates: 2
2020-03-16 17:46:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-16 17:46:37 -==> Parameters: 
2020-03-16 17:46:37 -<==      Total: 1
2020-03-16 17:46:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:37 -==> Parameters: collegeFlag(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 2
2020-03-16 17:46:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:37 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-16 17:46:37 -<==    Updates: 2
2020-03-16 17:46:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-16 17:46:37 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 1
2020-03-16 17:46:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:37 -==> Parameters: cardFlag(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 2
2020-03-16 17:46:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-16 17:46:37 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-16 17:46:37 -<==    Updates: 2
2020-03-16 17:46:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-16 17:46:37 -==> Parameters: appImgFlag(String), 469(String)
2020-03-16 17:46:37 -<==      Total: 2
2020-03-16 17:46:37 -耗时 : 219
2020-03-16 17:46:38 -此处进行解密+验签+身份验证
2020-03-16 17:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:38 -此处进行解密+验签+身份验证
2020-03-16 17:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:46:38 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:46:38 -==> Parameters: 469(String)
2020-03-16 17:46:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-16 17:46:38 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-16 17:46:38 -==> Parameters: 469(String), 469(String)
2020-03-16 17:46:38 -<==      Total: 97
2020-03-16 17:46:38 -耗时 : 33
2020-03-16 17:46:38 -<==      Total: 5
2020-03-16 17:46:38 -耗时 : 24
2020-03-16 17:46:41 -此处进行解密+验签+身份验证
2020-03-16 17:46:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:41 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:46:41 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:46:41 -==> Parameters: 469(String)
2020-03-16 17:46:41 -<==      Total: 97
2020-03-16 17:46:41 -耗时 : 34
2020-03-16 17:46:50 -此处进行解密+验签+身份验证
2020-03-16 17:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:46:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-16 17:46:50 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-16 17:46:50 -==> Parameters: 469(String)
2020-03-16 17:46:50 -<==      Total: 97
2020-03-16 17:46:50 -耗时 : 43
2020-03-16 17:47:04 -此处进行解密+验签+身份验证
2020-03-16 17:47:04 -此处进行解密+验签+身份验证
2020-03-16 17:47:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:47:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:47:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:47:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:47:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-16 17:47:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-16 17:47:04 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-16 17:47:04 -==> Parameters: 469(String), M351846116652(String)
2020-03-16 17:47:04 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-16 17:47:04 -==> Parameters: 469(String)
2020-03-16 17:47:04 -<==      Total: 2
2020-03-16 17:47:04 -耗时 : 22
2020-03-16 17:47:04 -<==      Total: 1
2020-03-16 17:47:08 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 17:47:08 -==> Parameters: 
2020-03-16 17:47:08 -<==      Total: 94
2020-03-16 17:47:11 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-16 17:47:11 -==> Parameters: M351846116652(String)
2020-03-16 17:47:11 -<==      Total: 0
2020-03-16 17:47:15 -耗时 : 10658
2020-03-16 17:48:32 -此处进行解密+验签+身份验证
2020-03-16 17:48:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:48:32 -此处进行解密+验签+身份验证
2020-03-16 17:48:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:48:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:48:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:48:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:48:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-16 17:48:32 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:48:32 -==> Parameters: 469(String), MPOS(String)
2020-03-16 17:48:32 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-16 17:48:32 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-16 17:48:32 -<==      Total: 1
2020-03-16 17:48:32 -耗时 : 12
2020-03-16 17:48:32 -<==      Total: 0
2020-03-16 17:48:32 -耗时 : 23
2020-03-16 17:48:40 -此处进行解密+验签+身份验证
2020-03-16 17:48:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:48:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:48:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-16 17:48:43 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-16 17:48:43 -==> Parameters: 691(String), M351846116651(String)
2020-03-16 17:48:43 -<==      Total: 1
2020-03-16 17:48:43 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-16 17:48:43 -==> Parameters: 469_20200316174454(String)
2020-03-16 17:48:43 -<==      Total: 1
2020-03-16 17:48:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-16 17:48:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-16 17:48:43 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-16 17:48:43 -==> Parameters: 469_20200316174454(String)
2020-03-16 17:48:43 -<==      Total: 1
2020-03-16 17:48:43 -耗时 : 2501
2020-03-16 17:48:43 -此处进行解密+验签+身份验证
2020-03-16 17:48:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-16 17:48:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-16 17:48:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-16 17:48:43 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-16 17:48:43 -==> Parameters: 469(String), M351846116651(String)
2020-03-16 17:48:43 -<==      Total: 1
2020-03-16 17:48:43 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-16 17:48:43 -==> Parameters: 
2020-03-16 17:48:43 -<==      Total: 94
2020-03-16 17:48:43 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-16 17:48:43 -==> Parameters: M351846116651(String)
2020-03-16 17:48:43 -<==      Total: 0
2020-03-16 17:48:43 -耗时 : 84
2020-03-16 18:08:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 18:08:49 -Shutting down ExecutorService 'taskScheduler'
2020-03-16 18:08:49 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-16 18:08:49 -Shutting down Quartz Scheduler
2020-03-16 18:08:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-16 18:08:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-16 18:08:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-16 18:08:49 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-16 18:08:49 -HikariPool-1 - Shutdown initiated...
2020-03-16 18:08:49 -HikariPool-1 - Shutdown completed.
