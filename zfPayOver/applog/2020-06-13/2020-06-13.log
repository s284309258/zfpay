2020-06-13 09:53:16 -Starting LongEcologicalApplication on PC-201905161910 with PID 9160 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-06-13 09:53:16 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-06-13 09:53:16 -No active profile set, falling back to default profiles: default
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'userMapper' and 'com.example.longecological.mapper.user.UserMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'userRoleMapper' and 'com.example.longecological.mapper.user.UserRoleMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-06-13 09:53:17 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-13 09:53:17 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-13 09:53:17 -Finished Spring Data repository scanning in 37ms. Found 0 repository interfaces.
2020-06-13 09:53:17 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-06-13 09:53:17 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-06-13 09:53:17 -Finished Spring Data repository scanning in 17ms. Found 0 repository interfaces.
2020-06-13 09:53:18 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$9127a713] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 09:53:18 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8bab8bb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-06-13 09:53:18 -Tomcat initialized with port(s): 8080 (http)
2020-06-13 09:53:18 -Initializing ProtocolHandler ["http-nio-8080"]
2020-06-13 09:53:18 -Starting service [Tomcat]
2020-06-13 09:53:18 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-06-13 09:53:18 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;D:\360Downloads\apache-maven-3.6.1\apache-maven-3.6.1\bin;"C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;";;C:\Program Files\python;C:\Program Files\python\Scripts;;D:\BtSoft\panel\script;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-06-13 09:53:18 -Initializing Spring embedded WebApplicationContext
2020-06-13 09:53:18 -Root WebApplicationContext: initialization completed in 1789 ms
2020-06-13 09:53:18 -Filter xssFilter was not registered (disabled)
2020-06-13 09:53:19 -HikariPool-1 - Starting...
2020-06-13 09:53:19 -HikariPool-1 - Start completed.
2020-06-13 09:53:19 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-06-13 09:53:19 -HHH000412: Hibernate Core {5.3.7.Final}
2020-06-13 09:53:19 -HHH000206: hibernate.properties not found
2020-06-13 09:53:19 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-06-13 09:53:19 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-06-13 09:53:19 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-06-13 09:53:20 -Using default implementation for ThreadExecutor
2020-06-13 09:53:20 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-06-13 09:53:20 -Quartz Scheduler v.2.3.0 created.
2020-06-13 09:53:20 -RAMJobStore initialized.
2020-06-13 09:53:20 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-06-13 09:53:20 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-06-13 09:53:20 -Quartz scheduler version: 2.3.0
2020-06-13 09:53:20 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@19eea77c
2020-06-13 09:53:20 -STAET TaskExecutorConfig
2020-06-13 09:53:20 -Initializing ExecutorService
2020-06-13 09:53:20 -Initializing ExecutorService 'getAsyncExecutor'
2020-06-13 09:53:21 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-06-13 09:53:21 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-06-13 09:53:21 -Initializing ExecutorService 'taskScheduler'
2020-06-13 09:53:21 -Starting Quartz Scheduler now
2020-06-13 09:53:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-06-13 09:53:21 -Starting ProtocolHandler ["http-nio-8080"]
2020-06-13 09:53:21 -Using a shared selector for servlet write/read
2020-06-13 09:53:21 -Tomcat started on port(s): 8080 (http) with context path ''
2020-06-13 09:53:21 -Started LongEcologicalApplication in 5.807 seconds (JVM running for 6.684)
2020-06-13 09:59:10 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-06-13 09:59:10 -Initializing Servlet 'dispatcherServlet'
2020-06-13 09:59:10 -Completed initialization in 16 ms
2020-06-13 09:59:11 -此处进行解密+验签+身份验证
2020-06-13 09:59:11 -此处进行解密+验签+身份验证
2020-06-13 09:59:11 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-06-13 09:59:11 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-06-13 09:59:11 -Starting without optional epoll library
2020-06-13 09:59:11 -Starting without optional kqueue library
2020-06-13 09:59:11 -解密：
2020-06-13 09:59:11 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-13 09:59:11 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-13 09:59:11 -==> Parameters: 04(String), 04(String)
2020-06-13 09:59:11 -<==      Total: 1
2020-06-13 09:59:11 -耗时 : 40
2020-06-13 09:59:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-06-13 09:59:12 -耗时 : 716
2020-06-13 09:59:12 -此处进行解密+验签+身份验证
2020-06-13 09:59:12 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"7EF78844159CDED37ADDD9D77098A410","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|UFSOKKJQ0MVL79LAUCTC8O1660RNTCAG"}
2020-06-13 09:59:12 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-06-13 09:59:12 -token值=======181|UFSOKKJQ0MVL79LAUCTC8O1660RNTCAG
2020-06-13 09:59:12 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-06-13 09:59:12 -==> Parameters: 181(String)
2020-06-13 09:59:12 -<==      Total: 1
2020-06-13 09:59:12 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-06-13 09:59:12 -==> Parameters: 26(String)
2020-06-13 09:59:12 -<==      Total: 1
2020-06-13 09:59:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-13 09:59:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-13 09:59:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-13 09:59:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-13 09:59:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-06-13 09:59:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-06-13 09:59:12 -耗时 : 37
2020-06-13 09:59:15 -此处进行解密+验签+身份验证
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-13 09:59:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-13 09:59:15 -==> Parameters: 181(String)
2020-06-13 09:59:15 -<==      Total: 1
2020-06-13 09:59:15 -耗时 : 6
2020-06-13 09:59:15 -此处进行解密+验签+身份验证
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:15 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-06-13 09:59:15 -此处进行解密+验签+身份验证
2020-06-13 09:59:15 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-06-13 09:59:15 -解密：
2020-06-13 09:59:15 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-06-13 09:59:15 -==> Parameters: 
2020-06-13 09:59:15 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-06-13 09:59:15 -==> Parameters: 01(String), 01(String)
2020-06-13 09:59:15 -此处进行解密+验签+身份验证
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-06-13 09:59:15 -<==      Total: 3
2020-06-13 09:59:15 -<==      Total: 4
2020-06-13 09:59:15 -耗时 : 14
2020-06-13 09:59:15 -耗时 : 11
2020-06-13 09:59:15 -此处进行解密+验签+身份验证
2020-06-13 09:59:15 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:15 -==> Parameters: 181(String)
2020-06-13 09:59:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-13 09:59:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-13 09:59:16 -<==      Total: 2
2020-06-13 09:59:16 -耗时 : 11
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -此处进行解密+验签+身份验证
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-13 09:59:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-13 09:59:16 -==> Parameters: 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -耗时 : 4
2020-06-13 09:59:16 -此处进行解密+验签+身份验证
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-13 09:59:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 2
2020-06-13 09:59:16 -<==      Total: 2
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-13 09:59:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-13 09:59:16 -<==    Updates: 2
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -<==    Updates: 2
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==> Parameters: recallFlag(String), 181(String)
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: recallFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-13 09:59:16 -==> Parameters: 
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: collegeFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-13 09:59:16 -==> Parameters: 
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: collegeFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: cardFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: cardFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: appImgFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 13
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: cashFlag(String), 181(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: appImgFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 0
2020-06-13 09:59:16 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-13 09:59:16 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -耗时 : 164
2020-06-13 09:59:16 -<==      Total: 13
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: cashFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 0
2020-06-13 09:59:16 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-13 09:59:16 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-13 09:59:16 -<==    Updates: 1
2020-06-13 09:59:16 -耗时 : 144
2020-06-13 09:59:16 -此处进行解密+验签+身份验证
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:16 -此处进行解密+验签+身份验证
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 09:59:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-13 09:59:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-06-13 09:59:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-06-13 09:59:16 -==> Parameters: 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -耗时 : 2
2020-06-13 09:59:16 -<==      Total: 2
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-06-13 09:59:16 -<==    Updates: 2
2020-06-13 09:59:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-06-13 09:59:16 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:16 -==> Parameters: recallFlag(String), 181(String)
2020-06-13 09:59:16 -<==      Total: 1
2020-06-13 09:59:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-06-13 09:59:17 -<==    Updates: 1
2020-06-13 09:59:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-06-13 09:59:17 -==> Parameters: 
2020-06-13 09:59:17 -<==      Total: 1
2020-06-13 09:59:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:17 -==> Parameters: collegeFlag(String), 181(String)
2020-06-13 09:59:17 -<==      Total: 1
2020-06-13 09:59:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:17 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-06-13 09:59:17 -<==    Updates: 1
2020-06-13 09:59:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-06-13 09:59:17 -==> Parameters: 181(String), 181(String)
2020-06-13 09:59:17 -<==      Total: 1
2020-06-13 09:59:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:17 -==> Parameters: cardFlag(String), 181(String)
2020-06-13 09:59:17 -<==      Total: 1
2020-06-13 09:59:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-06-13 09:59:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-06-13 09:59:17 -<==    Updates: 1
2020-06-13 09:59:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:17 -==> Parameters: appImgFlag(String), 181(String)
2020-06-13 09:59:17 -<==      Total: 15
2020-06-13 09:59:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-06-13 09:59:17 -==> Parameters: cashFlag(String), 181(String)
2020-06-13 09:59:17 -<==      Total: 0
2020-06-13 09:59:17 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-06-13 09:59:17 -==> Parameters: 181(String), appImgFlag(String), 0(Integer), 0(Integer), 26(String)
2020-06-13 09:59:17 -<==    Updates: 1
2020-06-13 09:59:17 -耗时 : 116
2020-06-13 10:04:14 -此处进行解密+验签+身份验证
2020-06-13 10:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 10:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 10:04:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-06-13 10:04:14 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-06-13 10:04:14 -==> Parameters: 181(String)
2020-06-13 10:04:14 -<==      Total: 1
2020-06-13 10:04:14 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-06-13 10:04:14 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-13 10:04:14 -此处进行解密+验签+身份验证
2020-06-13 10:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 10:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 10:04:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-06-13 10:04:14 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-06-13 10:04:14 -==> Parameters: 181(String)
2020-06-13 10:04:14 -<==      Total: 1
2020-06-13 10:04:14 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-13 10:04:14 -==> Parameters: 181(String), 181(String), 20200514(String), 20200613(String), 181(String)
2020-06-13 10:04:15 -<==      Total: 1
2020-06-13 10:04:15 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-06-13 10:04:15 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-13 10:04:15 -<==      Total: 1
2020-06-13 10:04:15 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-13 10:04:15 -==> Parameters: 181(String), 181(String), 20200514(String), 20200613(String), 181(String)
2020-06-13 10:04:16 -<==      Total: 1
2020-06-13 10:04:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-13 10:04:16 -==> Parameters: 181(String), 20200414(String), 181(String), 20200414(String), 20200613(String), 181(String)
2020-06-13 10:04:17 -<==      Total: 1
2020-06-13 10:04:17 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-06-13 10:04:17 -==> Parameters: 181(String)
2020-06-13 10:04:17 -<==      Total: 1
2020-06-13 10:04:17 -耗时 : 2804
2020-06-13 10:04:17 -<==      Total: 1
2020-06-13 10:04:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-13 10:04:17 -==> Parameters: 181(String), 20200414(String), 181(String), 20200414(String), 20200613(String), 181(String)
2020-06-13 10:04:18 -<==      Total: 1
2020-06-13 10:04:18 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-06-13 10:04:18 -==> Parameters: 181(String)
2020-06-13 10:04:18 -<==      Total: 1
2020-06-13 10:04:18 -耗时 : 3690
2020-06-13 10:04:23 -此处进行解密+验签+身份验证
2020-06-13 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 10:04:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-13 10:04:23 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-13 10:04:23 -==> Parameters: 181(String)
2020-06-13 10:04:23 -<==      Total: 10
2020-06-13 10:04:23 -耗时 : 22
2020-06-13 11:45:57 -此处进行解密+验签+身份验证
2020-06-13 11:45:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 11:45:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 11:45:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-06-13 11:45:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-06-13 11:45:57 -==> Parameters: 181(String)
2020-06-13 11:45:57 -<==      Total: 1
2020-06-13 11:45:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-06-13 11:45:57 -==> Parameters: 181(String), 181(String), 202006(String)
2020-06-13 11:45:57 -<==      Total: 1
2020-06-13 11:45:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-06-13 11:45:57 -==> Parameters: 181(String), 181(String), 20200514(String), 20200613(String), 181(String)
2020-06-13 11:45:57 -<==      Total: 1
2020-06-13 11:45:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-06-13 11:45:57 -==> Parameters: 181(String), 20200414(String), 181(String), 20200414(String), 20200613(String), 181(String)
2020-06-13 11:45:58 -<==      Total: 1
2020-06-13 11:45:58 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-06-13 11:45:58 -==> Parameters: 181(String)
2020-06-13 11:45:58 -<==      Total: 1
2020-06-13 11:45:58 -耗时 : 1084
2020-06-13 11:46:10 -此处进行解密+验签+身份验证
2020-06-13 11:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 11:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 11:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-06-13 11:46:10 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-06-13 11:46:10 -==> Parameters: 181(String)
2020-06-13 11:46:10 -<==      Total: 10
2020-06-13 11:46:10 -耗时 : 33
2020-06-13 11:46:40 -此处进行解密+验签+身份验证
2020-06-13 11:46:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 11:46:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 11:46:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-06-13 11:46:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-13 11:46:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-13 11:46:40 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-06-13 11:46:40 -==> Parameters: 181(String), 02(String)
2020-06-13 11:46:40 -<==      Total: 1
2020-06-13 11:46:40 -==>  Preparing: select * from t_sys_pos_policy_define where policy_type=3 and manager_id=? and id in(select policy_id from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1) order by policy_quantity asc 
2020-06-13 11:46:40 -==> Parameters: 26(String), M351846173368(String)
2020-06-13 11:46:41 -<==      Total: 1
2020-06-13 11:46:41 -耗时 : 74
2020-06-13 11:49:18 -此处进行解密+验签+身份验证
2020-06-13 11:49:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-06-13 11:49:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-06-13 11:49:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-06-13 11:49:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-06-13 11:49:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-06-13 11:49:18 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-06-13 11:49:18 -==> Parameters: 181(String), 02(String)
2020-06-13 11:49:18 -<==      Total: 1
2020-06-13 11:49:18 -==>  Preparing: select * from t_sys_pos_policy_define where policy_type=3 and manager_id=? and id in(select policy_id from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1) order by policy_quantity asc 
2020-06-13 11:49:18 -==> Parameters: 26(String), M351846173368(String)
2020-06-13 11:49:18 -<==      Total: 1
2020-06-13 11:49:18 -耗时 : 9
