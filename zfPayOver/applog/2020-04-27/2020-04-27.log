2020-04-27 15:19:25 -Starting LongEcologicalApplication on PC-201905161910 with PID 29580 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-27 15:19:25 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-27 15:19:25 -No active profile set, falling back to default profiles: default
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:26 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-27 15:19:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-27 15:19:27 -Finished Spring Data repository scanning in 45ms. Found 0 repository interfaces.
2020-04-27 15:19:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-27 15:19:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-27 15:19:27 -Finished Spring Data repository scanning in 18ms. Found 0 repository interfaces.
2020-04-27 15:19:27 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$566c7730] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-27 15:19:27 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$50f05bd0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-27 15:19:28 -Tomcat initialized with port(s): 8080 (http)
2020-04-27 15:19:28 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-27 15:19:28 -Starting service [Tomcat]
2020-04-27 15:19:28 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-27 15:19:28 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-27 15:19:28 -Initializing Spring embedded WebApplicationContext
2020-04-27 15:19:28 -Root WebApplicationContext: initialization completed in 2390 ms
2020-04-27 15:19:28 -Filter xssFilter was not registered (disabled)
2020-04-27 15:19:28 -HikariPool-1 - Starting...
2020-04-27 15:19:29 -HikariPool-1 - Exception during pool initialization.
java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1078)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4190)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4122)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:927)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1709)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1252)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2486)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f$$FastClassBySpringCGLIB$$27a8c2ba.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
2020-04-27 15:19:29 -Unable to determine jdbc url from datasource
org.springframework.jdbc.support.MetaDataAccessException: Could not get Connection for extracting meta-data; nested exception is org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:328)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f$$FastClassBySpringCGLIB$$27a8c2ba.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	... 62 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1078)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4190)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4122)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:927)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1709)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1252)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2486)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	... 63 common frames omitted
2020-04-27 15:19:29 -HikariPool-1 - Starting...
2020-04-27 15:19:30 -HikariPool-1 - Exception during pool initialization.
java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1078)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4190)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4122)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:927)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1709)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1252)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2486)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:324)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:123)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:130)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:99)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:91)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:138)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f.CGLIB$entityManagerFactory$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f$$FastClassBySpringCGLIB$$27a8c2ba.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$6fc71e3f.entityManagerFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
2020-04-27 15:19:31 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-27 15:19:31 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-27 15:19:31 -HHH000206: hibernate.properties not found
2020-04-27 15:19:31 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-27 15:19:31 -HikariPool-1 - Starting...
2020-04-27 15:19:32 -HikariPool-1 - Exception during pool initialization.
java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1078)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4190)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4122)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:927)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1709)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1252)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2486)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
2020-04-27 15:19:32 -HHH000342: Could not obtain connection to query metadata : Access denied for user 'root'@'localhost' (using password: YES)
2020-04-27 15:19:32 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2020-04-27 15:19:32 -Stopping service [Tomcat]
2020-04-27 15:19:32 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-04-27 15:19:32 -Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1745)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:275)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:100)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:54)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:137)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 33 common frames omitted
2020-04-27 15:19:51 -Starting LongEcologicalApplication on PC-201905161910 with PID 19856 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-27 15:19:51 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-27 15:19:51 -No active profile set, falling back to default profiles: default
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-27 15:19:52 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-27 15:19:52 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-27 15:19:52 -Finished Spring Data repository scanning in 42ms. Found 0 repository interfaces.
2020-04-27 15:19:52 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-27 15:19:52 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-27 15:19:52 -Finished Spring Data repository scanning in 21ms. Found 0 repository interfaces.
2020-04-27 15:19:53 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8b727de2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-27 15:19:53 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$85f66282] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-27 15:19:53 -Tomcat initialized with port(s): 8080 (http)
2020-04-27 15:19:53 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-27 15:19:53 -Starting service [Tomcat]
2020-04-27 15:19:53 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-27 15:19:53 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-27 15:19:53 -Initializing Spring embedded WebApplicationContext
2020-04-27 15:19:53 -Root WebApplicationContext: initialization completed in 1839 ms
2020-04-27 15:19:53 -Filter xssFilter was not registered (disabled)
2020-04-27 15:19:54 -HikariPool-1 - Starting...
2020-04-27 15:19:54 -HikariPool-1 - Start completed.
2020-04-27 15:19:54 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-27 15:19:54 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-27 15:19:54 -HHH000206: hibernate.properties not found
2020-04-27 15:19:54 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-27 15:19:54 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-27 15:19:54 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-27 15:19:55 -Using default implementation for ThreadExecutor
2020-04-27 15:19:55 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-27 15:19:55 -Quartz Scheduler v.2.3.0 created.
2020-04-27 15:19:55 -RAMJobStore initialized.
2020-04-27 15:19:55 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-27 15:19:55 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-27 15:19:55 -Quartz scheduler version: 2.3.0
2020-04-27 15:19:55 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@733f1395
2020-04-27 15:19:55 -STAET TaskExecutorConfig
2020-04-27 15:19:55 -Initializing ExecutorService
2020-04-27 15:19:55 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-27 15:19:56 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-27 15:19:56 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-27 15:19:56 -Initializing ExecutorService 'taskScheduler'
2020-04-27 15:19:56 -Starting Quartz Scheduler now
2020-04-27 15:19:56 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-27 15:19:56 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-27 15:19:56 -Using a shared selector for servlet write/read
2020-04-27 15:19:56 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-27 15:19:56 -Started LongEcologicalApplication in 5.471 seconds (JVM running for 6.331)
2020-04-27 15:22:45 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-27 15:22:45 -Initializing Servlet 'dispatcherServlet'
2020-04-27 15:22:45 -Completed initialization in 13 ms
2020-04-27 15:22:46 -此处进行解密+验签+身份验证
2020-04-27 15:22:46 -此处进行解密+验签+身份验证
2020-04-27 15:22:46 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-27 15:22:46 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-27 15:22:46 -Starting without optional epoll library
2020-04-27 15:22:46 -Starting without optional kqueue library
2020-04-27 15:22:46 -解密：
2020-04-27 15:22:46 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 15:22:46 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 15:22:46 -==> Parameters: 04(String), 04(String)
2020-04-27 15:22:46 -<==      Total: 1
2020-04-27 15:22:46 -耗时 : 45
2020-04-27 15:22:46 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-27 15:22:46 -耗时 : 610
2020-04-27 15:22:46 -此处进行解密+验签+身份验证
2020-04-27 15:22:46 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"F6B07B7621E05EE0FE50331DCD4573AF","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|W57H96B66NT7EC6ZCYEPUDD09SO4JBNO"}
2020-04-27 15:22:46 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-27 15:22:46 -token值=======181|W57H96B66NT7EC6ZCYEPUDD09SO4JBNO
2020-04-27 15:22:46 -耗时 : 5
2020-04-27 15:23:39 -此处进行解密+验签+身份验证
2020-04-27 15:23:39 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"1CD57555E0DD5A6F58230E2777AD0726","device_no":"1.1.7","device_type":"android","sys_user_account":"13322990711"}
2020-04-27 15:23:39 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-27 15:23:39 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-27 15:23:39 -==> Parameters: 13322990711(String)
2020-04-27 15:23:39 -<==      Total: 1
2020-04-27 15:23:39 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-27 15:23:39 -==> Parameters: android(String), 1.1.7(String), (String), null, 192.168.191.1(String), 20200427(String), 152339(String), 181(Integer)
2020-04-27 15:23:39 -<==    Updates: 1
2020-04-27 15:23:39 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-27 15:23:39 -==> Parameters: 26(String)
2020-04-27 15:23:39 -<==      Total: 1
2020-04-27 15:23:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 15:23:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 15:23:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 15:23:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 15:23:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 15:23:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 15:23:39 -耗时 : 86
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:23:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:23:40 -==> Parameters: 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -耗时 : 6
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -解密：
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 15:23:40 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 15:23:40 -==> Parameters: 01(String), 01(String)
2020-04-27 15:23:40 -<==      Total: 4
2020-04-27 15:23:40 -耗时 : 2
2020-04-27 15:23:40 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-27 15:23:40 -==> Parameters: 181(String)
2020-04-27 15:23:40 -<==      Total: 2
2020-04-27 15:23:40 -耗时 : 23
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-27 15:23:40 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-27 15:23:40 -==> Parameters: 
2020-04-27 15:23:40 -<==      Total: 3
2020-04-27 15:23:40 -耗时 : 7
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:23:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:23:40 -==> Parameters: 181(String), 181(String)
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:23:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:23:40 -==> Parameters: 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -耗时 : 4
2020-04-27 15:23:40 -<==      Total: 2
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:23:40 -<==    Updates: 2
2020-04-27 15:23:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:23:40 -==> Parameters: 181(String), 181(String)
2020-04-27 15:23:40 -此处进行解密+验签+身份验证
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:23:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:23:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:23:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:23:40 -==> Parameters: 181(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:23:40 -<==    Updates: 1
2020-04-27 15:23:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:23:40 -==> Parameters: 
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 2
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:23:40 -<==    Updates: 2
2020-04-27 15:23:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:23:40 -==> Parameters: 181(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:23:40 -<==    Updates: 1
2020-04-27 15:23:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:23:40 -==> Parameters: 181(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:23:40 -<==    Updates: 1
2020-04-27 15:23:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:23:40 -==> Parameters: 
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:23:40 -<==    Updates: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -耗时 : 139
2020-04-27 15:23:40 -<==    Updates: 1
2020-04-27 15:23:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:23:40 -==> Parameters: 181(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:23:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:23:40 -<==    Updates: 1
2020-04-27 15:23:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:23:40 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:23:40 -<==      Total: 1
2020-04-27 15:23:40 -耗时 : 71
2020-04-27 15:23:44 -此处进行解密+验签+身份验证
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-27 15:23:44 -此处进行解密+验签+身份验证
2020-04-27 15:23:44 -此处进行解密+验签+身份验证
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:44 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-27 15:23:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 15:23:44 -==> Parameters: 181(String)
2020-04-27 15:23:44 -<==      Total: 1
2020-04-27 15:23:44 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 15:23:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 15:23:44 -耗时 : 6
2020-04-27 15:23:44 -==> Parameters: 181(String), 202004(String)
2020-04-27 15:23:44 -<==      Total: 1
2020-04-27 15:23:44 -耗时 : 6
2020-04-27 15:23:44 -此处进行解密+验签+身份验证
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 15:23:44 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 15:23:44 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 15:23:44 -==> Parameters: 181(String), 202004(String)
2020-04-27 15:23:44 -==> Parameters: 181(String), 202004(String)
2020-04-27 15:23:44 -<==      Total: 1
2020-04-27 15:23:44 -耗时 : 27
2020-04-27 15:23:44 -<==      Total: 1
2020-04-27 15:23:44 -耗时 : 13
2020-04-27 15:23:50 -此处进行解密+验签+身份验证
2020-04-27 15:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:23:50 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardMposList
2020-04-27 15:23:50 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_mpos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 15:23:50 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 15:23:50 -<==      Total: 0
2020-04-27 15:23:50 -耗时 : 22
2020-04-27 15:24:43 -此处进行解密+验签+身份验证
2020-04-27 15:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:24:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:24:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:24:43 -==> Parameters: 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -耗时 : 2
2020-04-27 15:24:43 -此处进行解密+验签+身份验证
2020-04-27 15:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:24:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:24:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:24:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:24:43 -==> Parameters: 181(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:24:43 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 2
2020-04-27 15:24:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:24:43 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:24:43 -<==    Updates: 2
2020-04-27 15:24:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:24:43 -==> Parameters: 181(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:24:43 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:24:43 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:24:43 -<==    Updates: 1
2020-04-27 15:24:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:24:43 -==> Parameters: 
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:24:43 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:24:43 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:24:43 -<==    Updates: 1
2020-04-27 15:24:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:24:43 -==> Parameters: 181(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:24:43 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:24:43 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:24:43 -<==    Updates: 1
2020-04-27 15:24:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:24:43 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:24:43 -<==      Total: 1
2020-04-27 15:24:43 -耗时 : 66
2020-04-27 15:24:57 -此处进行解密+验签+身份验证
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:24:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-27 15:24:57 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-27 15:24:57 -==> Parameters: 181(String)
2020-04-27 15:24:57 -<==      Total: 1
2020-04-27 15:24:57 -耗时 : 3
2020-04-27 15:24:57 -此处进行解密+验签+身份验证
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:24:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 15:24:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 15:24:57 -==> Parameters: 181(String), 202004(String)
2020-04-27 15:24:57 -<==      Total: 1
2020-04-27 15:24:57 -耗时 : 3
2020-04-27 15:24:57 -此处进行解密+验签+身份验证
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:24:57 -此处进行解密+验签+身份验证
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:24:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 15:24:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 15:24:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 15:24:57 -==> Parameters: 181(String), 202004(String)
2020-04-27 15:24:57 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 15:24:57 -==> Parameters: 181(String), 202004(String)
2020-04-27 15:24:57 -<==      Total: 1
2020-04-27 15:24:57 -<==      Total: 1
2020-04-27 15:24:57 -耗时 : 2
2020-04-27 15:24:57 -耗时 : 2
2020-04-27 15:25:05 -此处进行解密+验签+身份验证
2020-04-27 15:25:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:25:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:25:05 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 15:25:05 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 15:25:05 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-27 15:25:05 -<==      Total: 1
2020-04-27 15:25:05 -耗时 : 25
2020-04-27 15:25:39 -此处进行解密+验签+身份验证
2020-04-27 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:25:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:25:39 -==> Parameters: 181(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:25:39 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:25:39 -此处进行解密+验签+身份验证
2020-04-27 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:25:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:25:39 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:25:39 -==> Parameters: 181(String)
2020-04-27 15:25:39 -<==      Total: 2
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:25:39 -耗时 : 1
2020-04-27 15:25:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:25:39 -<==    Updates: 2
2020-04-27 15:25:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:25:39 -==> Parameters: 181(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:25:39 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:25:39 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:25:39 -<==    Updates: 1
2020-04-27 15:25:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:25:39 -==> Parameters: 
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:25:39 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:25:39 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:25:39 -<==    Updates: 1
2020-04-27 15:25:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:25:39 -==> Parameters: 181(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:25:39 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:25:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:25:39 -<==    Updates: 1
2020-04-27 15:25:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:25:39 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:25:39 -<==      Total: 1
2020-04-27 15:25:39 -耗时 : 65
2020-04-27 15:25:44 -此处进行解密+验签+身份验证
2020-04-27 15:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:25:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 15:25:44 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 15:25:44 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 15:25:44 -<==      Total: 0
2020-04-27 15:25:44 -耗时 : 15
2020-04-27 15:26:43 -此处进行解密+验签+身份验证
2020-04-27 15:26:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:26:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:26:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:26:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:26:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:26:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:26:43 -==> Parameters: 181(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:26:43 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 2
2020-04-27 15:26:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:26:43 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:26:43 -此处进行解密+验签+身份验证
2020-04-27 15:26:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:26:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:26:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:26:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:26:43 -==> Parameters: 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -耗时 : 1
2020-04-27 15:26:43 -<==    Updates: 2
2020-04-27 15:26:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:26:43 -==> Parameters: 181(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:26:43 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:26:43 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:26:43 -<==    Updates: 1
2020-04-27 15:26:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:26:43 -==> Parameters: 
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:26:43 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:26:43 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:26:43 -<==    Updates: 1
2020-04-27 15:26:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:26:43 -==> Parameters: 181(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:26:43 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:26:43 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:26:43 -<==    Updates: 1
2020-04-27 15:26:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:26:43 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:26:43 -<==      Total: 1
2020-04-27 15:26:43 -耗时 : 65
2020-04-27 15:26:54 -此处进行解密+验签+身份验证
2020-04-27 15:26:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:26:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:26:54 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardMposList
2020-04-27 15:26:54 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_mpos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 15:26:54 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 15:26:54 -<==      Total: 0
2020-04-27 15:26:54 -耗时 : 2
2020-04-27 15:27:20 -此处进行解密+验签+身份验证
2020-04-27 15:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:27:20 -此处进行解密+验签+身份验证
2020-04-27 15:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:27:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:27:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:27:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:27:20 -==> Parameters: 181(String)
2020-04-27 15:27:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:27:20 -==> Parameters: 181(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -耗时 : 1
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:27:20 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 2
2020-04-27 15:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:27:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:27:20 -<==    Updates: 2
2020-04-27 15:27:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:27:20 -==> Parameters: 181(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:27:20 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:27:20 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:27:20 -<==    Updates: 1
2020-04-27 15:27:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:27:20 -==> Parameters: 
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:27:20 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:27:20 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:27:20 -<==    Updates: 1
2020-04-27 15:27:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:27:20 -==> Parameters: 181(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:27:20 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:27:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:27:20 -<==    Updates: 1
2020-04-27 15:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:27:20 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:27:20 -<==      Total: 1
2020-04-27 15:27:20 -耗时 : 64
2020-04-27 15:27:30 -此处进行解密+验签+身份验证
2020-04-27 15:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:27:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:27:30 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 15:27:30 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 15:27:30 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 15:27:30 -<==      Total: 0
2020-04-27 15:27:30 -耗时 : 14
2020-04-27 15:43:17 -此处进行解密+验签+身份验证
2020-04-27 15:43:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:43:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:43:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:43:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:43:17 -==> Parameters: 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -耗时 : 2
2020-04-27 15:43:17 -此处进行解密+验签+身份验证
2020-04-27 15:43:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:43:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:43:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:43:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:43:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:43:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:43:17 -==> Parameters: 181(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:43:17 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 2
2020-04-27 15:43:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:43:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:43:17 -<==    Updates: 2
2020-04-27 15:43:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:43:17 -==> Parameters: 181(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:43:17 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:43:17 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:43:17 -<==    Updates: 1
2020-04-27 15:43:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:43:17 -==> Parameters: 
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:43:17 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:43:17 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:43:17 -<==    Updates: 1
2020-04-27 15:43:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:43:17 -==> Parameters: 181(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:43:17 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:43:17 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:43:17 -<==    Updates: 1
2020-04-27 15:43:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:43:17 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:43:17 -<==      Total: 1
2020-04-27 15:43:17 -耗时 : 82
2020-04-27 15:44:56 -此处进行解密+验签+身份验证
2020-04-27 15:44:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:44:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:44:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 15:44:56 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 15:44:56 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-27 15:44:56 -<==      Total: 1
2020-04-27 15:44:56 -耗时 : 6
2020-04-27 15:45:01 -此处进行解密+验签+身份验证
2020-04-27 15:45:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:45:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:45:01 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:45:01 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:45:01 -==> Parameters: 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -耗时 : 2
2020-04-27 15:45:01 -此处进行解密+验签+身份验证
2020-04-27 15:45:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:45:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:45:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:45:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:45:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:45:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:45:01 -==> Parameters: 181(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:01 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 2
2020-04-27 15:45:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:01 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:45:01 -<==    Updates: 2
2020-04-27 15:45:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:45:01 -==> Parameters: 181(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:01 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:01 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:45:01 -<==    Updates: 1
2020-04-27 15:45:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:45:01 -==> Parameters: 
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:01 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:01 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:45:01 -<==    Updates: 1
2020-04-27 15:45:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:45:01 -==> Parameters: 181(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:01 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:01 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:45:01 -<==    Updates: 1
2020-04-27 15:45:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:01 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:45:01 -<==      Total: 1
2020-04-27 15:45:01 -耗时 : 63
2020-04-27 15:45:11 -此处进行解密+验签+身份验证
2020-04-27 15:45:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:45:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:45:11 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 15:45:11 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 15:45:11 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-27 15:45:11 -<==      Total: 1
2020-04-27 15:45:11 -耗时 : 5
2020-04-27 15:45:18 -此处进行解密+验签+身份验证
2020-04-27 15:45:18 -此处进行解密+验签+身份验证
2020-04-27 15:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:45:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 15:45:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 15:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 15:45:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 15:45:18 -==> Parameters: 181(String)
2020-04-27 15:45:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -耗时 : 1
2020-04-27 15:45:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:45:18 -==> Parameters: 181(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:18 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 2
2020-04-27 15:45:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:18 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 15:45:18 -<==    Updates: 2
2020-04-27 15:45:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 15:45:18 -==> Parameters: 181(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:18 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:18 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 15:45:18 -<==    Updates: 1
2020-04-27 15:45:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 15:45:18 -==> Parameters: 
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:18 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:18 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 15:45:18 -<==    Updates: 1
2020-04-27 15:45:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 15:45:18 -==> Parameters: 181(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:18 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 15:45:18 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 15:45:18 -<==    Updates: 1
2020-04-27 15:45:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 15:45:18 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 15:45:18 -<==      Total: 1
2020-04-27 15:45:18 -耗时 : 63
2020-04-27 15:45:25 -此处进行解密+验签+身份验证
2020-04-27 15:45:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:45:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:45:25 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 15:45:25 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 15:45:25 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-27 15:45:25 -<==      Total: 1
2020-04-27 15:45:25 -耗时 : 5
2020-04-27 15:48:24 -此处进行解密+验签+身份验证
2020-04-27 15:48:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 15:48:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 15:48:24 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 15:48:24 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 15:48:24 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-27 15:48:24 -<==      Total: 1
2020-04-27 15:48:24 -耗时 : 5
2020-04-27 16:00:13 -此处进行解密+验签+身份验证
2020-04-27 16:00:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:00:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:00:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:00:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:00:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:00:13 -此处进行解密+验签+身份验证
2020-04-27 16:00:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:00:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:00:13 -==> Parameters: 181(String), 181(String)
2020-04-27 16:00:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:00:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:00:13 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==> Parameters: 181(String)
2020-04-27 16:00:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:13 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 2
2020-04-27 16:00:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:13 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -耗时 : 16
2020-04-27 16:00:13 -<==    Updates: 2
2020-04-27 16:00:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:00:13 -==> Parameters: 181(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:13 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:13 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:00:13 -<==    Updates: 1
2020-04-27 16:00:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:00:13 -==> Parameters: 
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:13 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:13 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:00:13 -<==    Updates: 1
2020-04-27 16:00:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:00:13 -==> Parameters: 181(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:13 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:13 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:00:13 -<==    Updates: 1
2020-04-27 16:00:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:13 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:00:13 -<==      Total: 1
2020-04-27 16:00:13 -耗时 : 68
2020-04-27 16:00:30 -此处进行解密+验签+身份验证
2020-04-27 16:00:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:00:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:00:30 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getDeductTraditionalPosList
2020-04-27 16:00:30 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.assess_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_deduct_record t INNER JOIN t_user_trapos_assess_info t1 on t.assess_id = t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date,t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_deduct_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id where t.user_id=? and t.pos_type is null and t.cre_date between ? and ? ) tt,(SELECT @rownum:=0) r order by tt.order_id desc ) t limit 0,10 
2020-04-27 16:00:30 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:00:30 -<==      Total: 0
2020-04-27 16:00:30 -耗时 : 17
2020-04-27 16:00:32 -此处进行解密+验签+身份验证
2020-04-27 16:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:00:32 -此处进行解密+验签+身份验证
2020-04-27 16:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:00:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:00:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:00:32 -==> Parameters: 181(String)
2020-04-27 16:00:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:00:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:00:32 -==> Parameters: 181(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -耗时 : 28
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:32 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 2
2020-04-27 16:00:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:32 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:00:32 -<==    Updates: 2
2020-04-27 16:00:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:00:32 -==> Parameters: 181(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:32 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:32 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:00:32 -<==    Updates: 1
2020-04-27 16:00:32 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:00:32 -==> Parameters: 
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:32 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:32 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:00:32 -<==    Updates: 1
2020-04-27 16:00:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:00:32 -==> Parameters: 181(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:32 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:00:32 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:00:32 -<==    Updates: 1
2020-04-27 16:00:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:00:32 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:00:32 -<==      Total: 1
2020-04-27 16:00:32 -耗时 : 91
2020-04-27 16:00:42 -此处进行解密+验签+身份验证
2020-04-27 16:00:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:00:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:00:42 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 16:00:42 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:00:42 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:00:42 -<==      Total: 0
2020-04-27 16:00:42 -耗时 : 10
2020-04-27 16:03:09 -此处进行解密+验签+身份验证
2020-04-27 16:03:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:03:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:03:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:03:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:03:09 -==> Parameters: 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -耗时 : 2
2020-04-27 16:03:09 -此处进行解密+验签+身份验证
2020-04-27 16:03:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:03:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:03:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:03:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:03:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:03:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:03:09 -==> Parameters: 181(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:03:09 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 2
2020-04-27 16:03:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:03:09 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:03:09 -<==    Updates: 2
2020-04-27 16:03:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:03:09 -==> Parameters: 181(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:03:09 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:03:09 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:03:09 -<==    Updates: 1
2020-04-27 16:03:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:03:09 -==> Parameters: 
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:03:09 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:03:09 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:03:09 -<==    Updates: 1
2020-04-27 16:03:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:03:09 -==> Parameters: 181(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:03:09 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:03:09 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:03:09 -<==    Updates: 1
2020-04-27 16:03:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:03:09 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:03:09 -<==      Total: 1
2020-04-27 16:03:09 -耗时 : 60
2020-04-27 16:03:39 -此处进行解密+验签+身份验证
2020-04-27 16:03:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:03:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:03:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 16:03:39 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:03:39 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:03:39 -<==      Total: 0
2020-04-27 16:03:39 -耗时 : 19
2020-04-27 16:10:09 -此处进行解密+验签+身份验证
2020-04-27 16:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:10:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:10:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:10:09 -==> Parameters: 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -耗时 : 2
2020-04-27 16:10:09 -此处进行解密+验签+身份验证
2020-04-27 16:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:10:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:10:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:10:09 -==> Parameters: 181(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:10:09 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 2
2020-04-27 16:10:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:10:09 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:10:09 -<==    Updates: 2
2020-04-27 16:10:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:10:09 -==> Parameters: 181(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:10:09 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:10:09 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:10:09 -<==    Updates: 1
2020-04-27 16:10:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:10:09 -==> Parameters: 
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:10:09 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:10:09 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:10:09 -<==    Updates: 1
2020-04-27 16:10:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:10:09 -==> Parameters: 181(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:10:09 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:10:09 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:10:09 -<==    Updates: 1
2020-04-27 16:10:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:10:09 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:10:09 -<==      Total: 1
2020-04-27 16:10:09 -耗时 : 66
2020-04-27 16:16:03 -此处进行解密+验签+身份验证
2020-04-27 16:16:03 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-27 16:16:03 -此处进行解密+验签+身份验证
2020-04-27 16:16:03 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-27 16:16:03 -解密：
2020-04-27 16:16:03 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 16:16:03 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 16:16:03 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-27 16:16:03 -==> Parameters: 04(String), 04(String)
2020-04-27 16:16:03 -耗时 : 4
2020-04-27 16:16:03 -<==      Total: 1
2020-04-27 16:16:03 -耗时 : 5
2020-04-27 16:16:03 -此处进行解密+验签+身份验证
2020-04-27 16:16:03 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"C3412D9251DA25F736634EAE10214B96","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3"}
2020-04-27 16:16:03 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-27 16:16:03 -token值=======181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3
2020-04-27 16:16:03 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-27 16:16:03 -==> Parameters: 181(String)
2020-04-27 16:16:03 -<==      Total: 1
2020-04-27 16:16:03 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-27 16:16:03 -==> Parameters: 26(String)
2020-04-27 16:16:03 -<==      Total: 1
2020-04-27 16:16:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 16:16:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 16:16:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 16:16:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 16:16:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 16:16:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 16:16:03 -耗时 : 40
2020-04-27 16:16:07 -此处进行解密+验签+身份验证
2020-04-27 16:16:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:16:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:16:07 -==> Parameters: 181(String)
2020-04-27 16:16:07 -<==      Total: 1
2020-04-27 16:16:07 -耗时 : 1
2020-04-27 16:16:08 -此处进行解密+验签+身份验证
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-27 16:16:08 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-27 16:16:08 -==> Parameters: 181(String)
2020-04-27 16:16:08 -<==      Total: 2
2020-04-27 16:16:08 -耗时 : 5
2020-04-27 16:16:08 -此处进行解密+验签+身份验证
2020-04-27 16:16:08 -解密：
2020-04-27 16:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 16:16:08 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 16:16:08 -==> Parameters: 01(String), 01(String)
2020-04-27 16:16:08 -<==      Total: 4
2020-04-27 16:16:08 -耗时 : 2
2020-04-27 16:16:08 -此处进行解密+验签+身份验证
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-27 16:16:08 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-27 16:16:08 -==> Parameters: 
2020-04-27 16:16:08 -<==      Total: 3
2020-04-27 16:16:08 -耗时 : 3
2020-04-27 16:16:08 -此处进行解密+验签+身份验证
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:16:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:16:08 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:16:08 -此处进行解密+验签+身份验证
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:08 -<==      Total: 2
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:16:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:16:08 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 2
2020-04-27 16:16:08 -<==    Updates: 2
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:16:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:16:08 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:16:08 -<==    Updates: 2
2020-04-27 16:16:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:16:08 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:16:08 -<==    Updates: 1
2020-04-27 16:16:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:16:08 -==> Parameters: 
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -<==    Updates: 1
2020-04-27 16:16:08 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:16:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:16:08 -==> Parameters: 
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:16:08 -此处进行解密+验签+身份验证
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:16:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:16:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:16:08 -==> Parameters: 181(String)
2020-04-27 16:16:08 -<==    Updates: 1
2020-04-27 16:16:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:16:08 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:16:08 -<==    Updates: 1
2020-04-27 16:16:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:16:08 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:08 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:16:08 -<==    Updates: 1
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -耗时 : 18
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -<==    Updates: 1
2020-04-27 16:16:08 -耗时 : 89
2020-04-27 16:16:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:08 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:16:08 -<==      Total: 1
2020-04-27 16:16:08 -耗时 : 77
2020-04-27 16:16:14 -此处进行解密+验签+身份验证
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-27 16:16:14 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-27 16:16:14 -==> Parameters: 181(String)
2020-04-27 16:16:14 -<==      Total: 1
2020-04-27 16:16:14 -耗时 : 1
2020-04-27 16:16:14 -此处进行解密+验签+身份验证
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:16:14 -此处进行解密+验签+身份验证
2020-04-27 16:16:14 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 16:16:14 -==> Parameters: 181(String), 202004(String)
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 16:16:14 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 16:16:14 -==> Parameters: 181(String), 202004(String)
2020-04-27 16:16:14 -此处进行解密+验签+身份验证
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:14 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:16:14 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 16:16:14 -==> Parameters: 181(String), 202004(String)
2020-04-27 16:16:14 -<==      Total: 1
2020-04-27 16:16:14 -<==      Total: 1
2020-04-27 16:16:14 -耗时 : 17
2020-04-27 16:16:14 -耗时 : 28
2020-04-27 16:16:14 -<==      Total: 1
2020-04-27 16:16:14 -耗时 : 29
2020-04-27 16:16:16 -此处进行解密+验签+身份验证
2020-04-27 16:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardMposList
2020-04-27 16:16:16 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_mpos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:16:16 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:16:16 -<==      Total: 0
2020-04-27 16:16:16 -耗时 : 8
2020-04-27 16:16:18 -此处进行解密+验签+身份验证
2020-04-27 16:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:16:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:16:18 -==> Parameters: 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -耗时 : 2
2020-04-27 16:16:18 -此处进行解密+验签+身份验证
2020-04-27 16:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:16:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:16:18 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:18 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 2
2020-04-27 16:16:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:18 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:16:18 -<==    Updates: 2
2020-04-27 16:16:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:16:18 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:18 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:18 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:16:18 -<==    Updates: 1
2020-04-27 16:16:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:16:18 -==> Parameters: 
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:18 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:18 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:16:18 -<==    Updates: 1
2020-04-27 16:16:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:16:18 -==> Parameters: 181(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:18 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:16:18 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:16:18 -<==    Updates: 1
2020-04-27 16:16:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:16:18 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:16:18 -<==      Total: 1
2020-04-27 16:16:18 -耗时 : 102
2020-04-27 16:16:39 -此处进行解密+验签+身份验证
2020-04-27 16:16:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:16:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:16:39 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 16:16:39 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:16:39 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:16:39 -<==      Total: 0
2020-04-27 16:16:39 -耗时 : 9
2020-04-27 16:17:58 -此处进行解密+验签+身份验证
2020-04-27 16:17:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:17:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:17:58 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:17:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:17:58 -==> Parameters: 181(String)
2020-04-27 16:17:58 -此处进行解密+验签+身份验证
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:17:58 -耗时 : 1
2020-04-27 16:17:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:17:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:17:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:17:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:17:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:17:58 -==> Parameters: 181(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:17:58 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 2
2020-04-27 16:17:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:17:58 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:17:58 -<==    Updates: 2
2020-04-27 16:17:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:17:58 -==> Parameters: 181(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:17:58 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:17:58 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:17:58 -<==    Updates: 1
2020-04-27 16:17:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:17:58 -==> Parameters: 
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:17:58 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:17:58 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:17:58 -<==    Updates: 1
2020-04-27 16:17:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:17:58 -==> Parameters: 181(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:17:58 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:17:58 -<==      Total: 1
2020-04-27 16:17:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:17:58 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:17:59 -<==    Updates: 1
2020-04-27 16:17:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:17:59 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:17:59 -<==      Total: 1
2020-04-27 16:17:59 -耗时 : 73
2020-04-27 16:18:04 -此处进行解密+验签+身份验证
2020-04-27 16:18:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:04 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardEposList
2020-04-27 16:18:04 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type='epos' and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:18:04 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:18:04 -<==      Total: 0
2020-04-27 16:18:04 -耗时 : 4
2020-04-27 16:18:06 -此处进行解密+验签+身份验证
2020-04-27 16:18:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:18:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:18:06 -==> Parameters: 181(String)
2020-04-27 16:18:06 -<==      Total: 1
2020-04-27 16:18:06 -耗时 : 2
2020-04-27 16:18:06 -此处进行解密+验签+身份验证
2020-04-27 16:18:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:18:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:18:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:18:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:18:06 -==> Parameters: 181(String), 181(String)
2020-04-27 16:18:06 -<==      Total: 1
2020-04-27 16:18:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:06 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:18:06 -<==      Total: 2
2020-04-27 16:18:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:06 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:18:07 -<==    Updates: 2
2020-04-27 16:18:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:18:07 -==> Parameters: 181(String), 181(String)
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:07 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:07 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:18:07 -<==    Updates: 1
2020-04-27 16:18:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:18:07 -==> Parameters: 
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:07 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:07 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:18:07 -<==    Updates: 1
2020-04-27 16:18:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:18:07 -==> Parameters: 181(String), 181(String)
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:07 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:07 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:18:07 -<==    Updates: 1
2020-04-27 16:18:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:07 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:18:07 -<==      Total: 1
2020-04-27 16:18:07 -耗时 : 113
2020-04-27 16:18:17 -此处进行解密+验签+身份验证
2020-04-27 16:18:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:17 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 16:18:17 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:18:17 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:18:17 -<==      Total: 0
2020-04-27 16:18:17 -耗时 : 2
2020-04-27 16:18:42 -此处进行解密+验签+身份验证
2020-04-27 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:18:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:18:42 -==> Parameters: 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -耗时 : 1
2020-04-27 16:18:42 -此处进行解密+验签+身份验证
2020-04-27 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:18:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:18:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:18:42 -==> Parameters: 181(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:42 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 2
2020-04-27 16:18:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:42 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:18:42 -<==    Updates: 2
2020-04-27 16:18:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:18:42 -==> Parameters: 181(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:42 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:42 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:18:42 -<==    Updates: 1
2020-04-27 16:18:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:18:42 -==> Parameters: 
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:42 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:42 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:18:42 -<==    Updates: 1
2020-04-27 16:18:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:18:42 -==> Parameters: 181(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:42 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:18:42 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:18:42 -<==    Updates: 1
2020-04-27 16:18:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:18:42 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:18:42 -<==      Total: 1
2020-04-27 16:18:42 -耗时 : 201
2020-04-27 16:18:54 -此处进行解密+验签+身份验证
2020-04-27 16:18:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:18:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:18:54 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 16:18:54 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 16:18:54 -==> Parameters: 181(String), 20200401(String), 20200430(String)
2020-04-27 16:18:54 -<==      Total: 1
2020-04-27 16:18:54 -耗时 : 74
2020-04-27 16:24:47 -此处进行解密+验签+身份验证
2020-04-27 16:24:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:24:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:24:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:24:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:24:47 -==> Parameters: 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -耗时 : 4
2020-04-27 16:24:47 -此处进行解密+验签+身份验证
2020-04-27 16:24:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:24:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:24:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:24:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:24:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:24:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:24:47 -==> Parameters: 181(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:24:47 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 2
2020-04-27 16:24:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:24:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:24:47 -<==    Updates: 2
2020-04-27 16:24:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:24:47 -==> Parameters: 181(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:24:47 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:24:47 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:24:47 -<==    Updates: 1
2020-04-27 16:24:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:24:47 -==> Parameters: 
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:24:47 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:24:47 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:24:47 -<==    Updates: 1
2020-04-27 16:24:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:24:47 -==> Parameters: 181(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:24:47 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:24:47 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:24:47 -<==    Updates: 1
2020-04-27 16:24:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:24:47 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:24:47 -<==      Total: 1
2020-04-27 16:24:47 -耗时 : 122
2020-04-27 16:25:06 -此处进行解密+验签+身份验证
2020-04-27 16:25:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:06 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:25:06 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 16:25:06 -==> Parameters: 181(String), 202001(String)
2020-04-27 16:25:06 -<==      Total: 0
2020-04-27 16:25:06 -耗时 : 3
2020-04-27 16:25:06 -此处进行解密+验签+身份验证
2020-04-27 16:25:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:06 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 16:25:06 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 16:25:06 -==> Parameters: 181(String), 202001(String)
2020-04-27 16:25:06 -此处进行解密+验签+身份验证
2020-04-27 16:25:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:06 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:25:06 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 16:25:06 -==> Parameters: 181(String), 202001(String)
2020-04-27 16:25:06 -<==      Total: 1
2020-04-27 16:25:06 -耗时 : 54
2020-04-27 16:25:06 -<==      Total: 1
2020-04-27 16:25:06 -耗时 : 32
2020-04-27 16:25:16 -此处进行解密+验签+身份验证
2020-04-27 16:25:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:25:16 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 16:25:16 -==> Parameters: 181(String), 202002(String)
2020-04-27 16:25:16 -此处进行解密+验签+身份验证
2020-04-27 16:25:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 16:25:16 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 16:25:16 -==> Parameters: 181(String), 202002(String)
2020-04-27 16:25:16 -<==      Total: 1
2020-04-27 16:25:16 -耗时 : 58
2020-04-27 16:25:16 -<==      Total: 1
2020-04-27 16:25:16 -耗时 : 43
2020-04-27 16:25:16 -此处进行解密+验签+身份验证
2020-04-27 16:25:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:16 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:25:16 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 16:25:16 -==> Parameters: 181(String), 202002(String)
2020-04-27 16:25:16 -<==      Total: 0
2020-04-27 16:25:16 -耗时 : 2
2020-04-27 16:25:21 -此处进行解密+验签+身份验证
2020-04-27 16:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:21 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 16:25:21 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 16:25:21 -==> Parameters: 181(String), 202003(String)
2020-04-27 16:25:21 -此处进行解密+验签+身份验证
2020-04-27 16:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:21 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:25:21 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 16:25:21 -==> Parameters: 181(String), 202003(String)
2020-04-27 16:25:21 -此处进行解密+验签+身份验证
2020-04-27 16:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:21 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:25:21 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 16:25:21 -==> Parameters: 181(String), 202003(String)
2020-04-27 16:25:21 -<==      Total: 1
2020-04-27 16:25:21 -<==      Total: 1
2020-04-27 16:25:21 -耗时 : 56
2020-04-27 16:25:21 -耗时 : 47
2020-04-27 16:25:21 -<==      Total: 1
2020-04-27 16:25:21 -耗时 : 51
2020-04-27 16:25:34 -此处进行解密+验签+身份验证
2020-04-27 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 16:25:34 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:25:34 -==> Parameters: 181(String), 20200301(String), 20200331(String), 181(String), 20200301(String), 20200331(String)
2020-04-27 16:25:34 -<==      Total: 2
2020-04-27 16:25:34 -耗时 : 68
2020-04-27 16:25:40 -此处进行解密+验签+身份验证
2020-04-27 16:25:40 -解密：
2020-04-27 16:25:40 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 16:25:40 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 16:25:40 -==> Parameters: 04(String), 04(String)
2020-04-27 16:25:40 -<==      Total: 1
2020-04-27 16:25:40 -耗时 : 2
2020-04-27 16:25:40 -此处进行解密+验签+身份验证
2020-04-27 16:25:40 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-27 16:25:40 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-27 16:25:40 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-27 16:25:40 -耗时 : 3
2020-04-27 16:25:40 -此处进行解密+验签+身份验证
2020-04-27 16:25:40 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"C3412D9251DA25F736634EAE10214B96","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3"}
2020-04-27 16:25:40 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-27 16:25:40 -token值=======181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3
2020-04-27 16:25:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-27 16:25:40 -==> Parameters: 181(String)
2020-04-27 16:25:40 -<==      Total: 1
2020-04-27 16:25:40 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-27 16:25:40 -==> Parameters: 26(String)
2020-04-27 16:25:40 -<==      Total: 1
2020-04-27 16:25:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 16:25:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 16:25:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 16:25:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 16:25:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 16:25:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 16:25:40 -耗时 : 9
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:25:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:25:45 -==> Parameters: 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -耗时 : 2
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-27 16:25:45 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-27 16:25:45 -==> Parameters: 181(String)
2020-04-27 16:25:45 -<==      Total: 2
2020-04-27 16:25:45 -耗时 : 2
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -解密：
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 16:25:45 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 16:25:45 -==> Parameters: 01(String), 01(String)
2020-04-27 16:25:45 -<==      Total: 4
2020-04-27 16:25:45 -耗时 : 25
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:25:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:25:45 -==> Parameters: 181(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 2
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:25:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:25:45 -==> Parameters: 181(String), 181(String)
2020-04-27 16:25:45 -<==    Updates: 2
2020-04-27 16:25:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:25:45 -==> Parameters: 181(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -<==      Total: 2
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-27 16:25:45 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-27 16:25:45 -==> Parameters: 
2020-04-27 16:25:45 -<==      Total: 3
2020-04-27 16:25:45 -耗时 : 12
2020-04-27 16:25:45 -<==    Updates: 2
2020-04-27 16:25:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:25:45 -==> Parameters: 181(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:25:45 -<==    Updates: 1
2020-04-27 16:25:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:25:45 -==> Parameters: 
2020-04-27 16:25:45 -<==    Updates: 1
2020-04-27 16:25:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:25:45 -==> Parameters: 
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -此处进行解密+验签+身份验证
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:25:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:25:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:25:45 -==> Parameters: 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -耗时 : 2
2020-04-27 16:25:45 -<==    Updates: 1
2020-04-27 16:25:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:25:45 -==> Parameters: 181(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:25:45 -<==    Updates: 1
2020-04-27 16:25:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:25:45 -==> Parameters: 181(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:25:45 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:25:45 -<==    Updates: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:25:45 -<==    Updates: 1
2020-04-27 16:25:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:25:45 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -耗时 : 100
2020-04-27 16:25:45 -<==      Total: 1
2020-04-27 16:25:45 -耗时 : 87
2020-04-27 16:26:59 -此处进行解密+验签+身份验证
2020-04-27 16:26:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:26:59 -此处进行解密+验签+身份验证
2020-04-27 16:26:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:26:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:26:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:26:59 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-04-27 16:26:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-04-27 16:26:59 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-04-27 16:26:59 -==> Parameters: 181(String)
2020-04-27 16:26:59 -<==      Total: 1
2020-04-27 16:26:59 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-04-27 16:26:59 -==> Parameters: 181(String), 181(String)
2020-04-27 16:26:59 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-27 16:26:59 -==> Parameters: 202004(String), 181(String)
2020-04-27 16:26:59 -<==      Total: 1
2020-04-27 16:26:59 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-04-27 16:26:59 -==> Parameters: 181(String)
2020-04-27 16:26:59 -<==      Total: 0
2020-04-27 16:26:59 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-27 16:26:59 -==> Parameters: 202004(String), 181(String)
2020-04-27 16:26:59 -<==      Total: 1
2020-04-27 16:26:59 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-04-27 16:26:59 -==> Parameters: 181(String)
2020-04-27 16:26:59 -<==      Total: 0
2020-04-27 16:26:59 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-04-27 16:26:59 -==> Parameters: 202004(String), 181(String)
2020-04-27 16:26:59 -<==      Total: 1
2020-04-27 16:26:59 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-04-27 16:26:59 -==> Parameters: 181(String)
2020-04-27 16:26:59 -<==      Total: 0
2020-04-27 16:26:59 -耗时 : 42
2020-04-27 16:27:00 -<==      Total: 1
2020-04-27 16:27:00 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-04-27 16:27:00 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:00 -<==      Total: 1
2020-04-27 16:27:00 -耗时 : 1552
2020-04-27 16:27:01 -此处进行解密+验签+身份验证
2020-04-27 16:27:01 -此处进行解密+验签+身份验证
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:01 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-04-27 16:27:01 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-04-27 16:27:01 -==> Parameters: 181(String)
2020-04-27 16:27:01 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:27:01 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 16:27:01 -==> Parameters: 181(String), 202004(String)
2020-04-27 16:27:01 -此处进行解密+验签+身份验证
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:01 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:27:01 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 16:27:01 -==> Parameters: 181(String), 202004(String)
2020-04-27 16:27:01 -<==      Total: 1
2020-04-27 16:27:01 -耗时 : 14
2020-04-27 16:27:01 -<==      Total: 1
2020-04-27 16:27:01 -耗时 : 3
2020-04-27 16:27:01 -<==      Total: 1
2020-04-27 16:27:01 -耗时 : 14
2020-04-27 16:27:01 -此处进行解密+验签+身份验证
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:01 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 16:27:01 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 16:27:01 -==> Parameters: 181(String), 202004(String)
2020-04-27 16:27:01 -<==      Total: 1
2020-04-27 16:27:01 -耗时 : 4
2020-04-27 16:27:02 -此处进行解密+验签+身份验证
2020-04-27 16:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardMposList
2020-04-27 16:27:02 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_mpos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:27:02 -==> Parameters: 181(String), 20200401(String), 20200430(String), 181(String), 20200401(String), 20200430(String)
2020-04-27 16:27:02 -<==      Total: 0
2020-04-27 16:27:02 -耗时 : 18
2020-04-27 16:27:04 -此处进行解密+验签+身份验证
2020-04-27 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:04 -此处进行解密+验签+身份验证
2020-04-27 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:27:04 -==> Parameters: 181(String)
2020-04-27 16:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -耗时 : 2
2020-04-27 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:27:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:04 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:04 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 2
2020-04-27 16:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:04 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:27:04 -<==    Updates: 2
2020-04-27 16:27:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:27:04 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:04 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:04 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:27:04 -<==    Updates: 1
2020-04-27 16:27:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:27:04 -==> Parameters: 
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:04 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:04 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:27:04 -<==    Updates: 1
2020-04-27 16:27:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:04 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:04 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:04 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:27:04 -<==    Updates: 1
2020-04-27 16:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:04 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:27:04 -<==      Total: 1
2020-04-27 16:27:04 -耗时 : 129
2020-04-27 16:27:09 -此处进行解密+验签+身份验证
2020-04-27 16:27:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:09 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:27:09 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-04-27 16:27:09 -==> Parameters: 181(String), 202003(String)
2020-04-27 16:27:09 -此处进行解密+验签+身份验证
2020-04-27 16:27:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:09 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-04-27 16:27:09 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-04-27 16:27:09 -==> Parameters: 181(String), 202003(String)
2020-04-27 16:27:09 -此处进行解密+验签+身份验证
2020-04-27 16:27:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:09 -<==      Total: 1
2020-04-27 16:27:09 -耗时 : 17
2020-04-27 16:27:09 -<==      Total: 1
2020-04-27 16:27:09 -耗时 : 10
2020-04-27 16:27:09 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-04-27 16:27:09 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-04-27 16:27:09 -==> Parameters: 181(String), 202003(String)
2020-04-27 16:27:09 -<==      Total: 1
2020-04-27 16:27:09 -耗时 : 2
2020-04-27 16:27:12 -此处进行解密+验签+身份验证
2020-04-27 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-04-27 16:27:12 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t.sn) as mer_name, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-04-27 16:27:12 -==> Parameters: 181(String), 20200301(String), 20200331(String), 181(String), 20200301(String), 20200331(String)
2020-04-27 16:27:12 -<==      Total: 2
2020-04-27 16:27:12 -耗时 : 37
2020-04-27 16:27:16 -此处进行解密+验签+身份验证
2020-04-27 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:16 -此处进行解密+验签+身份验证
2020-04-27 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:27:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:27:16 -==> Parameters: 181(String)
2020-04-27 16:27:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:27:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:27:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:16 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -耗时 : 18
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 2
2020-04-27 16:27:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:27:16 -<==    Updates: 2
2020-04-27 16:27:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:27:16 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:16 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:27:16 -<==    Updates: 1
2020-04-27 16:27:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:27:16 -==> Parameters: 
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:16 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:16 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:27:16 -<==    Updates: 1
2020-04-27 16:27:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:16 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:16 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:16 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:27:16 -<==    Updates: 1
2020-04-27 16:27:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:16 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:27:16 -<==      Total: 1
2020-04-27 16:27:16 -耗时 : 115
2020-04-27 16:27:18 -此处进行解密+验签+身份验证
2020-04-27 16:27:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:18 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-04-27 16:27:18 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, (select mer_name from t_sys_traditional_pos_info where t_sys_traditional_pos_info.sn=t_user_trapos_machine_back_record.sn) as mer_name, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 16:27:18 -==> Parameters: 181(String), 20200301(String), 20200331(String)
2020-04-27 16:27:18 -<==      Total: 9
2020-04-27 16:27:18 -耗时 : 49
2020-04-27 16:27:21 -此处进行解密+验签+身份验证
2020-04-27 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:21 -此处进行解密+验签+身份验证
2020-04-27 16:27:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:27:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:27:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:21 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:27:21 -==> Parameters: 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -耗时 : 2
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:21 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 2
2020-04-27 16:27:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:21 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:27:21 -<==    Updates: 2
2020-04-27 16:27:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:27:21 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:21 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:21 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:27:21 -<==    Updates: 1
2020-04-27 16:27:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:27:21 -==> Parameters: 
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:21 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:21 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:27:21 -<==    Updates: 1
2020-04-27 16:27:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:21 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:21 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:21 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:27:21 -<==    Updates: 1
2020-04-27 16:27:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:21 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:27:21 -<==      Total: 1
2020-04-27 16:27:21 -耗时 : 61
2020-04-27 16:27:22 -此处进行解密+验签+身份验证
2020-04-27 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitTraditionalPosList
2020-04-27 16:27:22 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, mer_name, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-04-27 16:27:22 -==> Parameters: 181(String), 20200301(String), 20200331(String)
2020-04-27 16:27:22 -<==      Total: 10
2020-04-27 16:27:22 -耗时 : 14
2020-04-27 16:27:24 -此处进行解密+验签+身份验证
2020-04-27 16:27:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:24 -此处进行解密+验签+身份验证
2020-04-27 16:27:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 16:27:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 16:27:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 16:27:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 16:27:24 -==> Parameters: 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -耗时 : 1
2020-04-27 16:27:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 16:27:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 16:27:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 16:27:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:24 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:24 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 2
2020-04-27 16:27:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 16:27:24 -<==    Updates: 2
2020-04-27 16:27:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 16:27:24 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:24 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:24 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 16:27:24 -<==    Updates: 1
2020-04-27 16:27:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 16:27:24 -==> Parameters: 
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:24 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:24 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 16:27:24 -<==    Updates: 1
2020-04-27 16:27:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 16:27:24 -==> Parameters: 181(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:24 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 16:27:24 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 16:27:24 -<==    Updates: 1
2020-04-27 16:27:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 16:27:24 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 16:27:24 -<==      Total: 1
2020-04-27 16:27:24 -耗时 : 75
2020-04-27 18:00:57 -此处进行解密+验签+身份验证
2020-04-27 18:00:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:00:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:00:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 18:00:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 18:00:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 18:00:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:00:57 -==> Parameters: 181(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:00:57 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 2
2020-04-27 18:00:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:00:57 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 18:00:57 -<==    Updates: 2
2020-04-27 18:00:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 18:00:57 -==> Parameters: 181(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:00:57 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:00:57 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 18:00:57 -<==    Updates: 1
2020-04-27 18:00:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 18:00:57 -==> Parameters: 
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:00:57 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:00:57 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 18:00:57 -<==    Updates: 1
2020-04-27 18:00:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:00:57 -==> Parameters: 181(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:00:57 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:00:57 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 18:00:57 -<==    Updates: 1
2020-04-27 18:00:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:00:57 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 18:00:57 -<==      Total: 1
2020-04-27 18:00:57 -耗时 : 79
2020-04-27 18:34:09 -此处进行解密+验签+身份验证
2020-04-27 18:34:09 -此处进行解密+验签+身份验证
2020-04-27 18:34:09 -解密：
2020-04-27 18:34:09 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 18:34:09 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-04-27 18:34:09 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 18:34:09 -==> Parameters: 04(String), 04(String)
2020-04-27 18:34:09 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-04-27 18:34:09 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-04-27 18:34:09 -耗时 : 7
2020-04-27 18:34:09 -<==      Total: 1
2020-04-27 18:34:09 -耗时 : 59
2020-04-27 18:34:10 -此处进行解密+验签+身份验证
2020-04-27 18:34:10 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"C3412D9251DA25F736634EAE10214B96","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3"}
2020-04-27 18:34:10 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-27 18:34:10 -token值=======181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3
2020-04-27 18:34:10 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-27 18:34:10 -==> Parameters: 181(String)
2020-04-27 18:34:10 -<==      Total: 1
2020-04-27 18:34:10 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-27 18:34:10 -==> Parameters: 26(String)
2020-04-27 18:34:10 -<==      Total: 1
2020-04-27 18:34:10 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 18:34:10 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 18:34:10 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 18:34:10 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 18:34:10 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-27 18:34:10 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-27 18:34:10 -耗时 : 73
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 18:34:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 18:34:14 -==> Parameters: 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -耗时 : 2
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:34:14 -解密：
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-27 18:34:14 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:34:14 -==> Parameters: 01(String), 01(String)
2020-04-27 18:34:14 -<==      Total: 4
2020-04-27 18:34:14 -耗时 : 1
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-27 18:34:14 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-27 18:34:14 -==> Parameters: 181(String)
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 18:34:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:34:14 -==> Parameters: 181(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 2
2020-04-27 18:34:14 -耗时 : 71
2020-04-27 18:34:14 -<==      Total: 2
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 18:34:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 18:34:14 -==> Parameters: 181(String)
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -耗时 : 1
2020-04-27 18:34:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:34:14 -==> Parameters: 181(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 2
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 18:34:14 -此处进行解密+验签+身份验证
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:34:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:34:14 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-27 18:34:14 -<==    Updates: 2
2020-04-27 18:34:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 18:34:14 -==> Parameters: 181(String), 181(String)
2020-04-27 18:34:14 -<==    Updates: 2
2020-04-27 18:34:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 18:34:14 -==> Parameters: 181(String), 181(String)
2020-04-27 18:34:14 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 18:34:14 -==> Parameters: 
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 18:34:14 -<==      Total: 3
2020-04-27 18:34:14 -耗时 : 36
2020-04-27 18:34:14 -<==    Updates: 1
2020-04-27 18:34:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 18:34:14 -==> Parameters: 
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 18:34:14 -<==    Updates: 1
2020-04-27 18:34:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 18:34:14 -==> Parameters: 
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 18:34:14 -<==    Updates: 1
2020-04-27 18:34:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:34:14 -==> Parameters: 181(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 18:34:14 -<==    Updates: 1
2020-04-27 18:34:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:34:14 -==> Parameters: 181(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 18:34:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:34:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 18:34:14 -<==    Updates: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -耗时 : 109
2020-04-27 18:34:14 -<==    Updates: 1
2020-04-27 18:34:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:34:14 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 18:34:14 -<==      Total: 1
2020-04-27 18:34:14 -耗时 : 95
2020-04-27 18:35:35 -此处进行解密+验签+身份验证
2020-04-27 18:35:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:35:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:35:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewsDetail
2020-04-27 18:35:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_nav, news_content, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where id=? 
2020-04-27 18:35:35 -==> Parameters: 12(String)
2020-04-27 18:35:35 -<==      Total: 1
2020-04-27 18:35:35 -==>  Preparing: update t_sys_news_info set browse_num = browse_num + 1 where id=? 
2020-04-27 18:35:35 -==> Parameters: 12(String)
2020-04-27 18:35:35 -<==    Updates: 1
2020-04-27 18:35:35 -耗时 : 45
2020-04-27 18:36:57 -此处进行解密+验签+身份验证
2020-04-27 18:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:36:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 18:36:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 18:36:57 -==> Parameters: 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -耗时 : 2
2020-04-27 18:36:57 -此处进行解密+验签+身份验证
2020-04-27 18:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:36:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 18:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 18:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 18:36:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:36:57 -==> Parameters: 181(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:36:57 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 2
2020-04-27 18:36:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:36:57 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 18:36:57 -<==    Updates: 2
2020-04-27 18:36:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 18:36:57 -==> Parameters: 181(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:36:57 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:36:57 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 18:36:57 -<==    Updates: 1
2020-04-27 18:36:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 18:36:57 -==> Parameters: 
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:36:57 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:36:57 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 18:36:57 -<==    Updates: 1
2020-04-27 18:36:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:36:57 -==> Parameters: 181(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:36:57 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:36:57 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 18:36:57 -<==    Updates: 1
2020-04-27 18:36:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:36:57 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 18:36:57 -<==      Total: 1
2020-04-27 18:36:57 -耗时 : 120
2020-04-27 18:37:08 -此处进行解密+验签+身份验证
2020-04-27 18:37:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:37:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:37:08 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewsDetail
2020-04-27 18:37:08 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_nav, news_content, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where id=? 
2020-04-27 18:37:08 -==> Parameters: 12(String)
2020-04-27 18:37:08 -<==      Total: 1
2020-04-27 18:37:08 -==>  Preparing: update t_sys_news_info set browse_num = browse_num + 1 where id=? 
2020-04-27 18:37:08 -==> Parameters: 12(String)
2020-04-27 18:37:08 -<==    Updates: 1
2020-04-27 18:37:08 -耗时 : 71
2020-04-27 18:37:12 -此处进行解密+验签+身份验证
2020-04-27 18:37:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:37:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:37:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-27 18:37:12 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-27 18:37:12 -==> Parameters: 181(String)
2020-04-27 18:37:12 -此处进行解密+验签+身份验证
2020-04-27 18:37:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -耗时 : 2
2020-04-27 18:37:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-27 18:37:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-27 18:37:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-27 18:37:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-27 18:37:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:37:12 -==> Parameters: 181(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:37:12 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 2
2020-04-27 18:37:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:37:12 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-27 18:37:12 -<==    Updates: 2
2020-04-27 18:37:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-27 18:37:12 -==> Parameters: 181(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:37:12 -==> Parameters: recallFlag(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:37:12 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-27 18:37:12 -<==    Updates: 1
2020-04-27 18:37:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-27 18:37:12 -==> Parameters: 
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:37:12 -==> Parameters: collegeFlag(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:37:12 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-27 18:37:12 -<==    Updates: 1
2020-04-27 18:37:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-27 18:37:12 -==> Parameters: 181(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:37:12 -==> Parameters: cardFlag(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-27 18:37:12 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-27 18:37:12 -<==    Updates: 1
2020-04-27 18:37:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-27 18:37:12 -==> Parameters: appImgFlag(String), 181(String)
2020-04-27 18:37:12 -<==      Total: 1
2020-04-27 18:37:12 -耗时 : 118
