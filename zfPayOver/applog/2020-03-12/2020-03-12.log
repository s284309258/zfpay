2020-03-12 09:43:31 -Starting LongEcologicalApplication on PC-201905161910 with PID 17076 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-12 09:43:31 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-12 09:43:31 -No active profile set, falling back to default profiles: default
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 09:43:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 09:43:32 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 09:43:32 -Finished Spring Data repository scanning in 160ms. Found 0 repository interfaces.
2020-03-12 09:43:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 09:43:32 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 09:43:32 -Finished Spring Data repository scanning in 71ms. Found 0 repository interfaces.
2020-03-12 09:43:33 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8bca0624] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 09:43:33 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$864deac4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 09:43:34 -Tomcat initialized with port(s): 8080 (http)
2020-03-12 09:43:34 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-12 09:43:34 -Starting service [Tomcat]
2020-03-12 09:43:34 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-12 09:43:34 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-12 09:43:34 -Initializing Spring embedded WebApplicationContext
2020-03-12 09:43:34 -Root WebApplicationContext: initialization completed in 3125 ms
2020-03-12 09:43:34 -Filter xssFilter was not registered (disabled)
2020-03-12 09:43:34 -HikariPool-1 - Starting...
2020-03-12 09:43:35 -HikariPool-1 - Start completed.
2020-03-12 09:43:35 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-12 09:43:35 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-12 09:43:35 -HHH000206: hibernate.properties not found
2020-03-12 09:43:35 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-12 09:43:35 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-12 09:43:35 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 09:43:36 -Using default implementation for ThreadExecutor
2020-03-12 09:43:36 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-12 09:43:36 -Quartz Scheduler v.2.3.0 created.
2020-03-12 09:43:36 -RAMJobStore initialized.
2020-03-12 09:43:36 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-12 09:43:36 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-12 09:43:36 -Quartz scheduler version: 2.3.0
2020-03-12 09:43:36 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3ec9f8d
2020-03-12 09:43:36 -STAET TaskExecutorConfig
2020-03-12 09:43:36 -Initializing ExecutorService
2020-03-12 09:43:36 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-12 09:43:37 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-12 09:43:37 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-12 09:43:37 -Initializing ExecutorService 'taskScheduler'
2020-03-12 09:43:37 -Starting Quartz Scheduler now
2020-03-12 09:43:37 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-12 09:43:37 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-12 09:43:37 -Using a shared selector for servlet write/read
2020-03-12 09:43:37 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-12 09:43:37 -Started LongEcologicalApplication in 7.726 seconds (JVM running for 9.724)
2020-03-12 10:16:17 -Starting LongEcologicalApplication on PC-201905161910 with PID 2028 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-12 10:16:17 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-12 10:16:17 -No active profile set, falling back to default profiles: default
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:16:18 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 10:16:18 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 10:16:19 -Finished Spring Data repository scanning in 129ms. Found 0 repository interfaces.
2020-03-12 10:16:19 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 10:16:19 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 10:16:19 -Finished Spring Data repository scanning in 95ms. Found 0 repository interfaces.
2020-03-12 10:16:19 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$a6122662] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 10:16:19 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a0960b02] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 10:16:21 -Tomcat initialized with port(s): 8080 (http)
2020-03-12 10:16:21 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-12 10:16:21 -Starting service [Tomcat]
2020-03-12 10:16:21 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-12 10:16:21 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-12 10:16:21 -Initializing Spring embedded WebApplicationContext
2020-03-12 10:16:21 -Root WebApplicationContext: initialization completed in 4146 ms
2020-03-12 10:16:21 -Filter xssFilter was not registered (disabled)
2020-03-12 10:16:22 -HikariPool-1 - Starting...
2020-03-12 10:16:22 -HikariPool-1 - Start completed.
2020-03-12 10:16:22 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-12 10:16:22 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-12 10:16:22 -HHH000206: hibernate.properties not found
2020-03-12 10:16:22 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-12 10:16:22 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-12 10:16:23 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 10:16:23 -Using default implementation for ThreadExecutor
2020-03-12 10:16:23 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-12 10:16:23 -Quartz Scheduler v.2.3.0 created.
2020-03-12 10:16:23 -RAMJobStore initialized.
2020-03-12 10:16:23 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-12 10:16:23 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-12 10:16:23 -Quartz scheduler version: 2.3.0
2020-03-12 10:16:23 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7b95bdb0
2020-03-12 10:16:24 -STAET TaskExecutorConfig
2020-03-12 10:16:24 -Initializing ExecutorService
2020-03-12 10:16:24 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-12 10:16:24 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-12 10:16:24 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-12 10:16:24 -Initializing ExecutorService 'taskScheduler'
2020-03-12 10:16:24 -Starting Quartz Scheduler now
2020-03-12 10:16:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-12 10:16:24 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-12 10:16:24 -Using a shared selector for servlet write/read
2020-03-12 10:16:24 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-12 10:16:24 -Started LongEcologicalApplication in 7.982 seconds (JVM running for 9.089)
2020-03-12 10:20:23 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-12 10:20:23 -Initializing Servlet 'dispatcherServlet'
2020-03-12 10:20:23 -Completed initialization in 9 ms
2020-03-12 10:20:23 -此处进行解密+验签+身份验证
2020-03-12 10:20:23 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:20:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:20:23 -Starting without optional epoll library
2020-03-12 10:20:23 -Starting without optional kqueue library
2020-03-12 10:20:23 -此处进行解密+验签+身份验证
2020-03-12 10:20:24 -解密：{
  "sign" : "79D9A1CF6A0DAACDC5AEA4524E39692B",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|QTJ7CWACTZ34DM3HIC1HM63BMJ9U8LP7",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 10:20:24 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 10:20:24 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 10:20:24 -==> Parameters: 13322990711(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:20:24 -耗时 : 909
2020-03-12 10:20:24 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 10:20:24 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 102024(String), 181(Integer)
2020-03-12 10:20:24 -<==    Updates: 1
2020-03-12 10:20:24 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 10:20:24 -==> Parameters: 26(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 10:20:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 10:20:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 10:20:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 10:20:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 10:20:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 10:20:24 -耗时 : 142
2020-03-12 10:20:24 -此处进行解密+验签+身份验证
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:24 -此处进行解密+验签+身份验证
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:24 -此处进行解密+验签+身份验证
2020-03-12 10:20:24 -此处进行解密+验签+身份验证
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 10:20:24 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 10:20:24 -==> Parameters: 181(String)
2020-03-12 10:20:24 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 10:20:24 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 10:20:24 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 10:20:24 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 10:20:24 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 10:20:24 -<==      Total: 2
2020-03-12 10:20:24 -耗时 : 12
2020-03-12 10:20:24 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 10:20:24 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 10:20:24 -==> Parameters: 
2020-03-12 10:20:24 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 10:20:24 -耗时 : 17
2020-03-12 10:20:24 -耗时 : 24
2020-03-12 10:20:24 -<==      Total: 3
2020-03-12 10:20:24 -耗时 : 18
2020-03-12 10:20:24 -此处进行解密+验签+身份验证
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 10:20:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 10:20:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 10:20:24 -==> Parameters: 181(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:20:24 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:20:24 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 10:20:24 -<==    Updates: 1
2020-03-12 10:20:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 10:20:24 -==> Parameters: 181(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:20:24 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:20:24 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 10:20:24 -<==    Updates: 1
2020-03-12 10:20:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 10:20:24 -==> Parameters: 
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:20:24 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:20:24 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 10:20:24 -<==    Updates: 1
2020-03-12 10:20:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 10:20:24 -==> Parameters: 181(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:20:24 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 10:20:24 -<==      Total: 1
2020-03-12 10:20:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:20:24 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 10:20:24 -<==    Updates: 1
2020-03-12 10:20:24 -耗时 : 134
2020-03-12 10:20:28 -此处进行解密+验签+身份验证
2020-03-12 10:20:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:28 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 10:20:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 10:20:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 10:20:28 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_01_26_20200312
2020-03-12 10:20:28 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_01_26_20200312 , return
2020-03-12 10:20:28 -耗时 : 21
2020-03-12 10:20:32 -此处进行解密+验签+身份验证
2020-03-12 10:20:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:32 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityDetail
2020-03-12 10:20:32 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,cacheKey:zfpay_sys_activity_01_13
2020-03-12 10:20:32 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,has cacheKey:zfpay_sys_activity_01_13 , return
2020-03-12 10:20:32 -耗时 : 13
2020-03-12 10:20:42 -此处进行解密+验签+身份验证
2020-03-12 10:20:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:20:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:20:42 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 10:20:42 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,cacheKey:zfpay_sys_activity_01_13
2020-03-12 10:20:42 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,has cacheKey:zfpay_sys_activity_01_13 , return
2020-03-12 10:20:42 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosActivityRewardList(Map) enable cache service,cacheKey:zfpay_sys_activity_reward_list_01_13
2020-03-12 10:20:42 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosActivityRewardList(Map) enable cache service,has cacheKey:zfpay_sys_activity_reward_list_01_13 , return
2020-03-12 10:20:42 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 10:20:42 -==> Parameters: 181(String)
2020-03-12 10:20:42 -<==      Total: 248
2020-03-12 10:20:42 -耗时 : 41
2020-03-12 10:23:57 -此处进行解密+验签+身份验证
2020-03-12 10:23:57 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:23:57 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:23:57 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:23:57 -耗时 : 8
2020-03-12 10:24:03 -此处进行解密+验签+身份验证
2020-03-12 10:24:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:24:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:24:03 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 10:24:03 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,cacheKey:zfpay_sys_activity_01_13
2020-03-12 10:24:03 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,has cacheKey:zfpay_sys_activity_01_13 , return
2020-03-12 10:24:03 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosActivityRewardList(Map) enable cache service,cacheKey:zfpay_sys_activity_reward_list_01_13
2020-03-12 10:24:03 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosActivityRewardList(Map) enable cache service,has cacheKey:zfpay_sys_activity_reward_list_01_13 , return
2020-03-12 10:24:03 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 10:24:03 -==> Parameters: 181(String)
2020-03-12 10:24:03 -<==      Total: 248
2020-03-12 10:24:03 -耗时 : 29
2020-03-12 10:28:23 -此处进行解密+验签+身份验证
2020-03-12 10:28:23 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:28:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:28:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:28:23 -耗时 : 11
2020-03-12 10:28:24 -此处进行解密+验签+身份验证
2020-03-12 10:28:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:28:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:28:24 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 10:28:24 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,cacheKey:zfpay_sys_activity_01_13
2020-03-12 10:28:24 -Map com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityDetail(Map) enable cache service,has cacheKey:zfpay_sys_activity_01_13 , return
2020-03-12 10:28:24 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosActivityRewardList(Map) enable cache service,cacheKey:zfpay_sys_activity_reward_list_01_13
2020-03-12 10:28:24 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosActivityRewardList(Map) enable cache service,has cacheKey:zfpay_sys_activity_reward_list_01_13 , return
2020-03-12 10:28:24 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 10:28:24 -==> Parameters: 181(String)
2020-03-12 10:28:24 -<==      Total: 248
2020-03-12 10:28:24 -耗时 : 28
2020-03-12 10:28:49 -此处进行解密+验签+身份验证
2020-03-12 10:28:49 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:28:49 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:28:49 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:28:49 -耗时 : 15
2020-03-12 10:28:55 -此处进行解密+验签+身份验证
2020-03-12 10:28:55 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:28:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:28:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:28:55 -耗时 : 9
2020-03-12 10:30:54 -Starting LongEcologicalApplication on PC-201905161910 with PID 13436 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-12 10:30:54 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-12 10:30:54 -No active profile set, falling back to default profiles: default
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 10:30:55 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 10:30:55 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 10:30:56 -Finished Spring Data repository scanning in 118ms. Found 0 repository interfaces.
2020-03-12 10:30:56 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 10:30:56 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 10:30:56 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-12 10:30:56 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$6dec7c1a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 10:30:56 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$687060ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 10:30:57 -Tomcat initialized with port(s): 8080 (http)
2020-03-12 10:30:57 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-12 10:30:57 -Starting service [Tomcat]
2020-03-12 10:30:57 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-12 10:30:57 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-12 10:30:57 -Initializing Spring embedded WebApplicationContext
2020-03-12 10:30:57 -Root WebApplicationContext: initialization completed in 3276 ms
2020-03-12 10:30:57 -Filter xssFilter was not registered (disabled)
2020-03-12 10:30:58 -HikariPool-1 - Starting...
2020-03-12 10:30:58 -HikariPool-1 - Start completed.
2020-03-12 10:30:58 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-12 10:30:58 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-12 10:30:58 -HHH000206: hibernate.properties not found
2020-03-12 10:30:59 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-12 10:30:59 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-12 10:30:59 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 10:31:00 -Using default implementation for ThreadExecutor
2020-03-12 10:31:00 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-12 10:31:00 -Quartz Scheduler v.2.3.0 created.
2020-03-12 10:31:00 -RAMJobStore initialized.
2020-03-12 10:31:00 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-12 10:31:00 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-12 10:31:00 -Quartz scheduler version: 2.3.0
2020-03-12 10:31:00 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@51b59d58
2020-03-12 10:31:00 -STAET TaskExecutorConfig
2020-03-12 10:31:00 -Initializing ExecutorService
2020-03-12 10:31:00 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-12 10:31:01 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-12 10:31:01 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-12 10:31:01 -Initializing ExecutorService 'taskScheduler'
2020-03-12 10:31:01 -Starting Quartz Scheduler now
2020-03-12 10:31:01 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-12 10:31:01 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-12 10:31:01 -Using a shared selector for servlet write/read
2020-03-12 10:31:01 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-12 10:31:01 -Started LongEcologicalApplication in 8.357 seconds (JVM running for 10.307)
2020-03-12 10:33:24 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-12 10:33:24 -Initializing Servlet 'dispatcherServlet'
2020-03-12 10:33:24 -Completed initialization in 11 ms
2020-03-12 10:33:24 -此处进行解密+验签+身份验证
2020-03-12 10:33:24 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:33:24 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:33:24 -Starting without optional epoll library
2020-03-12 10:33:24 -Starting without optional kqueue library
2020-03-12 10:33:24 -此处进行解密+验签+身份验证
2020-03-12 10:33:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:33:25 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:33:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:33:25 -耗时 : 809
2020-03-12 10:33:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 10:33:25 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 10:33:25 -==> Parameters: 13(String)
2020-03-12 10:33:25 -<==      Total: 1
2020-03-12 10:33:32 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_trapos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 10:33:32 -==> Parameters: 13(String)
2020-03-12 10:33:32 -<==      Total: 0
2020-03-12 10:44:31 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m59s365ms317µs793ns).
2020-03-12 10:44:31 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 10:44:31 -==> Parameters: 181(String)
2020-03-12 10:44:31 -此处进行解密+验签+身份验证
2020-03-12 10:44:31 -此处进行解密+验签+身份验证
2020-03-12 10:44:31 -此处进行解密+验签+身份验证
2020-03-12 10:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:31 -<==      Total: 248
2020-03-12 10:44:31 -耗时 : 666414
2020-03-12 10:44:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 10:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:31 -耗时 : 21
2020-03-12 10:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 10:44:31 -耗时 : 0
2020-03-12 10:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 10:44:31 -耗时 : 0
2020-03-12 10:44:43 -此处进行解密+验签+身份验证
2020-03-12 10:44:43 -解密：{
  "sign" : "442BB262177B354917A509BB73BC0F4C",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|5G574A216AMNEE8UK0WFXT7NCB9GI8T7",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 10:44:43 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 10:44:43 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 10:44:43 -==> Parameters: 13322990711(String)
2020-03-12 10:44:43 -<==      Total: 1
2020-03-12 10:44:43 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 10:44:43 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 104443(String), 181(Integer)
2020-03-12 10:44:43 -<==    Updates: 1
2020-03-12 10:44:43 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 10:44:43 -==> Parameters: 26(String)
2020-03-12 10:44:43 -<==      Total: 1
2020-03-12 10:44:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 10:44:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 10:44:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 10:44:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 10:44:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 10:44:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 10:44:43 -耗时 : 128
2020-03-12 10:44:44 -此处进行解密+验签+身份验证
2020-03-12 10:44:44 -此处进行解密+验签+身份验证
2020-03-12 10:44:44 -此处进行解密+验签+身份验证
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:44 -此处进行解密+验签+身份验证
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 10:44:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 10:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 10:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 10:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 10:44:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 10:44:44 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 10:44:44 -==> Parameters: 
2020-03-12 10:44:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 10:44:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 10:44:44 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 10:44:44 -<==      Total: 3
2020-03-12 10:44:44 -==> Parameters: 181(String)
2020-03-12 10:44:44 -耗时 : 13
2020-03-12 10:44:44 -耗时 : 24
2020-03-12 10:44:44 -此处进行解密+验签+身份验证
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:44 -耗时 : 22
2020-03-12 10:44:44 -<==      Total: 2
2020-03-12 10:44:44 -耗时 : 27
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 10:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 10:44:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 10:44:44 -==> Parameters: 181(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:44:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:44:44 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 10:44:44 -<==    Updates: 1
2020-03-12 10:44:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 10:44:44 -==> Parameters: 181(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:44:44 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:44:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 10:44:44 -<==    Updates: 1
2020-03-12 10:44:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 10:44:44 -==> Parameters: 
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:44:44 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:44:44 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 10:44:44 -<==    Updates: 1
2020-03-12 10:44:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 10:44:44 -==> Parameters: 181(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 10:44:44 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 10:44:44 -<==      Total: 1
2020-03-12 10:44:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 10:44:44 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 10:44:44 -<==    Updates: 1
2020-03-12 10:44:44 -耗时 : 135
2020-03-12 10:44:46 -此处进行解密+验签+身份验证
2020-03-12 10:44:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:46 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 10:44:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 10:44:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 10:44:46 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-12 10:44:46 -==> Parameters: 26(String), 20200312(String)
2020-03-12 10:44:46 -<==      Total: 1
2020-03-12 10:44:46 -耗时 : 52
2020-03-12 10:44:47 -此处进行解密+验签+身份验证
2020-03-12 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:47 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityDetail
2020-03-12 10:44:47 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 10:44:47 -==> Parameters: 13(String)
2020-03-12 10:44:47 -<==      Total: 1
2020-03-12 10:44:47 -耗时 : 11
2020-03-12 10:44:51 -此处进行解密+验签+身份验证
2020-03-12 10:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 10:44:51 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 10:44:51 -==> Parameters: 13(String)
2020-03-12 10:44:51 -<==      Total: 1
2020-03-12 10:44:54 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_trapos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 10:44:54 -==> Parameters: 13(String)
2020-03-12 10:44:54 -<==      Total: 3
2020-03-12 10:44:58 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 10:44:58 -==> Parameters: 181(String)
2020-03-12 10:44:58 -<==      Total: 248
2020-03-12 10:45:04 -耗时 : 13388
2020-03-12 10:59:29 -此处进行解密+验签+身份验证
2020-03-12 10:59:29 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 10:59:29 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 10:59:29 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor77.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1bc7628b.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$43057fe5.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 10:59:29 -耗时 : 13
2020-03-12 10:59:29 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 10:59:29 -Reconnected to 120.25.164.176:10379
2020-03-12 10:59:42 -此处进行解密+验签+身份验证
2020-03-12 10:59:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:59:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:59:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 10:59:42 -耗时 : 1
2020-03-12 10:59:43 -此处进行解密+验签+身份验证
2020-03-12 10:59:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 10:59:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 10:59:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 10:59:43 -耗时 : 7
2020-03-12 11:51:36 -此处进行解密+验签+身份验证
2020-03-12 11:51:36 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 11:51:36 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 11:51:36 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor77.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1bc7628b.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$43057fe5.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 11:51:36 -耗时 : 10
2020-03-12 11:51:36 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 11:51:36 -Reconnected to 120.25.164.176:10379
2020-03-12 11:52:55 -此处进行解密+验签+身份验证
2020-03-12 11:52:55 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 11:52:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 11:52:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 11:52:55 -耗时 : 9
2020-03-12 11:53:01 -此处进行解密+验签+身份验证
2020-03-12 11:53:01 -解密：{
  "sign" : "012F1C4BCB9C9E8337E7AD75B4A6E241",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|7RHKDUS7BCUWXAKJ1N3FEUK0O4W2UHOT",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 11:53:01 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@206f1dfa (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@232354e7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3e046746 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@665c3db1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5fe4f4f0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@66590787 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7bfa725d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7ccc7926 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@477513b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2a3c0b0d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 11:53:01 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 11:53:01 -==> Parameters: 13322990711(String)
2020-03-12 11:53:01 -<==      Total: 1
2020-03-12 11:53:01 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 11:53:01 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 115301(String), 181(Integer)
2020-03-12 11:53:01 -<==    Updates: 1
2020-03-12 11:53:01 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 11:53:01 -==> Parameters: 26(String)
2020-03-12 11:53:01 -<==      Total: 1
2020-03-12 11:53:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 11:53:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 11:53:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 11:53:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 11:53:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 11:53:01 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 11:53:01 -耗时 : 136
2020-03-12 11:53:02 -此处进行解密+验签+身份验证
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:02 -此处进行解密+验签+身份验证
2020-03-12 11:53:02 -此处进行解密+验签+身份验证
2020-03-12 11:53:02 -此处进行解密+验签+身份验证
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 11:53:02 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 11:53:02 -==> Parameters: 181(String)
2020-03-12 11:53:02 -<==      Total: 2
2020-03-12 11:53:02 -耗时 : 8
2020-03-12 11:53:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 11:53:02 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 11:53:02 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 11:53:02 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 11:53:02 -==> Parameters: 
2020-03-12 11:53:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 11:53:02 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 11:53:02 -此处进行解密+验签+身份验证
2020-03-12 11:53:02 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:02 -<==      Total: 3
2020-03-12 11:53:02 -耗时 : 8
2020-03-12 11:53:02 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:02 -耗时 : 12
2020-03-12 11:53:02 -耗时 : 12
2020-03-12 11:53:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 11:53:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 11:53:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 11:53:02 -==> Parameters: 181(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 11:53:02 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 11:53:02 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 11:53:02 -<==    Updates: 1
2020-03-12 11:53:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 11:53:02 -==> Parameters: 181(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 11:53:02 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 11:53:02 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 11:53:02 -<==    Updates: 1
2020-03-12 11:53:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 11:53:02 -==> Parameters: 
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 11:53:02 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 11:53:02 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 11:53:02 -<==    Updates: 1
2020-03-12 11:53:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 11:53:02 -==> Parameters: 181(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 11:53:02 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 11:53:02 -<==      Total: 1
2020-03-12 11:53:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 11:53:02 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 11:53:02 -<==    Updates: 1
2020-03-12 11:53:02 -耗时 : 131
2020-03-12 11:53:03 -此处进行解密+验签+身份验证
2020-03-12 11:53:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 11:53:03 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 11:53:03 -==> Parameters: 181(String)
2020-03-12 11:53:03 -<==      Total: 1004
2020-03-12 11:53:03 -耗时 : 52
2020-03-12 11:53:08 -此处进行解密+验签+身份验证
2020-03-12 11:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 11:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 11:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 11:53:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 11:53:11 -==> Parameters: 181(String)
2020-03-12 11:53:11 -<==      Total: 403
2020-03-12 11:53:11 -耗时 : 3165
2020-03-12 12:23:54 -此处进行解密+验签+身份验证
2020-03-12 12:23:54 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 12:23:54 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 12:23:54 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor77.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1bc7628b.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$43057fe5.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 12:23:54 -耗时 : 9
2020-03-12 12:23:54 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 12:23:54 -Reconnected to 120.25.164.176:10379
2020-03-12 12:30:25 -此处进行解密+验签+身份验证
2020-03-12 12:30:25 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 12:30:25 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 12:30:25 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 12:30:25 -耗时 : 15
2020-03-12 12:30:30 -此处进行解密+验签+身份验证
2020-03-12 12:30:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 12:30:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 12:30:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 12:30:30 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 12:30:30 -==> Parameters: 181(String)
2020-03-12 12:30:30 -<==      Total: 403
2020-03-12 12:30:30 -耗时 : 39
2020-03-12 12:46:52 -此处进行解密+验签+身份验证
2020-03-12 12:46:52 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 12:46:52 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 12:46:52 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor77.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1bc7628b.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$43057fe5.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 12:46:52 -耗时 : 7
2020-03-12 12:46:52 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 12:46:52 -Reconnected to 120.25.164.176:10379
2020-03-12 14:10:42 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-12 14:10:42 -Shutting down ExecutorService 'taskScheduler'
2020-03-12 14:10:42 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-12 14:10:42 -Shutting down Quartz Scheduler
2020-03-12 14:10:42 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-12 14:10:42 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-12 14:10:42 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-12 14:10:42 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 14:10:42 -HikariPool-1 - Shutdown initiated...
2020-03-12 14:10:42 -HikariPool-1 - Shutdown completed.
2020-03-12 15:26:14 -Starting LongEcologicalApplication on PC-201905161910 with PID 1948 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-12 15:26:14 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-12 15:26:14 -No active profile set, falling back to default profiles: default
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 15:26:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 15:26:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 15:26:15 -Finished Spring Data repository scanning in 75ms. Found 0 repository interfaces.
2020-03-12 15:26:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 15:26:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 15:26:15 -Finished Spring Data repository scanning in 53ms. Found 0 repository interfaces.
2020-03-12 15:26:15 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$9127a713] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 15:26:15 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8bab8bb3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 15:26:16 -Tomcat initialized with port(s): 8080 (http)
2020-03-12 15:26:16 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-12 15:26:16 -Starting service [Tomcat]
2020-03-12 15:26:16 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-12 15:26:16 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-12 15:26:16 -Initializing Spring embedded WebApplicationContext
2020-03-12 15:26:16 -Root WebApplicationContext: initialization completed in 2090 ms
2020-03-12 15:26:16 -Filter xssFilter was not registered (disabled)
2020-03-12 15:26:16 -HikariPool-1 - Starting...
2020-03-12 15:26:16 -HikariPool-1 - Start completed.
2020-03-12 15:26:16 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-12 15:26:17 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-12 15:26:17 -HHH000206: hibernate.properties not found
2020-03-12 15:26:17 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-12 15:26:17 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-12 15:26:17 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 15:26:17 -Using default implementation for ThreadExecutor
2020-03-12 15:26:17 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-12 15:26:17 -Quartz Scheduler v.2.3.0 created.
2020-03-12 15:26:17 -RAMJobStore initialized.
2020-03-12 15:26:17 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-12 15:26:17 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-12 15:26:17 -Quartz scheduler version: 2.3.0
2020-03-12 15:26:17 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@100bba26
2020-03-12 15:26:18 -STAET TaskExecutorConfig
2020-03-12 15:26:18 -Initializing ExecutorService
2020-03-12 15:26:18 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-12 15:26:18 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-12 15:26:18 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-12 15:26:19 -Initializing ExecutorService 'taskScheduler'
2020-03-12 15:26:19 -Starting Quartz Scheduler now
2020-03-12 15:26:19 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-12 15:26:19 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-12 15:26:19 -Using a shared selector for servlet write/read
2020-03-12 15:26:19 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-12 15:26:19 -Started LongEcologicalApplication in 5.579 seconds (JVM running for 6.69)
2020-03-12 15:26:41 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-12 15:26:41 -Initializing Servlet 'dispatcherServlet'
2020-03-12 15:26:41 -Completed initialization in 10 ms
2020-03-12 15:26:41 -此处进行解密+验签+身份验证
2020-03-12 15:26:41 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-12 15:26:41 -token值=======181|OADYLTSMBL1QY2QC4LI9F0W3F7C15C94
2020-03-12 15:26:41 -Starting without optional epoll library
2020-03-12 15:26:41 -Starting without optional kqueue library
2020-03-12 15:26:41 -耗时 : 729
2020-03-12 15:27:11 -此处进行解密+验签+身份验证
2020-03-12 15:27:12 -解密：{
  "sign" : "25110C711B876E5EC408B67899AC9312",
  "login_type" : "account",
  "sys_user_account" : "13501590237",
  "device_no" : "iOS11.4.1",
  "login_password" : "E19D5CD5AF0378DA05F63F891C7467AF",
  "token" : "181|OADYLTSMBL1QY2QC4LI9F0W3F7C15C94",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 15:27:12 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 15:27:12 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 15:27:12 -==> Parameters: 13501590237(String)
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 15:27:12 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 152712(String), 2420(Integer)
2020-03-12 15:27:12 -<==    Updates: 1
2020-03-12 15:27:12 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 15:27:12 -==> Parameters: 26(String)
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 15:27:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 15:27:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 15:27:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 15:27:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 15:27:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 15:27:12 -耗时 : 122
2020-03-12 15:27:12 -此处进行解密+验签+身份验证
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:12 -此处进行解密+验签+身份验证
2020-03-12 15:27:12 -此处进行解密+验签+身份验证
2020-03-12 15:27:12 -此处进行解密+验签+身份验证
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:12 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-12 15:27:12 -==> Parameters: 2420(String)
2020-03-12 15:27:12 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-12 15:27:12 -==> Parameters: 2420(String)
2020-03-12 15:27:12 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-12 15:27:12 -==> Parameters: 2420(String)
2020-03-12 15:27:12 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-12 15:27:12 -==> Parameters: 2420(String)
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_2420,save content:null
2020-03-12 15:27:12 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_2420,save content:null
2020-03-12 15:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 15:27:12 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 15:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 15:27:12 -==> Parameters: 2420(String)
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 15:27:12 -==> Parameters: 
2020-03-12 15:27:12 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_2420,save content:null
2020-03-12 15:27:12 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_2420,save content:null
2020-03-12 15:27:12 -<==      Total: 3
2020-03-12 15:27:12 -耗时 : 10
2020-03-12 15:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 15:27:12 -<==      Total: 2
2020-03-12 15:27:12 -耗时 : 15
2020-03-12 15:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 15:27:12 -此处进行解密+验签+身份验证
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 15:27:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:27:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 15:27:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 15:27:12 -耗时 : 21
2020-03-12 15:27:12 -耗时 : 17
2020-03-12 15:27:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:27:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:27:12 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-12 15:27:12 -==> Parameters: 2420(String)
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_2420,save content:{referer_id=2289, parent_chain=181,1947,2289, user_tel=13501590237, id_card=441481198412271157, real_name=刘烨臻, algebra=4, cre_date=20200109, cre_time=183125, login_password=7108a8fd63be4e72f8432312730ded2c, manager_id=26, pay_password=c80224df746fc2429059c8245080e127, id=2420, auth_status=09, status=0}
2020-03-12 15:27:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:27:12 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:27:12 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-12 15:27:12 -==> Parameters: 2420(String), applyRateFlag(String), 0(Integer), 0(Integer), 26(String)
2020-03-12 15:27:12 -<==    Updates: 1
2020-03-12 15:27:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:27:12 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:27:12 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-12 15:27:12 -==> Parameters: 2420(String), recallFlag(String), 0(Integer), 0(Integer), 26(String)
2020-03-12 15:27:12 -<==    Updates: 1
2020-03-12 15:27:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:27:12 -==> Parameters: 
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:27:12 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-12 15:27:12 -==> Parameters: 2420(String), collegeFlag(String), 0(Integer), 15(Integer), 26(String)
2020-03-12 15:27:12 -<==    Updates: 1
2020-03-12 15:27:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:27:12 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 1
2020-03-12 15:27:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:27:12 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:27:12 -<==      Total: 0
2020-03-12 15:27:12 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-12 15:27:12 -==> Parameters: 2420(String), cardFlag(String), 0(Integer), 0(Integer), 26(String)
2020-03-12 15:27:12 -<==    Updates: 1
2020-03-12 15:27:12 -耗时 : 125
2020-03-12 15:27:14 -此处进行解密+验签+身份验证
2020-03-12 15:27:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:27:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 15:27:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 15:27:14 -==> Parameters: 2420(String)
2020-03-12 15:27:14 -<==      Total: 0
2020-03-12 15:27:14 -耗时 : 51
2020-03-12 15:27:22 -此处进行解密+验签+身份验证
2020-03-12 15:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:27:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:27:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 15:27:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 15:27:22 -==> Parameters: 2420(String)
2020-03-12 15:27:22 -<==      Total: 55
2020-03-12 15:27:22 -耗时 : 19
2020-03-12 15:28:50 -此处进行解密+验签+身份验证
2020-03-12 15:28:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:28:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:28:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 15:28:50 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 15:28:50 -==> Parameters: 2420(String)
2020-03-12 15:28:50 -<==      Total: 55
2020-03-12 15:28:50 -耗时 : 18
2020-03-12 15:31:00 -此处进行解密+验签+身份验证
2020-03-12 15:31:00 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 15:31:00 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 15:31:00 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 15:31:00 -耗时 : 11
2020-03-12 15:31:14 -此处进行解密+验签+身份验证
2020-03-12 15:31:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-12 15:31:14 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-12 15:31:14 -==> Parameters: 2420(String), MPOS(String)
2020-03-12 15:31:14 -<==      Total: 0
2020-03-12 15:31:14 -耗时 : 16
2020-03-12 15:31:16 -此处进行解密+验签+身份验证
2020-03-12 15:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-12 15:31:16 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-12 15:31:16 -==> Parameters: 2420(String), TraditionalPOS(String)
2020-03-12 15:31:16 -<==      Total: 0
2020-03-12 15:31:16 -耗时 : 16
2020-03-12 15:31:20 -此处进行解密+验签+身份验证
2020-03-12 15:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 15:31:20 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 15:31:20 -==> Parameters: 2420(String)
2020-03-12 15:31:20 -<==      Total: 55
2020-03-12 15:31:20 -耗时 : 19
2020-03-12 15:31:22 -此处进行解密+验签+身份验证
2020-03-12 15:31:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:31:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:31:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 15:31:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:22 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:22 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 15:31:22 -<==    Updates: 1
2020-03-12 15:31:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:31:22 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:22 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 15:31:22 -<==    Updates: 1
2020-03-12 15:31:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:31:22 -==> Parameters: 
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:22 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:22 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 15:31:22 -<==    Updates: 1
2020-03-12 15:31:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:22 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:22 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:31:22 -<==      Total: 1
2020-03-12 15:31:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 15:31:22 -<==    Updates: 1
2020-03-12 15:31:22 -耗时 : 112
2020-03-12 15:31:24 -此处进行解密+验签+身份验证
2020-03-12 15:31:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-12 15:31:24 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-12 15:31:24 -==> Parameters: 1(String), 2420(String), applyRateFlag(String)
2020-03-12 15:31:24 -<==    Updates: 1
2020-03-12 15:31:24 -耗时 : 16
2020-03-12 15:31:25 -此处进行解密+验签+身份验证
2020-03-12 15:31:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:31:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:31:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 15:31:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:25 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:25 -<==      Total: 1
2020-03-12 15:31:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:25 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:31:25 -<==      Total: 1
2020-03-12 15:31:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:25 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 15:31:25 -<==    Updates: 1
2020-03-12 15:31:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:31:25 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:25 -<==      Total: 1
2020-03-12 15:31:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:25 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:31:25 -<==      Total: 1
2020-03-12 15:31:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:25 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 15:31:25 -<==    Updates: 1
2020-03-12 15:31:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:31:25 -==> Parameters: 
2020-03-12 15:31:25 -<==      Total: 1
2020-03-12 15:31:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:25 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:31:25 -<==      Total: 1
2020-03-12 15:31:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:25 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 15:31:26 -<==    Updates: 1
2020-03-12 15:31:26 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:26 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:26 -<==      Total: 1
2020-03-12 15:31:26 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:26 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:31:26 -<==      Total: 1
2020-03-12 15:31:26 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:26 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 15:31:26 -<==    Updates: 1
2020-03-12 15:31:26 -耗时 : 121
2020-03-12 15:31:27 -此处进行解密+验签+身份验证
2020-03-12 15:31:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-12 15:31:27 -此处进行解密+验签+身份验证
2020-03-12 15:31:27 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-12 15:31:27 -==> Parameters: 1(String), 2420(String), collegeFlag(String)
2020-03-12 15:31:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:27 -请求地址 : http://192.168.191.1:8080/api/sys/moneylockercollege/getMoneyLockerCollegeList
2020-03-12 15:31:27 -<==    Updates: 1
2020-03-12 15:31:27 -耗时 : 13
2020-03-12 15:31:27 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,cacheKey:zfpay_sys_money_locker_college_list_0
2020-03-12 15:31:27 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,has cacheKey:zfpay_sys_money_locker_college_list_0 , return
2020-03-12 15:31:27 -耗时 : 11
2020-03-12 15:31:29 -此处进行解密+验签+身份验证
2020-03-12 15:31:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:31:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:31:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 15:31:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:29 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:29 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:29 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 15:31:29 -<==    Updates: 1
2020-03-12 15:31:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:31:29 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:29 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:29 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 15:31:29 -<==    Updates: 1
2020-03-12 15:31:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:31:29 -==> Parameters: 
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:29 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:29 -==> Parameters: 0(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 15:31:29 -<==    Updates: 1
2020-03-12 15:31:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:29 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:29 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:31:29 -<==      Total: 1
2020-03-12 15:31:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:29 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 15:31:29 -<==    Updates: 1
2020-03-12 15:31:29 -耗时 : 212
2020-03-12 15:31:47 -此处进行解密+验签+身份验证
2020-03-12 15:31:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 15:31:47 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 15:31:47 -==> Parameters: 2420(String)
2020-03-12 15:31:47 -<==      Total: 0
2020-03-12 15:31:47 -耗时 : 44
2020-03-12 15:31:48 -此处进行解密+验签+身份验证
2020-03-12 15:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 15:31:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:48 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:48 -<==      Total: 1
2020-03-12 15:31:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:48 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:31:48 -<==      Total: 1
2020-03-12 15:31:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:49 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 15:31:49 -<==    Updates: 1
2020-03-12 15:31:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:31:49 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:49 -<==      Total: 1
2020-03-12 15:31:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:49 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:31:49 -<==      Total: 1
2020-03-12 15:31:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:49 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 15:31:49 -<==    Updates: 1
2020-03-12 15:31:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:31:49 -==> Parameters: 
2020-03-12 15:31:49 -<==      Total: 1
2020-03-12 15:31:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:49 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:31:49 -<==      Total: 1
2020-03-12 15:31:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:49 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 15:31:49 -<==    Updates: 1
2020-03-12 15:31:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:49 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:49 -<==      Total: 1
2020-03-12 15:31:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:49 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:31:49 -<==      Total: 1
2020-03-12 15:31:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:49 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 15:31:49 -<==    Updates: 1
2020-03-12 15:31:49 -耗时 : 106
2020-03-12 15:31:51 -此处进行解密+验签+身份验证
2020-03-12 15:31:51 -此处进行解密+验签+身份验证
2020-03-12 15:31:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-12 15:31:51 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-12 15:31:51 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-12 15:31:51 -==> Parameters: 2420(String)
2020-03-12 15:31:51 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null 
2020-03-12 15:31:51 -==> Parameters: 202003(String), 2420(String)
2020-03-12 15:31:51 -<==      Total: 1
2020-03-12 15:31:51 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-12 15:31:51 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:51 -<==      Total: 2
2020-03-12 15:31:51 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy122.getHomePageInfoByTraditionalPos(Unknown Source)
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:45)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor95.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$64f1881f.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 15:31:51 -耗时 : 26
2020-03-12 15:31:51 -<==      Total: 1
2020-03-12 15:31:51 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-12 15:31:51 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:51 -<==      Total: 1
2020-03-12 15:31:51 -耗时 : 92
2020-03-12 15:31:52 -此处进行解密+验签+身份验证
2020-03-12 15:31:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:31:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:31:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:31:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:31:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 15:31:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:52 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:52 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:52 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 15:31:52 -<==    Updates: 1
2020-03-12 15:31:52 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:31:52 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:52 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:52 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 15:31:52 -<==    Updates: 1
2020-03-12 15:31:52 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:31:52 -==> Parameters: 
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:52 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:52 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 15:31:52 -<==    Updates: 1
2020-03-12 15:31:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:31:52 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:31:52 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:31:52 -<==      Total: 1
2020-03-12 15:31:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:31:52 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 15:31:52 -<==    Updates: 1
2020-03-12 15:31:52 -耗时 : 107
2020-03-12 15:35:20 -此处进行解密+验签+身份验证
2020-03-12 15:35:20 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 15:35:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 15:35:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 15:35:20 -耗时 : 8
2020-03-12 15:35:22 -此处进行解密+验签+身份验证
2020-03-12 15:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:35:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 15:35:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 15:35:22 -==> Parameters: 2420(String)
2020-03-12 15:35:22 -<==      Total: 0
2020-03-12 15:35:22 -耗时 : 32
2020-03-12 15:35:25 -此处进行解密+验签+身份验证
2020-03-12 15:35:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:35:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:35:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 15:35:25 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 15:35:25 -==> Parameters: 2420(String)
2020-03-12 15:35:25 -<==      Total: 55
2020-03-12 15:35:25 -耗时 : 28
2020-03-12 15:35:31 -此处进行解密+验签+身份验证
2020-03-12 15:35:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 15:35:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 15:35:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 15:35:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 15:35:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 15:35:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:35:31 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:35:31 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:35:31 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 15:35:31 -<==    Updates: 1
2020-03-12 15:35:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 15:35:31 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:35:31 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:35:31 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 15:35:31 -<==    Updates: 1
2020-03-12 15:35:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 15:35:31 -==> Parameters: 
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:35:31 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:35:31 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 15:35:31 -<==    Updates: 1
2020-03-12 15:35:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 15:35:31 -==> Parameters: 2420(String), 2420(String)
2020-03-12 15:35:31 -<==      Total: 1
2020-03-12 15:35:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 15:35:31 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 15:35:32 -<==      Total: 1
2020-03-12 15:35:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 15:35:32 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 15:35:32 -<==    Updates: 1
2020-03-12 15:35:32 -耗时 : 206
2020-03-12 16:33:24 -Starting LongEcologicalApplication on PC-201905161910 with PID 8352 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-12 16:33:24 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-12 16:33:24 -No active profile set, falling back to default profiles: default
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:24 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:33:25 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 16:33:25 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 16:33:25 -Finished Spring Data repository scanning in 100ms. Found 0 repository interfaces.
2020-03-12 16:33:25 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 16:33:25 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 16:33:25 -Finished Spring Data repository scanning in 57ms. Found 0 repository interfaces.
2020-03-12 16:33:25 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c3b567c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 16:33:25 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$be394c68] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 16:33:26 -Tomcat initialized with port(s): 8080 (http)
2020-03-12 16:33:26 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-12 16:33:26 -Starting service [Tomcat]
2020-03-12 16:33:26 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-12 16:33:26 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-12 16:33:26 -Initializing Spring embedded WebApplicationContext
2020-03-12 16:33:26 -Root WebApplicationContext: initialization completed in 2439 ms
2020-03-12 16:33:26 -Filter xssFilter was not registered (disabled)
2020-03-12 16:33:27 -HikariPool-1 - Starting...
2020-03-12 16:33:27 -HikariPool-1 - Start completed.
2020-03-12 16:33:27 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-12 16:33:27 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-12 16:33:27 -HHH000206: hibernate.properties not found
2020-03-12 16:33:27 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-12 16:33:27 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-12 16:33:27 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 16:33:28 -Using default implementation for ThreadExecutor
2020-03-12 16:33:28 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-12 16:33:28 -Quartz Scheduler v.2.3.0 created.
2020-03-12 16:33:28 -RAMJobStore initialized.
2020-03-12 16:33:28 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-12 16:33:28 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-12 16:33:28 -Quartz scheduler version: 2.3.0
2020-03-12 16:33:28 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6615237
2020-03-12 16:33:28 -STAET TaskExecutorConfig
2020-03-12 16:33:28 -Initializing ExecutorService
2020-03-12 16:33:28 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-12 16:33:29 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-12 16:33:29 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-12 16:33:29 -Initializing ExecutorService 'taskScheduler'
2020-03-12 16:33:29 -Starting Quartz Scheduler now
2020-03-12 16:33:29 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-12 16:33:29 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-12 16:33:29 -Using a shared selector for servlet write/read
2020-03-12 16:33:29 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-12 16:33:29 -Started LongEcologicalApplication in 6.254 seconds (JVM running for 7.316)
2020-03-12 16:33:54 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-12 16:33:54 -Initializing Servlet 'dispatcherServlet'
2020-03-12 16:33:54 -Completed initialization in 12 ms
2020-03-12 16:33:54 -此处进行解密+验签+身份验证
2020-03-12 16:33:54 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 16:33:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 16:33:55 -Starting without optional epoll library
2020-03-12 16:33:55 -Starting without optional kqueue library
2020-03-12 16:33:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 16:33:55 -耗时 : 765
2020-03-12 16:34:15 -此处进行解密+验签+身份验证
2020-03-12 16:34:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 16:34:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 16:34:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 16:34:15 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 16:34:15 -==> Parameters: 2420(String)
2020-03-12 16:34:15 -<==      Total: 0
2020-03-12 16:34:15 -耗时 : 91
2020-03-12 16:34:28 -此处进行解密+验签+身份验证
2020-03-12 16:34:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 16:34:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 16:34:28 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 16:34:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 16:34:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 16:34:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 16:34:28 -==> Parameters: 2420(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:28 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:28 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 16:34:28 -<==    Updates: 1
2020-03-12 16:34:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 16:34:28 -==> Parameters: 2420(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:28 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:28 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 16:34:28 -<==    Updates: 1
2020-03-12 16:34:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 16:34:28 -==> Parameters: 
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:28 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:28 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 16:34:28 -<==    Updates: 1
2020-03-12 16:34:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 16:34:28 -==> Parameters: 2420(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:28 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 16:34:28 -<==      Total: 1
2020-03-12 16:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:28 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 16:34:29 -<==    Updates: 1
2020-03-12 16:34:29 -耗时 : 161
2020-03-12 16:34:29 -此处进行解密+验签+身份验证
2020-03-12 16:34:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 16:34:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 16:34:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-12 16:34:30 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-12 16:34:30 -==> Parameters: 2420(String)
2020-03-12 16:34:30 -<==      Total: 1
2020-03-12 16:34:30 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-12 16:34:30 -==> Parameters: 2420(String), 2420(String)
2020-03-12 16:34:30 -<==      Total: 1
2020-03-12 16:34:30 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-12 16:34:30 -==> Parameters: 2420(String), 2420(String)
2020-03-12 16:34:30 -<==      Total: 1
2020-03-12 16:34:30 -耗时 : 91
2020-03-12 16:34:34 -此处进行解密+验签+身份验证
2020-03-12 16:34:34 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-12 16:34:34 -token值=======2420|8J8A4VM6IWUR4IKL7LXYANTHF5X2Q1ZX
2020-03-12 16:34:34 -耗时 : 43
2020-03-12 16:34:55 -此处进行解密+验签+身份验证
2020-03-12 16:34:55 -解密：{
  "sign" : "3C763DB1474E94801FE0CDB66F8F3AA2",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "2420|8J8A4VM6IWUR4IKL7LXYANTHF5X2Q1ZX",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 16:34:55 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 16:34:55 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 16:34:55 -==> Parameters: 13322990711(String)
2020-03-12 16:34:55 -<==      Total: 1
2020-03-12 16:34:55 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 16:34:55 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 163455(String), 181(Integer)
2020-03-12 16:34:55 -<==    Updates: 1
2020-03-12 16:34:55 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 16:34:55 -==> Parameters: 26(String)
2020-03-12 16:34:55 -<==      Total: 1
2020-03-12 16:34:55 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 16:34:55 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 16:34:55 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 16:34:55 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 16:34:55 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 16:34:55 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 16:34:55 -耗时 : 99
2020-03-12 16:34:56 -此处进行解密+验签+身份验证
2020-03-12 16:34:56 -此处进行解密+验签+身份验证
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:34:56 -此处进行解密+验签+身份验证
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:34:56 -此处进行解密+验签+身份验证
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 16:34:56 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 16:34:56 -==> Parameters: 181(String)
2020-03-12 16:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 16:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 16:34:56 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 16:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 16:34:56 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 16:34:56 -<==      Total: 2
2020-03-12 16:34:56 -耗时 : 11
2020-03-12 16:34:56 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 16:34:56 -==> Parameters: 
2020-03-12 16:34:56 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 16:34:56 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 16:34:56 -此处进行解密+验签+身份验证
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:34:56 -<==      Total: 3
2020-03-12 16:34:56 -耗时 : 16
2020-03-12 16:34:56 -耗时 : 18
2020-03-12 16:34:56 -耗时 : 16
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 16:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 16:34:56 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 16:34:56 -==> Parameters: 181(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:56 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:56 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 16:34:56 -<==    Updates: 1
2020-03-12 16:34:56 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 16:34:56 -==> Parameters: 181(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:56 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:56 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 16:34:56 -<==    Updates: 1
2020-03-12 16:34:56 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 16:34:56 -==> Parameters: 
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:56 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:56 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 16:34:56 -<==    Updates: 1
2020-03-12 16:34:56 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 16:34:56 -==> Parameters: 181(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:34:56 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 16:34:56 -<==      Total: 1
2020-03-12 16:34:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:34:56 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 16:34:56 -<==    Updates: 1
2020-03-12 16:34:56 -耗时 : 157
2020-03-12 16:35:01 -此处进行解密+验签+身份验证
2020-03-12 16:35:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:35:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:35:01 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-12 16:35:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-12 16:35:01 -==> Parameters: 181(String)
2020-03-12 16:35:01 -<==      Total: 1
2020-03-12 16:35:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-12 16:35:01 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-12 16:35:01 -<==      Total: 1
2020-03-12 16:35:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-12 16:35:01 -==> Parameters: 181(String), 181(String), 20200211(String), 20200312(String), 181(String)
2020-03-12 16:35:01 -<==      Total: 1
2020-03-12 16:35:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-12 16:35:01 -==> Parameters: 181(String), 20200112(String), 181(String), 20200112(String), 20200312(String), 181(String)
2020-03-12 16:35:01 -<==      Total: 1
2020-03-12 16:35:01 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-12 16:35:01 -==> Parameters: 181(String)
2020-03-12 16:35:01 -<==      Total: 1
2020-03-12 16:35:01 -耗时 : 113
2020-03-12 16:35:02 -此处进行解密+验签+身份验证
2020-03-12 16:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:35:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-12 16:35:02 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 16:35:02 -==> Parameters: 181(String)
2020-03-12 16:35:02 -<==      Total: 10
2020-03-12 16:35:02 -耗时 : 17
2020-03-12 16:35:04 -此处进行解密+验签+身份验证
2020-03-12 16:35:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:35:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:35:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-12 16:35:05 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-12 16:35:05 -==> Parameters: 181(String), E20200308300(String)
2020-03-12 16:35:05 -<==      Total: 1
2020-03-12 16:35:05 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-12 16:35:05 -==> Parameters: E20200308300(String)
2020-03-12 16:35:05 -<==      Total: 0
2020-03-12 16:35:05 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-12 16:35:05 -==> Parameters: E20200308300(String)
2020-03-12 16:35:05 -<==      Total: 1
2020-03-12 16:35:05 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-12 16:35:05 -==> Parameters: E20200308300(String), 181(String)
2020-03-12 16:35:05 -<==      Total: 1
2020-03-12 16:35:05 -耗时 : 48
2020-03-12 16:37:20 -此处进行解密+验签+身份验证
2020-03-12 16:37:20 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 16:37:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 16:37:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 16:37:20 -耗时 : 9
2020-03-12 16:50:09 -Starting LongEcologicalApplication on PC-201905161910 with PID 3284 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-12 16:50:09 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-12 16:50:09 -No active profile set, falling back to default profiles: default
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-12 16:50:10 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 16:50:10 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 16:50:10 -Finished Spring Data repository scanning in 81ms. Found 0 repository interfaces.
2020-03-12 16:50:10 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-12 16:50:10 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-12 16:50:10 -Finished Spring Data repository scanning in 58ms. Found 0 repository interfaces.
2020-03-12 16:50:11 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$57ee8b5c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 16:50:11 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$52726ffc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-12 16:50:11 -Tomcat initialized with port(s): 8080 (http)
2020-03-12 16:50:11 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-12 16:50:11 -Starting service [Tomcat]
2020-03-12 16:50:11 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-12 16:50:11 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-12 16:50:11 -Initializing Spring embedded WebApplicationContext
2020-03-12 16:50:11 -Root WebApplicationContext: initialization completed in 2811 ms
2020-03-12 16:50:12 -Filter xssFilter was not registered (disabled)
2020-03-12 16:50:12 -HikariPool-1 - Starting...
2020-03-12 16:50:12 -HikariPool-1 - Start completed.
2020-03-12 16:50:12 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-12 16:50:12 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-12 16:50:12 -HHH000206: hibernate.properties not found
2020-03-12 16:50:13 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-12 16:50:13 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-12 16:50:13 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 16:50:13 -Using default implementation for ThreadExecutor
2020-03-12 16:50:13 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-12 16:50:13 -Quartz Scheduler v.2.3.0 created.
2020-03-12 16:50:13 -RAMJobStore initialized.
2020-03-12 16:50:13 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-12 16:50:13 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-12 16:50:13 -Quartz scheduler version: 2.3.0
2020-03-12 16:50:13 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@61b0af9f
2020-03-12 16:50:14 -STAET TaskExecutorConfig
2020-03-12 16:50:14 -Initializing ExecutorService
2020-03-12 16:50:14 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-12 16:50:14 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-12 16:50:14 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-12 16:50:15 -Initializing ExecutorService 'taskScheduler'
2020-03-12 16:50:15 -Starting Quartz Scheduler now
2020-03-12 16:50:15 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-12 16:50:15 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-12 16:50:15 -Using a shared selector for servlet write/read
2020-03-12 16:50:15 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-12 16:50:15 -Started LongEcologicalApplication in 7.5 seconds (JVM running for 9.408)
2020-03-12 16:50:55 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-12 16:50:55 -Initializing Servlet 'dispatcherServlet'
2020-03-12 16:50:56 -Completed initialization in 11 ms
2020-03-12 16:50:56 -此处进行解密+验签+身份验证
2020-03-12 16:50:56 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 16:50:56 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 16:50:56 -Starting without optional epoll library
2020-03-12 16:50:56 -Starting without optional kqueue library
2020-03-12 16:50:56 -此处进行解密+验签+身份验证
2020-03-12 16:50:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:50:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:50:56 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 16:50:56 -耗时 : 834
2020-03-12 16:50:56 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 16:50:56 -耗时 : 3
2020-03-12 16:50:57 -此处进行解密+验签+身份验证
2020-03-12 16:50:57 -此处进行解密+验签+身份验证
2020-03-12 16:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:50:57 -此处进行解密+验签+身份验证
2020-03-12 16:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:50:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:50:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-12 16:50:57 -耗时 : 2
2020-03-12 16:50:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-12 16:50:57 -耗时 : 0
2020-03-12 16:50:57 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-12 16:50:57 -耗时 : 0
2020-03-12 16:51:13 -此处进行解密+验签+身份验证
2020-03-12 16:51:13 -解密：{
  "sign" : "4314DC333CE501C7CA6174816156130F",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|KUK7PCMXIDRZHBVI7V7QYYQNSZ7FVD3J",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 16:51:13 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 16:51:13 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 16:51:13 -==> Parameters: 13322990711(String)
2020-03-12 16:51:13 -<==      Total: 1
2020-03-12 16:51:13 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 16:51:13 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 165113(String), 181(Integer)
2020-03-12 16:51:13 -<==    Updates: 1
2020-03-12 16:51:13 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 16:51:13 -==> Parameters: 26(String)
2020-03-12 16:51:13 -<==      Total: 1
2020-03-12 16:51:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 16:51:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 16:51:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 16:51:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 16:51:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 16:51:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 16:51:13 -耗时 : 164
2020-03-12 16:51:14 -此处进行解密+验签+身份验证
2020-03-12 16:51:14 -此处进行解密+验签+身份验证
2020-03-12 16:51:14 -此处进行解密+验签+身份验证
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:14 -此处进行解密+验签+身份验证
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 16:51:14 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 16:51:14 -==> Parameters: 181(String)
2020-03-12 16:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 16:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 16:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 16:51:14 -<==      Total: 2
2020-03-12 16:51:14 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 16:51:14 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 16:51:14 -耗时 : 9
2020-03-12 16:51:14 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 16:51:14 -==> Parameters: 
2020-03-12 16:51:14 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 16:51:14 -此处进行解密+验签+身份验证
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:14 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 16:51:14 -<==      Total: 3
2020-03-12 16:51:14 -耗时 : 23
2020-03-12 16:51:14 -耗时 : 25
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:14 -耗时 : 31
2020-03-12 16:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 16:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 16:51:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 16:51:14 -==> Parameters: 181(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:51:14 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:51:14 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 16:51:14 -<==    Updates: 1
2020-03-12 16:51:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 16:51:14 -==> Parameters: 181(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:51:14 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:51:14 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 16:51:14 -<==    Updates: 1
2020-03-12 16:51:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 16:51:14 -==> Parameters: 
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:51:14 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:51:14 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 16:51:14 -<==    Updates: 1
2020-03-12 16:51:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 16:51:14 -==> Parameters: 181(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 16:51:14 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 16:51:14 -<==      Total: 1
2020-03-12 16:51:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 16:51:14 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 16:51:14 -<==    Updates: 1
2020-03-12 16:51:14 -耗时 : 116
2020-03-12 16:51:17 -此处进行解密+验签+身份验证
2020-03-12 16:51:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-12 16:51:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-12 16:51:17 -==> Parameters: 181(String)
2020-03-12 16:51:17 -<==      Total: 1
2020-03-12 16:51:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-12 16:51:17 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-12 16:51:17 -<==      Total: 1
2020-03-12 16:51:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-12 16:51:17 -==> Parameters: 181(String), 181(String), 20200211(String), 20200312(String), 181(String)
2020-03-12 16:51:17 -<==      Total: 1
2020-03-12 16:51:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-12 16:51:17 -==> Parameters: 181(String), 20200112(String), 181(String), 20200112(String), 20200312(String), 181(String)
2020-03-12 16:51:17 -<==      Total: 1
2020-03-12 16:51:17 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-12 16:51:17 -==> Parameters: 181(String)
2020-03-12 16:51:17 -<==      Total: 1
2020-03-12 16:51:17 -耗时 : 61
2020-03-12 16:51:18 -此处进行解密+验签+身份验证
2020-03-12 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-12 16:51:18 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 16:51:18 -==> Parameters: 181(String)
2020-03-12 16:51:18 -<==      Total: 10
2020-03-12 16:51:18 -耗时 : 11
2020-03-12 16:51:21 -此处进行解密+验签+身份验证
2020-03-12 16:51:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:21 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-12 16:51:21 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-12 16:51:21 -==> Parameters: 181(String), 7579(String)
2020-03-12 16:51:21 -<==      Total: 10
2020-03-12 16:51:21 -耗时 : 11
2020-03-12 16:51:22 -此处进行解密+验签+身份验证
2020-03-12 16:51:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-12 16:51:22 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' AND t.id < ? ORDER BY t.id desc limit 0,10 
2020-03-12 16:51:22 -==> Parameters: 181(String), 7341(String)
2020-03-12 16:51:22 -<==      Total: 10
2020-03-12 16:51:22 -耗时 : 12
2020-03-12 16:51:25 -此处进行解密+验签+身份验证
2020-03-12 16:51:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 16:51:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 16:51:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-12 16:51:25 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-12 16:51:25 -==> Parameters: 181(String), T20191221084(String)
2020-03-12 16:51:25 -<==      Total: 1
2020-03-12 16:51:25 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-12 16:51:25 -==> Parameters: T20191221084(String)
2020-03-12 16:51:25 -<==      Total: 0
2020-03-12 16:51:25 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-12 16:51:25 -==> Parameters: T20191221084(String)
2020-03-12 16:51:25 -<==      Total: 1
2020-03-12 16:51:25 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-12 16:51:25 -==> Parameters: T20191221084(String), 181(String)
2020-03-12 16:51:25 -<==      Total: 1
2020-03-12 16:51:25 -耗时 : 33
2020-03-12 17:17:20 -此处进行解密+验签+身份验证
2020-03-12 17:17:20 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 17:17:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 17:17:20 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$16b20b28.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$7e9ed11f.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 17:17:20 -耗时 : 13
2020-03-12 17:17:20 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 17:17:20 -Reconnected to 120.25.164.176:10379
2020-03-12 17:17:30 -此处进行解密+验签+身份验证
2020-03-12 17:17:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-12 17:17:30 -耗时 : 0
2020-03-12 17:17:35 -此处进行解密+验签+身份验证
2020-03-12 17:17:35 -解密：{
  "sign" : "2BC3D509DF5C3503E8E652421248C25F",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|EIX0RQSUYVM5TW02BWSYTWV79AVFJ0A6",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 17:17:35 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2c11782d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@62ec231 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@21d912c9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@117bb598 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@48da5aab (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@381526cb (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5133245a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1d289c91 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7bd929d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@168fdfdf (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 17:17:35 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 17:17:35 -==> Parameters: 13322990711(String)
2020-03-12 17:17:35 -<==      Total: 1
2020-03-12 17:17:35 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 17:17:35 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 171735(String), 181(Integer)
2020-03-12 17:17:35 -<==    Updates: 1
2020-03-12 17:17:35 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 17:17:35 -==> Parameters: 26(String)
2020-03-12 17:17:35 -<==      Total: 1
2020-03-12 17:17:35 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 17:17:35 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 17:17:35 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 17:17:35 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 17:17:35 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 17:17:35 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 17:17:35 -耗时 : 158
2020-03-12 17:17:35 -此处进行解密+验签+身份验证
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:35 -此处进行解密+验签+身份验证
2020-03-12 17:17:35 -此处进行解密+验签+身份验证
2020-03-12 17:17:35 -此处进行解密+验签+身份验证
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 17:17:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 17:17:35 -==> Parameters: 181(String)
2020-03-12 17:17:35 -<==      Total: 2
2020-03-12 17:17:35 -耗时 : 6
2020-03-12 17:17:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 17:17:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 17:17:35 -==> Parameters: 
2020-03-12 17:17:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 17:17:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 17:17:35 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 17:17:35 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 17:17:35 -<==      Total: 3
2020-03-12 17:17:35 -耗时 : 7
2020-03-12 17:17:35 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 17:17:35 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 17:17:35 -耗时 : 12
2020-03-12 17:17:35 -耗时 : 15
2020-03-12 17:17:39 -此处进行解密+验签+身份验证
2020-03-12 17:17:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 17:17:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 17:17:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 17:17:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 17:17:39 -==> Parameters: 181(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:39 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:39 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 17:17:39 -<==    Updates: 1
2020-03-12 17:17:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 17:17:39 -==> Parameters: 181(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:39 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:39 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 17:17:39 -<==    Updates: 1
2020-03-12 17:17:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 17:17:39 -==> Parameters: 
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:39 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:39 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 17:17:39 -<==    Updates: 1
2020-03-12 17:17:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 17:17:39 -==> Parameters: 181(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:39 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 17:17:39 -<==      Total: 1
2020-03-12 17:17:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:39 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 17:17:39 -<==    Updates: 1
2020-03-12 17:17:39 -耗时 : 101
2020-03-12 17:17:46 -此处进行解密+验签+身份验证
2020-03-12 17:17:46 -此处进行解密+验签+身份验证
2020-03-12 17:17:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:46 -此处进行解密+验签+身份验证
2020-03-12 17:17:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:46 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-12 17:17:47 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-12 17:17:47 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-12 17:17:47 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-12 17:17:47 -==> Parameters: 181(String), 202003(String)
2020-03-12 17:17:47 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-12 17:17:47 -==> Parameters: 181(String)
2020-03-12 17:17:47 -<==      Total: 1
2020-03-12 17:17:47 -耗时 : 10
2020-03-12 17:17:47 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-12 17:17:47 -==> Parameters: 181(String), 202003(String)
2020-03-12 17:17:47 -<==      Total: 1
2020-03-12 17:17:47 -耗时 : 14
2020-03-12 17:17:47 -<==      Total: 1
2020-03-12 17:17:47 -耗时 : 21
2020-03-12 17:17:50 -此处进行解密+验签+身份验证
2020-03-12 17:17:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 17:17:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 17:17:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 17:17:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 17:17:50 -==> Parameters: 181(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:50 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 17:17:50 -<==    Updates: 1
2020-03-12 17:17:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 17:17:50 -==> Parameters: 181(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:50 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:50 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 17:17:50 -<==    Updates: 1
2020-03-12 17:17:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 17:17:50 -==> Parameters: 
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:50 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:50 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 17:17:50 -<==    Updates: 1
2020-03-12 17:17:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 17:17:50 -==> Parameters: 181(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 17:17:50 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 17:17:50 -<==      Total: 1
2020-03-12 17:17:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 17:17:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 17:17:50 -<==    Updates: 1
2020-03-12 17:17:50 -耗时 : 102
2020-03-12 17:17:55 -此处进行解密+验签+身份验证
2020-03-12 17:17:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:17:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:17:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-12 17:17:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-12 17:17:55 -==> Parameters: 181(String)
2020-03-12 17:17:55 -<==      Total: 1
2020-03-12 17:17:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-12 17:17:55 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-12 17:17:55 -<==      Total: 1
2020-03-12 17:17:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-12 17:17:55 -==> Parameters: 181(String), 181(String), 20200211(String), 20200312(String), 181(String)
2020-03-12 17:17:55 -<==      Total: 1
2020-03-12 17:17:55 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-12 17:17:55 -==> Parameters: 181(String), 20200112(String), 181(String), 20200112(String), 20200312(String), 181(String)
2020-03-12 17:17:55 -<==      Total: 1
2020-03-12 17:17:55 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-12 17:17:55 -==> Parameters: 181(String)
2020-03-12 17:17:56 -<==      Total: 1
2020-03-12 17:17:56 -耗时 : 36
2020-03-12 17:20:56 -此处进行解密+验签+身份验证
2020-03-12 17:20:56 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 17:20:56 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 17:20:56 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 17:20:56 -耗时 : 81
2020-03-12 17:20:59 -此处进行解密+验签+身份验证
2020-03-12 17:20:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 17:20:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 17:20:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-03-12 17:20:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 17:20:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 17:20:59 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-03-12 17:20:59 -==> Parameters: 181(String), 01(String)
2020-03-12 17:20:59 -<==      Total: 1
2020-03-12 17:20:59 -==>  Preparing: select * from t_sys_pos_policy_define where policy_type=3 and manager_id=? and id in(select policy_id from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1) order by policy_quantity asc 
2020-03-12 17:20:59 -==> Parameters: 26(String), 000006027280394590(String)
2020-03-12 17:20:59 -<==      Total: 0
2020-03-12 17:20:59 -耗时 : 49
2020-03-12 18:22:52 -此处进行解密+验签+身份验证
2020-03-12 18:22:52 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:22:52 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 18:22:52 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$16b20b28.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$7e9ed11f.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 18:22:52 -耗时 : 21
2020-03-12 18:22:52 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 18:22:52 -Reconnected to 120.25.164.176:10379
2020-03-12 18:23:15 -此处进行解密+验签+身份验证
2020-03-12 18:23:15 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:23:15 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 18:23:15 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 18:23:15 -耗时 : 16
2020-03-12 18:23:18 -此处进行解密+验签+身份验证
2020-03-12 18:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:23:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:23:18 -耗时 : 1
2020-03-12 18:23:19 -此处进行解密+验签+身份验证
2020-03-12 18:23:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:23:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:23:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-12 18:23:19 -耗时 : 11
2020-03-12 18:23:49 -此处进行解密+验签+身份验证
2020-03-12 18:23:49 -解密：{
  "sign" : "FDA8411EFDB5B2EE2EC988484A6F6DCD",
  "login_type" : "account",
  "sys_user_account" : "13501590237",
  "device_no" : "iOS11.4.1",
  "login_password" : "E19D5CD5AF0378DA05F63F891C7467AF",
  "token" : "181|B1I3WI4NOED2VBNQD8IPG5344NJJD7FF",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 18:23:49 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 18:23:49 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 18:23:49 -==> Parameters: 13501590237(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 18:23:49 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 182349(String), 2420(Integer)
2020-03-12 18:23:49 -<==    Updates: 1
2020-03-12 18:23:49 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 18:23:49 -==> Parameters: 26(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 18:23:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 18:23:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 18:23:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 18:23:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 18:23:49 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 18:23:49 -耗时 : 131
2020-03-12 18:23:49 -此处进行解密+验签+身份验证
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:49 -此处进行解密+验签+身份验证
2020-03-12 18:23:49 -此处进行解密+验签+身份验证
2020-03-12 18:23:49 -此处进行解密+验签+身份验证
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 18:23:49 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 18:23:49 -==> Parameters: 2420(String)
2020-03-12 18:23:49 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 18:23:49 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 18:23:49 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 18:23:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 18:23:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 18:23:49 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 18:23:49 -<==      Total: 2
2020-03-12 18:23:49 -==> Parameters: 
2020-03-12 18:23:49 -耗时 : 16
2020-03-12 18:23:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 18:23:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 18:23:49 -此处进行解密+验签+身份验证
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:49 -<==      Total: 3
2020-03-12 18:23:49 -耗时 : 24
2020-03-12 18:23:49 -耗时 : 24
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:49 -耗时 : 31
2020-03-12 18:23:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 18:23:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 18:23:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:23:49 -==> Parameters: 2420(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:23:49 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:23:49 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 18:23:49 -<==    Updates: 1
2020-03-12 18:23:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:23:49 -==> Parameters: 2420(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:23:49 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:23:49 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 18:23:49 -<==    Updates: 1
2020-03-12 18:23:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:23:49 -==> Parameters: 
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:23:49 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:23:49 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 18:23:49 -<==    Updates: 1
2020-03-12 18:23:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:23:49 -==> Parameters: 2420(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:23:49 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 18:23:49 -<==      Total: 1
2020-03-12 18:23:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:23:49 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 18:23:49 -<==    Updates: 1
2020-03-12 18:23:49 -耗时 : 207
2020-03-12 18:23:50 -此处进行解密+验签+身份验证
2020-03-12 18:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 18:23:50 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 18:23:50 -==> Parameters: 2420(String)
2020-03-12 18:23:50 -<==      Total: 0
2020-03-12 18:23:50 -耗时 : 44
2020-03-12 18:23:53 -此处进行解密+验签+身份验证
2020-03-12 18:23:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:23:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:23:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 18:23:53 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 18:23:53 -==> Parameters: 2420(String)
2020-03-12 18:23:53 -<==      Total: 55
2020-03-12 18:23:53 -耗时 : 33
2020-03-12 18:25:56 -此处进行解密+验签+身份验证
2020-03-12 18:25:56 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:25:56 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 18:25:56 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 18:25:56 -耗时 : 15
2020-03-12 18:26:01 -此处进行解密+验签+身份验证
2020-03-12 18:26:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:26:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:26:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:26:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 18:26:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 18:26:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:26:01 -==> Parameters: 2420(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:26:01 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:26:01 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 18:26:01 -<==    Updates: 1
2020-03-12 18:26:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:26:01 -==> Parameters: 2420(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:26:01 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:26:01 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 18:26:01 -<==    Updates: 1
2020-03-12 18:26:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:26:01 -==> Parameters: 
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:26:01 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:26:01 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 18:26:01 -<==    Updates: 1
2020-03-12 18:26:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:26:01 -==> Parameters: 2420(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:26:01 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 18:26:01 -<==      Total: 1
2020-03-12 18:26:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:26:01 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 18:26:01 -<==    Updates: 1
2020-03-12 18:26:01 -耗时 : 224
2020-03-12 18:36:38 -此处进行解密+验签+身份验证
2020-03-12 18:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:36:38 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 18:36:38 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 18:36:38 -耗时 : 15
2020-03-12 18:36:54 -此处进行解密+验签+身份验证
2020-03-12 18:36:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 18:36:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 18:36:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@59be80f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@38179f3b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@63670f69 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@39e6589a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5a1648d4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1982c164 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2a511bad (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@34d11cbe (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6eb25d11 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@61342842 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:36:54 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-12 18:36:54 -==> Parameters: 2420(String)
2020-03-12 18:36:54 -<==      Total: 0
2020-03-12 18:36:54 -耗时 : 99
2020-03-12 18:38:12 -此处进行解密+验签+身份验证
2020-03-12 18:38:12 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:38:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 18:38:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 18:38:12 -耗时 : 16
2020-03-12 18:38:18 -此处进行解密+验签+身份验证
2020-03-12 18:38:18 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:38:18 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 18:38:18 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 18:38:18 -耗时 : 16
2020-03-12 18:52:25 -此处进行解密+验签+身份验证
2020-03-12 18:52:25 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 18:52:25 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-12 18:52:25 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 18:52:25 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor75.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$16b20b28.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$7e9ed11f.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 18:52:25 -耗时 : 43
2020-03-12 18:52:25 -Reconnected to 120.25.164.176:10379
2020-03-12 18:52:46 -此处进行解密+验签+身份验证
2020-03-12 18:52:46 -解密：{"sys_user_account":"13322990711","login_password":"33374C88E3A7570C211C203B4795FC24","device_type":"android","device_no":"1.0.9","sign":"837B4BF33C1A470734C9D7DC8E0CFE52","version_no":"450000000145206","login_type":"account"}
2020-03-12 18:52:46 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@502249e8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@61eb73f7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@75f37fb8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@375c15e7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@48955567 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@725be349 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1cbb4c05 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4b1f9158 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@29c3cb31 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4af34eb (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 18:52:46 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 18:52:46 -==> Parameters: 13322990711(String)
2020-03-12 18:52:46 -<==      Total: 1
2020-03-12 18:52:46 -耗时 : 123
2020-03-12 18:52:49 -此处进行解密+验签+身份验证
2020-03-12 18:52:49 -解密：{"sys_user_account":"13322990711","login_password":"A3C1A55839CA36666A1CC7EA5A2B97B1","device_type":"android","device_no":"1.0.9","sign":"CD7DC8A807EC61E089D7BF9935F94A2F","version_no":"450000000145206","login_type":"account"}
2020-03-12 18:52:49 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 18:52:49 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 18:52:49 -==> Parameters: 13322990711(String)
2020-03-12 18:52:49 -<==      Total: 1
2020-03-12 18:52:49 -耗时 : 21
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -解密：{"sys_user_account":"13322990711","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"D8C941101DA33D1D3D1FE861A1D9D6A8","version_no":"450000000145206","login_type":"account"}
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 18:53:08 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 18:53:08 -==> Parameters: 13322990711(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 18:53:08 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200312(String), 185308(String), 181(Integer)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 18:53:08 -==> Parameters: 26(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 18:53:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 18:53:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 18:53:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 18:53:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 18:53:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 18:53:08 -耗时 : 102
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:53:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:53:08 -==> Parameters: 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -耗时 : 14
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 18:53:08 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -此处进行解密+验签+身份验证
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -耗时 : 17
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 18:53:08 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 18:53:08 -==> Parameters: 181(String)
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:53:08 -<==      Total: 2
2020-03-12 18:53:08 -耗时 : 13
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:53:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:53:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:53:08 -==> Parameters: 181(String)
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:53:08 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 18:53:08 -==> Parameters: 
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:53:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:53:08 -<==      Total: 3
2020-03-12 18:53:08 -耗时 : 14
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -耗时 : 12
2020-03-12 18:53:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:53:08 -==> Parameters: 181(String), 181(String)
2020-03-12 18:53:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:53:08 -==> Parameters: 181(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:53:08 -==> Parameters: 181(String), 181(String)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:53:08 -==> Parameters: 181(String), 181(String)
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:53:08 -==> Parameters: 
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:53:08 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:53:08 -==> Parameters: 
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:53:08 -==> Parameters: 181(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -耗时 : 125
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:53:08 -==> Parameters: 181(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:53:08 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:53:08 -<==      Total: 1
2020-03-12 18:53:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:53:08 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:53:08 -<==    Updates: 1
2020-03-12 18:53:08 -耗时 : 178
2020-03-12 18:55:22 -此处进行解密+验签+身份验证
2020-03-12 18:55:22 -此处进行解密+验签+身份验证
2020-03-12 18:55:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-12 18:55:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-12 18:55:22 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-12 18:55:22 -==> Parameters: 181(String)
2020-03-12 18:55:22 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-12 18:55:22 -==> Parameters: 181(String)
2020-03-12 18:55:22 -<==      Total: 10
2020-03-12 18:55:22 -耗时 : 15
2020-03-12 18:55:22 -<==      Total: 1
2020-03-12 18:55:22 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:55:22 -==> Parameters: 181(String)
2020-03-12 18:55:22 -<==      Total: 1
2020-03-12 18:55:22 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-12 18:55:22 -==> Parameters: 181(String)
2020-03-12 18:55:22 -<==      Total: 1
2020-03-12 18:55:22 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-12 18:55:22 -==> Parameters: 181(String)
2020-03-12 18:55:22 -<==      Total: 0
2020-03-12 18:55:22 -耗时 : 59
2020-03-12 18:55:24 -此处进行解密+验签+身份验证
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:24 -此处进行解密+验签+身份验证
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:24 -此处进行解密+验签+身份验证
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:24 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-12 18:55:24 -==> Parameters: 1977(String)
2020-03-12 18:55:24 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1977 and cre_month=202003 and pos_type is null 
2020-03-12 18:55:24 -==> Parameters: 
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:24 -此处进行解密+验签+身份验证
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:24 -<==      Total: 1
2020-03-12 18:55:24 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-12 18:55:24 -==> Parameters: 1977(String)
2020-03-12 18:55:24 -此处进行解密+验签+身份验证
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:55:24 -<==      Total: 1
2020-03-12 18:55:24 -<==      Total: 1
2020-03-12 18:55:24 -耗时 : 31
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:24 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'pos_type' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalTransAmountByAll(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:584)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$7701a49a.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 18:55:24 -耗时 : 48
2020-03-12 18:55:24 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:24 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:24 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:24 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:55:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:24 -<==      Total: 9
2020-03-12 18:55:24 -耗时 : 30
2020-03-12 18:55:24 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:24 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:55:24 -<==      Total: 5
2020-03-12 18:55:24 -耗时 : 25
2020-03-12 18:55:24 -<==      Total: 4
2020-03-12 18:55:24 -耗时 : 26
2020-03-12 18:55:30 -此处进行解密+验签+身份验证
2020-03-12 18:55:30 -此处进行解密+验签+身份验证
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:30 -此处进行解密+验签+身份验证
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:30 -此处进行解密+验签+身份验证
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:30 -此处进行解密+验签+身份验证
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:55:30 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1977 and cre_month=202003 
2020-03-12 18:55:30 -==> Parameters: 
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:30 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-12 18:55:30 -==> Parameters: 1977(String)
2020-03-12 18:55:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:30 -<==      Total: 1
2020-03-12 18:55:30 -耗时 : 19
2020-03-12 18:55:30 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:30 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:55:30 -<==      Total: 1
2020-03-12 18:55:30 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:55:30 -==> Parameters: 1977(String)
2020-03-12 18:55:30 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:30 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:55:30 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:30 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:55:30 -<==      Total: 1
2020-03-12 18:55:30 -<==      Total: 0
2020-03-12 18:55:30 -耗时 : 30
2020-03-12 18:55:30 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1977 
2020-03-12 18:55:30 -==> Parameters: 
2020-03-12 18:55:30 -<==      Total: 1
2020-03-12 18:55:30 -耗时 : 47
2020-03-12 18:55:30 -<==      Total: 0
2020-03-12 18:55:30 -耗时 : 49
2020-03-12 18:55:30 -<==      Total: 0
2020-03-12 18:55:30 -耗时 : 52
2020-03-12 18:55:39 -此处进行解密+验签+身份验证
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:39 -此处进行解密+验签+身份验证
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:39 -此处进行解密+验签+身份验证
2020-03-12 18:55:39 -此处进行解密+验签+身份验证
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:39 -此处进行解密+验签+身份验证
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-12 18:55:39 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1977 and cre_month=202003 
2020-03-12 18:55:39 -==> Parameters: 
2020-03-12 18:55:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:55:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:55:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:55:39 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-12 18:55:39 -==> Parameters: 1977(String)
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:39 -<==      Total: 1
2020-03-12 18:55:39 -耗时 : 16
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:39 -<==      Total: 1
2020-03-12 18:55:39 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:55:39 -==> Parameters: 1977(String)
2020-03-12 18:55:39 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:39 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:55:39 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:39 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:55:39 -<==      Total: 0
2020-03-12 18:55:39 -耗时 : 22
2020-03-12 18:55:39 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:39 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:55:39 -<==      Total: 1
2020-03-12 18:55:39 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1977 
2020-03-12 18:55:39 -==> Parameters: 
2020-03-12 18:55:39 -<==      Total: 0
2020-03-12 18:55:39 -耗时 : 27
2020-03-12 18:55:39 -<==      Total: 0
2020-03-12 18:55:39 -耗时 : 35
2020-03-12 18:55:39 -<==      Total: 1
2020-03-12 18:55:39 -耗时 : 57
2020-03-12 18:55:40 -此处进行解密+验签+身份验证
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:40 -此处进行解密+验签+身份验证
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:40 -此处进行解密+验签+身份验证
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:40 -此处进行解密+验签+身份验证
2020-03-12 18:55:40 -此处进行解密+验签+身份验证
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-12 18:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:40 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1977 and cre_month=202003 and pos_type is null 
2020-03-12 18:55:40 -==> Parameters: 
2020-03-12 18:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:55:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:40 -<==      Total: 1
2020-03-12 18:55:40 -耗时 : 18
2020-03-12 18:55:40 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:40 -==> Parameters: 1977(String)
2020-03-12 18:55:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:55:40 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:40 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:55:40 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:40 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:55:40 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:55:40 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:55:40 -<==      Total: 1
2020-03-12 18:55:40 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-12 18:55:40 -==> Parameters: 1977(String)
2020-03-12 18:55:40 -<==      Total: 5
2020-03-12 18:55:40 -耗时 : 28
2020-03-12 18:55:40 -<==      Total: 9
2020-03-12 18:55:40 -耗时 : 27
2020-03-12 18:55:40 -<==      Total: 4
2020-03-12 18:55:40 -耗时 : 33
2020-03-12 18:55:40 -<==      Total: 1
2020-03-12 18:55:40 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'pos_type' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalTransAmountByAll(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:584)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$7701a49a.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 18:55:40 -耗时 : 44
2020-03-12 18:56:07 -此处进行解密+验签+身份验证
2020-03-12 18:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:07 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:56:07 -<==      Total: 9
2020-03-12 18:56:07 -耗时 : 24
2020-03-12 18:56:17 -此处进行解密+验签+身份验证
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:17 -此处进行解密+验签+身份验证
2020-03-12 18:56:17 -此处进行解密+验签+身份验证
2020-03-12 18:56:17 -此处进行解密+验签+身份验证
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:17 -此处进行解密+验签+身份验证
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:56:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-12 18:56:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:17 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-12 18:56:17 -==> Parameters: 1977(String)
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1977 and cre_month=202003 
2020-03-12 18:56:17 -==> Parameters: 
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:17 -<==      Total: 1
2020-03-12 18:56:17 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:56:17 -==> Parameters: 1977(String)
2020-03-12 18:56:17 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:17 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:56:17 -<==      Total: 1
2020-03-12 18:56:17 -耗时 : 19
2020-03-12 18:56:17 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:17 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:56:17 -<==      Total: 1
2020-03-12 18:56:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1977 
2020-03-12 18:56:17 -==> Parameters: 
2020-03-12 18:56:17 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:17 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:56:17 -<==      Total: 0
2020-03-12 18:56:17 -耗时 : 26
2020-03-12 18:56:17 -<==      Total: 0
2020-03-12 18:56:17 -耗时 : 32
2020-03-12 18:56:17 -<==      Total: 1
2020-03-12 18:56:17 -耗时 : 45
2020-03-12 18:56:17 -<==      Total: 0
2020-03-12 18:56:17 -耗时 : 41
2020-03-12 18:56:22 -此处进行解密+验签+身份验证
2020-03-12 18:56:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:22 -此处进行解密+验签+身份验证
2020-03-12 18:56:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:22 -此处进行解密+验签+身份验证
2020-03-12 18:56:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:23 -此处进行解密+验签+身份验证
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:23 -此处进行解密+验签+身份验证
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-12 18:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:23 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1977 and cre_month=202003 
2020-03-12 18:56:23 -==> Parameters: 
2020-03-12 18:56:23 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:23 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:23 -<==      Total: 1
2020-03-12 18:56:23 -<==      Total: 0
2020-03-12 18:56:23 -耗时 : 16
2020-03-12 18:56:23 -耗时 : 28
2020-03-12 18:56:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:23 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-12 18:56:23 -==> Parameters: 1977(String)
2020-03-12 18:56:23 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:23 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:56:23 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:23 -<==      Total: 1
2020-03-12 18:56:23 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:56:23 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:56:23 -==> Parameters: 1977(String)
2020-03-12 18:56:23 -<==      Total: 1
2020-03-12 18:56:23 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1977 
2020-03-12 18:56:23 -==> Parameters: 
2020-03-12 18:56:23 -<==      Total: 0
2020-03-12 18:56:23 -耗时 : 25
2020-03-12 18:56:23 -<==      Total: 1
2020-03-12 18:56:23 -<==      Total: 0
2020-03-12 18:56:23 -耗时 : 38
2020-03-12 18:56:23 -耗时 : 34
2020-03-12 18:56:28 -此处进行解密+验签+身份验证
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:28 -此处进行解密+验签+身份验证
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:28 -此处进行解密+验签+身份验证
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:28 -此处进行解密+验签+身份验证
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:28 -此处进行解密+验签+身份验证
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:56:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-12 18:56:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-12 18:56:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:28 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1977 and cre_month=202003 and pos_type is null 
2020-03-12 18:56:28 -==> Parameters: 
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:56:28 -<==      Total: 1
2020-03-12 18:56:28 -耗时 : 14
2020-03-12 18:56:28 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:28 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:56:28 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:28 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:56:28 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-12 18:56:28 -==> Parameters: 1977(String)
2020-03-12 18:56:28 -<==      Total: 5
2020-03-12 18:56:28 -耗时 : 27
2020-03-12 18:56:28 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-12 18:56:28 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:56:28 -<==      Total: 4
2020-03-12 18:56:28 -耗时 : 38
2020-03-12 18:56:28 -<==      Total: 1
2020-03-12 18:56:28 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-12 18:56:28 -==> Parameters: 1977(String)
2020-03-12 18:56:28 -<==      Total: 9
2020-03-12 18:56:28 -耗时 : 39
2020-03-12 18:56:28 -<==      Total: 1
2020-03-12 18:56:43 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'pos_type' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalTransAmountByAll(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:584)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$7701a49a.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 18:56:43 -耗时 : 14225
2020-03-12 18:57:11 -此处进行解密+验签+身份验证
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:11 -此处进行解密+验签+身份验证
2020-03-12 18:57:11 -此处进行解密+验签+身份验证
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:11 -此处进行解密+验签+身份验证
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:11 -此处进行解密+验签+身份验证
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-12 18:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:11 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1977 and cre_month=202003 
2020-03-12 18:57:11 -==> Parameters: 
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:11 -<==      Total: 1
2020-03-12 18:57:11 -耗时 : 10
2020-03-12 18:57:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:11 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-12 18:57:11 -==> Parameters: 1977(String)
2020-03-12 18:57:11 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:57:11 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:57:11 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-12 18:57:11 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:57:11 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:57:11 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:57:11 -<==      Total: 1
2020-03-12 18:57:11 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:57:11 -==> Parameters: 1977(String)
2020-03-12 18:57:11 -<==      Total: 0
2020-03-12 18:57:11 -耗时 : 23
2020-03-12 18:57:11 -<==      Total: 1
2020-03-12 18:57:11 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1977 
2020-03-12 18:57:11 -==> Parameters: 
2020-03-12 18:57:11 -<==      Total: 0
2020-03-12 18:57:11 -耗时 : 33
2020-03-12 18:57:11 -<==      Total: 0
2020-03-12 18:57:11 -耗时 : 35
2020-03-12 18:57:11 -<==      Total: 1
2020-03-12 18:57:11 -耗时 : 45
2020-03-12 18:57:17 -此处进行解密+验签+身份验证
2020-03-12 18:57:17 -此处进行解密+验签+身份验证
2020-03-12 18:57:17 -此处进行解密+验签+身份验证
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:17 -此处进行解密+验签+身份验证
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:17 -此处进行解密+验签+身份验证
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:57:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:57:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1977
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1977 , return
2020-03-12 18:57:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1977 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1977 and cre_month=202003 and pos_type is null 
2020-03-12 18:57:17 -==> Parameters: 
2020-03-12 18:57:17 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-12 18:57:17 -==> Parameters: 1977(String)
2020-03-12 18:57:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-12 18:57:17 -==> Parameters: 1977(String), 1977(String), 0(String)
2020-03-12 18:57:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-12 18:57:17 -<==      Total: 1
2020-03-12 18:57:17 -==> Parameters: 1977(String), 1977(String), 1(String)
2020-03-12 18:57:17 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-12 18:57:17 -==> Parameters: 1977(String)
2020-03-12 18:57:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-12 18:57:17 -==> Parameters: 1977(String), 1977(String)
2020-03-12 18:57:17 -<==      Total: 1
2020-03-12 18:57:17 -耗时 : 20
2020-03-12 18:57:17 -<==      Total: 1
2020-03-12 18:57:17 -<==      Total: 5
2020-03-12 18:57:17 -耗时 : 29
2020-03-12 18:58:29 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'pos_type' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalTransAmountByAll(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:584)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$7701a49a.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-12 18:58:29 -耗时 : 72029
2020-03-12 18:58:29 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m15s512ms398µs653ns).
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -<==      Total: 9
2020-03-12 18:58:29 -耗时 : 72031
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -<==      Total: 4
2020-03-12 18:58:29 -耗时 : 72034
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 18:58:29 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:58:29 -耗时 : 9
2020-03-12 18:58:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:58:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:58:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:58:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:58:29 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:58:29 -<==      Total: 3
2020-03-12 18:58:29 -耗时 : 10
2020-03-12 18:58:29 -<==      Total: 2
2020-03-12 18:58:29 -耗时 : 11
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==      Total: 10
2020-03-12 18:58:29 -耗时 : 12
2020-03-12 18:58:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -耗时 : 15
2020-03-12 18:58:29 -耗时 : 14
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -耗时 : 12
2020-03-12 18:58:29 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:58:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -耗时 : 7
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 0
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 18:58:29 -耗时 : 53
2020-03-12 18:58:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 2
2020-03-12 18:58:29 -耗时 : 6
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:58:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 3
2020-03-12 18:58:29 -耗时 : 11
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -耗时 : 7
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:58:29 -<==      Total: 2
2020-03-12 18:58:29 -耗时 : 11
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 101
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:58:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 122
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:58:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 18:58:29 -此处进行解密+验签+身份验证
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:58:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 18:58:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:58:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:58:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:58:29 -==> Parameters: 181(String)
2020-03-12 18:58:29 -耗时 : 17
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 3
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 10
2020-03-12 18:58:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -耗时 : 7
2020-03-12 18:58:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 18:58:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 169
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:58:29 -耗时 : 12
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:58:29 -==> Parameters: 
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 104
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 205
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:58:29 -==> Parameters: 181(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:58:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:58:29 -<==      Total: 1
2020-03-12 18:58:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:58:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:58:29 -<==    Updates: 1
2020-03-12 18:58:29 -耗时 : 168
2020-03-12 18:59:08 -此处进行解密+验签+身份验证
2020-03-12 18:59:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:08 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-12 18:59:08 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-12 18:59:08 -==> Parameters: 181(String)
2020-03-12 18:59:08 -<==      Total: 10
2020-03-12 18:59:08 -耗时 : 23
2020-03-12 18:59:11 -此处进行解密+验签+身份验证
2020-03-12 18:59:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:11 -此处进行解密+验签+身份验证
2020-03-12 18:59:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:59:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:59:11 -==> Parameters: 181(String)
2020-03-12 18:59:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -耗时 : 9
2020-03-12 18:59:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:59:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:59:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:59:11 -==> Parameters: 181(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:11 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:11 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:59:11 -<==    Updates: 1
2020-03-12 18:59:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:59:11 -==> Parameters: 181(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:11 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:11 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:59:11 -<==    Updates: 1
2020-03-12 18:59:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:59:11 -==> Parameters: 
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:11 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:11 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:59:11 -<==    Updates: 1
2020-03-12 18:59:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:59:11 -==> Parameters: 181(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:11 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:59:11 -<==      Total: 1
2020-03-12 18:59:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:11 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:59:11 -<==    Updates: 1
2020-03-12 18:59:11 -耗时 : 97
2020-03-12 18:59:23 -此处进行解密+验签+身份验证
2020-03-12 18:59:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 18:59:23 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-12 18:59:23 -==> Parameters: 181(String)
2020-03-12 18:59:23 -<==      Total: 403
2020-03-12 18:59:23 -耗时 : 36
2020-03-12 18:59:37 -此处进行解密+验签+身份验证
2020-03-12 18:59:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:37 -此处进行解密+验签+身份验证
2020-03-12 18:59:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 18:59:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 18:59:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 18:59:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 18:59:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 18:59:37 -==> Parameters: 181(String)
2020-03-12 18:59:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:59:37 -==> Parameters: 181(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -耗时 : 12
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:37 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:37 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 18:59:37 -<==    Updates: 1
2020-03-12 18:59:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 18:59:37 -==> Parameters: 181(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:37 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:37 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 18:59:37 -<==    Updates: 1
2020-03-12 18:59:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 18:59:37 -==> Parameters: 
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:37 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:37 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 18:59:37 -<==    Updates: 1
2020-03-12 18:59:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 18:59:37 -==> Parameters: 181(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 18:59:37 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 18:59:37 -<==      Total: 1
2020-03-12 18:59:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 18:59:37 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 18:59:37 -<==    Updates: 1
2020-03-12 18:59:37 -耗时 : 104
2020-03-12 18:59:43 -此处进行解密+验签+身份验证
2020-03-12 18:59:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 18:59:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 18:59:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-12 18:59:43 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-12 18:59:43 -==> Parameters: 181(String)
2020-03-12 18:59:43 -<==      Total: 9
2020-03-12 18:59:43 -耗时 : 25
2020-03-12 19:00:26 -此处进行解密+验签+身份验证
2020-03-12 19:00:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:00:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:00:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/updateMerchantNameAndTel
2020-03-12 19:00:26 -==>  Preparing: update t_sys_traditional_pos_info set name=?,tel=? where sn=? 
2020-03-12 19:00:26 -==> Parameters: E20200308301(String), asdasd(String), 13383838383(String)
2020-03-12 19:00:26 -<==    Updates: 0
2020-03-12 19:00:26 -==>  Preparing: update t_sys_mpos_info set name=?,tel=? where sn=? 
2020-03-12 19:00:26 -==> Parameters: E20200308301(String), asdasd(String), 13383838383(String)
2020-03-12 19:00:26 -<==    Updates: 0
2020-03-12 19:00:26 -耗时 : 36
2020-03-12 19:03:01 -此处进行解密+验签+身份验证
2020-03-12 19:03:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:01 -此处进行解密+验签+身份验证
2020-03-12 19:03:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:01 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-12 19:03:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 19:03:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:03:01 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-12 19:03:01 -==> Parameters: 181(String)
2020-03-12 19:03:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:03:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:03:01 -==> Parameters: 181(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -耗时 : 23
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:03:01 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:03:01 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 19:03:01 -<==    Updates: 1
2020-03-12 19:03:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 19:03:01 -==> Parameters: 181(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:03:01 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:03:01 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 19:03:01 -<==    Updates: 1
2020-03-12 19:03:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 19:03:01 -==> Parameters: 
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:03:01 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:03:01 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 19:03:01 -<==    Updates: 1
2020-03-12 19:03:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:03:01 -==> Parameters: 181(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:03:01 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 19:03:01 -<==      Total: 1
2020-03-12 19:03:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:03:01 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 19:03:01 -<==    Updates: 1
2020-03-12 19:03:01 -耗时 : 166
2020-03-12 19:03:05 -此处进行解密+验签+身份验证
2020-03-12 19:03:05 -此处进行解密+验签+身份验证
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:05 -此处进行解密+验签+身份验证
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:05 -此处进行解密+验签+身份验证
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:05 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-12 19:03:05 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:03:05 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-12 19:03:05 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:03:05 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-12 19:03:05 -==> Parameters: 181(String)
2020-03-12 19:03:05 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-12 19:03:05 -==> Parameters: 181(String)
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:03:05 -<==      Total: 0
2020-03-12 19:03:05 -耗时 : 11
2020-03-12 19:03:05 -<==      Total: 1
2020-03-12 19:03:05 -耗时 : 19
2020-03-12 19:03:05 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-12 19:03:05 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:03:05 -<==      Total: 0
2020-03-12 19:03:05 -耗时 : 34
2020-03-12 19:03:05 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-12 19:03:05 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:03:05 -<==      Total: 1
2020-03-12 19:03:05 -耗时 : 42
2020-03-12 19:03:10 -此处进行解密+验签+身份验证
2020-03-12 19:03:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:10 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:03:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:03:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:03:10 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:03:10 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:03:10 -<==      Total: 0
2020-03-12 19:03:10 -耗时 : 28
2020-03-12 19:03:28 -此处进行解密+验签+身份验证
2020-03-12 19:03:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:28 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:03:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:03:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:03:28 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-12 19:03:28 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:03:28 -<==      Total: 1
2020-03-12 19:03:28 -耗时 : 27
2020-03-12 19:03:52 -此处进行解密+验签+身份验证
2020-03-12 19:03:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:03:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:03:52 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:03:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:03:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:03:52 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:03:52 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:03:52 -<==      Total: 0
2020-03-12 19:03:52 -耗时 : 23
2020-03-12 19:08:20 -此处进行解密+验签+身份验证
2020-03-12 19:08:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:08:20 -解密异常：{token=181|ZOEQN9P04T49EIPQ5ETHLM1SVJX2RS1K, sign=D7AC899B79521669F3414F21A9E04229, pos_type=epos}
2020-03-12 19:08:20 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:08:20 -耗时 : 0
2020-03-12 19:08:20 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-12 19:08:20 -Reconnected to 120.25.164.176:10379
2020-03-12 19:08:36 -此处进行解密+验签+身份验证
2020-03-12 19:08:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:08:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:08:36 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:08:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:08:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:08:36 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@269bbf27 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 19:08:36 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:08:36 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:08:36 -<==      Total: 0
2020-03-12 19:08:36 -耗时 : 33
2020-03-12 19:09:33 -此处进行解密+验签+身份验证
2020-03-12 19:09:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:09:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:09:33 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:09:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:09:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:09:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@62f52205 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-12 19:09:33 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:09:33 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:09:33 -<==      Total: 0
2020-03-12 19:09:33 -耗时 : 32
2020-03-12 19:20:30 -此处进行解密+验签+身份验证
2020-03-12 19:20:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:20:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:20:30 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:20:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:20:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:20:30 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:20:30 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:20:30 -<==      Total: 1
2020-03-12 19:20:30 -耗时 : 27
2020-03-12 19:20:39 -此处进行解密+验签+身份验证
2020-03-12 19:20:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:20:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:20:39 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityDetail
2020-03-12 19:20:39 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-12 19:20:39 -==> Parameters: 18(String)
2020-03-12 19:20:39 -<==      Total: 1
2020-03-12 19:20:39 -耗时 : 13
2020-03-12 19:20:43 -此处进行解密+验签+身份验证
2020-03-12 19:20:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:20:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:20:43 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposPartActivityInfo
2020-03-12 19:20:43 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-12 19:20:43 -==> Parameters: 18(String)
2020-03-12 19:20:43 -<==      Total: 1
2020-03-12 19:20:43 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_mpos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:20:43 -==> Parameters: 18(String)
2020-03-12 19:20:43 -<==      Total: 0
2020-03-12 19:20:43 -==>  Preparing: SELECT t.sn FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:20:43 -==> Parameters: 181(String)
2020-03-12 19:20:43 -<==      Total: 950
2020-03-12 19:20:43 -耗时 : 81
2020-03-12 19:21:38 -此处进行解密+验签+身份验证
2020-03-12 19:21:38 -此处进行解密+验签+身份验证
2020-03-12 19:21:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:21:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:21:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:21:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:21:38 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-12 19:21:38 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-12 19:21:38 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-12 19:21:38 -==> Parameters: 181(String)
2020-03-12 19:21:38 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-12 19:21:38 -==> Parameters: 181(String)
2020-03-12 19:21:38 -<==      Total: 1
2020-03-12 19:21:38 -耗时 : 19
2020-03-12 19:21:38 -<==      Total: 0
2020-03-12 19:21:38 -耗时 : 24
2020-03-12 19:21:45 -此处进行解密+验签+身份验证
2020-03-12 19:21:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:21:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:21:45 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityDetail
2020-03-12 19:21:45 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 19:21:45 -==> Parameters: 13(String)
2020-03-12 19:21:45 -<==      Total: 1
2020-03-12 19:21:45 -耗时 : 19
2020-03-12 19:21:47 -此处进行解密+验签+身份验证
2020-03-12 19:21:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:21:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:21:47 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 19:21:47 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 19:21:47 -==> Parameters: 13(String)
2020-03-12 19:21:47 -<==      Total: 1
2020-03-12 19:21:49 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_trapos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:21:49 -==> Parameters: 13(String)
2020-03-12 19:21:49 -<==      Total: 3
2020-03-12 19:21:49 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:21:49 -==> Parameters: 181(String)
2020-03-12 19:21:49 -<==      Total: 248
2020-03-12 19:21:49 -耗时 : 2426
2020-03-12 19:22:06 -此处进行解密+验签+身份验证
2020-03-12 19:22:06 -此处进行解密+验签+身份验证
2020-03-12 19:22:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:22:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:22:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:22:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:22:06 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-12 19:22:06 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-12 19:22:06 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-12 19:22:06 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-12 19:22:06 -==> Parameters: 181(String)
2020-03-12 19:22:06 -==> Parameters: 181(String)
2020-03-12 19:22:06 -<==      Total: 0
2020-03-12 19:22:06 -耗时 : 12
2020-03-12 19:22:06 -<==      Total: 1
2020-03-12 19:22:06 -耗时 : 19
2020-03-12 19:22:11 -此处进行解密+验签+身份验证
2020-03-12 19:22:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:22:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:22:11 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityDetail
2020-03-12 19:22:11 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-12 19:22:11 -==> Parameters: 18(String)
2020-03-12 19:22:11 -<==      Total: 1
2020-03-12 19:22:11 -耗时 : 17
2020-03-12 19:22:12 -此处进行解密+验签+身份验证
2020-03-12 19:22:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:22:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:22:12 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposPartActivityInfo
2020-03-12 19:22:12 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-12 19:22:12 -==> Parameters: 18(String)
2020-03-12 19:22:12 -<==      Total: 1
2020-03-12 19:22:12 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_mpos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:22:12 -==> Parameters: 18(String)
2020-03-12 19:22:12 -<==      Total: 0
2020-03-12 19:22:12 -==>  Preparing: SELECT t.sn FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:22:12 -==> Parameters: 181(String)
2020-03-12 19:22:12 -<==      Total: 950
2020-03-12 19:22:12 -耗时 : 57
2020-03-12 19:23:00 -此处进行解密+验签+身份验证
2020-03-12 19:23:00 -此处进行解密+验签+身份验证
2020-03-12 19:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:23:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:23:00 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-12 19:23:00 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-12 19:23:00 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-12 19:23:00 -==> Parameters: 181(String)
2020-03-12 19:23:00 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-12 19:23:00 -==> Parameters: 181(String)
2020-03-12 19:23:00 -<==      Total: 0
2020-03-12 19:23:00 -耗时 : 25
2020-03-12 19:23:00 -<==      Total: 1
2020-03-12 19:23:00 -耗时 : 23
2020-03-12 19:23:01 -此处进行解密+验签+身份验证
2020-03-12 19:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:23:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:23:01 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:23:01 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:23:01 -<==      Total: 0
2020-03-12 19:23:01 -耗时 : 30
2020-03-12 19:23:50 -此处进行解密+验签+身份验证
2020-03-12 19:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:23:50 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:23:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:23:50 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:23:50 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:23:50 -<==      Total: 0
2020-03-12 19:23:50 -耗时 : 36
2020-03-12 19:23:58 -此处进行解密+验签+身份验证
2020-03-12 19:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:23:58 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:23:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:23:58 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:23:58 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:23:59 -<==      Total: 1
2020-03-12 19:23:59 -耗时 : 31
2020-03-12 19:24:00 -此处进行解密+验签+身份验证
2020-03-12 19:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:24:00 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityDetail
2020-03-12 19:24:00 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-12 19:24:00 -==> Parameters: 18(String)
2020-03-12 19:24:00 -<==      Total: 1
2020-03-12 19:24:00 -耗时 : 25
2020-03-12 19:24:02 -此处进行解密+验签+身份验证
2020-03-12 19:24:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:24:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:24:02 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposPartActivityInfo
2020-03-12 19:24:02 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_mpos_activity_info where id = ? 
2020-03-12 19:24:02 -==> Parameters: 18(String)
2020-03-12 19:24:02 -<==      Total: 1
2020-03-12 19:24:02 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_mpos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:24:02 -==> Parameters: 18(String)
2020-03-12 19:24:02 -<==      Total: 0
2020-03-12 19:24:02 -==>  Preparing: SELECT t.sn FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:24:02 -==> Parameters: 181(String)
2020-03-12 19:24:02 -<==      Total: 950
2020-03-12 19:24:02 -耗时 : 67
2020-03-12 19:24:44 -此处进行解密+验签+身份验证
2020-03-12 19:24:44 -解密：{
  "sign" : "53A09071D817A13ED59E884CDF80592B",
  "login_type" : "account",
  "sys_user_account" : "13501590237",
  "device_no" : "iOS11.4.1",
  "login_password" : "E19D5CD5AF0378DA05F63F891C7467AF",
  "token" : "2420|WM17COLE7T1S5TXXDG3CRNBPPID5F17X",
  "device_type" : "iOS",
  "version_no" : "1.2.0"
}
2020-03-12 19:24:44 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 19:24:44 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 19:24:44 -==> Parameters: 13501590237(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 19:24:44 -==> Parameters: iOS(String), iOS11.4.1(String), 1.2.0(String), 192.168.191.2(String), 20200312(String), 192444(String), 2420(Integer)
2020-03-12 19:24:44 -<==    Updates: 1
2020-03-12 19:24:44 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 19:24:44 -==> Parameters: 26(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 19:24:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 19:24:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 19:24:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 19:24:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 19:24:44 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 19:24:44 -耗时 : 96
2020-03-12 19:24:44 -此处进行解密+验签+身份验证
2020-03-12 19:24:44 -此处进行解密+验签+身份验证
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:44 -此处进行解密+验签+身份验证
2020-03-12 19:24:44 -此处进行解密+验签+身份验证
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:44 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 19:24:44 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 19:24:44 -==> Parameters: 
2020-03-12 19:24:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 19:24:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 19:24:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 19:24:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 19:24:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 19:24:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 19:24:44 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 19:24:44 -==> Parameters: 2420(String)
2020-03-12 19:24:44 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 19:24:44 -耗时 : 11
2020-03-12 19:24:44 -<==      Total: 3
2020-03-12 19:24:44 -耗时 : 15
2020-03-12 19:24:44 -耗时 : 15
2020-03-12 19:24:44 -<==      Total: 2
2020-03-12 19:24:44 -耗时 : 22
2020-03-12 19:24:44 -此处进行解密+验签+身份验证
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 19:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 19:24:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:24:44 -==> Parameters: 2420(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:24:44 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:24:44 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-12 19:24:44 -<==    Updates: 1
2020-03-12 19:24:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 19:24:44 -==> Parameters: 2420(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:24:44 -==> Parameters: recallFlag(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:24:44 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-12 19:24:44 -<==    Updates: 1
2020-03-12 19:24:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 19:24:44 -==> Parameters: 
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:24:44 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:24:44 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-12 19:24:44 -<==    Updates: 1
2020-03-12 19:24:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:24:44 -==> Parameters: 2420(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:24:44 -==> Parameters: cardFlag(String), 2420(String)
2020-03-12 19:24:44 -<==      Total: 1
2020-03-12 19:24:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:24:44 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-12 19:24:44 -<==    Updates: 1
2020-03-12 19:24:44 -耗时 : 206
2020-03-12 19:24:50 -此处进行解密+验签+身份验证
2020-03-12 19:24:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:50 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:24:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 19:24:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 19:24:50 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-12 19:24:50 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:24:50 -<==      Total: 1
2020-03-12 19:24:50 -耗时 : 43
2020-03-12 19:24:51 -此处进行解密+验签+身份验证
2020-03-12 19:24:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:51 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:24:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-12 19:24:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-12 19:24:51 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-12 19:24:51 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:24:51 -<==      Total: 1
2020-03-12 19:24:51 -耗时 : 35
2020-03-12 19:24:53 -此处进行解密+验签+身份验证
2020-03-12 19:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:53 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityDetail
2020-03-12 19:24:53 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 19:24:53 -==> Parameters: 18(String)
2020-03-12 19:24:53 -<==      Total: 1
2020-03-12 19:24:53 -耗时 : 22
2020-03-12 19:24:56 -此处进行解密+验签+身份验证
2020-03-12 19:24:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:56 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 19:24:56 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 19:24:56 -==> Parameters: 18(String)
2020-03-12 19:24:56 -<==      Total: 1
2020-03-12 19:24:56 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_trapos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:24:56 -==> Parameters: 18(String)
2020-03-12 19:24:56 -<==      Total: 3
2020-03-12 19:24:56 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:24:56 -==> Parameters: 2420(String)
2020-03-12 19:24:56 -<==      Total: 0
2020-03-12 19:24:56 -耗时 : 56
2020-03-12 19:24:58 -此处进行解密+验签+身份验证
2020-03-12 19:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:24:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:24:58 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 19:24:58 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 19:24:58 -==> Parameters: 18(String)
2020-03-12 19:24:58 -<==      Total: 1
2020-03-12 19:24:58 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_trapos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:24:58 -==> Parameters: 18(String)
2020-03-12 19:24:58 -<==      Total: 3
2020-03-12 19:24:58 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:24:58 -==> Parameters: 2420(String)
2020-03-12 19:24:58 -<==      Total: 0
2020-03-12 19:24:58 -耗时 : 53
2020-03-12 19:25:08 -此处进行解密+验签+身份验证
2020-03-12 19:25:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:25:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:25:08 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosPartActivityInfo
2020-03-12 19:25:08 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, detail_url FROM t_sys_trapos_activity_info where id = ? 
2020-03-12 19:25:08 -==> Parameters: 18(String)
2020-03-12 19:25:08 -<==      Total: 1
2020-03-12 19:25:08 -==>  Preparing: SELECT cast(id as char) as activity_reward_id, pos_num, reward_money, expenditure FROM t_sys_trapos_activity_reward_info WHERE activity_id = ? and del = 0 
2020-03-12 19:25:08 -==> Parameters: 18(String)
2020-03-12 19:25:08 -<==      Total: 3
2020-03-12 19:25:08 -==>  Preparing: SELECT t.sn FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t1.act_status = 0 and t.state_status = 1 and t.activity_status = '0' and t.user_id = ? 
2020-03-12 19:25:08 -==> Parameters: 2420(String)
2020-03-12 19:25:08 -<==      Total: 0
2020-03-12 19:25:08 -耗时 : 49
2020-03-12 19:26:17 -此处进行解密+验签+身份验证
2020-03-12 19:26:17 -解密：{
  "login_type" : "token",
  "device_type" : "iOS",
  "sign" : "FFF340957F7EF175AD520118014D80C6",
  "version_no" : "1.1.1",
  "token" : "2420|XI0RWVU1LK59SUMPUX88CX6TH57R3DR9",
  "device_no" : "iOS11.4.1"
}
2020-03-12 19:26:17 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 19:26:17 -token值=======2420|XI0RWVU1LK59SUMPUX88CX6TH57R3DR9
2020-03-12 19:26:17 -耗时 : 3
2020-03-12 19:26:17 -此处进行解密+验签+身份验证
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:26:17 -此处进行解密+验签+身份验证
2020-03-12 19:26:17 -此处进行解密+验签+身份验证
2020-03-12 19:26:17 -此处进行解密+验签+身份验证
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:26:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 19:26:17 -耗时 : 0
2020-03-12 19:26:17 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 19:26:17 -耗时 : 0
2020-03-12 19:26:17 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 19:26:17 -耗时 : 0
2020-03-12 19:26:17 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 19:26:17 -耗时 : 0
2020-03-12 19:26:17 -此处进行解密+验签+身份验证
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-12 19:26:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-12 19:26:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 19:26:17 -耗时 : 0
2020-03-12 19:26:18 -此处进行解密+验签+身份验证
2020-03-12 19:26:18 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-12 19:26:18 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-12 19:26:18 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-12 19:26:18 -耗时 : 7
2020-03-12 19:26:36 -此处进行解密+验签+身份验证
2020-03-12 19:26:36 -解密：{
  "sign" : "5FE3EE2161A2BAD29C05555838C9B7FE",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "2420|XI0RWVU1LK59SUMPUX88CX6TH57R3DR9",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-12 19:26:36 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-12 19:26:36 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-12 19:26:36 -==> Parameters: 13322990711(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-12 19:26:36 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200312(String), 192636(String), 181(Integer)
2020-03-12 19:26:36 -<==    Updates: 1
2020-03-12 19:26:36 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-12 19:26:36 -==> Parameters: 26(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 19:26:36 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 19:26:36 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 19:26:36 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 19:26:36 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-12 19:26:36 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-12 19:26:36 -耗时 : 89
2020-03-12 19:26:36 -此处进行解密+验签+身份验证
2020-03-12 19:26:36 -此处进行解密+验签+身份验证
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:36 -此处进行解密+验签+身份验证
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:36 -此处进行解密+验签+身份验证
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-12 19:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-12 19:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 19:26:36 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-12 19:26:36 -==> Parameters: 
2020-03-12 19:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-12 19:26:36 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-12 19:26:36 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-12 19:26:36 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-12 19:26:36 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-12 19:26:36 -==> Parameters: 181(String)
2020-03-12 19:26:36 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-12 19:26:36 -耗时 : 11
2020-03-12 19:26:36 -耗时 : 14
2020-03-12 19:26:36 -<==      Total: 3
2020-03-12 19:26:36 -耗时 : 16
2020-03-12 19:26:36 -<==      Total: 2
2020-03-12 19:26:36 -耗时 : 23
2020-03-12 19:26:36 -此处进行解密+验签+身份验证
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:26:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:26:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:26:36 -==> Parameters: 181(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:26:36 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:26:36 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 19:26:36 -<==    Updates: 1
2020-03-12 19:26:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 19:26:36 -==> Parameters: 181(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:26:36 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:26:36 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 19:26:36 -<==    Updates: 1
2020-03-12 19:26:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 19:26:36 -==> Parameters: 
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:26:36 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:26:36 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 19:26:36 -<==    Updates: 1
2020-03-12 19:26:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:26:36 -==> Parameters: 181(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:26:36 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 19:26:36 -<==      Total: 1
2020-03-12 19:26:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:26:36 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 19:26:36 -<==    Updates: 1
2020-03-12 19:26:36 -耗时 : 212
2020-03-12 19:26:44 -此处进行解密+验签+身份验证
2020-03-12 19:26:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:44 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:26:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:26:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:26:44 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-12 19:26:44 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:26:44 -<==      Total: 1
2020-03-12 19:26:44 -耗时 : 28
2020-03-12 19:26:47 -此处进行解密+验签+身份验证
2020-03-12 19:26:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:47 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-12 19:26:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:26:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:26:47 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-12 19:26:47 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:26:47 -<==      Total: 0
2020-03-12 19:26:47 -耗时 : 30
2020-03-12 19:26:51 -此处进行解密+验签+身份验证
2020-03-12 19:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:26:51 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-12 19:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:26:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:26:51 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-12 19:26:51 -==> Parameters: 26(String), 20200312(String)
2020-03-12 19:26:51 -<==      Total: 1
2020-03-12 19:26:51 -耗时 : 29
2020-03-12 19:27:04 -此处进行解密+验签+身份验证
2020-03-12 19:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-12 19:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-12 19:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-12 19:27:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:27:04 -==> Parameters: 181(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:27:04 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:27:04 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-12 19:27:04 -<==    Updates: 1
2020-03-12 19:27:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-12 19:27:04 -==> Parameters: 181(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:27:04 -==> Parameters: recallFlag(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:27:04 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-12 19:27:04 -<==    Updates: 1
2020-03-12 19:27:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-12 19:27:04 -==> Parameters: 
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:27:04 -==> Parameters: collegeFlag(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:27:04 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-12 19:27:04 -<==    Updates: 1
2020-03-12 19:27:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-12 19:27:04 -==> Parameters: 181(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-12 19:27:04 -==> Parameters: cardFlag(String), 181(String)
2020-03-12 19:27:04 -<==      Total: 1
2020-03-12 19:27:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-12 19:27:04 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-12 19:27:04 -<==    Updates: 1
2020-03-12 19:27:04 -耗时 : 213
2020-03-12 19:27:35 -此处进行解密+验签+身份验证
2020-03-12 19:27:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:27:35 -此处进行解密+验签+身份验证
2020-03-12 19:27:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-12 19:27:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:27:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-12 19:27:35 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-12 19:27:35 -耗时 : 0
2020-03-12 19:27:35 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-12 19:27:35 -耗时 : 1
2020-03-12 19:28:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-12 19:28:48 -Shutting down ExecutorService 'taskScheduler'
2020-03-12 19:28:48 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-12 19:28:48 -Shutting down Quartz Scheduler
2020-03-12 19:28:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-12 19:28:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-12 19:28:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-12 19:28:48 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-12 19:28:48 -HikariPool-1 - Shutdown initiated...
2020-03-12 19:28:48 -HikariPool-1 - Shutdown completed.
