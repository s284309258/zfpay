2020-03-17 15:29:38 -Starting LongEcologicalApplication on PC-201905161910 with PID 9660 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-17 15:29:38 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-17 15:29:38 -No active profile set, falling back to default profiles: default
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 15:29:39 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-17 15:29:39 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-17 15:29:39 -Finished Spring Data repository scanning in 80ms. Found 0 repository interfaces.
2020-03-17 15:29:39 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-17 15:29:39 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-17 15:29:39 -Finished Spring Data repository scanning in 105ms. Found 0 repository interfaces.
2020-03-17 15:29:40 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c4b62cc8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-17 15:29:40 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bf3a1168] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-17 15:29:40 -Tomcat initialized with port(s): 8080 (http)
2020-03-17 15:29:40 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-17 15:29:40 -Starting service [Tomcat]
2020-03-17 15:29:40 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-17 15:29:40 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-17 15:29:41 -Initializing Spring embedded WebApplicationContext
2020-03-17 15:29:41 -Root WebApplicationContext: initialization completed in 2811 ms
2020-03-17 15:29:41 -Filter xssFilter was not registered (disabled)
2020-03-17 15:29:41 -HikariPool-1 - Starting...
2020-03-17 15:29:41 -HikariPool-1 - Start completed.
2020-03-17 15:29:41 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-17 15:29:42 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-17 15:29:42 -HHH000206: hibernate.properties not found
2020-03-17 15:29:42 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-17 15:29:42 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-17 15:29:42 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-17 15:29:43 -Using default implementation for ThreadExecutor
2020-03-17 15:29:43 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-17 15:29:43 -Quartz Scheduler v.2.3.0 created.
2020-03-17 15:29:43 -RAMJobStore initialized.
2020-03-17 15:29:43 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-17 15:29:43 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-17 15:29:43 -Quartz scheduler version: 2.3.0
2020-03-17 15:29:43 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5d66ae3a
2020-03-17 15:29:44 -STAET TaskExecutorConfig
2020-03-17 15:29:44 -Initializing ExecutorService
2020-03-17 15:29:44 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-17 15:29:44 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-17 15:29:44 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-17 15:29:45 -Initializing ExecutorService 'taskScheduler'
2020-03-17 15:29:45 -Starting Quartz Scheduler now
2020-03-17 15:29:45 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-17 15:29:45 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-17 15:29:45 -Using a shared selector for servlet write/read
2020-03-17 15:29:45 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-17 15:29:45 -Started LongEcologicalApplication in 7.451 seconds (JVM running for 8.674)
2020-03-17 16:48:59 -Starting LongEcologicalApplication on PC-201905161910 with PID 11024 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-17 16:48:59 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-17 16:48:59 -No active profile set, falling back to default profiles: default
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-17 16:49:00 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-17 16:49:00 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-17 16:49:00 -Finished Spring Data repository scanning in 82ms. Found 0 repository interfaces.
2020-03-17 16:49:00 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-17 16:49:00 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-17 16:49:00 -Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2020-03-17 16:49:00 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$ed42f741] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-17 16:49:01 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e7c6dbe1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-17 16:49:01 -Tomcat initialized with port(s): 8080 (http)
2020-03-17 16:49:01 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-17 16:49:01 -Starting service [Tomcat]
2020-03-17 16:49:01 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-17 16:49:01 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-17 16:49:01 -Initializing Spring embedded WebApplicationContext
2020-03-17 16:49:01 -Root WebApplicationContext: initialization completed in 2051 ms
2020-03-17 16:49:01 -Filter xssFilter was not registered (disabled)
2020-03-17 16:49:02 -HikariPool-1 - Starting...
2020-03-17 16:49:02 -HikariPool-1 - Start completed.
2020-03-17 16:49:02 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-17 16:49:02 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-17 16:49:02 -HHH000206: hibernate.properties not found
2020-03-17 16:49:02 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-17 16:49:02 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-17 16:49:02 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-17 16:49:03 -Using default implementation for ThreadExecutor
2020-03-17 16:49:03 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-17 16:49:03 -Quartz Scheduler v.2.3.0 created.
2020-03-17 16:49:03 -RAMJobStore initialized.
2020-03-17 16:49:03 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-17 16:49:03 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-17 16:49:03 -Quartz scheduler version: 2.3.0
2020-03-17 16:49:03 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1216eb3f
2020-03-17 16:49:03 -STAET TaskExecutorConfig
2020-03-17 16:49:03 -Initializing ExecutorService
2020-03-17 16:49:03 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-17 16:49:04 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-17 16:49:04 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-17 16:49:04 -Initializing ExecutorService 'taskScheduler'
2020-03-17 16:49:04 -Starting Quartz Scheduler now
2020-03-17 16:49:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-17 16:49:04 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-17 16:49:04 -Using a shared selector for servlet write/read
2020-03-17 16:49:04 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-17 16:49:04 -Started LongEcologicalApplication in 5.622 seconds (JVM running for 6.693)
2020-03-17 16:50:06 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-17 16:50:06 -Initializing Servlet 'dispatcherServlet'
2020-03-17 16:50:06 -Completed initialization in 13 ms
2020-03-17 16:50:06 -此处进行解密+验签+身份验证
2020-03-17 16:50:06 -此处进行解密+验签+身份验证
2020-03-17 16:50:06 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-17 16:50:06 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-17 16:50:06 -Starting without optional epoll library
2020-03-17 16:50:06 -Starting without optional kqueue library
2020-03-17 16:50:06 -此处进行解密+验签+身份验证
2020-03-17 16:50:06 -此处进行解密+验签+身份验证
2020-03-17 16:50:06 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-17 16:50:06 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-17 16:50:06 -解密：
2020-03-17 16:50:06 -解密：
2020-03-17 16:50:06 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-17 16:50:06 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-17 16:50:06 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-17 16:50:06 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-17 16:50:06 -==> Parameters: 04(String), 04(String)
2020-03-17 16:50:06 -==> Parameters: 04(String), 04(String)
2020-03-17 16:50:06 -<==      Total: 0
2020-03-17 16:50:06 -<==      Total: 0
2020-03-17 16:50:06 -耗时 : 58
2020-03-17 16:50:06 -耗时 : 58
2020-03-17 16:50:07 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-17 16:50:07 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-17 16:50:07 -耗时 : 912
2020-03-17 16:50:07 -耗时 : 638
2020-03-17 16:50:07 -此处进行解密+验签+身份验证
2020-03-17 16:50:07 -此处进行解密+验签+身份验证
2020-03-17 16:50:07 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"AFD846A088266FF11804C28F40E404BC","version_no":"450000000145206","login_type":"token","token":"469|NGF0526KR5J2X1DZ0D79F21ZTFKOYGBN","sys_user_account":""}
2020-03-17 16:50:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-17 16:50:07 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"AFD846A088266FF11804C28F40E404BC","version_no":"450000000145206","login_type":"token","token":"469|NGF0526KR5J2X1DZ0D79F21ZTFKOYGBN","sys_user_account":""}
2020-03-17 16:50:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-17 16:50:07 -token值=======469|NGF0526KR5J2X1DZ0D79F21ZTFKOYGBN
2020-03-17 16:50:07 -token值=======469|NGF0526KR5J2X1DZ0D79F21ZTFKOYGBN
2020-03-17 16:50:07 -耗时 : 9
2020-03-17 16:50:07 -耗时 : 12
2020-03-17 16:50:23 -此处进行解密+验签+身份验证
2020-03-17 16:50:23 -解密：{"sys_user_account":"18802671616","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"64A57C7AC4EC8BFF1C1F41C38D9982FF","version_no":"450000000145206","login_type":"account"}
2020-03-17 16:50:23 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-17 16:50:23 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-17 16:50:23 -==> Parameters: 18802671616(String)
2020-03-17 16:50:23 -<==      Total: 1
2020-03-17 16:50:23 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-17 16:50:23 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200317(String), 165023(String), 426(Integer)
2020-03-17 16:50:23 -<==    Updates: 1
2020-03-17 16:50:23 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-17 16:50:23 -==> Parameters: 25(String)
2020-03-17 16:50:23 -<==      Total: 1
2020-03-17 16:50:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-17 16:50:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-17 16:50:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-17 16:50:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-17 16:50:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-17 16:50:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-17 16:50:23 -耗时 : 126
2020-03-17 16:50:23 -此处进行解密+验签+身份验证
2020-03-17 16:50:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:50:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:50:23 -==> Parameters: 426(String)
2020-03-17 16:50:23 -<==      Total: 1
2020-03-17 16:50:23 -耗时 : 20
2020-03-17 16:50:23 -此处进行解密+验签+身份验证
2020-03-17 16:50:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:23 -此处进行解密+验签+身份验证
2020-03-17 16:50:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:23 -此处进行解密+验签+身份验证
2020-03-17 16:50:24 -此处进行解密+验签+身份验证
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:24 -解密：
2020-03-17 16:50:24 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:24 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-17 16:50:24 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-17 16:50:24 -==> Parameters: 
2020-03-17 16:50:24 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-17 16:50:24 -==> Parameters: 01(String), 01(String)
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-17 16:50:24 -此处进行解密+验签+身份验证
2020-03-17 16:50:24 -此处进行解密+验签+身份验证
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:24 -<==      Total: 3
2020-03-17 16:50:24 -耗时 : 15
2020-03-17 16:50:24 -<==      Total: 4
2020-03-17 16:50:24 -耗时 : 20
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:24 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-17 16:50:24 -==> Parameters: 426(String)
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:50:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:50:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:50:24 -==> Parameters: 426(String)
2020-03-17 16:50:24 -<==      Total: 2
2020-03-17 16:50:24 -耗时 : 28
2020-03-17 16:50:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:50:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:50:24 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -耗时 : 13
2020-03-17 16:50:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:50:24 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:50:24 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:50:24 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:50:24 -==> Parameters: 
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:50:24 -==> Parameters: 
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:50:24 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:50:24 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:24 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:50:24 -<==    Updates: 1
2020-03-17 16:50:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:24 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -耗时 : 221
2020-03-17 16:50:24 -<==      Total: 1
2020-03-17 16:50:24 -耗时 : 240
2020-03-17 16:50:27 -此处进行解密+验签+身份验证
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-17 16:50:27 -此处进行解密+验签+身份验证
2020-03-17 16:50:27 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-17 16:50:27 -==> Parameters: 426(String)
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:27 -此处进行解密+验签+身份验证
2020-03-17 16:50:27 -此处进行解密+验签+身份验证
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:27 -<==      Total: 1
2020-03-17 16:50:27 -耗时 : 23
2020-03-17 16:50:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-17 16:50:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-17 16:50:27 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-17 16:50:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-17 16:50:27 -==> Parameters: 426(String), 202003(String)
2020-03-17 16:50:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-17 16:50:27 -==> Parameters: 426(String), 202003(String)
2020-03-17 16:50:27 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-17 16:50:27 -==> Parameters: 426(String), 202003(String)
2020-03-17 16:50:27 -<==      Total: 1
2020-03-17 16:50:27 -耗时 : 21
2020-03-17 16:50:27 -<==      Total: 1
2020-03-17 16:50:27 -耗时 : 35
2020-03-17 16:50:27 -<==      Total: 1
2020-03-17 16:50:27 -耗时 : 33
2020-03-17 16:50:39 -此处进行解密+验签+身份验证
2020-03-17 16:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:39 -此处进行解密+验签+身份验证
2020-03-17 16:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-17 16:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:39 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-17 16:50:39 -==> Parameters: 202003(String), 426(String)
2020-03-17 16:50:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-17 16:50:39 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-17 16:50:39 -==> Parameters: 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-17 16:50:39 -==> Parameters: 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-17 16:50:39 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-17 16:50:39 -==> Parameters: 202003(String), 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-17 16:50:39 -==> Parameters: 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-17 16:50:39 -==> Parameters: 202003(String), 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-17 16:50:39 -==> Parameters: 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -耗时 : 89
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-17 16:50:39 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:39 -<==      Total: 1
2020-03-17 16:50:39 -耗时 : 238
2020-03-17 16:50:43 -此处进行解密+验签+身份验证
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:43 -此处进行解密+验签+身份验证
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:43 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyEposDetail
2020-03-17 16:50:43 -此处进行解密+验签+身份验证
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:43 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-17 16:50:43 -==> Parameters: 426(String), 20200317(String)
2020-03-17 16:50:43 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyEposDetail
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:43 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-17 16:50:43 -==> Parameters: 426(String), 202003(String)
2020-03-17 16:50:43 -此处进行解密+验签+身份验证
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:43 -<==      Total: 1
2020-03-17 16:50:43 -耗时 : 20
2020-03-17 16:50:43 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantEposDetail
2020-03-17 16:50:43 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-17 16:50:43 -==> Parameters: 426(String), 20200317(String)
2020-03-17 16:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:43 -<==      Total: 1
2020-03-17 16:50:43 -耗时 : 21
2020-03-17 16:50:43 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantEposDetail
2020-03-17 16:50:43 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-17 16:50:43 -==> Parameters: 426(String), 202003(String)
2020-03-17 16:50:43 -<==      Total: 1
2020-03-17 16:50:43 -耗时 : 15
2020-03-17 16:50:43 -<==      Total: 1
2020-03-17 16:50:43 -耗时 : 13
2020-03-17 16:50:49 -此处进行解密+验签+身份验证
2020-03-17 16:50:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:50 -此处进行解密+验签+身份验证
2020-03-17 16:50:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:50:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:50:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:50:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:50:50 -==> Parameters: 426(String)
2020-03-17 16:50:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:50:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:50:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -耗时 : 18
2020-03-17 16:50:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:50:50 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:50 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:50 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:50:50 -<==    Updates: 1
2020-03-17 16:50:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:50:50 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:50 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:50 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:50:50 -<==    Updates: 1
2020-03-17 16:50:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:50:50 -==> Parameters: 
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:50 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:50 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:50:50 -<==    Updates: 1
2020-03-17 16:50:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:50:50 -==> Parameters: 426(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:50 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:50:50 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:50:50 -<==    Updates: 1
2020-03-17 16:50:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:50:50 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:50:50 -<==      Total: 1
2020-03-17 16:50:50 -耗时 : 218
2020-03-17 16:51:07 -此处进行解密+验签+身份验证
2020-03-17 16:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:07 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getDeductEposList
2020-03-17 16:51:07 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.assess_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_deduct_record t INNER JOIN t_user_trapos_assess_info t1 on t.assess_id = t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date,t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_deduct_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id where t.user_id=? and t.pos_type='03' and t.cre_date between ? and ? ) tt,(SELECT @rownum:=0) r order by tt.order_id desc ) t limit 0,10 
2020-03-17 16:51:07 -==> Parameters: 426(String), 20200301(String), 20200331(String), 426(String), 20200301(String), 20200331(String)
2020-03-17 16:51:07 -<==      Total: 0
2020-03-17 16:51:07 -耗时 : 19
2020-03-17 16:51:18 -此处进行解密+验签+身份验证
2020-03-17 16:51:18 -此处进行解密+验签+身份验证
2020-03-17 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:51:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:51:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:51:18 -==> Parameters: 426(String)
2020-03-17 16:51:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -耗时 : 19
2020-03-17 16:51:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:51:18 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:18 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:18 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:51:18 -<==    Updates: 1
2020-03-17 16:51:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:51:18 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:18 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:18 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:51:18 -<==    Updates: 1
2020-03-17 16:51:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:51:18 -==> Parameters: 
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:18 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:18 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:51:18 -<==    Updates: 1
2020-03-17 16:51:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:51:18 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:18 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:18 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:51:18 -<==    Updates: 1
2020-03-17 16:51:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:18 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:51:18 -<==      Total: 1
2020-03-17 16:51:18 -耗时 : 233
2020-03-17 16:51:25 -此处进行解密+验签+身份验证
2020-03-17 16:51:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:25 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardEposList
2020-03-17 16:51:25 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type='epos' and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-17 16:51:25 -==> Parameters: 426(String), 20200301(String), 20200331(String), 426(String), 20200301(String), 20200331(String)
2020-03-17 16:51:25 -<==      Total: 0
2020-03-17 16:51:25 -耗时 : 21
2020-03-17 16:51:33 -此处进行解密+验签+身份验证
2020-03-17 16:51:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:33 -此处进行解密+验签+身份验证
2020-03-17 16:51:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:51:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:51:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:51:33 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:51:33 -==> Parameters: 426(String)
2020-03-17 16:51:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:51:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:51:33 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -耗时 : 20
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:33 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:33 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:51:33 -<==    Updates: 1
2020-03-17 16:51:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:51:33 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:33 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:33 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:51:33 -<==    Updates: 1
2020-03-17 16:51:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:51:33 -==> Parameters: 
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:33 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:33 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:51:33 -<==    Updates: 1
2020-03-17 16:51:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:51:33 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:33 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:33 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:51:33 -<==    Updates: 1
2020-03-17 16:51:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:33 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:51:33 -<==      Total: 1
2020-03-17 16:51:33 -耗时 : 195
2020-03-17 16:51:37 -此处进行解密+验签+身份验证
2020-03-17 16:51:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:37 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackEposList
2020-03-17 16:51:37 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-17 16:51:37 -==> Parameters: 426(String), 20200301(String), 20200331(String)
2020-03-17 16:51:37 -<==      Total: 0
2020-03-17 16:51:37 -耗时 : 23
2020-03-17 16:51:46 -此处进行解密+验签+身份验证
2020-03-17 16:51:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:46 -此处进行解密+验签+身份验证
2020-03-17 16:51:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:51:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:51:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:51:46 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:51:46 -==> Parameters: 426(String)
2020-03-17 16:51:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:51:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:51:46 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -耗时 : 18
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:46 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:51:46 -<==    Updates: 1
2020-03-17 16:51:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:51:46 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:46 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:51:46 -<==    Updates: 1
2020-03-17 16:51:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:51:46 -==> Parameters: 
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:46 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:46 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:51:46 -<==    Updates: 1
2020-03-17 16:51:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:51:46 -==> Parameters: 426(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:46 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:51:46 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:51:46 -<==    Updates: 1
2020-03-17 16:51:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:51:46 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:51:46 -<==      Total: 1
2020-03-17 16:51:46 -耗时 : 208
2020-03-17 16:51:51 -此处进行解密+验签+身份验证
2020-03-17 16:51:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:51:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:51:51 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitEposList
2020-03-17 16:51:51 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-17 16:51:51 -==> Parameters: 426(String), 20200301(String), 20200331(String)
2020-03-17 16:51:52 -<==      Total: 5
2020-03-17 16:51:52 -耗时 : 422
2020-03-17 16:52:06 -此处进行解密+验签+身份验证
2020-03-17 16:52:06 -此处进行解密+验签+身份验证
2020-03-17 16:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:52:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:52:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:52:06 -==> Parameters: 426(String)
2020-03-17 16:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -耗时 : 18
2020-03-17 16:52:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:52:06 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:06 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:06 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:52:06 -<==    Updates: 1
2020-03-17 16:52:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:52:06 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:06 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:06 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:52:06 -<==    Updates: 1
2020-03-17 16:52:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:52:06 -==> Parameters: 
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:06 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:06 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:52:06 -<==    Updates: 1
2020-03-17 16:52:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:52:06 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:06 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:52:06 -<==      Total: 1
2020-03-17 16:52:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:06 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:52:07 -<==    Updates: 1
2020-03-17 16:52:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:07 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:52:07 -<==      Total: 1
2020-03-17 16:52:07 -耗时 : 224
2020-03-17 16:52:32 -此处进行解密+验签+身份验证
2020-03-17 16:52:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:52:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:52:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:52:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:52:32 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:32 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:32 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:52:32 -<==    Updates: 1
2020-03-17 16:52:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:52:32 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:32 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:32 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:52:32 -<==    Updates: 1
2020-03-17 16:52:32 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:52:32 -==> Parameters: 
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:32 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:32 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:52:32 -<==    Updates: 1
2020-03-17 16:52:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:52:32 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:32 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:52:32 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:52:32 -<==    Updates: 1
2020-03-17 16:52:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:52:32 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:52:32 -<==      Total: 1
2020-03-17 16:52:32 -耗时 : 210
2020-03-17 16:52:38 -此处进行解密+验签+身份验证
2020-03-17 16:52:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:38 -此处进行解密+验签+身份验证
2020-03-17 16:52:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-17 16:52:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-17 16:52:38 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-17 16:52:38 -==> Parameters: 426(String)
2020-03-17 16:52:38 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-17 16:52:38 -==> Parameters: 426(String), 426(String)
2020-03-17 16:52:38 -<==      Total: 204
2020-03-17 16:52:38 -耗时 : 63
2020-03-17 16:52:40 -此处进行解密+验签+身份验证
2020-03-17 16:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:40 -此处进行解密+验签+身份验证
2020-03-17 16:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:52:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-17 16:52:40 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-17 16:52:40 -==> Parameters: 426(String)
2020-03-17 16:52:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-17 16:52:40 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-17 16:52:40 -==> Parameters: 426(String), M351846100131(String)
2020-03-17 16:52:40 -<==      Total: 25
2020-03-17 16:52:40 -耗时 : 23
2020-03-17 16:52:40 -<==      Total: 1
2020-03-17 16:52:40 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-17 16:52:40 -==> Parameters: 
2020-03-17 16:52:40 -<==      Total: 101
2020-03-17 16:52:40 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-17 16:52:40 -==> Parameters: M351846100131(String)
2020-03-17 16:52:40 -<==      Total: 0
2020-03-17 16:52:40 -耗时 : 102
2020-03-17 16:53:04 -<==      Total: 638
2020-03-17 16:53:04 -耗时 : 26128
2020-03-17 16:53:46 -此处进行解密+验签+身份验证
2020-03-17 16:53:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:53:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:53:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-17 16:53:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-17 16:53:46 -==> Parameters: 426(String)
2020-03-17 16:53:46 -<==      Total: 0
2020-03-17 16:53:46 -耗时 : 37
2020-03-17 16:54:04 -此处进行解密+验签+身份验证
2020-03-17 16:54:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:54:04 -此处进行解密+验签+身份验证
2020-03-17 16:54:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:54:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:54:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:54:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-17 16:54:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-17 16:54:04 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-17 16:54:04 -==> Parameters: 426(String), MPOS(String)
2020-03-17 16:54:04 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-17 16:54:04 -==> Parameters: 426(String), TraditionalPOS(String)
2020-03-17 16:54:04 -<==      Total: 8
2020-03-17 16:54:04 -耗时 : 33
2020-03-17 16:54:04 -<==      Total: 10
2020-03-17 16:54:04 -耗时 : 32
2020-03-17 16:54:07 -此处进行解密+验签+身份验证
2020-03-17 16:54:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:54:07 -此处进行解密+验签+身份验证
2020-03-17 16:54:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:54:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:54:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:54:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-17 16:54:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-17 16:54:07 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-17 16:54:07 -==> Parameters: 426(String), TrafficCard(String)
2020-03-17 16:54:07 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-17 16:54:07 -==> Parameters: 426(String), epos(String)
2020-03-17 16:54:07 -<==      Total: 0
2020-03-17 16:54:07 -耗时 : 29
2020-03-17 16:54:07 -<==      Total: 0
2020-03-17 16:54:07 -耗时 : 28
2020-03-17 16:54:32 -此处进行解密+验签+身份验证
2020-03-17 16:54:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:54:32 -此处进行解密+验签+身份验证
2020-03-17 16:54:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:54:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-17 16:54:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-17 16:54:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-17 16:54:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-17 16:54:32 -==> Parameters: 426(String)
2020-03-17 16:54:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-17 16:54:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-17 16:54:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -耗时 : 19
2020-03-17 16:54:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:54:32 -==> Parameters: 426(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:54:32 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:54:32 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-17 16:54:32 -<==    Updates: 1
2020-03-17 16:54:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-17 16:54:32 -==> Parameters: 426(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:54:32 -==> Parameters: recallFlag(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:54:32 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-17 16:54:32 -<==    Updates: 1
2020-03-17 16:54:32 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-17 16:54:32 -==> Parameters: 
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:54:32 -==> Parameters: collegeFlag(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:54:32 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-17 16:54:32 -<==    Updates: 1
2020-03-17 16:54:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-17 16:54:32 -==> Parameters: 426(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:54:32 -==> Parameters: cardFlag(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-17 16:54:32 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-17 16:54:32 -<==    Updates: 1
2020-03-17 16:54:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-17 16:54:32 -==> Parameters: appImgFlag(String), 426(String)
2020-03-17 16:54:32 -<==      Total: 1
2020-03-17 16:54:32 -耗时 : 223
