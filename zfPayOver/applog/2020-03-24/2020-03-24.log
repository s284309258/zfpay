2020-03-24 10:11:25 -Starting LongEcologicalApplication on PC-201905161910 with PID 14668 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-24 10:11:25 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-24 10:11:25 -No active profile set, falling back to default profiles: default
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 10:11:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 10:11:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 10:11:27 -Finished Spring Data repository scanning in 128ms. Found 0 repository interfaces.
2020-03-24 10:11:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 10:11:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 10:11:27 -Finished Spring Data repository scanning in 61ms. Found 0 repository interfaces.
2020-03-24 10:11:27 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$82764c65] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 10:11:28 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7cfa3105] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 10:11:28 -Tomcat initialized with port(s): 8080 (http)
2020-03-24 10:11:28 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-24 10:11:28 -Starting service [Tomcat]
2020-03-24 10:11:28 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-24 10:11:28 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-24 10:11:29 -Initializing Spring embedded WebApplicationContext
2020-03-24 10:11:29 -Root WebApplicationContext: initialization completed in 3063 ms
2020-03-24 10:11:29 -Filter xssFilter was not registered (disabled)
2020-03-24 10:11:29 -HikariPool-1 - Starting...
2020-03-24 10:11:29 -HikariPool-1 - Start completed.
2020-03-24 10:11:29 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-24 10:11:29 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-24 10:11:29 -HHH000206: hibernate.properties not found
2020-03-24 10:11:30 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-24 10:11:30 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-24 10:11:30 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-24 10:11:31 -Using default implementation for ThreadExecutor
2020-03-24 10:11:31 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-24 10:11:31 -Quartz Scheduler v.2.3.0 created.
2020-03-24 10:11:31 -RAMJobStore initialized.
2020-03-24 10:11:31 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-24 10:11:31 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-24 10:11:31 -Quartz scheduler version: 2.3.0
2020-03-24 10:11:31 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@b5d9f1e
2020-03-24 10:11:31 -STAET TaskExecutorConfig
2020-03-24 10:11:31 -Initializing ExecutorService
2020-03-24 10:11:31 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-24 10:11:31 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-24 10:11:32 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-24 10:11:32 -Initializing ExecutorService 'taskScheduler'
2020-03-24 10:11:32 -Starting Quartz Scheduler now
2020-03-24 10:11:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-24 10:11:32 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-24 10:11:32 -Using a shared selector for servlet write/read
2020-03-24 10:11:32 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-24 10:11:32 -Started LongEcologicalApplication in 7.676 seconds (JVM running for 9.508)
2020-03-24 10:12:06 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-24 10:12:06 -Initializing Servlet 'dispatcherServlet'
2020-03-24 10:12:06 -Completed initialization in 13 ms
2020-03-24 10:12:06 -此处进行解密+验签+身份验证
2020-03-24 10:12:06 -此处进行解密+验签+身份验证
2020-03-24 10:12:06 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-24 10:12:06 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-24 10:12:07 -Starting without optional epoll library
2020-03-24 10:12:07 -Starting without optional kqueue library
2020-03-24 10:12:07 -解密：
2020-03-24 10:12:07 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-24 10:12:07 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-24 10:12:07 -==> Parameters: 04(String), 04(String)
2020-03-24 10:12:07 -<==      Total: 1
2020-03-24 10:12:07 -耗时 : 67
2020-03-24 10:12:07 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-24 10:12:07 -耗时 : 998
2020-03-24 10:12:07 -此处进行解密+验签+身份验证
2020-03-24 10:12:07 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"068F87BF2ACFA220B5664363103676AC","device_no":"1.0.9","device_type":"android","sys_user_account":"","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-24 10:12:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-24 10:12:07 -token值=======181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8
2020-03-24 10:12:07 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-24 10:12:07 -==> Parameters: 181(String)
2020-03-24 10:12:07 -<==      Total: 1
2020-03-24 10:12:07 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-24 10:12:07 -==> Parameters: 26(String)
2020-03-24 10:12:07 -<==      Total: 1
2020-03-24 10:12:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-24 10:12:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-24 10:12:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-24 10:12:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-24 10:12:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-24 10:12:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-24 10:12:07 -耗时 : 116
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 10:12:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 10:12:10 -==> Parameters: 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -耗时 : 22
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:10 -解密：
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-24 10:12:10 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-24 10:12:10 -==> Parameters: 01(String), 01(String)
2020-03-24 10:12:10 -<==      Total: 4
2020-03-24 10:12:10 -耗时 : 13
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-24 10:12:10 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-24 10:12:10 -==> Parameters: 181(String)
2020-03-24 10:12:10 -<==      Total: 2
2020-03-24 10:12:10 -耗时 : 19
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:10 -此处进行解密+验签+身份验证
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 10:12:10 -==> Parameters: 181(String)
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -耗时 : 13
2020-03-24 10:12:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 10:12:10 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 10:12:10 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 10:12:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 10:12:10 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-24 10:12:10 -==> Parameters: 
2020-03-24 10:12:10 -<==      Total: 3
2020-03-24 10:12:10 -耗时 : 16
2020-03-24 10:12:10 -<==      Total: 2
2020-03-24 10:12:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 2
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 10:12:10 -<==    Updates: 2
2020-03-24 10:12:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 10:12:10 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:10 -<==    Updates: 2
2020-03-24 10:12:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 10:12:10 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 10:12:10 -<==    Updates: 1
2020-03-24 10:12:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 10:12:10 -==> Parameters: 
2020-03-24 10:12:10 -<==    Updates: 1
2020-03-24 10:12:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 10:12:10 -==> Parameters: 
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 10:12:10 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -<==    Updates: 1
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 10:12:10 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 10:12:10 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 10:12:10 -<==    Updates: 1
2020-03-24 10:12:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 10:12:10 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:10 -<==    Updates: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -耗时 : 153
2020-03-24 10:12:10 -<==      Total: 1
2020-03-24 10:12:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 10:12:10 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 10:12:10 -<==    Updates: 1
2020-03-24 10:12:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 10:12:10 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 10:12:11 -<==      Total: 1
2020-03-24 10:12:11 -耗时 : 221
2020-03-24 10:12:46 -此处进行解密+验签+身份验证
2020-03-24 10:12:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-24 10:12:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-24 10:12:46 -==> Parameters: 181(String)
2020-03-24 10:12:46 -<==      Total: 1164
2020-03-24 10:12:46 -耗时 : 109
2020-03-24 10:12:46 -此处进行解密+验签+身份验证
2020-03-24 10:12:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-24 10:12:46 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 10:12:46 -==> Parameters: 181(String), 181(String)
2020-03-24 10:12:46 -<==      Total: 1600
2020-03-24 10:12:46 -耗时 : 249
2020-03-24 10:12:49 -此处进行解密+验签+身份验证
2020-03-24 10:12:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:49 -此处进行解密+验签+身份验证
2020-03-24 10:12:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 10:12:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 10:12:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-24 10:12:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-24 10:12:49 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-24 10:12:49 -==> Parameters: 181(String)
2020-03-24 10:12:49 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-24 10:12:49 -==> Parameters: 181(String), M351846173306(String)
2020-03-24 10:12:49 -<==      Total: 143
2020-03-24 10:12:49 -耗时 : 22
2020-03-24 10:12:49 -<==      Total: 1
2020-03-24 10:12:49 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-24 10:12:49 -==> Parameters: 
2020-03-24 10:12:49 -<==      Total: 101
2020-03-24 10:12:49 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-24 10:12:49 -==> Parameters: M351846173306(String)
2020-03-24 10:12:49 -<==      Total: 1
2020-03-24 10:12:49 -耗时 : 81
2020-03-24 10:23:11 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 10:23:11 -Reconnected to 120.25.164.176:10379
2020-03-24 10:23:31 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 10:23:32 -Reconnected to 120.25.164.176:10379
2020-03-24 10:23:48 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 10:23:48 -Reconnected to 120.25.164.176:10379
2020-03-24 11:52:02 -此处进行解密+验签+身份验证
2020-03-24 11:52:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:02 -此处进行解密+验签+身份验证
2020-03-24 11:52:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:02 -解密异常：{pos_type=MPOS, sign=C43D52FC4EF41C60BC824B921D80BC64, token=181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8}
2020-03-24 11:52:02 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 11:52:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-24 11:52:02 -耗时 : 2
2020-03-24 11:52:02 -Reconnected to 120.25.164.176:10379
2020-03-24 11:52:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-24 11:52:02 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-24 11:52:02 -==> Parameters: 181(String), TraditionalPOS(String)
2020-03-24 11:52:02 -<==      Total: 10
2020-03-24 11:52:02 -耗时 : 46
2020-03-24 11:52:05 -此处进行解密+验签+身份验证
2020-03-24 11:52:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-24 11:52:05 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-24 11:52:05 -==> Parameters: 181(String)
2020-03-24 11:52:05 -<==      Total: 850
2020-03-24 11:52:05 -耗时 : 72
2020-03-24 11:52:06 -此处进行解密+验签+身份验证
2020-03-24 11:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-24 11:52:06 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-24 11:52:06 -==> Parameters: 181(String)
2020-03-24 11:52:06 -<==      Total: 850
2020-03-24 11:52:06 -耗时 : 62
2020-03-24 11:52:14 -此处进行解密+验签+身份验证
2020-03-24 11:52:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:14 -此处进行解密+验签+身份验证
2020-03-24 11:52:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-24 11:52:14 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-24 11:52:14 -==> Parameters: 181(String), 00000302J8NL01087403(String)
2020-03-24 11:52:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-24 11:52:14 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-24 11:52:14 -==> Parameters: 181(String)
2020-03-24 11:52:14 -<==      Total: 143
2020-03-24 11:52:14 -耗时 : 18
2020-03-24 11:52:15 -<==      Total: 1
2020-03-24 11:52:15 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-24 11:52:15 -==> Parameters: 
2020-03-24 11:52:15 -<==      Total: 101
2020-03-24 11:52:15 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-24 11:52:15 -==> Parameters: 00000302J8NL01087403(String)
2020-03-24 11:52:15 -<==      Total: 1
2020-03-24 11:52:15 -耗时 : 63
2020-03-24 11:52:40 -此处进行解密+验签+身份验证
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-03-24 11:52:40 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-24 11:52:40 -==> Parameters: 70(String)
2020-03-24 11:52:40 -<==      Total: 1
2020-03-24 11:52:40 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_70,save content:{referer_id=181, parent_chain=181, user_tel=15296017722, id_card=450322198810074023, real_name=唐双弟, algebra=2, cre_date=20181105, cre_time=201728, login_password=59659f37515e697222780d5f966161be, manager_id=26, pay_password=a7bdc1612295f4a6faa48ad8ba8e4826, id=70, auth_status=09, status=0}
2020-03-24 11:52:40 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-24 11:52:40 -==> Parameters: 181(String), 00000302J8NL01087403(String), 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String)
2020-03-24 11:52:40 -<==      Total: 1
2020-03-24 11:52:40 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? ) 
2020-03-24 11:52:40 -==> Parameters: 181(String), 00000302J8NL01087403(String)
2020-03-24 11:52:40 -<==      Total: 1
2020-03-24 11:52:40 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and is_reward='0' and sn in ( ? ) 
2020-03-24 11:52:40 -==> Parameters: 181(String), 00000302J8NL01087403(String)
2020-03-24 11:52:40 -<==      Total: 1
2020-03-24 11:52:40 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-24 11:52:40 -==> Parameters: 70(String), 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String), 20200324(String), 115240(String), 0.520(String), 1(String), 181(String), 00000302J8NL01087403(String), 70(String)
2020-03-24 11:52:40 -<==    Updates: 1
2020-03-24 11:52:40 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-24 11:52:40 -==> Parameters: 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String), 20200324(String), 115240(String), 70(String), 00000302J8NL01087403(String)
2020-03-24 11:52:40 -<==    Updates: 0
2020-03-24 11:52:40 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-24 11:52:40 -==> Parameters: 20200324(String), 115240(String), 181(String), 00000302J8NL01087403(String)
2020-03-24 11:52:40 -<==    Updates: 1
2020-03-24 11:52:40 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-24 11:52:40 -==> Parameters: 181_20200324115240(String), 00000302J8NL01087403(String), 70(String), null, 2020-03-24 11:52:40(String), 181(String)
2020-03-24 11:52:40 -<==    Updates: 1
2020-03-24 11:52:40 -耗时 : 278
2020-03-24 11:52:40 -此处进行解密+验签+身份验证
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-24 11:52:40 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 11:52:40 -==> Parameters: 181(String), 181(String)
2020-03-24 11:52:40 -此处进行解密+验签+身份验证
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-24 11:52:40 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-24 11:52:40 -==> Parameters: 181(String)
2020-03-24 11:52:40 -<==      Total: 1600
2020-03-24 11:52:40 -耗时 : 56
2020-03-24 11:52:40 -<==      Total: 849
2020-03-24 11:52:40 -耗时 : 73
2020-03-24 11:52:43 -此处进行解密+验签+身份验证
2020-03-24 11:52:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-24 11:52:43 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-24 11:52:43 -==> Parameters: 181(String), MPOS(String)
2020-03-24 11:52:43 -此处进行解密+验签+身份验证
2020-03-24 11:52:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-24 11:52:43 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-24 11:52:43 -==> Parameters: 181(String), TraditionalPOS(String)
2020-03-24 11:52:43 -<==      Total: 10
2020-03-24 11:52:43 -耗时 : 39
2020-03-24 11:52:43 -<==      Total: 10
2020-03-24 11:52:43 -耗时 : 35
2020-03-24 11:52:50 -此处进行解密+验签+身份验证
2020-03-24 11:52:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:52:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:52:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-24 11:52:50 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-24 11:52:50 -==> Parameters: 181(String), epos(String)
2020-03-24 11:52:50 -<==      Total: 6
2020-03-24 11:52:50 -耗时 : 21
2020-03-24 11:53:03 -此处进行解密+验签+身份验证
2020-03-24 11:53:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:53:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:53:03 -此处进行解密+验签+身份验证
2020-03-24 11:53:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:53:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:53:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-24 11:53:03 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-24 11:53:03 -==> Parameters: 181(String)
2020-03-24 11:53:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-24 11:53:03 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-24 11:53:03 -==> Parameters: 181(String), 00000302J8NL01087407(String)
2020-03-24 11:53:03 -<==      Total: 143
2020-03-24 11:53:03 -耗时 : 12
2020-03-24 11:53:03 -<==      Total: 1
2020-03-24 11:53:03 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-24 11:53:03 -==> Parameters: 
2020-03-24 11:53:03 -<==      Total: 101
2020-03-24 11:53:03 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-24 11:53:03 -==> Parameters: 00000302J8NL01087407(String)
2020-03-24 11:53:03 -<==      Total: 1
2020-03-24 11:53:03 -耗时 : 61
2020-03-24 11:53:21 -此处进行解密+验签+身份验证
2020-03-24 11:53:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:53:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:53:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-24 11:53:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-03-24 11:53:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-03-24 11:53:21 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-24 11:53:21 -==> Parameters: 181(String), 00000302J8NL01087407(String), 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String)
2020-03-24 11:53:21 -<==      Total: 1
2020-03-24 11:53:21 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? ) 
2020-03-24 11:53:21 -==> Parameters: 181(String), 00000302J8NL01087407(String)
2020-03-24 11:53:21 -<==      Total: 1
2020-03-24 11:53:21 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and is_reward='0' and sn in ( ? ) 
2020-03-24 11:53:21 -==> Parameters: 181(String), 00000302J8NL01087407(String)
2020-03-24 11:53:21 -<==      Total: 1
2020-03-24 11:53:21 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-24 11:53:21 -==> Parameters: 70(String), 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String), 20200324(String), 115321(String), 0.520(String), 1(String), 181(String), 00000302J8NL01087407(String), 70(String)
2020-03-24 11:53:21 -<==    Updates: 1
2020-03-24 11:53:21 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-24 11:53:21 -==> Parameters: 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String), 20200324(String), 115321(String), 70(String), 00000302J8NL01087407(String)
2020-03-24 11:53:22 -<==    Updates: 0
2020-03-24 11:53:22 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-24 11:53:22 -==> Parameters: 20200324(String), 115321(String), 181(String), 00000302J8NL01087407(String)
2020-03-24 11:53:22 -<==    Updates: 1
2020-03-24 11:53:22 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-24 11:53:22 -==> Parameters: 181_20200324115322(String), 00000302J8NL01087407(String), 70(String), null, 2020-03-24 11:53:22(String), 181(String)
2020-03-24 11:53:22 -<==    Updates: 1
2020-03-24 11:53:22 -耗时 : 198
2020-03-24 11:53:22 -此处进行解密+验签+身份验证
2020-03-24 11:53:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:53:22 -此处进行解密+验签+身份验证
2020-03-24 11:53:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 11:53:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:53:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 11:53:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-24 11:53:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-24 11:53:22 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 11:53:22 -==> Parameters: 181(String), 181(String)
2020-03-24 11:53:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-24 11:53:22 -==> Parameters: 181(String)
2020-03-24 11:53:22 -<==      Total: 1600
2020-03-24 11:53:22 -耗时 : 28
2020-03-24 11:53:22 -<==      Total: 848
2020-03-24 11:53:22 -耗时 : 60
2020-03-24 15:37:59 -此处进行解密+验签+身份验证
2020-03-24 15:37:59 -此处进行解密+验签+身份验证
2020-03-24 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:37:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:00 -解密异常：{sign=E42A2A8FED7863E5CEAD011226C3C551, token=181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8}
2020-03-24 15:38:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 15:38:00 -耗时 : 0
2020-03-24 15:38:00 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 15:38:00 -Reconnected to 120.25.164.176:10379
2020-03-24 15:38:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:38:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:38:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:38:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:38:00 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:00 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 2
2020-03-24 15:38:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:00 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:38:00 -<==    Updates: 2
2020-03-24 15:38:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:38:00 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:00 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:00 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:38:00 -<==    Updates: 1
2020-03-24 15:38:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:38:00 -==> Parameters: 
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:00 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:00 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:38:00 -<==    Updates: 1
2020-03-24 15:38:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:38:00 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:00 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:00 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:38:00 -<==    Updates: 1
2020-03-24 15:38:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:00 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:38:00 -<==      Total: 1
2020-03-24 15:38:00 -耗时 : 190
2020-03-24 15:38:19 -Starting LongEcologicalApplication on PC-201905161910 with PID 10064 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-24 15:38:19 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-24 15:38:19 -No active profile set, falling back to default profiles: default
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 15:38:20 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 15:38:20 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 15:38:21 -Finished Spring Data repository scanning in 85ms. Found 0 repository interfaces.
2020-03-24 15:38:21 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 15:38:21 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 15:38:21 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-24 15:38:21 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$66f8ee1c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 15:38:21 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$617cd2bc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 15:38:22 -Tomcat initialized with port(s): 8080 (http)
2020-03-24 15:38:22 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-24 15:38:22 -Starting service [Tomcat]
2020-03-24 15:38:22 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-24 15:38:22 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-24 15:38:22 -Initializing Spring embedded WebApplicationContext
2020-03-24 15:38:22 -Root WebApplicationContext: initialization completed in 2157 ms
2020-03-24 15:38:22 -Filter xssFilter was not registered (disabled)
2020-03-24 15:38:22 -HikariPool-1 - Starting...
2020-03-24 15:38:22 -HikariPool-1 - Start completed.
2020-03-24 15:38:22 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-24 15:38:22 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-24 15:38:22 -HHH000206: hibernate.properties not found
2020-03-24 15:38:23 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-24 15:38:23 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-24 15:38:23 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-24 15:38:23 -Using default implementation for ThreadExecutor
2020-03-24 15:38:23 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-24 15:38:23 -Quartz Scheduler v.2.3.0 created.
2020-03-24 15:38:23 -RAMJobStore initialized.
2020-03-24 15:38:23 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-24 15:38:23 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-24 15:38:23 -Quartz scheduler version: 2.3.0
2020-03-24 15:38:23 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3f866f50
2020-03-24 15:38:24 -STAET TaskExecutorConfig
2020-03-24 15:38:24 -Initializing ExecutorService
2020-03-24 15:38:24 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-24 15:38:24 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-24 15:38:24 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-24 15:38:25 -Initializing ExecutorService 'taskScheduler'
2020-03-24 15:38:25 -Starting Quartz Scheduler now
2020-03-24 15:38:25 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-24 15:38:25 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-24 15:38:25 -Using a shared selector for servlet write/read
2020-03-24 15:38:25 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-24 15:38:25 -Started LongEcologicalApplication in 5.944 seconds (JVM running for 7.044)
2020-03-24 15:38:37 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-24 15:38:37 -Initializing Servlet 'dispatcherServlet'
2020-03-24 15:38:37 -Completed initialization in 15 ms
2020-03-24 15:38:37 -此处进行解密+验签+身份验证
2020-03-24 15:38:37 -此处进行解密+验签+身份验证
2020-03-24 15:38:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:37 -Starting without optional epoll library
2020-03-24 15:38:37 -Starting without optional kqueue library
2020-03-24 15:38:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:38 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserCardList
2020-03-24 15:38:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-24 15:38:38 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-24 15:38:38 -==> Parameters: 1(String), 181(String), cardFlag(String)
2020-03-24 15:38:38 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? order by is_default desc,id desc 
2020-03-24 15:38:38 -==> Parameters: 181(String)
2020-03-24 15:38:38 -<==    Updates: 1
2020-03-24 15:38:38 -耗时 : 57
2020-03-24 15:38:38 -<==      Total: 1
2020-03-24 15:38:38 -耗时 : 75
2020-03-24 15:38:40 -此处进行解密+验签+身份验证
2020-03-24 15:38:40 -此处进行解密+验签+身份验证
2020-03-24 15:38:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:38:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:38:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 15:38:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:38:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 15:38:40 -==> Parameters: 181(String)
2020-03-24 15:38:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:38:40 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -耗时 : 25
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:40 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 2
2020-03-24 15:38:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:40 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:38:40 -<==    Updates: 2
2020-03-24 15:38:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:38:40 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:40 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:40 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:38:40 -<==    Updates: 1
2020-03-24 15:38:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:38:40 -==> Parameters: 
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:40 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:40 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:38:40 -<==    Updates: 1
2020-03-24 15:38:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:38:40 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:40 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:38:40 -==> Parameters: 0(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:38:40 -<==    Updates: 1
2020-03-24 15:38:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:38:40 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:38:40 -<==      Total: 1
2020-03-24 15:38:40 -耗时 : 245
2020-03-24 15:38:45 -此处进行解密+验签+身份验证
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:45 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-24 15:38:45 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-24 15:38:45 -==> Parameters: 181(String)
2020-03-24 15:38:45 -此处进行解密+验签+身份验证
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:45 -<==      Total: 1
2020-03-24 15:38:45 -耗时 : 23
2020-03-24 15:38:45 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-24 15:38:45 -此处进行解密+验签+身份验证
2020-03-24 15:38:45 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-24 15:38:45 -==> Parameters: 181(String), 202003(String)
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:45 -此处进行解密+验签+身份验证
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:45 -<==      Total: 1
2020-03-24 15:38:45 -耗时 : 18
2020-03-24 15:38:45 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-24 15:38:45 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-24 15:38:45 -==> Parameters: 181(String), 202003(String)
2020-03-24 15:38:45 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-24 15:38:45 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-24 15:38:45 -==> Parameters: 181(String), 202003(String)
2020-03-24 15:38:45 -<==      Total: 1
2020-03-24 15:38:45 -耗时 : 15
2020-03-24 15:38:45 -<==      Total: 1
2020-03-24 15:38:45 -耗时 : 27
2020-03-24 15:38:47 -此处进行解密+验签+身份验证
2020-03-24 15:38:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-24 15:38:47 -此处进行解密+验签+身份验证
2020-03-24 15:38:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:47 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-24 15:38:47 -==> Parameters: 181(String)
2020-03-24 15:38:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:47 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-24 15:38:47 -<==      Total: 1
2020-03-24 15:38:47 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-24 15:38:47 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:47 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-24 15:38:47 -==> Parameters: 202003(String), 181(String)
2020-03-24 15:38:47 -<==      Total: 1
2020-03-24 15:38:47 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-24 15:38:47 -==> Parameters: 181(String)
2020-03-24 15:38:47 -<==      Total: 1
2020-03-24 15:38:47 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-24 15:38:47 -==> Parameters: 202003(String), 181(String)
2020-03-24 15:38:47 -<==      Total: 1
2020-03-24 15:38:47 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-24 15:38:47 -==> Parameters: 181(String)
2020-03-24 15:38:47 -<==      Total: 1
2020-03-24 15:38:47 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-24 15:38:47 -==> Parameters: 202003(String), 181(String)
2020-03-24 15:38:47 -<==      Total: 1
2020-03-24 15:38:47 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-24 15:38:47 -==> Parameters: 181(String)
2020-03-24 15:38:47 -<==      Total: 0
2020-03-24 15:38:47 -耗时 : 237
2020-03-24 15:38:48 -<==      Total: 1
2020-03-24 15:38:48 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-24 15:38:48 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:48 -<==      Total: 1
2020-03-24 15:38:48 -耗时 : 1524
2020-03-24 15:38:52 -此处进行解密+验签+身份验证
2020-03-24 15:38:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:38:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:38:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-24 15:38:52 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-24 15:38:52 -==> Parameters: 181(String)
2020-03-24 15:38:52 -<==      Total: 1
2020-03-24 15:38:52 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-24 15:38:52 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:52 -<==      Total: 1
2020-03-24 15:38:52 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-24 15:38:52 -==> Parameters: 181(String), 181(String)
2020-03-24 15:38:52 -<==      Total: 1
2020-03-24 15:38:52 -耗时 : 228
2020-03-24 15:39:33 -此处进行解密+验签+身份验证
2020-03-24 15:39:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:39:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:39:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-24 15:39:33 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-24 15:39:33 -==> Parameters: 181(String)
2020-03-24 15:39:33 -<==      Total: 1
2020-03-24 15:39:33 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-24 15:39:33 -==> Parameters: 181(String), 181(String)
2020-03-24 15:39:33 -<==      Total: 1
2020-03-24 15:39:33 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-24 15:39:33 -==> Parameters: 181(String), 181(String)
2020-03-24 15:39:33 -<==      Total: 1
2020-03-24 15:39:33 -耗时 : 237
2020-03-24 15:39:40 -此处进行解密+验签+身份验证
2020-03-24 15:39:40 -此处进行解密+验签+身份验证
2020-03-24 15:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:39:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-24 15:39:40 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserCardList
2020-03-24 15:39:40 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-24 15:39:40 -==> Parameters: 1(String), 181(String), cardFlag(String)
2020-03-24 15:39:40 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? order by is_default desc,id desc 
2020-03-24 15:39:40 -==> Parameters: 181(String)
2020-03-24 15:39:40 -<==      Total: 1
2020-03-24 15:39:40 -耗时 : 20
2020-03-24 15:39:40 -<==    Updates: 1
2020-03-24 15:39:40 -耗时 : 27
2020-03-24 15:39:43 -此处进行解密+验签+身份验证
2020-03-24 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:39:43 -此处进行解密+验签+身份验证
2020-03-24 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:39:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:39:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 15:39:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:39:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 15:39:43 -==> Parameters: 181(String)
2020-03-24 15:39:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:39:43 -==> Parameters: 181(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -耗时 : 16
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:39:43 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 2
2020-03-24 15:39:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:39:43 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:39:43 -<==    Updates: 2
2020-03-24 15:39:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:39:43 -==> Parameters: 181(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:39:43 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:39:43 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:39:43 -<==    Updates: 1
2020-03-24 15:39:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:39:43 -==> Parameters: 
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:39:43 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:39:43 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:39:43 -<==    Updates: 1
2020-03-24 15:39:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:39:43 -==> Parameters: 181(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:39:43 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:39:43 -==> Parameters: 0(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:39:43 -<==    Updates: 1
2020-03-24 15:39:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:39:43 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:39:43 -<==      Total: 1
2020-03-24 15:39:43 -耗时 : 235
2020-03-24 15:43:32 -此处进行解密+验签+身份验证
2020-03-24 15:43:32 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-24 15:43:32 -此处进行解密+验签+身份验证
2020-03-24 15:43:32 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-24 15:43:32 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-24 15:43:32 -耗时 : 20
2020-03-24 15:43:33 -解密：
2020-03-24 15:43:33 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-24 15:43:33 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-24 15:43:33 -==> Parameters: 04(String), 04(String)
2020-03-24 15:43:33 -<==      Total: 1
2020-03-24 15:43:33 -耗时 : 24
2020-03-24 15:43:33 -此处进行解密+验签+身份验证
2020-03-24 15:43:33 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"068F87BF2ACFA220B5664363103676AC","device_no":"1.0.9","device_type":"android","sys_user_account":"","token":"181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8"}
2020-03-24 15:43:33 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-24 15:43:33 -token值=======181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8
2020-03-24 15:43:33 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-24 15:43:33 -==> Parameters: 181(String)
2020-03-24 15:43:33 -<==      Total: 1
2020-03-24 15:43:33 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-24 15:43:33 -==> Parameters: 26(String)
2020-03-24 15:43:33 -<==      Total: 1
2020-03-24 15:43:33 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-24 15:43:33 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-24 15:43:33 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-24 15:43:33 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-24 15:43:33 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-24 15:43:33 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-24 15:43:33 -耗时 : 78
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 15:43:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 15:43:37 -==> Parameters: 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -耗时 : 19
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -解密：
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-24 15:43:37 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-24 15:43:37 -==> Parameters: 01(String), 01(String)
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-24 15:43:37 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-24 15:43:37 -==> Parameters: 181(String)
2020-03-24 15:43:37 -<==      Total: 4
2020-03-24 15:43:37 -耗时 : 15
2020-03-24 15:43:37 -<==      Total: 2
2020-03-24 15:43:37 -耗时 : 23
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:43:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:43:37 -==> Parameters: 181(String), 181(String)
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-24 15:43:37 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-24 15:43:37 -==> Parameters: 
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 3
2020-03-24 15:43:37 -耗时 : 16
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -<==      Total: 2
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:43:37 -此处进行解密+验签+身份验证
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:43:37 -<==    Updates: 2
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:43:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:43:37 -==> Parameters: 181(String), 181(String)
2020-03-24 15:43:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:43:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:43:37 -==> Parameters: 181(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:43:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 15:43:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 15:43:37 -==> Parameters: 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -耗时 : 12
2020-03-24 15:43:37 -<==      Total: 2
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:43:37 -<==    Updates: 1
2020-03-24 15:43:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:43:37 -==> Parameters: 
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:43:37 -<==    Updates: 2
2020-03-24 15:43:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:43:37 -==> Parameters: 181(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:43:37 -<==    Updates: 1
2020-03-24 15:43:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:43:37 -==> Parameters: 181(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:43:37 -<==    Updates: 1
2020-03-24 15:43:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:43:37 -==> Parameters: 
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:43:37 -<==    Updates: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -耗时 : 197
2020-03-24 15:43:37 -<==    Updates: 1
2020-03-24 15:43:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:43:37 -==> Parameters: 181(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:43:37 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:43:37 -<==    Updates: 1
2020-03-24 15:43:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:43:37 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:43:37 -<==      Total: 1
2020-03-24 15:43:37 -耗时 : 210
2020-03-24 15:44:00 -此处进行解密+验签+身份验证
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-24 15:44:00 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-24 15:44:00 -==> Parameters: 181(String)
2020-03-24 15:44:00 -<==      Total: 1
2020-03-24 15:44:00 -耗时 : 17
2020-03-24 15:44:00 -此处进行解密+验签+身份验证
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:00 -此处进行解密+验签+身份验证
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:00 -此处进行解密+验签+身份验证
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-24 15:44:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-24 15:44:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-24 15:44:00 -==> Parameters: 181(String), 202003(String)
2020-03-24 15:44:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-24 15:44:00 -==> Parameters: 181(String), 202003(String)
2020-03-24 15:44:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-24 15:44:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-24 15:44:00 -==> Parameters: 181(String), 202003(String)
2020-03-24 15:44:00 -<==      Total: 1
2020-03-24 15:44:00 -耗时 : 12
2020-03-24 15:44:00 -<==      Total: 1
2020-03-24 15:44:00 -耗时 : 19
2020-03-24 15:44:00 -<==      Total: 1
2020-03-24 15:44:00 -耗时 : 13
2020-03-24 15:44:18 -此处进行解密+验签+身份验证
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-24 15:44:18 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-24 15:44:18 -==> Parameters: 1(String), 181(String), recallFlag(String)
2020-03-24 15:44:18 -<==    Updates: 1
2020-03-24 15:44:18 -耗时 : 26
2020-03-24 15:44:18 -此处进行解密+验签+身份验证
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:18 -此处进行解密+验签+身份验证
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-24 15:44:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-24 15:44:18 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 15:44:18 -==> Parameters: 181(String), 09(String)
2020-03-24 15:44:18 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 15:44:18 -==> Parameters: 181(String), 00(String)
2020-03-24 15:44:18 -<==      Total: 0
2020-03-24 15:44:18 -耗时 : 30
2020-03-24 15:44:18 -<==      Total: 0
2020-03-24 15:44:18 -耗时 : 26
2020-03-24 15:44:18 -此处进行解密+验签+身份验证
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-24 15:44:18 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 15:44:18 -==> Parameters: 181(String), 08(String)
2020-03-24 15:44:18 -<==      Total: 0
2020-03-24 15:44:18 -耗时 : 14
2020-03-24 15:44:28 -此处进行解密+验签+身份验证
2020-03-24 15:44:28 -此处进行解密+验签+身份验证
2020-03-24 15:44:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:28 -此处进行解密+验签+身份验证
2020-03-24 15:44:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:44:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:44:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 15:44:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 15:44:28 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 15:44:28 -==> Parameters: 181(String), 08(String)
2020-03-24 15:44:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 15:44:28 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 15:44:28 -==> Parameters: 181(String), 00(String)
2020-03-24 15:44:28 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 15:44:28 -==> Parameters: 181(String), 09(String)
2020-03-24 15:44:28 -<==      Total: 0
2020-03-24 15:44:28 -耗时 : 11
2020-03-24 15:44:28 -<==      Total: 0
2020-03-24 15:44:28 -耗时 : 19
2020-03-24 15:44:28 -<==      Total: 0
2020-03-24 15:44:28 -耗时 : 22
2020-03-24 15:45:49 -此处进行解密+验签+身份验证
2020-03-24 15:45:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:45:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:45:49 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 15:45:49 -此处进行解密+验签+身份验证
2020-03-24 15:45:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:45:49 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 15:45:49 -==> Parameters: 181(String)
2020-03-24 15:45:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:45:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:45:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -耗时 : 16
2020-03-24 15:45:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:45:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:45:49 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:49 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 2
2020-03-24 15:45:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:49 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:45:49 -<==    Updates: 2
2020-03-24 15:45:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:45:49 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:49 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:49 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:45:49 -<==    Updates: 1
2020-03-24 15:45:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:45:49 -==> Parameters: 
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:49 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:49 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:45:49 -<==    Updates: 1
2020-03-24 15:45:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:45:49 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:49 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:49 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:45:49 -<==    Updates: 1
2020-03-24 15:45:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:49 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:45:49 -<==      Total: 1
2020-03-24 15:45:49 -耗时 : 237
2020-03-24 15:45:51 -此处进行解密+验签+身份验证
2020-03-24 15:45:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:45:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:45:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 15:45:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 15:45:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 15:45:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:45:51 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:51 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 2
2020-03-24 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:51 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 15:45:51 -<==    Updates: 2
2020-03-24 15:45:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 15:45:51 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:51 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:51 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 15:45:51 -<==    Updates: 1
2020-03-24 15:45:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 15:45:51 -==> Parameters: 
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:51 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:51 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 15:45:51 -<==    Updates: 1
2020-03-24 15:45:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 15:45:51 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:51 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 15:45:51 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 15:45:51 -<==    Updates: 1
2020-03-24 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 15:45:51 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 15:45:51 -<==      Total: 1
2020-03-24 15:45:51 -耗时 : 137
2020-03-24 15:45:52 -此处进行解密+验签+身份验证
2020-03-24 15:45:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:45:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:45:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-24 15:45:52 -此处进行解密+验签+身份验证
2020-03-24 15:45:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:45:52 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-24 15:45:52 -==> Parameters: 181(String)
2020-03-24 15:45:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:45:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-24 15:45:52 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 15:45:52 -==> Parameters: 181(String), 181(String)
2020-03-24 15:45:52 -<==      Total: 1600
2020-03-24 15:45:52 -耗时 : 41
2020-03-24 15:45:52 -<==      Total: 1164
2020-03-24 15:45:52 -耗时 : 93
2020-03-24 15:45:54 -此处进行解密+验签+身份验证
2020-03-24 15:45:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:45:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:45:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-24 15:45:54 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-24 15:45:54 -==> Parameters: 181(String)
2020-03-24 15:45:55 -<==      Total: 1163
2020-03-24 15:45:55 -耗时 : 186
2020-03-24 15:46:01 -此处进行解密+验签+身份验证
2020-03-24 15:46:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:46:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:46:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-24 15:46:01 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 15:46:01 -==> Parameters: 181(String), 181(String)
2020-03-24 15:46:01 -<==      Total: 2
2020-03-24 15:46:01 -耗时 : 49
2020-03-24 15:46:06 -此处进行解密+验签+身份验证
2020-03-24 15:46:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:46:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:46:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/recallTraditionalPos
2020-03-24 15:46:06 -==>  Preparing: INSERT INTO t_user_trapos_recall_record_info ( send_user_id, acce_user_id, sn, cre_date, cre_time, pos_type ) SELECT ?, user_id, sn, ?, ?, pos_type FROM t_user_traditional_pos_info WHERE state_status = '1' AND del='0' AND FIND_IN_SET(sn, ?) AND user_id in (select id from t_user_info where referer_id = ?) 
2020-03-24 15:46:06 -==> Parameters: 181(String), 20200324(String), 154606(String), 20203171002(String), 181(String)
2020-03-24 15:46:06 -<==    Updates: 1
2020-03-24 15:46:06 -==>  Preparing: select * from t_user_traditional_pos_info where sn in ( ? ) and state_status='1' 
2020-03-24 15:46:06 -==> Parameters: 20203171002(String)
2020-03-24 15:46:06 -<==      Total: 1
2020-03-24 15:46:06 -==>  Preparing: update t_news_read_state set read_flag=? where user_id in ( ? ) and news_type=? 
2020-03-24 15:46:06 -==> Parameters: 0(String), 94(Integer), recallFlag(String)
2020-03-24 15:46:07 -<==    Updates: 0
2020-03-24 15:46:07 -耗时 : 150
2020-03-24 15:46:07 -此处进行解密+验签+身份验证
2020-03-24 15:46:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 15:46:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 15:46:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-24 15:46:07 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 15:46:07 -==> Parameters: 181(String), 181(String)
2020-03-24 15:46:07 -<==      Total: 1
2020-03-24 15:46:07 -耗时 : 34
2020-03-24 16:04:52 -此处进行解密+验签+身份验证
2020-03-24 16:04:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:04:52 -解密异常：{sign=E42A2A8FED7863E5CEAD011226C3C551, token=181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8}
2020-03-24 16:04:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 16:04:52 -耗时 : 0
2020-03-24 16:04:52 -此处进行解密+验签+身份验证
2020-03-24 16:04:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:04:52 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 16:04:52 -Reconnected to 120.25.164.176:10379
2020-03-24 16:04:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:04:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1599c65f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5c40ae81 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7b03068 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@243e2333 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@8c7abca (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@51aa28f5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@571f71d8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2ede7b3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@37c195df (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@37acfe52 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 16:04:52 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 16:04:52 -==> Parameters: 181(String)
2020-03-24 16:04:52 -<==      Total: 1
2020-03-24 16:04:52 -耗时 : 104
2020-03-24 16:04:59 -此处进行解密+验签+身份验证
2020-03-24 16:04:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:04:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:04:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-24 16:04:59 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-24 16:04:59 -==> Parameters: 1(String), 181(String), recallFlag(String)
2020-03-24 16:04:59 -<==    Updates: 1
2020-03-24 16:04:59 -耗时 : 26
2020-03-24 16:04:59 -此处进行解密+验签+身份验证
2020-03-24 16:04:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:04:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:04:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-24 16:04:59 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 16:04:59 -==> Parameters: 181(String), 08(String)
2020-03-24 16:04:59 -<==      Total: 0
2020-03-24 16:04:59 -耗时 : 14
2020-03-24 16:05:00 -此处进行解密+验签+身份验证
2020-03-24 16:05:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:05:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:05:00 -此处进行解密+验签+身份验证
2020-03-24 16:05:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:05:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:05:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-24 16:05:00 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 16:05:00 -==> Parameters: 181(String), 00(String)
2020-03-24 16:05:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-24 16:05:00 -<==      Total: 0
2020-03-24 16:05:00 -耗时 : 14
2020-03-24 16:05:00 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 16:05:00 -==> Parameters: 181(String), 09(String)
2020-03-24 16:05:00 -<==      Total: 0
2020-03-24 16:05:00 -耗时 : 22
2020-03-24 16:05:04 -此处进行解密+验签+身份验证
2020-03-24 16:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:05:04 -此处进行解密+验签+身份验证
2020-03-24 16:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:05:04 -此处进行解密+验签+身份验证
2020-03-24 16:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 16:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 16:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 16:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 16:05:04 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 16:05:04 -==> Parameters: 181(String), 00(String)
2020-03-24 16:05:04 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 16:05:04 -==> Parameters: 181(String), 08(String)
2020-03-24 16:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 16:05:04 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 16:05:04 -==> Parameters: 181(String), 09(String)
2020-03-24 16:05:04 -<==      Total: 0
2020-03-24 16:05:04 -耗时 : 18
2020-03-24 16:05:04 -<==      Total: 0
2020-03-24 16:05:04 -<==      Total: 0
2020-03-24 16:05:04 -耗时 : 18
2020-03-24 16:05:04 -耗时 : 12
2020-03-24 18:28:37 -Starting LongEcologicalApplication on PC-201905161910 with PID 7864 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-24 18:28:37 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-24 18:28:37 -No active profile set, falling back to default profiles: default
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 18:28:38 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 18:28:38 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 18:28:38 -Finished Spring Data repository scanning in 68ms. Found 0 repository interfaces.
2020-03-24 18:28:38 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 18:28:38 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 18:28:38 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-24 18:28:39 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$4d68501f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 18:28:39 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$47ec34bf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 18:28:39 -Tomcat initialized with port(s): 8080 (http)
2020-03-24 18:28:39 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-24 18:28:39 -Starting service [Tomcat]
2020-03-24 18:28:39 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-24 18:28:39 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-24 18:28:39 -Initializing Spring embedded WebApplicationContext
2020-03-24 18:28:39 -Root WebApplicationContext: initialization completed in 2249 ms
2020-03-24 18:28:39 -Filter xssFilter was not registered (disabled)
2020-03-24 18:28:40 -HikariPool-1 - Starting...
2020-03-24 18:28:40 -HikariPool-1 - Start completed.
2020-03-24 18:28:40 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-24 18:28:40 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-24 18:28:40 -HHH000206: hibernate.properties not found
2020-03-24 18:28:40 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-24 18:28:40 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-24 18:28:40 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-24 18:28:41 -Using default implementation for ThreadExecutor
2020-03-24 18:28:41 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-24 18:28:41 -Quartz Scheduler v.2.3.0 created.
2020-03-24 18:28:41 -RAMJobStore initialized.
2020-03-24 18:28:41 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-24 18:28:41 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-24 18:28:41 -Quartz scheduler version: 2.3.0
2020-03-24 18:28:41 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@10131289
2020-03-24 18:28:41 -STAET TaskExecutorConfig
2020-03-24 18:28:41 -Initializing ExecutorService
2020-03-24 18:28:41 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-24 18:28:42 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-24 18:28:42 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-24 18:28:42 -Initializing ExecutorService 'taskScheduler'
2020-03-24 18:28:42 -Starting Quartz Scheduler now
2020-03-24 18:28:42 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-24 18:28:42 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-24 18:28:42 -Using a shared selector for servlet write/read
2020-03-24 18:28:42 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-24 18:28:42 -Started LongEcologicalApplication in 6.05 seconds (JVM running for 6.958)
2020-03-24 18:28:46 -Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:414)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:294)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-24 18:59:34 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-24 18:59:34 -Initializing Servlet 'dispatcherServlet'
2020-03-24 18:59:34 -Completed initialization in 13 ms
2020-03-24 18:59:34 -此处进行解密+验签+身份验证
2020-03-24 18:59:34 -此处进行解密+验签+身份验证
2020-03-24 18:59:34 -此处进行解密+验签+身份验证
2020-03-24 18:59:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 18:59:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 18:59:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 18:59:34 -Starting without optional epoll library
2020-03-24 18:59:34 -Starting without optional kqueue library
2020-03-24 18:59:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 18:59:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 18:59:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 18:59:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-24 18:59:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-24 18:59:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-24 18:59:35 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 18:59:35 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 18:59:35 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 18:59:35 -==> Parameters: 181(String), 00(String)
2020-03-24 18:59:35 -==> Parameters: 181(String), 09(String)
2020-03-24 18:59:35 -==> Parameters: 181(String), 08(String)
2020-03-24 18:59:35 -<==      Total: 0
2020-03-24 18:59:35 -<==      Total: 0
2020-03-24 18:59:35 -<==      Total: 0
2020-03-24 18:59:35 -耗时 : 84
2020-03-24 18:59:35 -耗时 : 84
2020-03-24 18:59:35 -耗时 : 84
2020-03-24 18:59:36 -此处进行解密+验签+身份验证
2020-03-24 18:59:36 -此处进行解密+验签+身份验证
2020-03-24 18:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 18:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 18:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 18:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 18:59:36 -此处进行解密+验签+身份验证
2020-03-24 18:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 18:59:36 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 18:59:36 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-03-24 18:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 18:59:36 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 18:59:36 -==> Parameters: 181(String), 09(String)
2020-03-24 18:59:36 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-03-24 18:59:36 -==> Parameters: 181(String), 00(String)
2020-03-24 18:59:36 -<==      Total: 0
2020-03-24 18:59:36 -耗时 : 20
2020-03-24 18:59:37 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-24 18:59:37 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc 
2020-03-24 18:59:37 -==> Parameters: 181(String), 08(String)
2020-03-24 18:59:37 -<==      Total: 0
2020-03-24 18:59:37 -耗时 : 20
2020-03-24 18:59:37 -<==      Total: 0
2020-03-24 18:59:37 -耗时 : 13
2020-03-24 19:00:12 -此处进行解密+验签+身份验证
2020-03-24 19:00:12 -此处进行解密+验签+身份验证
2020-03-24 19:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:00:12 -此处进行解密+验签+身份验证
2020-03-24 19:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:00:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-24 19:00:12 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 19:00:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-24 19:00:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-24 19:00:12 -==> Parameters: 181(String), 00(String)
2020-03-24 19:00:12 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 19:00:12 -==> Parameters: 181(String), 09(String)
2020-03-24 19:00:12 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-24 19:00:12 -==> Parameters: 181(String), 08(String)
2020-03-24 19:00:12 -<==      Total: 0
2020-03-24 19:00:12 -耗时 : 8
2020-03-24 19:00:12 -<==      Total: 0
2020-03-24 19:00:12 -耗时 : 20
2020-03-24 19:00:12 -<==      Total: 0
2020-03-24 19:00:12 -耗时 : 19
2020-03-24 19:44:14 -此处进行解密+验签+身份验证
2020-03-24 19:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:14 -解密异常：{sign=E42A2A8FED7863E5CEAD011226C3C551, token=181|OV6SFNSQ5J5JJ3CAMHHONLVHUM6O65S8}
2020-03-24 19:44:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 19:44:14 -此处进行解密+验签+身份验证
2020-03-24 19:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:14 -耗时 : 6
2020-03-24 19:44:14 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-24 19:44:14 -Reconnected to 120.25.164.176:10379
2020-03-24 19:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 19:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 19:44:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 19:44:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 19:44:14 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:14 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 2
2020-03-24 19:44:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 19:44:14 -<==    Updates: 2
2020-03-24 19:44:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 19:44:14 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:14 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:14 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 19:44:14 -<==    Updates: 1
2020-03-24 19:44:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 19:44:14 -==> Parameters: 
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:14 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:14 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 19:44:14 -<==    Updates: 1
2020-03-24 19:44:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 19:44:14 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:14 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:14 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 19:44:14 -<==    Updates: 1
2020-03-24 19:44:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:14 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 19:44:14 -<==      Total: 1
2020-03-24 19:44:14 -耗时 : 272
2020-03-24 19:44:20 -此处进行解密+验签+身份验证
2020-03-24 19:44:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 19:44:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 19:44:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 19:44:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 19:44:20 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:20 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 2
2020-03-24 19:44:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 19:44:20 -<==    Updates: 2
2020-03-24 19:44:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 19:44:20 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:20 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:20 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 19:44:20 -<==    Updates: 1
2020-03-24 19:44:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 19:44:20 -==> Parameters: 
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:20 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:20 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 19:44:20 -<==    Updates: 1
2020-03-24 19:44:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 19:44:20 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:20 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:44:20 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 19:44:20 -<==    Updates: 1
2020-03-24 19:44:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:44:20 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 19:44:20 -<==      Total: 1
2020-03-24 19:44:20 -耗时 : 223
2020-03-24 19:44:22 -此处进行解密+验签+身份验证
2020-03-24 19:44:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-24 19:44:22 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-24 19:44:22 -==> Parameters: 1(String), 181(String), applyRateFlag(String)
2020-03-24 19:44:22 -<==    Updates: 2
2020-03-24 19:44:22 -耗时 : 26
2020-03-24 19:44:22 -此处进行解密+验签+身份验证
2020-03-24 19:44:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:22 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-24 19:44:22 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-24 19:44:22 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:22 -此处进行解密+验签+身份验证
2020-03-24 19:44:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:22 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-24 19:44:22 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2d3fc0c8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 19:44:22 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@64f33282 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-24 19:44:22 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-24 19:44:22 -==> Parameters: 181(String), 181(String)
2020-03-24 19:44:22 -<==      Total: 1292
2020-03-24 19:44:22 -耗时 : 590
2020-03-24 19:44:22 -<==      Total: 915
2020-03-24 19:44:22 -耗时 : 724
2020-03-24 19:44:26 -此处进行解密+验签+身份验证
2020-03-24 19:44:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:26 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-24 19:44:26 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-24 19:44:26 -==> Parameters: 1(String)
2020-03-24 19:44:26 -<==      Total: 10
2020-03-24 19:44:26 -耗时 : 30
2020-03-24 19:44:43 -此处进行解密+验签+身份验证
2020-03-24 19:44:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:44:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:44:43 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-24 19:44:43 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-24 19:44:43 -==> Parameters: 1(String)
2020-03-24 19:44:43 -<==      Total: 10
2020-03-24 19:44:43 -耗时 : 22
2020-03-24 19:47:07 -此处进行解密+验签+身份验证
2020-03-24 19:47:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:47:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:47:07 -此处进行解密+验签+身份验证
2020-03-24 19:47:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:47:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:47:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-24 19:47:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-24 19:47:07 -==> Parameters: 181(String)
2020-03-24 19:47:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-24 19:47:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -耗时 : 22
2020-03-24 19:47:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-24 19:47:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 19:47:07 -==> Parameters: 181(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:47:07 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 2
2020-03-24 19:47:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:47:07 -==> Parameters: 0(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-03-24 19:47:07 -<==    Updates: 2
2020-03-24 19:47:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-24 19:47:07 -==> Parameters: 181(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:47:07 -==> Parameters: recallFlag(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:47:07 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-24 19:47:07 -<==    Updates: 1
2020-03-24 19:47:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-24 19:47:07 -==> Parameters: 
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:47:07 -==> Parameters: collegeFlag(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:47:07 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-03-24 19:47:07 -<==    Updates: 1
2020-03-24 19:47:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-24 19:47:07 -==> Parameters: 181(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:47:07 -==> Parameters: cardFlag(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-24 19:47:07 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-03-24 19:47:07 -<==    Updates: 1
2020-03-24 19:47:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-24 19:47:07 -==> Parameters: appImgFlag(String), 181(String)
2020-03-24 19:47:07 -<==      Total: 1
2020-03-24 19:47:07 -耗时 : 246
2020-03-24 19:47:10 -此处进行解密+验签+身份验证
2020-03-24 19:47:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:47:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:47:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-24 19:47:10 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-24 19:47:10 -==> Parameters: 181(String)
2020-03-24 19:47:10 -此处进行解密+验签+身份验证
2020-03-24 19:47:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:47:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:47:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-24 19:47:10 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-24 19:47:10 -==> Parameters: 181(String), 181(String)
2020-03-24 19:47:10 -<==      Total: 1164
2020-03-24 19:47:10 -耗时 : 84
2020-03-24 19:47:10 -<==      Total: 1599
2020-03-24 19:47:10 -耗时 : 272
2020-03-24 19:47:12 -此处进行解密+验签+身份验证
2020-03-24 19:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:47:12 -此处进行解密+验签+身份验证
2020-03-24 19:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-24 19:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-24 19:47:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-24 19:47:12 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-24 19:47:12 -==> Parameters: 181(String)
2020-03-24 19:47:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-24 19:47:12 -<==      Total: 143
2020-03-24 19:47:12 -耗时 : 17
2020-03-24 19:47:12 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-24 19:47:12 -==> Parameters: 181(String), M351846173306(String)
2020-03-24 19:47:12 -<==      Total: 1
2020-03-24 19:47:12 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-24 19:47:12 -==> Parameters: 
2020-03-24 19:47:13 -<==      Total: 101
2020-03-24 19:47:13 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-24 19:47:13 -==> Parameters: M351846173306(String)
2020-03-24 19:47:13 -<==      Total: 1
2020-03-24 19:47:13 -耗时 : 98
2020-03-24 19:51:30 -Starting LongEcologicalApplication on PC-201905161910 with PID 2348 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-24 19:51:30 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-24 19:51:30 -No active profile set, falling back to default profiles: default
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-24 19:51:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 19:51:32 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 19:51:33 -Finished Spring Data repository scanning in 106ms. Found 0 repository interfaces.
2020-03-24 19:51:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-24 19:51:33 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-24 19:51:33 -Finished Spring Data repository scanning in 80ms. Found 0 repository interfaces.
2020-03-24 19:51:33 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$be5aa3e8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 19:51:33 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b8de8888] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-24 19:51:34 -Tomcat initialized with port(s): 8080 (http)
2020-03-24 19:51:34 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-24 19:51:34 -Starting service [Tomcat]
2020-03-24 19:51:34 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-24 19:51:34 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-24 19:51:34 -Initializing Spring embedded WebApplicationContext
2020-03-24 19:51:34 -Root WebApplicationContext: initialization completed in 3807 ms
2020-03-24 19:51:34 -Filter xssFilter was not registered (disabled)
2020-03-24 19:51:34 -HikariPool-1 - Starting...
2020-03-24 19:51:35 -HikariPool-1 - Start completed.
2020-03-24 19:51:35 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-24 19:51:35 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-24 19:51:35 -HHH000206: hibernate.properties not found
2020-03-24 19:51:35 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-24 19:51:35 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-24 19:51:35 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-24 19:51:36 -Using default implementation for ThreadExecutor
2020-03-24 19:51:36 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-24 19:51:36 -Quartz Scheduler v.2.3.0 created.
2020-03-24 19:51:36 -RAMJobStore initialized.
2020-03-24 19:51:36 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-24 19:51:36 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-24 19:51:36 -Quartz scheduler version: 2.3.0
2020-03-24 19:51:36 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@537b3b2e
2020-03-24 19:51:36 -STAET TaskExecutorConfig
2020-03-24 19:51:36 -Initializing ExecutorService
2020-03-24 19:51:36 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-24 19:51:37 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-24 19:51:37 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-24 19:51:37 -Initializing ExecutorService 'taskScheduler'
2020-03-24 19:51:37 -Starting Quartz Scheduler now
2020-03-24 19:51:37 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-24 19:51:37 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-24 19:51:37 -Using a shared selector for servlet write/read
2020-03-24 19:51:37 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-24 19:51:37 -Started LongEcologicalApplication in 8.039 seconds (JVM running for 9.199)
