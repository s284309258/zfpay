2020-03-27 09:49:13 -Starting LongEcologicalApplication on PC-201905161910 with PID 8032 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-27 09:49:13 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-27 09:49:13 -No active profile set, falling back to default profiles: default
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 09:49:14 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-27 09:49:14 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-27 09:49:15 -Finished Spring Data repository scanning in 107ms. Found 0 repository interfaces.
2020-03-27 09:49:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-27 09:49:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-27 09:49:15 -Finished Spring Data repository scanning in 74ms. Found 0 repository interfaces.
2020-03-27 09:49:15 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$e4ae9e32] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-27 09:49:15 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$df3282d2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-27 09:49:16 -Tomcat initialized with port(s): 8080 (http)
2020-03-27 09:49:16 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-27 09:49:16 -Starting service [Tomcat]
2020-03-27 09:49:16 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-27 09:49:16 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-27 09:49:16 -Initializing Spring embedded WebApplicationContext
2020-03-27 09:49:16 -Root WebApplicationContext: initialization completed in 3594 ms
2020-03-27 09:49:17 -Filter xssFilter was not registered (disabled)
2020-03-27 09:49:17 -HikariPool-1 - Starting...
2020-03-27 09:49:17 -HikariPool-1 - Start completed.
2020-03-27 09:49:17 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-27 09:49:17 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-27 09:49:17 -HHH000206: hibernate.properties not found
2020-03-27 09:49:17 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-27 09:49:18 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-27 09:49:18 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-27 09:49:18 -Using default implementation for ThreadExecutor
2020-03-27 09:49:18 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-27 09:49:18 -Quartz Scheduler v.2.3.0 created.
2020-03-27 09:49:18 -RAMJobStore initialized.
2020-03-27 09:49:18 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-27 09:49:18 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-27 09:49:18 -Quartz scheduler version: 2.3.0
2020-03-27 09:49:19 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5abf6a99
2020-03-27 09:49:19 -STAET TaskExecutorConfig
2020-03-27 09:49:19 -Initializing ExecutorService
2020-03-27 09:49:19 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-27 09:49:19 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-27 09:49:19 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-27 09:49:20 -Initializing ExecutorService 'taskScheduler'
2020-03-27 09:49:20 -Starting Quartz Scheduler now
2020-03-27 09:49:20 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-27 09:49:20 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-27 09:49:20 -Using a shared selector for servlet write/read
2020-03-27 09:49:20 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-27 09:49:20 -Started LongEcologicalApplication in 8.44 seconds (JVM running for 10.06)
2020-03-27 09:54:39 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-27 09:54:39 -Initializing Servlet 'dispatcherServlet'
2020-03-27 09:54:39 -Completed initialization in 15 ms
2020-03-27 09:54:39 -此处进行解密+验签+身份验证
2020-03-27 09:54:39 -此处进行解密+验签+身份验证
2020-03-27 09:54:39 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-27 09:54:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-27 09:54:39 -Starting without optional epoll library
2020-03-27 09:54:39 -Starting without optional kqueue library
2020-03-27 09:54:40 -解密：
2020-03-27 09:54:40 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-27 09:54:40 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-27 09:54:40 -==> Parameters: 04(String), 04(String)
2020-03-27 09:54:40 -<==      Total: 1
2020-03-27 09:54:40 -耗时 : 68
2020-03-27 09:54:40 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-27 09:54:40 -耗时 : 950
2020-03-27 09:54:40 -此处进行解密+验签+身份验证
2020-03-27 09:54:40 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"6994C37FADC9DE97FCDAA2A5DE7C5D5A","device_no":"1.0.9","device_type":"android","sys_user_account":"","token":"426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP"}
2020-03-27 09:54:40 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-27 09:54:40 -token值=======426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP
2020-03-27 09:54:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-27 09:54:40 -==> Parameters: 426(String)
2020-03-27 09:54:40 -<==      Total: 1
2020-03-27 09:54:40 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-27 09:54:40 -==> Parameters: 25(String)
2020-03-27 09:54:40 -<==      Total: 1
2020-03-27 09:54:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-27 09:54:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-27 09:54:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-27 09:54:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-27 09:54:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-27 09:54:40 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-27 09:54:40 -耗时 : 36
2020-03-27 09:54:43 -此处进行解密+验签+身份验证
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-27 09:54:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-27 09:54:43 -==> Parameters: 426(String)
2020-03-27 09:54:43 -<==      Total: 1
2020-03-27 09:54:43 -耗时 : 7
2020-03-27 09:54:43 -此处进行解密+验签+身份验证
2020-03-27 09:54:43 -解密：
2020-03-27 09:54:43 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-27 09:54:43 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-27 09:54:43 -==> Parameters: 01(String), 01(String)
2020-03-27 09:54:43 -<==      Total: 4
2020-03-27 09:54:43 -耗时 : 2
2020-03-27 09:54:43 -此处进行解密+验签+身份验证
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-27 09:54:43 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-27 09:54:43 -==> Parameters: 426(String)
2020-03-27 09:54:43 -<==      Total: 2
2020-03-27 09:54:43 -耗时 : 9
2020-03-27 09:54:43 -此处进行解密+验签+身份验证
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-27 09:54:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-27 09:54:43 -==> Parameters: 426(String)
2020-03-27 09:54:43 -<==      Total: 1
2020-03-27 09:54:43 -耗时 : 1
2020-03-27 09:54:43 -此处进行解密+验签+身份验证
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:43 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-27 09:54:43 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-27 09:54:43 -==> Parameters: 
2020-03-27 09:54:43 -<==      Total: 3
2020-03-27 09:54:43 -耗时 : 6
2020-03-27 09:54:43 -此处进行解密+验签+身份验证
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 09:54:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 09:54:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:54:43 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 09:54:44 -此处进行解密+验签+身份验证
2020-03-27 09:54:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 09:54:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 09:54:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 09:54:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:54:44 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 09:54:44 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 09:54:44 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 09:54:44 -==> Parameters: 
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 09:54:44 -==> Parameters: 
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:54:44 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:54:44 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 09:54:44 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:54:44 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -耗时 : 72
2020-03-27 09:54:44 -<==    Updates: 1
2020-03-27 09:54:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:54:44 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 09:54:44 -<==      Total: 1
2020-03-27 09:54:44 -耗时 : 140
2020-03-27 09:54:46 -此处进行解密+验签+身份验证
2020-03-27 09:54:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:46 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-27 09:54:46 -此处进行解密+验签+身份验证
2020-03-27 09:54:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:46 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-27 09:54:46 -==> Parameters: 202003(String), 426(String)
2020-03-27 09:54:46 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-27 09:54:46 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-27 09:54:46 -==> Parameters: 426(String)
2020-03-27 09:54:46 -<==      Total: 1
2020-03-27 09:54:46 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-27 09:54:46 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:46 -<==      Total: 1
2020-03-27 09:54:46 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-27 09:54:46 -==> Parameters: 426(String)
2020-03-27 09:54:46 -<==      Total: 0
2020-03-27 09:54:46 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-27 09:54:46 -==> Parameters: 202003(String), 426(String)
2020-03-27 09:54:46 -<==      Total: 1
2020-03-27 09:54:46 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-27 09:54:46 -==> Parameters: 426(String)
2020-03-27 09:54:46 -<==      Total: 0
2020-03-27 09:54:46 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-27 09:54:46 -==> Parameters: 202003(String), 426(String)
2020-03-27 09:54:46 -<==      Total: 1
2020-03-27 09:54:46 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-27 09:54:46 -==> Parameters: 426(String)
2020-03-27 09:54:46 -<==      Total: 0
2020-03-27 09:54:46 -耗时 : 48
2020-03-27 09:54:49 -<==      Total: 1
2020-03-27 09:54:49 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-27 09:54:49 -==> Parameters: 426(String), 426(String)
2020-03-27 09:54:49 -<==      Total: 1
2020-03-27 09:54:49 -耗时 : 2917
2020-03-27 09:54:59 -此处进行解密+验签+身份验证
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-27 09:54:59 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-27 09:54:59 -==> Parameters: 426(String)
2020-03-27 09:54:59 -<==      Total: 1
2020-03-27 09:54:59 -耗时 : 10
2020-03-27 09:54:59 -此处进行解密+验签+身份验证
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-27 09:54:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-27 09:54:59 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:54:59 -此处进行解密+验签+身份验证
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:59 -<==      Total: 1
2020-03-27 09:54:59 -耗时 : 22
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-27 09:54:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-27 09:54:59 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:54:59 -<==      Total: 1
2020-03-27 09:54:59 -耗时 : 3
2020-03-27 09:54:59 -此处进行解密+验签+身份验证
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:54:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:54:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-27 09:54:59 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-27 09:54:59 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:54:59 -<==      Total: 1
2020-03-27 09:54:59 -耗时 : 5
2020-03-27 09:55:07 -此处进行解密+验签+身份验证
2020-03-27 09:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:07 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitEposList
2020-03-27 09:55:07 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-27 09:55:07 -==> Parameters: 426(String), 20200301(String), 20200331(String)
2020-03-27 09:55:07 -<==      Total: 10
2020-03-27 09:55:07 -耗时 : 152
2020-03-27 09:55:10 -此处进行解密+验签+身份验证
2020-03-27 09:55:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:10 -此处进行解密+验签+身份验证
2020-03-27 09:55:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-27 09:55:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 09:55:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-27 09:55:10 -==> Parameters: 426(String)
2020-03-27 09:55:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -耗时 : 1
2020-03-27 09:55:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 09:55:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:55:10 -==> Parameters: 426(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:55:10 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:55:10 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 09:55:10 -<==    Updates: 1
2020-03-27 09:55:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 09:55:10 -==> Parameters: 426(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:55:10 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:55:10 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 09:55:10 -<==    Updates: 1
2020-03-27 09:55:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 09:55:10 -==> Parameters: 
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:55:10 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:55:10 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 09:55:10 -<==    Updates: 1
2020-03-27 09:55:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:55:10 -==> Parameters: 426(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:55:10 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:55:10 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 09:55:10 -<==    Updates: 1
2020-03-27 09:55:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:55:10 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 09:55:10 -<==      Total: 1
2020-03-27 09:55:10 -耗时 : 271
2020-03-27 09:55:23 -此处进行解密+验签+身份验证
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:23 -此处进行解密+验签+身份验证
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:23 -此处进行解密+验签+身份验证
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:23 -此处进行解密+验签+身份验证
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:55:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-27 09:55:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-27 09:55:23 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-27 09:55:25 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:55:23 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-27 09:55:25 -==> Parameters: 426(String)
2020-03-27 09:55:25 -<==      Total: 1
2020-03-27 09:55:25 -耗时 : 2385
2020-03-27 09:55:25 -<==      Total: 1
2020-03-27 09:55:25 -耗时 : 2389
2020-03-27 09:55:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-27 09:55:25 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-27 09:55:25 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:55:23 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-27 09:55:25 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-27 09:55:25 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:55:25 -<==      Total: 1
2020-03-27 09:55:25 -耗时 : 2394
2020-03-27 09:55:25 -<==      Total: 1
2020-03-27 09:55:25 -耗时 : 2395
2020-03-27 09:56:02 -此处进行解密+验签+身份验证
2020-03-27 09:56:02 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-27 09:56:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-27 09:56:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-27 09:56:02 -耗时 : 10
2020-03-27 09:56:02 -此处进行解密+验签+身份验证
2020-03-27 09:56:02 -解密：
2020-03-27 09:56:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-27 09:56:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-27 09:56:02 -==> Parameters: 04(String), 04(String)
2020-03-27 09:56:02 -<==      Total: 1
2020-03-27 09:56:02 -耗时 : 6
2020-03-27 09:56:02 -此处进行解密+验签+身份验证
2020-03-27 09:56:02 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"6994C37FADC9DE97FCDAA2A5DE7C5D5A","device_no":"1.0.9","device_type":"android","sys_user_account":"","token":"426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP"}
2020-03-27 09:56:02 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-27 09:56:02 -token值=======426|RDT9PFSETBEVH3JRNQ9PU2323LLV89FP
2020-03-27 09:56:02 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-27 09:56:02 -==> Parameters: 426(String)
2020-03-27 09:56:02 -<==      Total: 1
2020-03-27 09:56:02 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-27 09:56:02 -==> Parameters: 25(String)
2020-03-27 09:56:02 -<==      Total: 1
2020-03-27 09:56:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-27 09:56:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-27 09:56:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-27 09:56:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-27 09:56:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-27 09:56:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-27 09:56:02 -耗时 : 16
2020-03-27 09:56:06 -此处进行解密+验签+身份验证
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:56:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-27 09:56:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-27 09:56:06 -==> Parameters: 426(String)
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -耗时 : 3
2020-03-27 09:56:06 -此处进行解密+验签+身份验证
2020-03-27 09:56:06 -解密：
2020-03-27 09:56:06 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-27 09:56:06 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-27 09:56:06 -==> Parameters: 01(String), 01(String)
2020-03-27 09:56:06 -<==      Total: 4
2020-03-27 09:56:06 -耗时 : 2
2020-03-27 09:56:06 -此处进行解密+验签+身份验证
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:56:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-27 09:56:06 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-27 09:56:06 -==> Parameters: 426(String)
2020-03-27 09:56:06 -<==      Total: 2
2020-03-27 09:56:06 -耗时 : 21
2020-03-27 09:56:06 -此处进行解密+验签+身份验证
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:56:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 09:56:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:56:06 -==> Parameters: 426(String), 426(String)
2020-03-27 09:56:06 -此处进行解密+验签+身份验证
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:56:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:06 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 09:56:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:06 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 09:56:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-27 09:56:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-27 09:56:06 -==> Parameters: 426(String)
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -耗时 : 1
2020-03-27 09:56:06 -<==    Updates: 1
2020-03-27 09:56:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 09:56:06 -==> Parameters: 426(String), 426(String)
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:06 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:06 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 09:56:06 -<==    Updates: 1
2020-03-27 09:56:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 09:56:06 -==> Parameters: 
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:06 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 09:56:06 -<==      Total: 1
2020-03-27 09:56:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:06 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 09:56:07 -<==    Updates: 1
2020-03-27 09:56:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:56:07 -==> Parameters: 426(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:07 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 09:56:07 -<==    Updates: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -耗时 : 67
2020-03-27 09:56:07 -此处进行解密+验签+身份验证
2020-03-27 09:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:56:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 09:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 09:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 09:56:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:56:07 -==> Parameters: 426(String), 426(String)
2020-03-27 09:56:07 -此处进行解密+验签+身份验证
2020-03-27 09:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 09:56:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:56:07 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-27 09:56:07 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-27 09:56:07 -==> Parameters: 
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:07 -<==      Total: 3
2020-03-27 09:56:07 -耗时 : 2
2020-03-27 09:56:07 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 09:56:07 -<==    Updates: 1
2020-03-27 09:56:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 09:56:07 -==> Parameters: 426(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:07 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 09:56:07 -<==    Updates: 1
2020-03-27 09:56:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 09:56:07 -==> Parameters: 
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:07 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 09:56:07 -<==    Updates: 1
2020-03-27 09:56:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 09:56:07 -==> Parameters: 426(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 09:56:07 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 09:56:07 -<==    Updates: 1
2020-03-27 09:56:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 09:56:07 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 09:56:07 -<==      Total: 1
2020-03-27 09:56:07 -耗时 : 77
2020-03-27 09:57:00 -此处进行解密+验签+身份验证
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:57:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-27 09:57:00 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-27 09:57:00 -==> Parameters: 426(String)
2020-03-27 09:57:00 -<==      Total: 1
2020-03-27 09:57:00 -耗时 : 2
2020-03-27 09:57:00 -此处进行解密+验签+身份验证
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:57:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-27 09:57:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-27 09:57:00 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:57:00 -<==      Total: 1
2020-03-27 09:57:00 -耗时 : 2
2020-03-27 09:57:00 -此处进行解密+验签+身份验证
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:57:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-27 09:57:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-27 09:57:00 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:57:00 -<==      Total: 1
2020-03-27 09:57:00 -耗时 : 2
2020-03-27 09:57:00 -此处进行解密+验签+身份验证
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 09:57:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 09:57:00 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-27 09:57:00 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-27 09:57:00 -==> Parameters: 426(String), 202003(String)
2020-03-27 09:57:00 -<==      Total: 1
2020-03-27 09:57:00 -耗时 : 2
2020-03-27 10:11:41 -此处进行解密+验签+身份验证
2020-03-27 10:11:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 10:11:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 10:11:41 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardEposList
2020-03-27 10:11:41 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type='epos' and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-27 10:11:41 -==> Parameters: 426(String), 20200301(String), 20200331(String), 426(String), 20200301(String), 20200331(String)
2020-03-27 10:11:41 -<==      Total: 0
2020-03-27 10:11:41 -耗时 : 93
2020-03-27 11:36:00 -此处进行解密+验签+身份验证
2020-03-27 11:36:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-27 11:36:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-27 11:36:00 -==> Parameters: 426(String)
2020-03-27 11:36:00 -<==      Total: 1
2020-03-27 11:36:00 -耗时 : 7
2020-03-27 11:36:00 -此处进行解密+验签+身份验证
2020-03-27 11:36:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 11:36:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 11:36:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 11:36:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:00 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:00 -<==      Total: 1
2020-03-27 11:36:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:00 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:01 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 11:36:01 -<==    Updates: 1
2020-03-27 11:36:01 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 11:36:01 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:01 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:01 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 11:36:01 -<==    Updates: 1
2020-03-27 11:36:01 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 11:36:01 -==> Parameters: 
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:01 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:01 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 11:36:01 -<==    Updates: 1
2020-03-27 11:36:01 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:01 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:01 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:01 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 11:36:01 -<==    Updates: 1
2020-03-27 11:36:01 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:01 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 11:36:01 -<==      Total: 1
2020-03-27 11:36:01 -耗时 : 108
2020-03-27 11:36:11 -此处进行解密+验签+身份验证
2020-03-27 11:36:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 11:36:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 11:36:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 11:36:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:11 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:11 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:11 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 11:36:11 -<==    Updates: 1
2020-03-27 11:36:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 11:36:11 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:11 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:11 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 11:36:11 -<==    Updates: 1
2020-03-27 11:36:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 11:36:11 -==> Parameters: 
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:11 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:11 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 11:36:11 -<==    Updates: 1
2020-03-27 11:36:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:11 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:11 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:11 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 11:36:11 -<==    Updates: 1
2020-03-27 11:36:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:11 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 11:36:11 -<==      Total: 1
2020-03-27 11:36:11 -耗时 : 63
2020-03-27 11:36:12 -此处进行解密+验签+身份验证
2020-03-27 11:36:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:12 -此处进行解密+验签+身份验证
2020-03-27 11:36:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-27 11:36:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:12 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-27 11:36:12 -==> Parameters: 426(String)
2020-03-27 11:36:12 -<==      Total: 1
2020-03-27 11:36:12 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-27 11:36:12 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-27 11:36:12 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:12 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-27 11:36:12 -==> Parameters: 202003(String), 426(String)
2020-03-27 11:36:13 -<==      Total: 1
2020-03-27 11:36:13 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-27 11:36:13 -==> Parameters: 426(String)
2020-03-27 11:36:13 -<==      Total: 0
2020-03-27 11:36:13 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-27 11:36:13 -==> Parameters: 202003(String), 426(String)
2020-03-27 11:36:13 -<==      Total: 1
2020-03-27 11:36:13 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-27 11:36:13 -==> Parameters: 426(String)
2020-03-27 11:36:13 -<==      Total: 0
2020-03-27 11:36:13 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-27 11:36:13 -==> Parameters: 202003(String), 426(String)
2020-03-27 11:36:13 -<==      Total: 1
2020-03-27 11:36:13 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-27 11:36:13 -==> Parameters: 426(String)
2020-03-27 11:36:13 -<==      Total: 0
2020-03-27 11:36:13 -耗时 : 44
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-27 11:36:14 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:14 -此处进行解密+验签+身份验证
2020-03-27 11:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 11:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 11:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 11:36:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:14 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:14 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:14 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 11:36:14 -<==    Updates: 1
2020-03-27 11:36:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 11:36:14 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:14 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 11:36:14 -耗时 : 1432
2020-03-27 11:36:14 -<==    Updates: 1
2020-03-27 11:36:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 11:36:14 -==> Parameters: 
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:14 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:14 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 11:36:14 -<==    Updates: 1
2020-03-27 11:36:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:14 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:14 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:14 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 11:36:14 -<==    Updates: 1
2020-03-27 11:36:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:14 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 11:36:14 -<==      Total: 1
2020-03-27 11:36:14 -耗时 : 234
2020-03-27 11:36:20 -此处进行解密+验签+身份验证
2020-03-27 11:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-27 11:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_426
2020-03-27 11:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_426 , return
2020-03-27 11:36:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:20 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:20 -==> Parameters: applyRateFlag(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:20 -==> Parameters: 0(Integer), 0(Integer), 426(String), applyRateFlag(String)
2020-03-27 11:36:20 -<==    Updates: 1
2020-03-27 11:36:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-27 11:36:20 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:20 -==> Parameters: recallFlag(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:20 -==> Parameters: 0(Integer), 0(Integer), 426(String), recallFlag(String)
2020-03-27 11:36:20 -<==    Updates: 1
2020-03-27 11:36:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-27 11:36:20 -==> Parameters: 
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:20 -==> Parameters: collegeFlag(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:20 -==> Parameters: 25(Integer), 25(Integer), 426(String), collegeFlag(String)
2020-03-27 11:36:20 -<==    Updates: 1
2020-03-27 11:36:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-27 11:36:20 -==> Parameters: 426(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:20 -==> Parameters: cardFlag(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-27 11:36:20 -==> Parameters: 0(Integer), 0(Integer), 426(String), cardFlag(String)
2020-03-27 11:36:20 -<==    Updates: 1
2020-03-27 11:36:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-27 11:36:20 -==> Parameters: appImgFlag(String), 426(String)
2020-03-27 11:36:20 -<==      Total: 1
2020-03-27 11:36:20 -耗时 : 74
2020-03-27 11:36:41 -此处进行解密+验签+身份验证
2020-03-27 11:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-27 11:36:41 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-27 11:36:41 -==> Parameters: 426(String)
2020-03-27 11:36:41 -此处进行解密+验签+身份验证
2020-03-27 11:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-27 11:36:41 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-27 11:36:41 -==> Parameters: 426(String)
2020-03-27 11:36:41 -<==      Total: 1
2020-03-27 11:36:41 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-27 11:36:41 -==> Parameters: 426(String), 426(String), 202003(String)
2020-03-27 11:36:41 -<==      Total: 1
2020-03-27 11:36:41 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-27 11:36:41 -==> Parameters: 426(String), 426(String), 202003(String)
2020-03-27 11:36:41 -<==      Total: 1
2020-03-27 11:36:41 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-27 11:36:41 -==> Parameters: 426(String), 426(String), 20200226(String), 20200327(String), 426(String)
2020-03-27 11:36:42 -<==      Total: 1
2020-03-27 11:36:42 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-27 11:36:42 -==> Parameters: 426(String), 426(String), 20200226(String), 20200327(String), 426(String)
2020-03-27 11:36:42 -<==      Total: 1
2020-03-27 11:36:42 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-27 11:36:42 -==> Parameters: 426(String), 20200127(String), 426(String), 20200127(String), 20200327(String), 426(String)
2020-03-27 11:36:43 -<==      Total: 1
2020-03-27 11:36:43 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-27 11:36:43 -==> Parameters: 426(String)
2020-03-27 11:36:44 -<==      Total: 1
2020-03-27 11:36:44 -耗时 : 2422
2020-03-27 11:36:44 -<==      Total: 1
2020-03-27 11:36:44 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-27 11:36:44 -==> Parameters: 426(String), 20200127(String), 426(String), 20200127(String), 20200327(String), 426(String)
2020-03-27 11:36:44 -<==      Total: 1
2020-03-27 11:36:44 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-27 11:36:44 -==> Parameters: 426(String)
2020-03-27 11:36:44 -<==      Total: 1
2020-03-27 11:36:44 -耗时 : 3219
2020-03-27 11:36:57 -此处进行解密+验签+身份验证
2020-03-27 11:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:36:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getExcellentMerchantTraditionalPosList
2020-03-27 11:36:57 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance >= 50000 AND t2.cre_month = ? ) ORDER BY t.id desc limit 0,10 
2020-03-27 11:36:57 -==> Parameters: 426(String), 426(String), 202003(String)
2020-03-27 11:36:58 -<==      Total: 10
2020-03-27 11:36:58 -耗时 : 92
2020-03-27 11:38:39 -Starting LongEcologicalApplication on PC-201905161910 with PID 15888 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-27 11:38:39 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-27 11:38:39 -No active profile set, falling back to default profiles: default
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:40 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 11:38:41 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-27 11:38:41 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-27 11:38:41 -Finished Spring Data repository scanning in 82ms. Found 0 repository interfaces.
2020-03-27 11:38:41 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-27 11:38:41 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-27 11:38:41 -Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2020-03-27 11:38:41 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$140cc1ba] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-27 11:38:41 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e90a65a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-27 11:38:42 -Tomcat initialized with port(s): 8080 (http)
2020-03-27 11:38:42 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-27 11:38:42 -Starting service [Tomcat]
2020-03-27 11:38:42 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-27 11:38:42 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-27 11:38:43 -Initializing Spring embedded WebApplicationContext
2020-03-27 11:38:43 -Root WebApplicationContext: initialization completed in 3132 ms
2020-03-27 11:38:43 -Filter xssFilter was not registered (disabled)
2020-03-27 11:38:43 -HikariPool-1 - Starting...
2020-03-27 11:38:43 -HikariPool-1 - Start completed.
2020-03-27 11:38:43 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-27 11:38:44 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-27 11:38:44 -HHH000206: hibernate.properties not found
2020-03-27 11:38:44 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-27 11:38:44 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-27 11:38:44 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-27 11:38:45 -Using default implementation for ThreadExecutor
2020-03-27 11:38:45 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-27 11:38:45 -Quartz Scheduler v.2.3.0 created.
2020-03-27 11:38:45 -RAMJobStore initialized.
2020-03-27 11:38:45 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-27 11:38:45 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-27 11:38:45 -Quartz scheduler version: 2.3.0
2020-03-27 11:38:45 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@28295554
2020-03-27 11:38:46 -STAET TaskExecutorConfig
2020-03-27 11:38:46 -Initializing ExecutorService
2020-03-27 11:38:46 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-27 11:38:46 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-27 11:38:46 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-27 11:38:47 -Initializing ExecutorService 'taskScheduler'
2020-03-27 11:38:47 -Starting Quartz Scheduler now
2020-03-27 11:38:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-27 11:38:47 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-27 11:38:47 -Using a shared selector for servlet write/read
2020-03-27 11:38:47 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-27 11:38:47 -Started LongEcologicalApplication in 8.928 seconds (JVM running for 10.908)
2020-03-27 11:39:19 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-27 11:39:19 -Initializing Servlet 'dispatcherServlet'
2020-03-27 11:39:19 -Completed initialization in 13 ms
2020-03-27 11:39:19 -此处进行解密+验签+身份验证
2020-03-27 11:39:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_426
2020-03-27 11:39:19 -Starting without optional epoll library
2020-03-27 11:39:19 -Starting without optional kqueue library
2020-03-27 11:39:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_426 , return
2020-03-27 11:39:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getExcellentMerchantTraditionalPosList
2020-03-27 11:40:03 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=49s850ms344µs64ns).
2020-03-27 11:40:03 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.merchant_performance >= 50000 AND t2.cre_month = ? ) ORDER BY t.id desc limit 0,10 
2020-03-27 11:40:03 -==> Parameters: 426(String), 426(String), 202003(String)
2020-03-27 11:40:03 -<==      Total: 10
2020-03-27 11:40:03 -耗时 : 43371
2020-03-27 11:45:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-27 11:45:17 -Shutting down ExecutorService 'taskScheduler'
2020-03-27 11:45:17 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-27 11:45:17 -Shutting down Quartz Scheduler
2020-03-27 11:45:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-27 11:45:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-27 11:45:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-27 11:45:17 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-27 11:45:17 -HikariPool-1 - Shutdown initiated...
2020-03-27 11:45:17 -HikariPool-1 - Shutdown completed.
2020-03-27 14:06:45 -Starting LongEcologicalApplication on PC-201905161910 with PID 7696 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-27 14:06:45 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-27 14:06:45 -No active profile set, falling back to default profiles: default
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-27 14:06:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-27 14:06:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-27 14:06:46 -Finished Spring Data repository scanning in 83ms. Found 0 repository interfaces.
2020-03-27 14:06:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-27 14:06:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-27 14:06:46 -Finished Spring Data repository scanning in 65ms. Found 0 repository interfaces.
2020-03-27 14:06:47 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$bc63034] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-27 14:06:47 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$64a14d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-27 14:06:48 -Tomcat initialized with port(s): 8080 (http)
2020-03-27 14:06:48 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-27 14:06:48 -Starting service [Tomcat]
2020-03-27 14:06:48 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-27 14:06:48 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-27 14:06:48 -Initializing Spring embedded WebApplicationContext
2020-03-27 14:06:48 -Root WebApplicationContext: initialization completed in 3413 ms
2020-03-27 14:06:48 -Filter xssFilter was not registered (disabled)
2020-03-27 14:06:49 -HikariPool-1 - Starting...
2020-03-27 14:06:49 -HikariPool-1 - Start completed.
2020-03-27 14:06:49 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-27 14:06:49 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-27 14:06:49 -HHH000206: hibernate.properties not found
2020-03-27 14:06:49 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-27 14:06:49 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-27 14:06:50 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-27 14:06:50 -Using default implementation for ThreadExecutor
2020-03-27 14:06:50 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-27 14:06:50 -Quartz Scheduler v.2.3.0 created.
2020-03-27 14:06:50 -RAMJobStore initialized.
2020-03-27 14:06:50 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-27 14:06:50 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-27 14:06:50 -Quartz scheduler version: 2.3.0
2020-03-27 14:06:50 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4f2d8175
2020-03-27 14:06:51 -STAET TaskExecutorConfig
2020-03-27 14:06:51 -Initializing ExecutorService
2020-03-27 14:06:51 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-27 14:06:51 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-27 14:06:52 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-27 14:06:52 -Initializing ExecutorService 'taskScheduler'
2020-03-27 14:06:52 -Starting Quartz Scheduler now
2020-03-27 14:06:52 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-27 14:06:52 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-27 14:06:52 -Using a shared selector for servlet write/read
2020-03-27 14:06:53 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-27 14:06:53 -Started LongEcologicalApplication in 8.697 seconds (JVM running for 10.001)
2020-03-27 15:09:24 -Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:414)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:294)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-27 15:09:24 -Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in method name. HTTP method names must be tokens
	at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:414)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:294)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
2020-03-27 18:37:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-27 18:37:40 -Shutting down ExecutorService 'taskScheduler'
2020-03-27 18:37:40 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-27 18:37:40 -Shutting down Quartz Scheduler
2020-03-27 18:37:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-27 18:37:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-27 18:37:40 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-27 18:37:40 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-27 18:37:40 -HikariPool-1 - Shutdown initiated...
2020-03-27 18:37:40 -HikariPool-1 - Shutdown completed.
