2020-03-09 11:48:19 -Starting LongEcologicalApplication on PC-201905161910 with PID 6356 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-09 11:48:19 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-09 11:48:19 -No active profile set, falling back to default profiles: default
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:20 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 11:48:21 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-09 11:48:21 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-09 11:48:21 -Finished Spring Data repository scanning in 94ms. Found 0 repository interfaces.
2020-03-09 11:48:21 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-09 11:48:21 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-09 11:48:21 -Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2020-03-09 11:48:21 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$fdfec821] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-09 11:48:21 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f882acc1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-09 11:48:22 -Tomcat initialized with port(s): 8080 (http)
2020-03-09 11:48:22 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-09 11:48:22 -Starting service [Tomcat]
2020-03-09 11:48:22 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-09 11:48:22 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-09 11:48:22 -Initializing Spring embedded WebApplicationContext
2020-03-09 11:48:22 -Root WebApplicationContext: initialization completed in 2680 ms
2020-03-09 11:48:22 -Filter xssFilter was not registered (disabled)
2020-03-09 11:48:22 -HikariPool-1 - Starting...
2020-03-09 11:48:23 -HikariPool-1 - Start completed.
2020-03-09 11:48:23 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-09 11:48:23 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-09 11:48:23 -HHH000206: hibernate.properties not found
2020-03-09 11:48:23 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-09 11:48:23 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-09 11:48:24 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-09 11:48:24 -Using default implementation for ThreadExecutor
2020-03-09 11:48:24 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-09 11:48:24 -Quartz Scheduler v.2.3.0 created.
2020-03-09 11:48:24 -RAMJobStore initialized.
2020-03-09 11:48:24 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-09 11:48:24 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-09 11:48:24 -Quartz scheduler version: 2.3.0
2020-03-09 11:48:24 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@25533bba
2020-03-09 11:48:24 -STAET TaskExecutorConfig
2020-03-09 11:48:24 -Initializing ExecutorService
2020-03-09 11:48:24 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-09 11:48:25 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-09 11:48:25 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-09 11:48:25 -Initializing ExecutorService 'taskScheduler'
2020-03-09 11:48:25 -Starting Quartz Scheduler now
2020-03-09 11:48:25 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-09 11:48:25 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-09 11:48:25 -Using a shared selector for servlet write/read
2020-03-09 11:48:25 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-09 11:48:25 -Started LongEcologicalApplication in 6.884 seconds (JVM running for 8.087)
2020-03-09 15:05:34 -Starting LongEcologicalApplication on PC-201905161910 with PID 11192 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-09 15:05:34 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-09 15:05:34 -No active profile set, falling back to default profiles: default
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 15:05:35 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-09 15:05:35 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-09 15:05:35 -Finished Spring Data repository scanning in 69ms. Found 0 repository interfaces.
2020-03-09 15:05:35 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-09 15:05:35 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-09 15:05:35 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-09 15:05:35 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$98781fbe] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-09 15:05:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$92fc045e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-09 15:05:36 -Tomcat initialized with port(s): 8080 (http)
2020-03-09 15:05:36 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-09 15:05:36 -Starting service [Tomcat]
2020-03-09 15:05:36 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-09 15:05:36 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-09 15:05:36 -Initializing Spring embedded WebApplicationContext
2020-03-09 15:05:36 -Root WebApplicationContext: initialization completed in 2017 ms
2020-03-09 15:05:36 -Filter xssFilter was not registered (disabled)
2020-03-09 15:05:36 -HikariPool-1 - Starting...
2020-03-09 15:05:36 -HikariPool-1 - Start completed.
2020-03-09 15:05:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-09 15:05:37 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-09 15:05:37 -HHH000206: hibernate.properties not found
2020-03-09 15:05:37 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-09 15:05:37 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-09 15:05:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-09 15:05:37 -Using default implementation for ThreadExecutor
2020-03-09 15:05:37 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-09 15:05:37 -Quartz Scheduler v.2.3.0 created.
2020-03-09 15:05:37 -RAMJobStore initialized.
2020-03-09 15:05:37 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-09 15:05:37 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-09 15:05:37 -Quartz scheduler version: 2.3.0
2020-03-09 15:05:37 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5cc1bf20
2020-03-09 15:05:38 -STAET TaskExecutorConfig
2020-03-09 15:05:38 -Initializing ExecutorService
2020-03-09 15:05:38 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-09 15:05:38 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-09 15:05:38 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-09 15:05:39 -Initializing ExecutorService 'taskScheduler'
2020-03-09 15:05:39 -Starting Quartz Scheduler now
2020-03-09 15:05:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-09 15:05:39 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-09 15:05:39 -Using a shared selector for servlet write/read
2020-03-09 15:05:39 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-09 15:05:39 -Started LongEcologicalApplication in 5.54 seconds (JVM running for 6.583)
2020-03-09 15:17:41 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-09 15:17:41 -Initializing Servlet 'dispatcherServlet'
2020-03-09 15:17:41 -Completed initialization in 14 ms
2020-03-09 15:17:41 -此处进行解密+验签+身份验证
2020-03-09 15:17:41 -此处进行解密+验签+身份验证
2020-03-09 15:17:41 -此处进行解密+验签+身份验证
2020-03-09 15:17:41 -此处进行解密+验签+身份验证
2020-03-09 15:17:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:17:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:17:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:17:42 -Starting without optional epoll library
2020-03-09 15:17:42 -Starting without optional kqueue library
2020-03-09 15:17:42 -解密：{
  "login_type" : "token",
  "device_type" : "iOS",
  "sign" : "B0AAAE9641C1CB676639F4C48E5A20AD",
  "version_no" : "1.1.1",
  "token" : "181|O9TOXZ0B5W2Y6GLVKPB7GXKQ7XH5Z46P",
  "device_no" : "iOS11.4.1"
}
2020-03-09 15:17:42 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-09 15:17:42 -token值=======181|O9TOXZ0B5W2Y6GLVKPB7GXKQ7XH5Z46P
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:17:42 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-09 15:17:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-09 15:17:42 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-09 15:17:42 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-09 15:17:42 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-09 15:17:42 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-09 15:17:42 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-09 15:17:42 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-09 15:17:42 -耗时 : 22
2020-03-09 15:17:42 -==> Parameters: 
2020-03-09 15:17:42 -==> Parameters: 181(String)
2020-03-09 15:17:42 -==> Parameters: 181(String)
2020-03-09 15:17:42 -<==      Total: 2
2020-03-09 15:17:42 -<==      Total: 3
2020-03-09 15:17:42 -<==      Total: 1
2020-03-09 15:17:42 -耗时 : 53
2020-03-09 15:17:42 -耗时 : 45
2020-03-09 15:17:42 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-09 15:17:42 -==> Parameters: 26(String)
2020-03-09 15:17:42 -<==      Total: 1
2020-03-09 15:17:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-09 15:17:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-09 15:17:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-09 15:17:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-09 15:17:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-09 15:17:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-09 15:17:42 -耗时 : 383
2020-03-09 15:17:42 -此处进行解密+验签+身份验证
2020-03-09 15:17:42 -此处进行解密+验签+身份验证
2020-03-09 15:17:42 -此处进行解密+验签+身份验证
2020-03-09 15:17:42 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:17:42 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:17:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:17:42 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 15:17:43 -耗时 : 19
2020-03-09 15:17:43 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-09 15:17:43 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-09 15:17:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 15:17:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 15:17:43 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-09 15:17:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 15:17:43 -耗时 : 16
2020-03-09 15:17:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 15:17:43 -==> Parameters: 181(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:17:43 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:17:43 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 15:17:43 -<==    Updates: 1
2020-03-09 15:17:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 15:17:43 -==> Parameters: 181(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:17:43 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:17:43 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 15:17:43 -<==    Updates: 1
2020-03-09 15:17:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 15:17:43 -==> Parameters: 
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:17:43 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:17:43 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 15:17:43 -<==    Updates: 1
2020-03-09 15:17:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 15:17:43 -==> Parameters: 181(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:17:43 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 15:17:43 -<==      Total: 1
2020-03-09 15:17:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:17:43 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 15:17:43 -<==    Updates: 1
2020-03-09 15:17:43 -耗时 : 183
2020-03-09 15:18:16 -此处进行解密+验签+身份验证
2020-03-09 15:18:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:18:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:18:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 15:18:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 15:18:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 15:18:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 15:18:16 -==> Parameters: 181(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:18:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:18:16 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 15:18:16 -<==    Updates: 1
2020-03-09 15:18:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 15:18:16 -==> Parameters: 181(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:18:16 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:18:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 15:18:16 -<==    Updates: 1
2020-03-09 15:18:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 15:18:16 -==> Parameters: 
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:18:16 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:18:16 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 15:18:16 -<==    Updates: 1
2020-03-09 15:18:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 15:18:16 -==> Parameters: 181(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:18:16 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 15:18:16 -<==      Total: 1
2020-03-09 15:18:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:18:16 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 15:18:16 -<==    Updates: 1
2020-03-09 15:18:16 -耗时 : 99
2020-03-09 15:18:33 -此处进行解密+验签+身份验证
2020-03-09 15:18:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:18:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:18:33 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 15:18:33 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 15:18:33 -==> Parameters: 181(String), 00(String)
2020-03-09 15:18:33 -<==      Total: 10
2020-03-09 15:18:33 -耗时 : 53
2020-03-09 15:18:47 -此处进行解密+验签+身份验证
2020-03-09 15:18:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:18:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:18:47 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 15:18:47 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 15:18:47 -==> Parameters: 181(String), 00(String)
2020-03-09 15:18:47 -<==      Total: 10
2020-03-09 15:18:47 -耗时 : 20
2020-03-09 15:38:59 -此处进行解密+验签+身份验证
2020-03-09 15:38:59 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 15:38:59 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 15:38:59 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1c4c957c.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$6e0c9d0c.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-09 15:38:59 -耗时 : 9
2020-03-09 15:38:59 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-09 15:38:59 -Reconnected to 120.25.164.176:10379
2020-03-09 15:39:06 -此处进行解密+验签+身份验证
2020-03-09 15:39:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:39:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:39:06 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 15:39:06 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? and id < ? order by id desc limit 0,10 
2020-03-09 15:39:06 -==> Parameters: 181(String), 00(String), 90(String)
2020-03-09 15:39:06 -<==      Total: 0
2020-03-09 15:39:06 -耗时 : 15
2020-03-09 15:39:06 -此处进行解密+验签+身份验证
2020-03-09 15:39:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:39:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:39:06 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallDetail
2020-03-09 15:39:06 -==>  Preparing: select biz_code, biz_msg, source, merchant_name, mer_code, agent_id, settle_flag, sdk_push_key, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where id = ? 
2020-03-09 15:39:06 -==> Parameters: 436(String)
2020-03-09 15:39:06 -<==      Total: 1
2020-03-09 15:39:06 -==>  Preparing: select terminal, machine_id, sim_card, is_take_machi from t_user_traditional_pos_install_detail where install_id = ? 
2020-03-09 15:39:06 -==> Parameters: 436(String)
2020-03-09 15:39:06 -<==      Total: 1
2020-03-09 15:39:06 -耗时 : 19
2020-03-09 15:42:08 -此处进行解密+验签+身份验证
2020-03-09 15:42:08 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 15:42:08 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 15:42:08 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 15:42:08 -耗时 : 16
2020-03-09 15:45:12 -此处进行解密+验签+身份验证
2020-03-09 15:45:12 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 15:45:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 15:45:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 15:45:12 -耗时 : 18
2020-03-09 15:45:25 -此处进行解密+验签+身份验证
2020-03-09 15:45:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 15:45:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 15:45:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 15:45:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 15:45:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 15:45:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 15:45:25 -==> Parameters: 181(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:45:25 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:45:25 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 15:45:25 -<==    Updates: 1
2020-03-09 15:45:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 15:45:25 -==> Parameters: 181(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:45:25 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:45:25 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 15:45:25 -<==    Updates: 1
2020-03-09 15:45:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 15:45:25 -==> Parameters: 
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:45:25 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:45:25 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 15:45:25 -<==    Updates: 1
2020-03-09 15:45:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 15:45:25 -==> Parameters: 181(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 15:45:25 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 15:45:25 -<==      Total: 1
2020-03-09 15:45:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 15:45:25 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 15:45:25 -<==    Updates: 1
2020-03-09 15:45:25 -耗时 : 153
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -解密：{
  "login_type" : "token",
  "device_type" : "iOS",
  "sign" : "B0AAAE9641C1CB676639F4C48E5A20AD",
  "version_no" : "1.1.1",
  "token" : "181|O9TOXZ0B5W2Y6GLVKPB7GXKQ7XH5Z46P",
  "device_no" : "iOS11.4.1"
}
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-09 16:21:21 -token值=======181|O9TOXZ0B5W2Y6GLVKPB7GXKQ7XH5Z46P
2020-03-09 16:21:21 -VerifyTokenServiceImpl -- isToken方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceStringCommands.convertLettuceAccessException(LettuceStringCommands.java:799)
	at org.springframework.data.redis.connection.lettuce.LettuceStringCommands.get(LettuceStringCommands.java:68)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.get(DefaultedRedisConnection.java:253)
	at org.springframework.data.redis.core.DefaultValueOperations$1.inRedis(DefaultValueOperations.java:57)
	at org.springframework.data.redis.core.AbstractOperations$ValueDeserializingRedisCallback.doInRedis(AbstractOperations.java:59)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:95)
	at org.springframework.data.redis.core.DefaultValueOperations.get(DefaultValueOperations.java:53)
	at com.example.longecological.config.redis.RedisUtils.get(RedisUtils.java:114)
	at com.example.longecological.service.common.impl.VerifyTokenServiceImpl.isToken(VerifyTokenServiceImpl.java:38)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl.userLoginOper(UserLoginServiceImpl.java:123)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl.userLogin(UserLoginServiceImpl.java:75)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl$$FastClassBySpringCGLIB$$b1492584.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684)
	at com.example.longecological.service.user.impl.UserLoginServiceImpl$$EnhancerBySpringCGLIB$$72476991.userLogin(<generated>)
	at com.example.longecological.controller.user.UserLoginController.userLogin(UserLoginController.java:39)
	at com.example.longecological.controller.user.UserLoginController$$FastClassBySpringCGLIB$$77717560.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.user.UserLoginController$$EnhancerBySpringCGLIB$$7a9ee235.userLogin(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-09 16:21:21 -耗时 : 9
2020-03-09 16:21:21 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-09 16:21:21 -Reconnected to 120.25.164.176:10379
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-09 16:21:21 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4e955416 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-09 16:21:21 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@64afba20 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6de089df (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -耗时 : 13
2020-03-09 16:21:21 -耗时 : 12
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7ff7d858 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4f2f56fb (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2bfe9eec (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4f8eb0c9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@28860076 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@39bc20e1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:21:21 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4141cac8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:21:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:21:21 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-09 16:21:21 -==> Parameters: 
2020-03-09 16:21:21 -<==      Total: 3
2020-03-09 16:21:21 -耗时 : 50
2020-03-09 16:21:21 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-09 16:21:21 -==> Parameters: 181(String)
2020-03-09 16:21:21 -<==      Total: 2
2020-03-09 16:21:21 -耗时 : 67
2020-03-09 16:21:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:21:21 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:21 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:21 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:21:21 -<==    Updates: 1
2020-03-09 16:21:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:21:21 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:21 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:21 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:21:21 -<==    Updates: 1
2020-03-09 16:21:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:21:21 -==> Parameters: 
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:21 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:21 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:21:21 -<==    Updates: 1
2020-03-09 16:21:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:21:21 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:21 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:21:21 -<==      Total: 1
2020-03-09 16:21:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:21 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:21:21 -<==    Updates: 1
2020-03-09 16:21:21 -耗时 : 109
2020-03-09 16:21:21 -此处进行解密+验签+身份验证
2020-03-09 16:21:21 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:21:21 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:21:21 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:21:21 -耗时 : 8
2020-03-09 16:21:23 -此处进行解密+验签+身份验证
2020-03-09 16:21:23 -解密：{
  "sign" : "1CA3C1BBAFD8CF3D75B8767ACFA1FC17",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "F5B4166AFD7EA843A09FEE4AFD9979F4",
  "token" : "181|O9TOXZ0B5W2Y6GLVKPB7GXKQ7XH5Z46P",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-09 16:21:23 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-09 16:21:23 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-09 16:21:23 -==> Parameters: 13322990711(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-09 16:21:23 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200309(String), 162123(String), 181(Integer)
2020-03-09 16:21:23 -<==    Updates: 1
2020-03-09 16:21:23 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-09 16:21:23 -==> Parameters: 26(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-09 16:21:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-09 16:21:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-09 16:21:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-09 16:21:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-09 16:21:23 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-09 16:21:23 -耗时 : 80
2020-03-09 16:21:23 -此处进行解密+验签+身份验证
2020-03-09 16:21:23 -此处进行解密+验签+身份验证
2020-03-09 16:21:23 -此处进行解密+验签+身份验证
2020-03-09 16:21:23 -此处进行解密+验签+身份验证
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:23 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-09 16:21:23 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-09 16:21:23 -==> Parameters: 
2020-03-09 16:21:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-09 16:21:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-09 16:21:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-09 16:21:23 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-09 16:21:23 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-09 16:21:23 -<==      Total: 3
2020-03-09 16:21:23 -耗时 : 6
2020-03-09 16:21:23 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-09 16:21:23 -==> Parameters: 181(String)
2020-03-09 16:21:23 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-09 16:21:23 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-09 16:21:23 -耗时 : 10
2020-03-09 16:21:23 -<==      Total: 2
2020-03-09 16:21:23 -耗时 : 11
2020-03-09 16:21:23 -此处进行解密+验签+身份验证
2020-03-09 16:21:23 -耗时 : 14
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:21:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:21:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:21:23 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:23 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:23 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:21:23 -<==    Updates: 1
2020-03-09 16:21:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:21:23 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:23 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:23 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:21:23 -<==    Updates: 1
2020-03-09 16:21:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:21:23 -==> Parameters: 
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:23 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:23 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:21:23 -<==    Updates: 1
2020-03-09 16:21:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:21:23 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:23 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:21:23 -<==      Total: 1
2020-03-09 16:21:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:23 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:21:23 -<==    Updates: 1
2020-03-09 16:21:23 -耗时 : 88
2020-03-09 16:21:40 -此处进行解密+验签+身份验证
2020-03-09 16:21:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-09 16:21:40 -此处进行解密+验签+身份验证
2020-03-09 16:21:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:40 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-09 16:21:40 -==> Parameters: 1(String), 181(String), collegeFlag(String)
2020-03-09 16:21:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:40 -<==    Updates: 1
2020-03-09 16:21:40 -耗时 : 12
2020-03-09 16:21:40 -请求地址 : http://192.168.191.1:8080/api/sys/moneylockercollege/getMoneyLockerCollegeList
2020-03-09 16:21:40 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,cacheKey:zfpay_sys_money_locker_college_list_0
2020-03-09 16:21:40 -List com.example.longecological.service.moneylocker.impl.MoneyLockerCollegeCacheServiceImpl.getMoneyLockerCollegeList(Map) enable cache service,has cacheKey:zfpay_sys_money_locker_college_list_0 , return
2020-03-09 16:21:40 -耗时 : 10
2020-03-09 16:21:43 -此处进行解密+验签+身份验证
2020-03-09 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:21:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:21:43 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:43 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:43 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:21:43 -<==    Updates: 1
2020-03-09 16:21:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:21:43 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:43 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:43 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:21:43 -<==    Updates: 1
2020-03-09 16:21:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:21:43 -==> Parameters: 
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:43 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:43 -==> Parameters: 0(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:21:43 -<==    Updates: 1
2020-03-09 16:21:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:21:43 -==> Parameters: 181(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:21:43 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:21:43 -<==      Total: 1
2020-03-09 16:21:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:21:43 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:21:43 -<==    Updates: 1
2020-03-09 16:21:43 -耗时 : 95
2020-03-09 16:21:51 -此处进行解密+验签+身份验证
2020-03-09 16:21:51 -此处进行解密+验签+身份验证
2020-03-09 16:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:21:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-09 16:21:51 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-09 16:21:51 -==> Parameters: 181(String)
2020-03-09 16:21:51 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-09 16:21:51 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-09 16:21:51 -==> Parameters: 
2020-03-09 16:21:51 -<==      Total: 2
2020-03-09 16:21:51 -耗时 : 9
2020-03-09 16:21:51 -<==      Total: 3
2020-03-09 16:21:51 -耗时 : 10
2020-03-09 16:22:01 -此处进行解密+验签+身份验证
2020-03-09 16:22:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:01 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeList
2020-03-09 16:22:01 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc LIMIT ?,? 
2020-03-09 16:22:01 -==> Parameters: 181(String), 0(Integer), 10(Integer)
2020-03-09 16:22:01 -<==      Total: 3
2020-03-09 16:22:01 -耗时 : 12
2020-03-09 16:22:03 -此处进行解密+验签+身份验证
2020-03-09 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:03 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:22:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:22:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:22:03 -==> Parameters: 181(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:03 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:03 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:22:03 -<==    Updates: 1
2020-03-09 16:22:03 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:22:03 -==> Parameters: 181(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:03 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:03 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:22:03 -<==    Updates: 1
2020-03-09 16:22:03 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:22:03 -==> Parameters: 
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:03 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:03 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:22:03 -<==    Updates: 1
2020-03-09 16:22:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:22:03 -==> Parameters: 181(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:03 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:22:03 -<==      Total: 1
2020-03-09 16:22:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:03 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:22:03 -<==    Updates: 1
2020-03-09 16:22:03 -耗时 : 91
2020-03-09 16:22:11 -此处进行解密+验签+身份验证
2020-03-09 16:22:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:11 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:22:11 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 16:22:11 -==> Parameters: 181(String), 00(String)
2020-03-09 16:22:11 -<==      Total: 10
2020-03-09 16:22:11 -耗时 : 10
2020-03-09 16:22:20 -此处进行解密+验签+身份验证
2020-03-09 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:20 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:22:20 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 16:22:20 -==> Parameters: 181(String), 01(String)
2020-03-09 16:22:20 -<==      Total: 0
2020-03-09 16:22:20 -耗时 : 10
2020-03-09 16:22:21 -此处进行解密+验签+身份验证
2020-03-09 16:22:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:21 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:22:21 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 16:22:21 -==> Parameters: 181(String), 01(String)
2020-03-09 16:22:21 -<==      Total: 0
2020-03-09 16:22:21 -耗时 : 9
2020-03-09 16:22:33 -此处进行解密+验签+身份验证
2020-03-09 16:22:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:33 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:22:33 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 16:22:33 -==> Parameters: 181(String), 00(String)
2020-03-09 16:22:33 -<==      Total: 10
2020-03-09 16:22:33 -耗时 : 12
2020-03-09 16:22:43 -此处进行解密+验签+身份验证
2020-03-09 16:22:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:43 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:22:43 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 16:22:43 -==> Parameters: 181(String), 00(String)
2020-03-09 16:22:43 -<==      Total: 10
2020-03-09 16:22:43 -耗时 : 12
2020-03-09 16:22:48 -此处进行解密+验签+身份验证
2020-03-09 16:22:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:48 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:22:48 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? and id < ? order by id desc limit 0,10 
2020-03-09 16:22:48 -==> Parameters: 181(String), 00(String), 90(String)
2020-03-09 16:22:48 -<==      Total: 0
2020-03-09 16:22:48 -耗时 : 9
2020-03-09 16:22:51 -此处进行解密+验签+身份验证
2020-03-09 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:22:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:22:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:22:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:22:51 -==> Parameters: 181(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:51 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:51 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:22:51 -<==    Updates: 1
2020-03-09 16:22:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:22:51 -==> Parameters: 181(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:51 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:51 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:22:51 -<==    Updates: 1
2020-03-09 16:22:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:22:51 -==> Parameters: 
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:51 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:51 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:22:51 -<==    Updates: 1
2020-03-09 16:22:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:22:51 -==> Parameters: 181(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:22:51 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:22:51 -<==      Total: 1
2020-03-09 16:22:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:22:51 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:22:51 -<==    Updates: 1
2020-03-09 16:22:51 -耗时 : 89
2020-03-09 16:23:24 -此处进行解密+验签+身份验证
2020-03-09 16:23:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:23:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:23:24 -请求地址 : http://192.168.191.1:8080/api/sys/traditionalpos/getScanTraditionalPosList
2020-03-09 16:23:24 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_sys_traditional_pos_info t1 WHERE t1.sn = t.sn AND t1.scan_status = '0' ) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_scan_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.STATUS = '00' ) ORDER BY t.id desc limit 0,10 
2020-03-09 16:23:24 -==> Parameters: 181(String), 181(String)
2020-03-09 16:23:24 -<==      Total: 10
2020-03-09 16:23:24 -耗时 : 14
2020-03-09 16:23:53 -此处进行解密+验签+身份验证
2020-03-09 16:23:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:23:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:23:53 -请求地址 : http://192.168.191.1:8080/api/sys/traditionalpos/getScanTraditionalPosList
2020-03-09 16:23:53 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_sys_traditional_pos_info t1 WHERE t1.sn = t.sn AND t1.scan_status = '0' ) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_scan_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.STATUS = '00' ) ORDER BY t.id desc limit 0,10 
2020-03-09 16:23:53 -==> Parameters: 181(String), 181(String)
2020-03-09 16:23:53 -<==      Total: 10
2020-03-09 16:23:53 -耗时 : 11
2020-03-09 16:24:07 -此处进行解密+验签+身份验证
2020-03-09 16:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:24:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:24:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:24:07 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:07 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:07 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:24:07 -<==    Updates: 1
2020-03-09 16:24:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:24:07 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:07 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:07 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:24:07 -<==    Updates: 1
2020-03-09 16:24:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:24:07 -==> Parameters: 
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:07 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:07 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:24:07 -<==    Updates: 1
2020-03-09 16:24:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:24:07 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:07 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:24:07 -<==      Total: 1
2020-03-09 16:24:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:07 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:24:07 -<==    Updates: 1
2020-03-09 16:24:07 -耗时 : 92
2020-03-09 16:24:15 -此处进行解密+验签+身份验证
2020-03-09 16:24:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:24:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:24:15 -请求地址 : http://192.168.191.1:8080/api/sys/traditionalpos/getScanTraditionalPosList
2020-03-09 16:24:15 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_sys_traditional_pos_info t1 WHERE t1.sn = t.sn AND t1.scan_status = '0' ) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_scan_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.STATUS = '00' ) ORDER BY t.id desc limit 0,10 
2020-03-09 16:24:15 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:15 -<==      Total: 10
2020-03-09 16:24:15 -耗时 : 8
2020-03-09 16:24:18 -此处进行解密+验签+身份验证
2020-03-09 16:24:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:24:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:24:18 -请求地址 : http://192.168.191.1:8080/api/sys/traditionalpos/getApplyScanRecordList
2020-03-09 16:24:18 -==>  Preparing: select cast(id as char) as record_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_scan_record_info where user_id = ? ORDER BY id desc limit 0,10 
2020-03-09 16:24:18 -==> Parameters: 181(String)
2020-03-09 16:24:18 -<==      Total: 0
2020-03-09 16:24:18 -耗时 : 10
2020-03-09 16:24:22 -此处进行解密+验签+身份验证
2020-03-09 16:24:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:24:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:24:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:24:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:24:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:24:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:24:22 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:22 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:22 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:24:22 -<==    Updates: 1
2020-03-09 16:24:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:24:22 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:22 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:22 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:24:22 -<==    Updates: 1
2020-03-09 16:24:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:24:22 -==> Parameters: 
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:22 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:22 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:24:22 -<==    Updates: 1
2020-03-09 16:24:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:24:22 -==> Parameters: 181(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:24:22 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:24:22 -<==      Total: 1
2020-03-09 16:24:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:24:22 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:24:22 -<==    Updates: 1
2020-03-09 16:24:22 -耗时 : 94
2020-03-09 16:25:34 -此处进行解密+验签+身份验证
2020-03-09 16:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:25:34 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:25:34 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:25:34 -耗时 : 7
2020-03-09 16:25:35 -此处进行解密+验签+身份验证
2020-03-09 16:25:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:25:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:25:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:25:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:25:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:25:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:25:35 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:25:35 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:25:35 -<==    Updates: 1
2020-03-09 16:25:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:25:35 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:25:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:25:35 -<==    Updates: 1
2020-03-09 16:25:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:25:35 -==> Parameters: 
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:25:35 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:25:35 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:25:35 -<==    Updates: 1
2020-03-09 16:25:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:25:35 -==> Parameters: 181(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:25:35 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:25:35 -<==      Total: 1
2020-03-09 16:25:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:25:35 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:25:35 -<==    Updates: 1
2020-03-09 16:25:35 -耗时 : 96
2020-03-09 16:25:50 -此处进行解密+验签+身份验证
2020-03-09 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:25:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:25:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 16:25:50 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:25:50 -==> Parameters: 181(String)
2020-03-09 16:25:50 -<==      Total: 404
2020-03-09 16:25:50 -耗时 : 41
2020-03-09 16:26:04 -此处进行解密+验签+身份验证
2020-03-09 16:26:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:26:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:26:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 16:26:04 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:26:04 -==> Parameters: 181(String)
2020-03-09 16:26:04 -<==      Total: 404
2020-03-09 16:26:04 -耗时 : 24
2020-03-09 16:26:10 -此处进行解密+验签+身份验证
2020-03-09 16:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:26:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:26:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:26:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:26:10 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:10 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:26:10 -<==    Updates: 1
2020-03-09 16:26:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:26:10 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:10 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:26:10 -<==    Updates: 1
2020-03-09 16:26:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:26:10 -==> Parameters: 
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:10 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:10 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:26:10 -<==    Updates: 1
2020-03-09 16:26:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:26:10 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:10 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:26:10 -<==      Total: 1
2020-03-09 16:26:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:10 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:26:10 -<==    Updates: 1
2020-03-09 16:26:10 -耗时 : 92
2020-03-09 16:26:42 -此处进行解密+验签+身份验证
2020-03-09 16:26:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:26:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:26:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-09 16:26:42 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:26:42 -==> Parameters: 181(String)
2020-03-09 16:26:42 -<==      Total: 1004
2020-03-09 16:26:42 -耗时 : 45
2020-03-09 16:26:46 -此处进行解密+验签+身份验证
2020-03-09 16:26:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:26:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:26:46 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:26:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:26:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:26:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:26:46 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:46 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:46 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:26:46 -<==    Updates: 1
2020-03-09 16:26:46 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:26:46 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:46 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:46 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:26:46 -<==    Updates: 1
2020-03-09 16:26:46 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:26:46 -==> Parameters: 
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:46 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:46 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:26:46 -<==    Updates: 1
2020-03-09 16:26:46 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:26:46 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:46 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:26:46 -<==      Total: 1
2020-03-09 16:26:46 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:46 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:26:46 -<==    Updates: 1
2020-03-09 16:26:46 -耗时 : 91
2020-03-09 16:26:50 -此处进行解密+验签+身份验证
2020-03-09 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:26:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:26:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:26:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:26:50 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:50 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:26:50 -<==    Updates: 1
2020-03-09 16:26:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:26:50 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:50 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:50 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:26:50 -<==    Updates: 1
2020-03-09 16:26:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:26:50 -==> Parameters: 
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:50 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:50 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:26:50 -<==    Updates: 1
2020-03-09 16:26:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:26:50 -==> Parameters: 181(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:26:50 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:26:50 -<==      Total: 1
2020-03-09 16:26:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:26:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:26:50 -<==    Updates: 1
2020-03-09 16:26:50 -耗时 : 103
2020-03-09 16:27:09 -此处进行解密+验签+身份验证
2020-03-09 16:27:09 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:27:09 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:27:09 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:27:09 -耗时 : 7
2020-03-09 16:30:35 -此处进行解密+验签+身份验证
2020-03-09 16:30:35 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:30:35 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:30:35 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:30:35 -耗时 : 7
2020-03-09 16:32:42 -此处进行解密+验签+身份验证
2020-03-09 16:32:42 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:32:42 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:32:42 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:32:42 -耗时 : 7
2020-03-09 16:36:27 -此处进行解密+验签+身份验证
2020-03-09 16:36:27 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:36:27 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:36:27 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1c4c957c.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$6e0c9d0c.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-09 16:36:27 -耗时 : 12
2020-03-09 16:36:27 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-09 16:36:27 -Reconnected to 120.25.164.176:10379
2020-03-09 16:36:28 -此处进行解密+验签+身份验证
2020-03-09 16:36:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:36:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:36:28 -请求地址 : http://192.168.191.1:8080/api/interface/zfback/getTraditionalPosInstallList
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@50bfa78c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@42f3b95b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@52e78fda (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7fc9c1cd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@685891c0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@44452b98 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@59de6ad (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@14e11791 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@74335d2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6ab7d749 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:36:28 -==>  Preparing: select cast(id as char) as install_id, merchant_name, mer_code, biz_msg, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_traditional_pos_install_info where user_id = ? and biz_code = ? order by id desc limit 0,10 
2020-03-09 16:36:28 -==> Parameters: 181(String), 00(String)
2020-03-09 16:36:28 -<==      Total: 10
2020-03-09 16:36:28 -耗时 : 102
2020-03-09 16:36:35 -此处进行解密+验签+身份验证
2020-03-09 16:36:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:36:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:36:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:36:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:36:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:36:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:36:35 -==> Parameters: 181(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:36:35 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:36:35 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:36:35 -<==    Updates: 1
2020-03-09 16:36:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:36:35 -==> Parameters: 181(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:36:35 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:36:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:36:35 -<==    Updates: 1
2020-03-09 16:36:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:36:35 -==> Parameters: 
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:36:35 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:36:35 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:36:35 -<==    Updates: 1
2020-03-09 16:36:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:36:35 -==> Parameters: 181(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:36:35 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:36:35 -<==      Total: 1
2020-03-09 16:36:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:36:35 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:36:35 -<==    Updates: 1
2020-03-09 16:36:35 -耗时 : 187
2020-03-09 16:38:54 -此处进行解密+验签+身份验证
2020-03-09 16:38:54 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:38:54 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:38:54 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:38:54 -耗时 : 8
2020-03-09 16:38:57 -此处进行解密+验签+身份验证
2020-03-09 16:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:38:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:38:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:38:57 -==> Parameters: 181(String), 181(String)
2020-03-09 16:38:57 -<==      Total: 1
2020-03-09 16:38:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:38:57 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:38:57 -<==      Total: 1
2020-03-09 16:38:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:38:57 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:38:57 -<==    Updates: 1
2020-03-09 16:38:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:38:57 -==> Parameters: 181(String), 181(String)
2020-03-09 16:38:57 -<==      Total: 1
2020-03-09 16:38:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:38:57 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:38:57 -<==      Total: 1
2020-03-09 16:38:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:38:57 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:38:57 -<==    Updates: 1
2020-03-09 16:38:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:38:57 -==> Parameters: 
2020-03-09 16:38:58 -<==      Total: 1
2020-03-09 16:38:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:38:58 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:38:58 -<==      Total: 1
2020-03-09 16:38:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:38:58 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:38:58 -<==    Updates: 1
2020-03-09 16:38:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:38:58 -==> Parameters: 181(String), 181(String)
2020-03-09 16:38:58 -<==      Total: 1
2020-03-09 16:38:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:38:58 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:38:58 -<==      Total: 1
2020-03-09 16:38:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:38:58 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:38:58 -<==    Updates: 1
2020-03-09 16:38:58 -耗时 : 188
2020-03-09 16:39:20 -此处进行解密+验签+身份验证
2020-03-09 16:39:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:39:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:39:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 16:39:20 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:39:20 -==> Parameters: 181(String)
2020-03-09 16:39:20 -<==      Total: 404
2020-03-09 16:39:20 -耗时 : 40
2020-03-09 16:40:20 -此处进行解密+验签+身份验证
2020-03-09 16:40:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:40:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:40:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:40:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:40:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:40:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:40:20 -==> Parameters: 181(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:40:20 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:40:20 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:40:20 -<==    Updates: 1
2020-03-09 16:40:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:40:20 -==> Parameters: 181(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:40:20 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:40:20 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:40:20 -<==    Updates: 1
2020-03-09 16:40:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:40:20 -==> Parameters: 
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:40:20 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:40:20 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:40:20 -<==    Updates: 1
2020-03-09 16:40:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:40:20 -==> Parameters: 181(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:40:20 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:40:20 -<==      Total: 1
2020-03-09 16:40:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:40:20 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:40:20 -<==    Updates: 1
2020-03-09 16:40:20 -耗时 : 190
2020-03-09 16:42:13 -此处进行解密+验签+身份验证
2020-03-09 16:42:13 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:42:13 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:42:13 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:42:13 -耗时 : 9
2020-03-09 16:42:14 -此处进行解密+验签+身份验证
2020-03-09 16:42:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:42:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:42:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:42:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:42:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:42:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:42:14 -==> Parameters: 181(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:42:14 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:42:14 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:42:14 -<==    Updates: 1
2020-03-09 16:42:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:42:14 -==> Parameters: 181(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:42:14 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:42:14 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:42:14 -<==    Updates: 1
2020-03-09 16:42:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:42:14 -==> Parameters: 
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:42:14 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:42:14 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:42:14 -<==    Updates: 1
2020-03-09 16:42:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:42:14 -==> Parameters: 181(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:42:14 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:42:14 -<==      Total: 1
2020-03-09 16:42:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:42:14 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:42:14 -<==    Updates: 1
2020-03-09 16:42:14 -耗时 : 186
2020-03-09 16:42:22 -此处进行解密+验签+身份验证
2020-03-09 16:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:42:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 16:42:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:42:22 -==> Parameters: 181(String)
2020-03-09 16:42:22 -<==      Total: 404
2020-03-09 16:42:22 -耗时 : 37
2020-03-09 16:43:22 -此处进行解密+验签+身份验证
2020-03-09 16:43:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:43:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:43:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 16:43:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:43:22 -==> Parameters: 181(String)
2020-03-09 16:43:22 -<==      Total: 404
2020-03-09 16:43:22 -耗时 : 37
2020-03-09 16:43:33 -此处进行解密+验签+身份验证
2020-03-09 16:43:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:43:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:43:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:43:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:43:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:43:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:43:33 -==> Parameters: 181(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:43:33 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:43:33 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:43:33 -<==    Updates: 1
2020-03-09 16:43:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:43:33 -==> Parameters: 181(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:43:33 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:43:33 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:43:33 -<==    Updates: 1
2020-03-09 16:43:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:43:33 -==> Parameters: 
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:43:33 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:43:33 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:43:33 -<==    Updates: 1
2020-03-09 16:43:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:43:33 -==> Parameters: 181(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:43:33 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:43:33 -<==      Total: 1
2020-03-09 16:43:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:43:33 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:43:33 -<==    Updates: 1
2020-03-09 16:43:33 -耗时 : 194
2020-03-09 16:50:27 -此处进行解密+验签+身份验证
2020-03-09 16:50:27 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:50:27 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:50:27 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:50:27 -耗时 : 9
2020-03-09 16:54:12 -此处进行解密+验签+身份验证
2020-03-09 16:54:12 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:54:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:54:12 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:54:12 -耗时 : 9
2020-03-09 16:54:13 -此处进行解密+验签+身份验证
2020-03-09 16:54:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:54:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:54:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 16:54:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 16:54:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4f15a307 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2a89c604 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@626e0d27 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@197f6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4d1ba5b7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2946f3f6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3b53d4cc (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@37e15a77 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@27476721 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3900f97c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 16:54:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:54:13 -==> Parameters: 181(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:54:13 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:54:13 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 16:54:13 -<==    Updates: 1
2020-03-09 16:54:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 16:54:13 -==> Parameters: 181(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:54:13 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:54:13 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 16:54:13 -<==    Updates: 1
2020-03-09 16:54:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 16:54:13 -==> Parameters: 
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:54:13 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:54:13 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 16:54:13 -<==    Updates: 1
2020-03-09 16:54:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 16:54:13 -==> Parameters: 181(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 16:54:13 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 16:54:13 -<==      Total: 1
2020-03-09 16:54:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 16:54:13 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 16:54:13 -<==    Updates: 1
2020-03-09 16:54:13 -耗时 : 164
2020-03-09 16:57:06 -Starting LongEcologicalApplication on PC-201905161910 with PID 8488 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-09 16:57:06 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-09 16:57:06 -No active profile set, falling back to default profiles: default
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-09 16:57:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-09 16:57:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-09 16:57:07 -Finished Spring Data repository scanning in 83ms. Found 0 repository interfaces.
2020-03-09 16:57:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-09 16:57:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-09 16:57:07 -Finished Spring Data repository scanning in 54ms. Found 0 repository interfaces.
2020-03-09 16:57:08 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$75c4738b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-09 16:57:08 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7048582b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-09 16:57:08 -Tomcat initialized with port(s): 8080 (http)
2020-03-09 16:57:08 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-09 16:57:08 -Starting service [Tomcat]
2020-03-09 16:57:08 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-09 16:57:08 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-09 16:57:09 -Initializing Spring embedded WebApplicationContext
2020-03-09 16:57:09 -Root WebApplicationContext: initialization completed in 2594 ms
2020-03-09 16:57:09 -Filter xssFilter was not registered (disabled)
2020-03-09 16:57:09 -HikariPool-1 - Starting...
2020-03-09 16:57:09 -HikariPool-1 - Start completed.
2020-03-09 16:57:09 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-09 16:57:10 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-09 16:57:10 -HHH000206: hibernate.properties not found
2020-03-09 16:57:10 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-09 16:57:10 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-09 16:57:10 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-09 16:57:11 -Using default implementation for ThreadExecutor
2020-03-09 16:57:11 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-09 16:57:11 -Quartz Scheduler v.2.3.0 created.
2020-03-09 16:57:11 -RAMJobStore initialized.
2020-03-09 16:57:11 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-09 16:57:11 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-09 16:57:11 -Quartz scheduler version: 2.3.0
2020-03-09 16:57:11 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2bc8caa7
2020-03-09 16:57:11 -STAET TaskExecutorConfig
2020-03-09 16:57:11 -Initializing ExecutorService
2020-03-09 16:57:11 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-09 16:57:12 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-09 16:57:12 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-09 16:57:13 -Initializing ExecutorService 'taskScheduler'
2020-03-09 16:57:13 -Starting Quartz Scheduler now
2020-03-09 16:57:13 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-09 16:57:13 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-09 16:57:13 -Using a shared selector for servlet write/read
2020-03-09 16:57:13 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-09 16:57:13 -Started LongEcologicalApplication in 7.564 seconds (JVM running for 9.005)
2020-03-09 16:57:22 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-09 16:57:22 -Initializing Servlet 'dispatcherServlet'
2020-03-09 16:57:22 -Completed initialization in 13 ms
2020-03-09 16:57:22 -此处进行解密+验签+身份验证
2020-03-09 16:57:22 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 16:57:22 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 16:57:22 -Starting without optional epoll library
2020-03-09 16:57:22 -Starting without optional kqueue library
2020-03-09 16:57:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 16:57:23 -耗时 : 890
2020-03-09 16:58:16 -此处进行解密+验签+身份验证
2020-03-09 16:58:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 16:58:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 16:58:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 16:58:20 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 16:58:20 -==> Parameters: 181(String)
2020-03-09 16:58:20 -<==      Total: 404
2020-03-09 16:58:20 -耗时 : 3805
2020-03-09 17:00:22 -此处进行解密+验签+身份验证
2020-03-09 17:00:22 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 17:00:22 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 17:00:22 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 17:00:22 -耗时 : 16
2020-03-09 17:00:38 -此处进行解密+验签+身份验证
2020-03-09 17:00:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:00:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:00:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-09 17:00:43 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-09 17:00:43 -==> Parameters: 181(String)
2020-03-09 17:00:43 -<==      Total: 404
2020-03-09 17:00:43 -耗时 : 4465
2020-03-09 17:17:14 -此处进行解密+验签+身份验证
2020-03-09 17:17:14 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 17:17:14 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 17:17:14 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$51c193d2.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$bb09c8f4.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-09 17:17:14 -耗时 : 13
2020-03-09 17:17:14 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-09 17:17:14 -Reconnected to 120.25.164.176:10379
2020-03-09 17:17:16 -此处进行解密+验签+身份验证
2020-03-09 17:17:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:17:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:17:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 17:17:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:17:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:17:16 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5a878b4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 17:17:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 17:17:16 -==> Parameters: 181(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:17:16 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:17:16 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 17:17:16 -<==    Updates: 1
2020-03-09 17:17:16 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 17:17:16 -==> Parameters: 181(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:17:16 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:17:16 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 17:17:16 -<==    Updates: 1
2020-03-09 17:17:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 17:17:16 -==> Parameters: 
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:17:16 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:17:16 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 17:17:16 -<==    Updates: 1
2020-03-09 17:17:16 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 17:17:16 -==> Parameters: 181(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:17:16 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 17:17:16 -<==      Total: 1
2020-03-09 17:17:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:17:16 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 17:17:16 -<==    Updates: 1
2020-03-09 17:17:16 -耗时 : 132
2020-03-09 17:17:18 -此处进行解密+验签+身份验证
2020-03-09 17:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:17:18 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-09 17:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:17:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:17:18 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_01_26_20200309
2020-03-09 17:17:18 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-09 17:17:18 -==> Parameters: 26(String), 20200309(String)
2020-03-09 17:17:18 -<==      Total: 1
2020-03-09 17:17:18 -after List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) proceed,save result to cache,redisKey:zfpay_sys_activity_list_01_26_20200309,save content:[{end_date=20200329, activity_name=无效活动, cover_url=06f04ca0-107e-4a2b-9439-10690d037070.png, activity_id=13, start_date=20200307}]
2020-03-09 17:17:18 -耗时 : 45
2020-03-09 17:17:22 -此处进行解密+验签+身份验证
2020-03-09 17:17:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:17:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:17:22 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:17:22 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:17:22 -==> Parameters: 181(String)
2020-03-09 17:17:22 -<==      Total: 0
2020-03-09 17:17:22 -耗时 : 14
2020-03-09 17:17:48 -此处进行解密+验签+身份验证
2020-03-09 17:17:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:17:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:17:48 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-09 17:17:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:17:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:17:48 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_01_26_20200309
2020-03-09 17:17:48 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_01_26_20200309 , return
2020-03-09 17:17:48 -耗时 : 16
2020-03-09 17:19:29 -此处进行解密+验签+身份验证
2020-03-09 17:19:29 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 17:19:29 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 17:19:29 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 17:19:29 -耗时 : 7
2020-03-09 17:21:26 -此处进行解密+验签+身份验证
2020-03-09 17:21:26 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 17:21:26 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 17:21:26 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-09 17:21:26 -耗时 : 8
2020-03-09 17:21:27 -此处进行解密+验签+身份验证
2020-03-09 17:21:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:27 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-09 17:21:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:27 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_02_26_20200309
2020-03-09 17:21:27 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-09 17:21:27 -==> Parameters: 26(String), 20200309(String)
2020-03-09 17:21:27 -<==      Total: 0
2020-03-09 17:21:27 -after List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) proceed,save result to cache,redisKey:zfpay_sys_activity_list_02_26_20200309,save content:[]
2020-03-09 17:21:27 -耗时 : 27
2020-03-09 17:21:28 -此处进行解密+验签+身份验证
2020-03-09 17:21:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:28 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-09 17:21:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:28 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_02_26_20200309
2020-03-09 17:21:28 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_02_26_20200309 , return
2020-03-09 17:21:28 -耗时 : 14
2020-03-09 17:21:30 -此处进行解密+验签+身份验证
2020-03-09 17:21:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:30 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-09 17:21:30 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:21:30 -==> Parameters: 181(String)
2020-03-09 17:21:30 -<==      Total: 3
2020-03-09 17:21:30 -耗时 : 12
2020-03-09 17:21:37 -此处进行解密+验签+身份验证
2020-03-09 17:21:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:37 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:21:37 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:21:37 -==> Parameters: 181(String)
2020-03-09 17:21:37 -<==      Total: 0
2020-03-09 17:21:37 -耗时 : 12
2020-03-09 17:21:38 -此处进行解密+验签+身份验证
2020-03-09 17:21:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:38 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:21:38 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:21:38 -==> Parameters: 181(String)
2020-03-09 17:21:38 -<==      Total: 0
2020-03-09 17:21:38 -耗时 : 13
2020-03-09 17:21:39 -此处进行解密+验签+身份验证
2020-03-09 17:21:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:39 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-09 17:21:39 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:21:39 -==> Parameters: 181(String)
2020-03-09 17:21:39 -<==      Total: 0
2020-03-09 17:21:39 -耗时 : 17
2020-03-09 17:21:40 -此处进行解密+验签+身份验证
2020-03-09 17:21:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:40 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:21:40 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:21:40 -==> Parameters: 181(String)
2020-03-09 17:21:40 -<==      Total: 0
2020-03-09 17:21:40 -耗时 : 15
2020-03-09 17:21:43 -此处进行解密+验签+身份验证
2020-03-09 17:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:43 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-09 17:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:43 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_02_26_20200309
2020-03-09 17:21:43 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_02_26_20200309 , return
2020-03-09 17:21:43 -耗时 : 15
2020-03-09 17:21:44 -此处进行解密+验签+身份验证
2020-03-09 17:21:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-09 17:21:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 17:21:44 -==> Parameters: 181(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:21:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:21:44 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-09 17:21:44 -<==    Updates: 1
2020-03-09 17:21:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-09 17:21:44 -==> Parameters: 181(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:21:44 -==> Parameters: recallFlag(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:21:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-09 17:21:44 -<==    Updates: 1
2020-03-09 17:21:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-09 17:21:44 -==> Parameters: 
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:21:44 -==> Parameters: collegeFlag(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:21:44 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-09 17:21:44 -<==    Updates: 1
2020-03-09 17:21:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-09 17:21:44 -==> Parameters: 181(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-09 17:21:44 -==> Parameters: cardFlag(String), 181(String)
2020-03-09 17:21:44 -<==      Total: 1
2020-03-09 17:21:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-09 17:21:44 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-09 17:21:44 -<==    Updates: 1
2020-03-09 17:21:44 -耗时 : 114
2020-03-09 17:21:46 -此处进行解密+验签+身份验证
2020-03-09 17:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:46 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-09 17:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:46 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_01_26_20200309
2020-03-09 17:21:46 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_01_26_20200309 , return
2020-03-09 17:21:46 -耗时 : 15
2020-03-09 17:21:49 -此处进行解密+验签+身份验证
2020-03-09 17:21:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:49 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:21:49 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:21:49 -==> Parameters: 181(String)
2020-03-09 17:21:49 -<==      Total: 0
2020-03-09 17:21:49 -耗时 : 12
2020-03-09 17:21:51 -此处进行解密+验签+身份验证
2020-03-09 17:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:51 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-09 17:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:51 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_02_26_20200309
2020-03-09 17:21:51 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getMposOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_02_26_20200309 , return
2020-03-09 17:21:51 -耗时 : 15
2020-03-09 17:21:53 -此处进行解密+验签+身份验证
2020-03-09 17:21:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:21:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:21:53 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-09 17:21:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:21:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:21:53 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_01_26_20200309
2020-03-09 17:21:53 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_01_26_20200309 , return
2020-03-09 17:21:53 -耗时 : 15
2020-03-09 17:40:10 -此处进行解密+验签+身份验证
2020-03-09 17:40:10 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 17:40:10 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 17:40:10 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$51c193d2.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$bb09c8f4.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-09 17:40:10 -耗时 : 9
2020-03-09 17:40:10 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-09 17:40:10 -Reconnected to 120.25.164.176:10379
2020-03-09 17:40:11 -此处进行解密+验签+身份验证
2020-03-09 17:40:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:40:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:40:11 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-09 17:40:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-09 17:40:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-09 17:40:11 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,cacheKey:zfpay_sys_activity_list_01_26_20200309
2020-03-09 17:40:11 -List com.example.longecological.service.activity.impl.OnlineActivityCacheServiceImpl.getTraditionalPosOnlineActivityList(Map) enable cache service,has cacheKey:zfpay_sys_activity_list_01_26_20200309 , return
2020-03-09 17:40:11 -耗时 : 26
2020-03-09 17:40:45 -此处进行解密+验签+身份验证
2020-03-09 17:40:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:40:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:40:45 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-09 17:40:45 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@143b7867 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 17:40:45 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:40:45 -==> Parameters: 181(String)
2020-03-09 17:40:45 -<==      Total: 3
2020-03-09 17:40:45 -耗时 : 28
2020-03-09 17:40:47 -此处进行解密+验签+身份验证
2020-03-09 17:40:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:40:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:40:47 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:40:47 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:40:47 -==> Parameters: 181(String)
2020-03-09 17:40:47 -<==      Total: 0
2020-03-09 17:40:47 -耗时 : 19
2020-03-09 17:41:09 -此处进行解密+验签+身份验证
2020-03-09 17:41:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:41:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:41:09 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosRewardRecordList
2020-03-09 17:41:09 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:41:09 -==> Parameters: 181(String)
2020-03-09 17:41:09 -<==      Total: 4
2020-03-09 17:41:09 -耗时 : 20
2020-03-09 17:41:31 -此处进行解密+验签+身份验证
2020-03-09 17:41:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:41:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:41:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:41:31 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:41:31 -==> Parameters: 181(String)
2020-03-09 17:41:31 -<==      Total: 0
2020-03-09 17:41:31 -耗时 : 20
2020-03-09 17:41:35 -此处进行解密+验签+身份验证
2020-03-09 17:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:41:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:41:35 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:41:35 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2dd5df95 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 17:41:35 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:41:35 -==> Parameters: 181(String)
2020-03-09 17:41:35 -<==      Total: 0
2020-03-09 17:41:35 -耗时 : 20
2020-03-09 17:41:40 -此处进行解密+验签+身份验证
2020-03-09 17:41:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:41:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:41:40 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-09 17:41:40 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:41:40 -==> Parameters: 181(String)
2020-03-09 17:41:40 -<==      Total: 3
2020-03-09 17:41:40 -耗时 : 13
2020-03-09 17:41:51 -此处进行解密+验签+身份验证
2020-03-09 17:41:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-09 17:41:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-09 17:41:51 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-09 17:41:51 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6e099bc (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 17:41:51 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3e84d07b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-09 17:41:51 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-09 17:41:51 -==> Parameters: 181(String)
2020-03-09 17:41:51 -<==      Total: 0
2020-03-09 17:41:51 -耗时 : 31
2020-03-09 19:11:03 -此处进行解密+验签+身份验证
2020-03-09 19:11:03 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-09 19:11:03 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-09 19:11:03 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor86.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$51c193d2.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor89.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$bb09c8f4.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-09 19:11:03 -耗时 : 5
2020-03-09 19:11:03 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-09 19:11:03 -Reconnected to 120.25.164.176:10379
2020-03-09 19:21:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-09 19:21:24 -Shutting down ExecutorService 'taskScheduler'
2020-03-09 19:21:24 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-09 19:21:24 -Shutting down Quartz Scheduler
2020-03-09 19:21:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-09 19:21:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-09 19:21:24 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-09 19:21:24 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-09 19:21:24 -HikariPool-1 - Shutdown initiated...
2020-03-09 19:21:24 -HikariPool-1 - Shutdown completed.
