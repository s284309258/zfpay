2020-03-14 09:41:54 -Starting LongEcologicalApplication on PC-201905161910 with PID 7172 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 09:41:54 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 09:41:54 -No active profile set, falling back to default profiles: default
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:41:55 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 09:41:55 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 09:41:55 -Finished Spring Data repository scanning in 86ms. Found 0 repository interfaces.
2020-03-14 09:41:55 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 09:41:55 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 09:41:55 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-14 09:41:56 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$9830d26d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 09:41:56 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$92b4b70d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 09:41:57 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 09:41:57 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 09:41:57 -Starting service [Tomcat]
2020-03-14 09:41:57 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 09:41:57 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 09:41:57 -Initializing Spring embedded WebApplicationContext
2020-03-14 09:41:57 -Root WebApplicationContext: initialization completed in 2631 ms
2020-03-14 09:41:57 -Filter xssFilter was not registered (disabled)
2020-03-14 09:41:57 -HikariPool-1 - Starting...
2020-03-14 09:41:57 -HikariPool-1 - Start completed.
2020-03-14 09:41:58 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 09:41:58 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 09:41:58 -HHH000206: hibernate.properties not found
2020-03-14 09:41:58 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 09:41:58 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 09:41:58 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 09:41:59 -Using default implementation for ThreadExecutor
2020-03-14 09:41:59 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 09:41:59 -Quartz Scheduler v.2.3.0 created.
2020-03-14 09:41:59 -RAMJobStore initialized.
2020-03-14 09:41:59 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 09:41:59 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 09:41:59 -Quartz scheduler version: 2.3.0
2020-03-14 09:41:59 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6d31f106
2020-03-14 09:41:59 -STAET TaskExecutorConfig
2020-03-14 09:41:59 -Initializing ExecutorService
2020-03-14 09:41:59 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 09:42:00 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 09:42:00 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 09:42:00 -Initializing ExecutorService 'taskScheduler'
2020-03-14 09:42:00 -Starting Quartz Scheduler now
2020-03-14 09:42:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 09:42:00 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 09:42:00 -Using a shared selector for servlet write/read
2020-03-14 09:42:00 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 09:42:00 -Started LongEcologicalApplication in 7.864 seconds (JVM running for 9.742)
2020-03-14 09:43:30 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 09:43:30 -Initializing Servlet 'dispatcherServlet'
2020-03-14 09:43:30 -Completed initialization in 15 ms
2020-03-14 09:43:30 -此处进行解密+验签+身份验证
2020-03-14 09:43:30 -此处进行解密+验签+身份验证
2020-03-14 09:43:30 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 09:43:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 09:43:30 -Starting without optional epoll library
2020-03-14 09:43:30 -Starting without optional kqueue library
2020-03-14 09:43:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 09:43:31 -耗时 : 726
2020-03-14 09:43:31 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:43:31 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:43:31 -==> Parameters: 04(String)
2020-03-14 09:43:31 -<==      Total: 1
2020-03-14 09:43:31 -耗时 : 54
2020-03-14 09:43:31 -此处进行解密+验签+身份验证
2020-03-14 09:43:31 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 09:43:31 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 09:43:31 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 09:43:31 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 09:43:31 -==> Parameters: 571(String)
2020-03-14 09:43:31 -<==      Total: 1
2020-03-14 09:43:31 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 09:43:31 -==> Parameters: 25(String)
2020-03-14 09:43:31 -<==      Total: 1
2020-03-14 09:43:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 09:43:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 09:43:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 09:43:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 09:43:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 09:43:31 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 09:43:31 -耗时 : 98
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:43:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:43:35 -==> Parameters: 571(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -耗时 : 17
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -此处进行解密+验签+身份验证
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:43:35 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:43:35 -==> Parameters: 01(String)
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:43:35 -<==      Total: 6
2020-03-14 09:43:35 -耗时 : 11
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 09:43:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 09:43:35 -==> Parameters: 
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:43:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 09:43:35 -==> Parameters: 571(String)
2020-03-14 09:43:35 -<==      Total: 3
2020-03-14 09:43:35 -耗时 : 15
2020-03-14 09:43:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:43:35 -==> Parameters: 571(String)
2020-03-14 09:43:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -耗时 : 12
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -耗时 : 29
2020-03-14 09:43:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:43:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:43:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:43:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:43:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:43:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:43:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:43:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:43:35 -==> Parameters: 
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:43:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:43:35 -==> Parameters: 
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -耗时 : 152
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:43:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 1
2020-03-14 09:43:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:43:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:43:35 -<==      Total: 2
2020-03-14 09:43:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:43:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:43:35 -<==    Updates: 2
2020-03-14 09:43:35 -耗时 : 224
2020-03-14 09:44:18 -此处进行解密+验签+身份验证
2020-03-14 09:44:18 -此处进行解密+验签+身份验证
2020-03-14 09:44:18 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 09:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:18 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 09:44:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:18 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 09:44:18 -耗时 : 26
2020-03-14 09:44:18 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:44:18 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:44:18 -==> Parameters: 04(String)
2020-03-14 09:44:18 -<==      Total: 1
2020-03-14 09:44:18 -耗时 : 12
2020-03-14 09:44:18 -此处进行解密+验签+身份验证
2020-03-14 09:44:18 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 09:44:18 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 09:44:18 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 09:44:18 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 09:44:18 -==> Parameters: 571(String)
2020-03-14 09:44:18 -<==      Total: 1
2020-03-14 09:44:18 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 09:44:18 -==> Parameters: 25(String)
2020-03-14 09:44:18 -<==      Total: 1
2020-03-14 09:44:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 09:44:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 09:44:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 09:44:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 09:44:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 09:44:18 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 09:44:18 -耗时 : 85
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:44:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:44:23 -==> Parameters: 571(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -耗时 : 21
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -此处进行解密+验签+身份验证
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 09:44:23 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 09:44:23 -==> Parameters: 571(String)
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:44:23 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:44:23 -==> Parameters: 
2020-03-14 09:44:23 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:44:23 -==> Parameters: 01(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -耗时 : 12
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:44:23 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:44:23 -==> Parameters: 571(String)
2020-03-14 09:44:23 -<==      Total: 6
2020-03-14 09:44:23 -耗时 : 11
2020-03-14 09:44:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:44:23 -<==      Total: 3
2020-03-14 09:44:23 -耗时 : 17
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -耗时 : 9
2020-03-14 09:44:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:44:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:44:23 -==> Parameters: 571(String), 571(String)
2020-03-14 09:44:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:44:23 -==> Parameters: 571(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:44:23 -==> Parameters: 571(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:44:23 -==> Parameters: 571(String), 571(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:44:23 -==> Parameters: 
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:44:23 -==> Parameters: 571(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:44:23 -==> Parameters: 
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -耗时 : 145
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:44:23 -==> Parameters: 571(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 1
2020-03-14 09:44:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:44:23 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:44:23 -<==      Total: 2
2020-03-14 09:44:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:44:23 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:44:23 -<==    Updates: 2
2020-03-14 09:44:23 -耗时 : 205
2020-03-14 09:48:07 -此处进行解密+验签+身份验证
2020-03-14 09:48:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:07 -此处进行解密+验签+身份验证
2020-03-14 09:48:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 09:48:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 09:48:07 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 09:48:07 -==> Parameters: 571(String)
2020-03-14 09:48:07 -<==      Total: 1
2020-03-14 09:48:07 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 09:48:07 -==> Parameters: 571(String)
2020-03-14 09:48:07 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 09:48:07 -==> Parameters: 571(String)
2020-03-14 09:48:07 -<==      Total: 1
2020-03-14 09:48:07 -<==      Total: 10
2020-03-14 09:48:07 -耗时 : 43
2020-03-14 09:48:07 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:48:07 -==> Parameters: 571(String)
2020-03-14 09:48:07 -<==      Total: 1
2020-03-14 09:48:07 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 09:48:07 -==> Parameters: 571(String)
2020-03-14 09:48:07 -<==      Total: 0
2020-03-14 09:48:07 -耗时 : 70
2020-03-14 09:48:09 -此处进行解密+验签+身份验证
2020-03-14 09:48:09 -此处进行解密+验签+身份验证
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:09 -此处进行解密+验签+身份验证
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 09:48:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:09 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 09:48:09 -==> Parameters: 
2020-03-14 09:48:09 -此处进行解密+验签+身份验证
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:09 -此处进行解密+验签+身份验证
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:09 -<==      Total: 1
2020-03-14 09:48:09 -耗时 : 18
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:09 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 09:48:09 -==> Parameters: 1968(String)
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:09 -<==      Total: 1
2020-03-14 09:48:09 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:48:09 -==> Parameters: 1968(String)
2020-03-14 09:48:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:09 -==> Parameters: 1968(String), 1968(String)
2020-03-14 09:48:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:09 -<==      Total: 1
2020-03-14 09:48:09 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 09:48:09 -==> Parameters: 
2020-03-14 09:48:09 -<==      Total: 0
2020-03-14 09:48:09 -耗时 : 37
2020-03-14 09:48:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:09 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 09:48:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:09 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 09:48:09 -<==      Total: 1
2020-03-14 09:48:09 -耗时 : 80
2020-03-14 09:48:09 -<==      Total: 0
2020-03-14 09:48:09 -耗时 : 40
2020-03-14 09:48:09 -<==      Total: 0
2020-03-14 09:48:09 -耗时 : 38
2020-03-14 09:48:50 -此处进行解密+验签+身份验证
2020-03-14 09:48:50 -此处进行解密+验签+身份验证
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:50 -此处进行解密+验签+身份验证
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:50 -此处进行解密+验签+身份验证
2020-03-14 09:48:50 -此处进行解密+验签+身份验证
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:50 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 09:48:50 -==> Parameters: 
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:50 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 09:48:50 -==> Parameters: 1968(String)
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:50 -<==      Total: 1
2020-03-14 09:48:50 -耗时 : 24
2020-03-14 09:48:50 -<==      Total: 0
2020-03-14 09:48:50 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:48:50 -==> Parameters: 1968(String)
2020-03-14 09:48:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:50 -==> Parameters: 1968(String), 1968(String)
2020-03-14 09:48:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:50 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 09:48:50 -<==      Total: 1
2020-03-14 09:48:50 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$7815887a.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 09:48:50 -耗时 : 41
2020-03-14 09:48:50 -<==      Total: 0
2020-03-14 09:48:50 -耗时 : 40
2020-03-14 09:48:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:50 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 09:48:50 -<==      Total: 0
2020-03-14 09:48:50 -耗时 : 37
2020-03-14 09:48:50 -<==      Total: 0
2020-03-14 09:48:50 -耗时 : 40
2020-03-14 09:48:59 -此处进行解密+验签+身份验证
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:59 -此处进行解密+验签+身份验证
2020-03-14 09:48:59 -此处进行解密+验签+身份验证
2020-03-14 09:48:59 -此处进行解密+验签+身份验证
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:59 -此处进行解密+验签+身份验证
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:48:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:48:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:59 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 09:48:59 -==> Parameters: 
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:48:59 -<==      Total: 1
2020-03-14 09:48:59 -耗时 : 14
2020-03-14 09:48:59 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:59 -==> Parameters: 1968(String), 1968(String)
2020-03-14 09:48:59 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:59 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 09:48:59 -<==      Total: 0
2020-03-14 09:48:59 -耗时 : 34
2020-03-14 09:48:59 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 09:48:59 -==> Parameters: 1968(String)
2020-03-14 09:48:59 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 09:48:59 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 09:48:59 -<==      Total: 0
2020-03-14 09:48:59 -耗时 : 34
2020-03-14 09:48:59 -<==      Total: 1
2020-03-14 09:48:59 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:48:59 -==> Parameters: 1968(String)
2020-03-14 09:48:59 -<==      Total: 0
2020-03-14 09:48:59 -耗时 : 51
2020-03-14 09:48:59 -<==      Total: 1
2020-03-14 09:48:59 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 09:48:59 -==> Parameters: 
2020-03-14 09:48:59 -<==      Total: 1
2020-03-14 09:48:59 -耗时 : 58
2020-03-14 09:49:04 -此处进行解密+验签+身份验证
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:49:04 -此处进行解密+验签+身份验证
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:49:04 -此处进行解密+验签+身份验证
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:49:04 -此处进行解密+验签+身份验证
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:49:04 -此处进行解密+验签+身份验证
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 09:49:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 09:49:04 -==> Parameters: 
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:49:04 -<==      Total: 1
2020-03-14 09:49:04 -耗时 : 13
2020-03-14 09:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:49:04 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 09:49:04 -==> Parameters: 1968(String)
2020-03-14 09:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:49:04 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 09:49:04 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 09:49:04 -<==      Total: 0
2020-03-14 09:49:04 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:49:04 -==> Parameters: 1968(String)
2020-03-14 09:49:04 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 09:49:04 -==> Parameters: 1968(String), 1968(String)
2020-03-14 09:49:04 -<==      Total: 0
2020-03-14 09:49:04 -耗时 : 33
2020-03-14 09:49:04 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 09:49:04 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 09:49:04 -<==      Total: 0
2020-03-14 09:49:04 -耗时 : 40
2020-03-14 09:49:04 -<==      Total: 1
2020-03-14 09:49:04 -<==      Total: 0
2020-03-14 09:49:04 -耗时 : 36
2020-03-14 09:49:04 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$7815887a.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 09:49:04 -耗时 : 63
2020-03-14 09:51:27 -Starting LongEcologicalApplication on PC-201905161910 with PID 19468 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 09:51:27 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 09:51:27 -No active profile set, falling back to default profiles: default
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 09:51:28 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 09:51:28 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 09:51:28 -Finished Spring Data repository scanning in 84ms. Found 0 repository interfaces.
2020-03-14 09:51:28 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 09:51:28 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 09:51:28 -Finished Spring Data repository scanning in 52ms. Found 0 repository interfaces.
2020-03-14 09:51:28 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$36e81ed9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 09:51:29 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$316c0379] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 09:51:29 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 09:51:29 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 09:51:29 -Starting service [Tomcat]
2020-03-14 09:51:29 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 09:51:29 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 09:51:30 -Initializing Spring embedded WebApplicationContext
2020-03-14 09:51:30 -Root WebApplicationContext: initialization completed in 2702 ms
2020-03-14 09:51:30 -Filter xssFilter was not registered (disabled)
2020-03-14 09:51:30 -HikariPool-1 - Starting...
2020-03-14 09:51:31 -HikariPool-1 - Start completed.
2020-03-14 09:51:31 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 09:51:31 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 09:51:31 -HHH000206: hibernate.properties not found
2020-03-14 09:51:31 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 09:51:31 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 09:51:32 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 09:51:32 -Using default implementation for ThreadExecutor
2020-03-14 09:51:32 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 09:51:32 -Quartz Scheduler v.2.3.0 created.
2020-03-14 09:51:32 -RAMJobStore initialized.
2020-03-14 09:51:32 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 09:51:32 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 09:51:32 -Quartz scheduler version: 2.3.0
2020-03-14 09:51:32 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1eb7ec59
2020-03-14 09:51:33 -STAET TaskExecutorConfig
2020-03-14 09:51:33 -Initializing ExecutorService
2020-03-14 09:51:33 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 09:51:34 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 09:51:34 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 09:51:34 -Initializing ExecutorService 'taskScheduler'
2020-03-14 09:51:34 -Starting Quartz Scheduler now
2020-03-14 09:51:34 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 09:51:34 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 09:51:35 -Using a shared selector for servlet write/read
2020-03-14 09:51:35 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 09:51:35 -Started LongEcologicalApplication in 8.705 seconds (JVM running for 10.871)
2020-03-14 09:52:21 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 09:52:21 -Initializing Servlet 'dispatcherServlet'
2020-03-14 09:52:21 -Completed initialization in 13 ms
2020-03-14 09:52:21 -此处进行解密+验签+身份验证
2020-03-14 09:52:21 -此处进行解密+验签+身份验证
2020-03-14 09:52:21 -此处进行解密+验签+身份验证
2020-03-14 09:52:21 -此处进行解密+验签+身份验证
2020-03-14 09:52:21 -此处进行解密+验签+身份验证
2020-03-14 09:52:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:21 -Starting without optional epoll library
2020-03-14 09:52:21 -Starting without optional kqueue library
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-14 09:52:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-14 09:52:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-14 09:52:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-14 09:52:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:22 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-14 09:52:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1968 and cre_month=202003 
2020-03-14 09:52:22 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 09:52:22 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 09:52:22 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 09:52:22 -==> Parameters: 
2020-03-14 09:52:22 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 09:52:22 -==> Parameters: 1968(String), 1968(String)
2020-03-14 09:52:22 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 09:52:22 -==> Parameters: 1968(String)
2020-03-14 09:52:22 -<==      Total: 1
2020-03-14 09:52:22 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 09:52:22 -==> Parameters: 1968(String)
2020-03-14 09:52:22 -<==      Total: 0
2020-03-14 09:52:22 -耗时 : 94
2020-03-14 09:52:22 -<==      Total: 1
2020-03-14 09:52:22 -<==      Total: 1
2020-03-14 09:52:22 -耗时 : 97
2020-03-14 09:52:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1968 
2020-03-14 09:52:22 -==> Parameters: 
2020-03-14 09:52:22 -<==      Total: 0
2020-03-14 09:52:22 -耗时 : 102
2020-03-14 09:52:22 -<==      Total: 0
2020-03-14 09:52:22 -耗时 : 107
2020-03-14 09:52:22 -<==      Total: 1
2020-03-14 09:52:22 -耗时 : 117
2020-03-14 09:52:26 -此处进行解密+验签+身份验证
2020-03-14 09:52:26 -此处进行解密+验签+身份验证
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:26 -此处进行解密+验签+身份验证
2020-03-14 09:52:26 -此处进行解密+验签+身份验证
2020-03-14 09:52:26 -此处进行解密+验签+身份验证
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:52:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 09:52:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 09:52:26 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 09:52:26 -==> Parameters: 
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:52:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 09:52:26 -<==      Total: 1
2020-03-14 09:52:26 -耗时 : 14
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 09:52:26 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 09:52:26 -==> Parameters: 1968(String)
2020-03-14 09:52:26 -<==      Total: 0
2020-03-14 09:52:26 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:52:26 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 09:52:26 -==> Parameters: 1968(String)
2020-03-14 09:52:26 -==> Parameters: 1968(String), 1968(String)
2020-03-14 09:52:26 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 09:52:26 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 09:52:26 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 09:52:26 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 09:52:26 -<==      Total: 0
2020-03-14 09:52:26 -<==      Total: 1
2020-03-14 09:52:26 -耗时 : 37
2020-03-14 09:57:35 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=5m34s708ms280µs807ns).
2020-03-14 09:57:35 -<==      Total: 0
2020-03-14 09:57:35 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$253e526c.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 09:57:35 -耗时 : 309563
2020-03-14 09:57:35 -耗时 : 309568
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -<==      Total: 0
2020-03-14 09:57:35 -耗时 : 309568
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -此处进行解密+验签+身份验证
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:57:35 -==> Parameters: 01(String)
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 09:57:35 -<==      Total: 6
2020-03-14 09:57:35 -耗时 : 15
2020-03-14 09:57:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 09:57:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:57:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -耗时 : 22
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 09:57:35 -==> Parameters: 
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:57:35 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:57:35 -==> Parameters: 01(String)
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 09:57:35 -<==      Total: 6
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:57:35 -耗时 : 17
2020-03-14 09:57:35 -耗时 : 11
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -耗时 : 19
2020-03-14 09:57:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 09:57:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 09:57:35 -<==      Total: 3
2020-03-14 09:57:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 09:57:35 -耗时 : 22
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:57:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 09:57:35 -耗时 : 26
2020-03-14 09:57:35 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 09:57:35 -==> Parameters: 01(String)
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 09:57:35 -==> Parameters: 
2020-03-14 09:57:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 09:57:35 -<==      Total: 2
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -耗时 : 32
2020-03-14 09:57:35 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -<==      Total: 2
2020-03-14 09:57:35 -耗时 : 32
2020-03-14 09:57:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:57:35 -==> Parameters: 
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:57:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 09:57:35 -<==      Total: 2
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -耗时 : 26
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -耗时 : 30
2020-03-14 09:57:35 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -<==      Total: 6
2020-03-14 09:57:35 -<==      Total: 3
2020-03-14 09:57:35 -耗时 : 40
2020-03-14 09:57:35 -耗时 : 29
2020-03-14 09:57:35 -<==      Total: 3
2020-03-14 09:57:35 -耗时 : 31
2020-03-14 09:57:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 09:57:35 -==> Parameters: 571(String)
2020-03-14 09:57:35 -<==      Total: 10
2020-03-14 09:57:35 -耗时 : 39
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -耗时 : 38
2020-03-14 09:57:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:57:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:35 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:35 -<==      Total: 0
2020-03-14 09:57:35 -耗时 : 39
2020-03-14 09:57:35 -<==      Total: 2
2020-03-14 09:57:35 -<==      Total: 2
2020-03-14 09:57:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:57:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:35 -<==      Total: 1
2020-03-14 09:57:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:57:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:57:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:57:36 -==> Parameters: 
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:57:36 -==> Parameters: 
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:57:36 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:57:36 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:57:36 -==> Parameters: 
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:57:36 -==> Parameters: 
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:57:36 -==> Parameters: 
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 09:57:36 -==> Parameters: 
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -耗时 : 160
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -耗时 : 166
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 09:57:36 -==> Parameters: 571(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 1
2020-03-14 09:57:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 09:57:36 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:57:36 -<==      Total: 2
2020-03-14 09:57:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 09:57:36 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -耗时 : 225
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -耗时 : 227
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -耗时 : 242
2020-03-14 09:57:36 -<==    Updates: 2
2020-03-14 09:57:36 -耗时 : 238
2020-03-14 10:21:59 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:21:59 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 10:21:59 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 10:21:59 -Shutting down Quartz Scheduler
2020-03-14 10:21:59 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 10:21:59 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:21:59 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 10:21:59 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:21:59 -HikariPool-1 - Shutdown initiated...
2020-03-14 10:21:59 -HikariPool-1 - Shutdown completed.
2020-03-14 10:22:35 -Starting LongEcologicalApplication on PC-201905161910 with PID 8532 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 10:22:35 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 10:22:35 -No active profile set, falling back to default profiles: default
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:36 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:22:37 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 10:22:37 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 10:22:37 -Finished Spring Data repository scanning in 71ms. Found 0 repository interfaces.
2020-03-14 10:22:37 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 10:22:37 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 10:22:37 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-14 10:22:37 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$3f1cc8c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 10:22:37 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$39a0ad68] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 10:22:38 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 10:22:38 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 10:22:38 -Starting service [Tomcat]
2020-03-14 10:22:38 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 10:22:38 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 10:22:38 -Initializing Spring embedded WebApplicationContext
2020-03-14 10:22:38 -Root WebApplicationContext: initialization completed in 3446 ms
2020-03-14 10:22:38 -Filter xssFilter was not registered (disabled)
2020-03-14 10:22:39 -HikariPool-1 - Starting...
2020-03-14 10:22:39 -HikariPool-1 - Start completed.
2020-03-14 10:22:39 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 10:22:39 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 10:22:39 -HHH000206: hibernate.properties not found
2020-03-14 10:22:39 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 10:22:40 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 10:22:40 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:22:40 -Using default implementation for ThreadExecutor
2020-03-14 10:22:40 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 10:22:40 -Quartz Scheduler v.2.3.0 created.
2020-03-14 10:22:40 -RAMJobStore initialized.
2020-03-14 10:22:40 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 10:22:40 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 10:22:40 -Quartz scheduler version: 2.3.0
2020-03-14 10:22:40 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@38fc34fd
2020-03-14 10:22:41 -STAET TaskExecutorConfig
2020-03-14 10:22:41 -Initializing ExecutorService
2020-03-14 10:22:41 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 10:22:41 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 10:22:41 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 10:22:42 -Initializing ExecutorService 'taskScheduler'
2020-03-14 10:22:42 -Starting Quartz Scheduler now
2020-03-14 10:22:42 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 10:22:42 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 10:22:42 -Using a shared selector for servlet write/read
2020-03-14 10:22:42 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 10:22:42 -Started LongEcologicalApplication in 7.924 seconds (JVM running for 9.183)
2020-03-14 10:23:06 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 10:23:06 -Initializing Servlet 'dispatcherServlet'
2020-03-14 10:23:06 -Completed initialization in 13 ms
2020-03-14 10:23:07 -此处进行解密+验签+身份验证
2020-03-14 10:23:07 -此处进行解密+验签+身份验证
2020-03-14 10:23:07 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 10:23:07 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 10:23:07 -Starting without optional epoll library
2020-03-14 10:23:07 -Starting without optional kqueue library
2020-03-14 10:23:07 -解密：
2020-03-14 10:23:07 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:23:07 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:23:07 -==> Parameters: 04(String), 04(String)
2020-03-14 10:23:07 -<==      Total: 1
2020-03-14 10:23:07 -耗时 : 51
2020-03-14 10:23:07 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 10:23:07 -耗时 : 668
2020-03-14 10:23:07 -此处进行解密+验签+身份验证
2020-03-14 10:23:07 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 10:23:07 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 10:23:07 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 10:23:07 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:23:07 -==> Parameters: 571(String)
2020-03-14 10:23:07 -<==      Total: 1
2020-03-14 10:23:07 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 10:23:07 -==> Parameters: 25(String)
2020-03-14 10:23:07 -<==      Total: 1
2020-03-14 10:23:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 10:23:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 10:23:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 10:23:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 10:23:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 10:23:07 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 10:23:07 -耗时 : 100
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:23:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:23:11 -==> Parameters: 571(String)
2020-03-14 10:23:11 -<==      Total: 1
2020-03-14 10:23:11 -耗时 : 17
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -解密：
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:23:11 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:23:11 -==> Parameters: 01(String), 01(String)
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:23:11 -<==      Total: 6
2020-03-14 10:23:11 -耗时 : 10
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:23:11 -此处进行解密+验签+身份验证
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:23:11 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 10:23:11 -==> Parameters: 571(String)
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 10:23:11 -<==      Total: 2
2020-03-14 10:23:11 -耗时 : 9
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:23:11 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 10:23:11 -==> Parameters: 
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:23:11 -<==      Total: 3
2020-03-14 10:23:11 -耗时 : 16
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:23:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:23:11 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:23:11 -==> Parameters: 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -耗时 : 11
2020-03-14 10:23:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:23:12 -==> Parameters: 571(String), 571(String)
2020-03-14 10:23:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:23:12 -==> Parameters: 571(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:23:12 -==> Parameters: 571(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:23:12 -==> Parameters: 571(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:23:12 -==> Parameters: 
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:23:12 -==> Parameters: 
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:23:12 -==> Parameters: 571(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -耗时 : 124
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:23:12 -==> Parameters: 571(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 1
2020-03-14 10:23:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:23:12 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:23:12 -<==      Total: 2
2020-03-14 10:23:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:23:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:23:12 -<==    Updates: 2
2020-03-14 10:23:12 -耗时 : 186
2020-03-14 10:29:40 -此处进行解密+验签+身份验证
2020-03-14 10:29:40 -此处进行解密+验签+身份验证
2020-03-14 10:29:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:29:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:29:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:29:40 -==> Parameters: 571(String)
2020-03-14 10:29:40 -<==      Total: 1
2020-03-14 10:29:40 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:29:40 -==> Parameters: 571(String)
2020-03-14 10:29:40 -<==      Total: 1
2020-03-14 10:29:40 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:29:40 -==> Parameters: 571(String)
2020-03-14 10:29:40 -<==      Total: 1
2020-03-14 10:29:40 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:29:40 -==> Parameters: 571(String)
2020-03-14 10:29:40 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:29:40 -==> Parameters: 571(String)
2020-03-14 10:29:40 -<==      Total: 0
2020-03-14 10:29:40 -耗时 : 46
2020-03-14 10:29:40 -<==      Total: 10
2020-03-14 10:29:40 -耗时 : 49
2020-03-14 10:29:44 -此处进行解密+验签+身份验证
2020-03-14 10:29:44 -此处进行解密+验签+身份验证
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:29:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:29:44 -==> Parameters: 
2020-03-14 10:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:29:44 -此处进行解密+验签+身份验证
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:29:44 -<==      Total: 1
2020-03-14 10:29:44 -耗时 : 15
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:29:44 -此处进行解密+验签+身份验证
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:44 -此处进行解密+验签+身份验证
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:29:44 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:29:44 -==> Parameters: 1968(String)
2020-03-14 10:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:29:44 -<==      Total: 1
2020-03-14 10:29:44 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:29:44 -==> Parameters: 1968(String)
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:29:44 -<==      Total: 1
2020-03-14 10:29:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:29:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:29:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:29:54 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:29:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 10:29:54 -==> Parameters: 
2020-03-14 10:29:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:29:54 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:29:54 -<==      Total: 0
2020-03-14 10:29:54 -耗时 : 9368
2020-03-14 10:29:54 -<==      Total: 1
2020-03-14 10:29:54 -<==      Total: 0
2020-03-14 10:29:54 -耗时 : 9402
2020-03-14 10:29:54 -耗时 : 9356
2020-03-14 10:29:54 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:29:54 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:29:54 -<==      Total: 0
2020-03-14 10:29:54 -耗时 : 9374
2020-03-14 10:31:33 -此处进行解密+验签+身份验证
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:31:33 -此处进行解密+验签+身份验证
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:31:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:31:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:31:33 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:31:33 -==> Parameters: 
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:31:33 -此处进行解密+验签+身份验证
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:31:33 -<==      Total: 1
2020-03-14 10:31:33 -耗时 : 13
2020-03-14 10:31:33 -此处进行解密+验签+身份验证
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:31:33 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:31:33 -==> Parameters: 1968(String)
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:31:33 -此处进行解密+验签+身份验证
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:31:33 -<==      Total: 1
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:31:33 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:31:33 -==> Parameters: 1968(String)
2020-03-14 10:31:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:31:33 -<==      Total: 1
2020-03-14 10:32:05 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=55s807ms353µs403ns).
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -解密：
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:32:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:05 -==> Parameters: 
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:32:05 -==> Parameters: 01(String), 01(String)
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -此处进行解密+验签+身份验证
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -<==      Total: 6
2020-03-14 10:32:05 -耗时 : 31521
2020-03-14 10:32:05 -耗时 : 12
2020-03-14 10:32:05 -<==      Total: 0
2020-03-14 10:32:05 -耗时 : 31479
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:05 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:32:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -<==      Total: 0
2020-03-14 10:32:05 -耗时 : 36
2020-03-14 10:32:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:05 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -耗时 : 8
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:32:05 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 10:32:05 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 10:32:05 -==> Parameters: 
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 10:32:05 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:32:05 -<==      Total: 0
2020-03-14 10:32:05 -耗时 : 50
2020-03-14 10:32:05 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 10:32:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -<==      Total: 10
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:32:05 -耗时 : 9
2020-03-14 10:32:05 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -<==      Total: 3
2020-03-14 10:32:05 -耗时 : 12
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -耗时 : 12
2020-03-14 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:32:05 -==> Parameters: 571(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:32:05 -==> Parameters: 571(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -耗时 : 24
2020-03-14 10:32:05 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:32:05 -==> Parameters: 571(String)
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 0
2020-03-14 10:32:05 -耗时 : 31
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:32:05 -==> Parameters: 571(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:32:05 -==> Parameters: 571(String), 571(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:32:05 -==> Parameters: 
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:32:05 -==> Parameters: 571(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:32:05 -==> Parameters: 
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -耗时 : 118
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:32:05 -==> Parameters: 571(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 1
2020-03-14 10:32:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:32:05 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:32:05 -<==      Total: 2
2020-03-14 10:32:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:32:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:32:05 -<==    Updates: 2
2020-03-14 10:32:05 -耗时 : 178
2020-03-14 10:32:12 -此处进行解密+验签+身份验证
2020-03-14 10:32:12 -此处进行解密+验签+身份验证
2020-03-14 10:32:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:32:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:32:12 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:32:12 -==> Parameters: 571(String)
2020-03-14 10:32:12 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:32:12 -==> Parameters: 571(String)
2020-03-14 10:32:12 -<==      Total: 1
2020-03-14 10:32:12 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:32:12 -==> Parameters: 571(String)
2020-03-14 10:32:12 -<==      Total: 10
2020-03-14 10:32:12 -耗时 : 22
2020-03-14 10:32:12 -<==      Total: 1
2020-03-14 10:32:12 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:32:12 -==> Parameters: 571(String)
2020-03-14 10:32:12 -<==      Total: 1
2020-03-14 10:32:12 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:32:12 -==> Parameters: 571(String)
2020-03-14 10:32:12 -<==      Total: 0
2020-03-14 10:32:12 -耗时 : 37
2020-03-14 10:32:14 -此处进行解密+验签+身份验证
2020-03-14 10:32:14 -此处进行解密+验签+身份验证
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:14 -此处进行解密+验签+身份验证
2020-03-14 10:32:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:14 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:32:14 -==> Parameters: 
2020-03-14 10:32:14 -此处进行解密+验签+身份验证
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:14 -此处进行解密+验签+身份验证
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:14 -<==      Total: 1
2020-03-14 10:32:14 -耗时 : 18
2020-03-14 10:32:14 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:32:14 -==> Parameters: 1968(String)
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:14 -<==      Total: 1
2020-03-14 10:32:14 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:32:14 -==> Parameters: 1968(String)
2020-03-14 10:32:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:14 -<==      Total: 1
2020-03-14 10:32:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 10:32:16 -==> Parameters: 
2020-03-14 10:32:16 -<==      Total: 1
2020-03-14 10:32:16 -耗时 : 2408
2020-03-14 10:32:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:16 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:16 -<==      Total: 0
2020-03-14 10:32:16 -耗时 : 2379
2020-03-14 10:32:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:16 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:32:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:16 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:32:16 -<==      Total: 0
2020-03-14 10:32:16 -耗时 : 35
2020-03-14 10:32:16 -<==      Total: 0
2020-03-14 10:32:16 -耗时 : 37
2020-03-14 10:32:19 -此处进行解密+验签+身份验证
2020-03-14 10:32:19 -此处进行解密+验签+身份验证
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:19 -此处进行解密+验签+身份验证
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:19 -此处进行解密+验签+身份验证
2020-03-14 10:32:19 -此处进行解密+验签+身份验证
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:32:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:32:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:32:19 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 10:32:19 -==> Parameters: 
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:19 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 10:32:19 -==> Parameters: 1968(String)
2020-03-14 10:32:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:32:19 -<==      Total: 1
2020-03-14 10:32:19 -耗时 : 11
2020-03-14 10:32:19 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:19 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:32:19 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:32:19 -<==      Total: 0
2020-03-14 10:32:19 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:32:19 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:32:19 -==> Parameters: 1968(String)
2020-03-14 10:32:19 -<==      Total: 0
2020-03-14 10:32:19 -耗时 : 27
2020-03-14 10:32:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m14s74ms457µs337ns).
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -解密：
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:33:19 -==> Parameters: 01(String), 01(String)
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -<==      Total: 0
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -耗时 : 59641
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$da01f001.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 10:33:19 -耗时 : 59645
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -解密：
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -<==      Total: 0
2020-03-14 10:33:19 -耗时 : 59631
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -此处进行解密+验签+身份验证
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:33:19 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -==> Parameters: 01(String), 01(String)
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:33:19 -<==      Total: 6
2020-03-14 10:33:19 -耗时 : 10
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:33:19 -<==      Total: 6
2020-03-14 10:33:19 -耗时 : 13
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:33:19 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 10:33:19 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 10:33:19 -==> Parameters: 
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -耗时 : 10
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 10:33:19 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:33:19 -==> Parameters: 
2020-03-14 10:33:19 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:33:19 -<==      Total: 3
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -耗时 : 7
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:33:19 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:33:19 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -耗时 : 8
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:33:19 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -<==      Total: 3
2020-03-14 10:33:19 -耗时 : 14
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -耗时 : 12
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -耗时 : 15
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:33:19 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 10
2020-03-14 10:33:19 -耗时 : 17
2020-03-14 10:33:19 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:33:19 -==> Parameters: 571(String)
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -耗时 : 22
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 0
2020-03-14 10:33:19 -耗时 : 30
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -耗时 : 34
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:33:19 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:33:19 -==> Parameters: 
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:33:19 -==> Parameters: 
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:33:19 -==> Parameters: 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:33:19 -==> Parameters: 
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -耗时 : 111
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -耗时 : 113
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:33:19 -==> Parameters: 571(String), 571(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -耗时 : 169
2020-03-14 10:33:19 -<==      Total: 1
2020-03-14 10:33:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:33:19 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:33:19 -<==      Total: 2
2020-03-14 10:33:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:33:19 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:33:19 -<==    Updates: 2
2020-03-14 10:33:19 -耗时 : 203
2020-03-14 10:34:56 -此处进行解密+验签+身份验证
2020-03-14 10:34:56 -此处进行解密+验签+身份验证
2020-03-14 10:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:34:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:34:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:34:56 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:34:56 -==> Parameters: 571(String)
2020-03-14 10:34:56 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:34:56 -==> Parameters: 571(String)
2020-03-14 10:34:56 -<==      Total: 10
2020-03-14 10:34:56 -耗时 : 10
2020-03-14 10:34:56 -<==      Total: 1
2020-03-14 10:34:56 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:34:56 -==> Parameters: 571(String)
2020-03-14 10:34:56 -<==      Total: 1
2020-03-14 10:34:56 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:34:56 -==> Parameters: 571(String)
2020-03-14 10:34:56 -<==      Total: 1
2020-03-14 10:34:56 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:34:56 -==> Parameters: 571(String)
2020-03-14 10:34:56 -<==      Total: 0
2020-03-14 10:34:56 -耗时 : 52
2020-03-14 10:35:03 -此处进行解密+验签+身份验证
2020-03-14 10:35:03 -此处进行解密+验签+身份验证
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:35:03 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:35:03 -==> Parameters: 
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:03 -此处进行解密+验签+身份验证
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:03 -此处进行解密+验签+身份验证
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:03 -<==      Total: 1
2020-03-14 10:35:03 -耗时 : 11
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:03 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:35:03 -==> Parameters: 1968(String)
2020-03-14 10:35:03 -此处进行解密+验签+身份验证
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:03 -<==      Total: 1
2020-03-14 10:35:03 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:35:03 -==> Parameters: 1968(String)
2020-03-14 10:35:03 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:03 -<==      Total: 1
2020-03-14 10:35:09 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:35:09 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:35:09 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 10:35:09 -==> Parameters: 
2020-03-14 10:35:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:35:09 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:35:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:09 -<==      Total: 0
2020-03-14 10:35:09 -耗时 : 6271
2020-03-14 10:35:09 -<==      Total: 0
2020-03-14 10:35:09 -耗时 : 6272
2020-03-14 10:35:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:35:09 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:35:09 -<==      Total: 1
2020-03-14 10:35:09 -耗时 : 6317
2020-03-14 10:35:09 -<==      Total: 0
2020-03-14 10:35:09 -耗时 : 27
2020-03-14 10:35:15 -此处进行解密+验签+身份验证
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:15 -此处进行解密+验签+身份验证
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:15 -此处进行解密+验签+身份验证
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:15 -此处进行解密+验签+身份验证
2020-03-14 10:35:15 -此处进行解密+验签+身份验证
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:35:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:15 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 10:35:15 -==> Parameters: 
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:35:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:35:15 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 10:35:15 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:35:15 -<==      Total: 1
2020-03-14 10:35:15 -耗时 : 21
2020-03-14 10:35:15 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 10:35:15 -==> Parameters: 1968(String)
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:35:15 -<==      Total: 0
2020-03-14 10:35:15 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:35:15 -==> Parameters: 1968(String)
2020-03-14 10:35:15 -<==      Total: 0
2020-03-14 10:35:15 -耗时 : 37
2020-03-14 10:35:15 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:35:40 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:35:40 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:35:40 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:35:40 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=51s363ms743µs107ns).
2020-03-14 10:35:40 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$da01f001.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 10:35:40 -耗时 : 25578
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -解密：
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -<==      Total: 0
2020-03-14 10:35:40 -耗时 : 25568
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:35:40 -==> Parameters: 01(String), 01(String)
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -<==      Total: 0
2020-03-14 10:35:40 -耗时 : 25573
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -<==      Total: 6
2020-03-14 10:35:40 -耗时 : 13
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -此处进行解密+验签+身份验证
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:35:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:35:40 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -耗时 : 12
2020-03-14 10:35:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:35:40 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:35:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:35:40 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 10:35:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:35:40 -==> Parameters: 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -<==      Total: 10
2020-03-14 10:35:40 -耗时 : 8
2020-03-14 10:35:40 -<==      Total: 2
2020-03-14 10:35:40 -耗时 : 12
2020-03-14 10:35:40 -<==      Total: 3
2020-03-14 10:35:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:35:40 -耗时 : 7
2020-03-14 10:35:40 -==> Parameters: 571(String), 571(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:35:40 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -==> Parameters: 571(String), 571(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -耗时 : 21
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:40 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:40 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:35:40 -<==      Total: 2
2020-03-14 10:35:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:40 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -<==      Total: 2
2020-03-14 10:35:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:40 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:35:40 -<==    Updates: 2
2020-03-14 10:35:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:35:40 -==> Parameters: 571(String), 571(String)
2020-03-14 10:35:40 -<==    Updates: 2
2020-03-14 10:35:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==> Parameters: 571(String), 571(String)
2020-03-14 10:35:40 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:35:40 -==> Parameters: 571(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:40 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:35:40 -<==      Total: 1
2020-03-14 10:35:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:40 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:35:40 -<==      Total: 0
2020-03-14 10:35:40 -耗时 : 46
2020-03-14 10:35:40 -<==      Total: 2
2020-03-14 10:35:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:40 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:35:40 -<==      Total: 2
2020-03-14 10:35:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:40 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:35:41 -<==    Updates: 2
2020-03-14 10:35:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:35:41 -==> Parameters: 
2020-03-14 10:35:41 -<==    Updates: 2
2020-03-14 10:35:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:35:41 -==> Parameters: 
2020-03-14 10:35:41 -<==      Total: 1
2020-03-14 10:35:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:41 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:35:41 -<==      Total: 1
2020-03-14 10:35:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:41 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:35:41 -<==      Total: 2
2020-03-14 10:35:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:41 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:35:41 -<==      Total: 2
2020-03-14 10:35:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:41 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:35:41 -<==    Updates: 2
2020-03-14 10:35:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:35:41 -==> Parameters: 571(String), 571(String)
2020-03-14 10:35:41 -<==    Updates: 2
2020-03-14 10:35:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:35:41 -==> Parameters: 571(String), 571(String)
2020-03-14 10:35:41 -<==      Total: 1
2020-03-14 10:35:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:41 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:35:41 -<==      Total: 1
2020-03-14 10:35:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:35:41 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:35:41 -<==      Total: 2
2020-03-14 10:35:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:41 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:35:41 -<==      Total: 2
2020-03-14 10:35:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:35:41 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:35:41 -<==    Updates: 2
2020-03-14 10:35:41 -耗时 : 113
2020-03-14 10:35:41 -<==    Updates: 2
2020-03-14 10:35:41 -耗时 : 119
2020-03-14 10:42:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:42:53 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 10:42:53 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 10:42:53 -Shutting down Quartz Scheduler
2020-03-14 10:42:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 10:42:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:42:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 10:42:53 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:42:53 -HikariPool-1 - Shutdown initiated...
2020-03-14 10:42:53 -HikariPool-1 - Shutdown completed.
2020-03-14 10:48:41 -Starting LongEcologicalApplication on PC-201905161910 with PID 15796 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 10:48:41 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 10:48:41 -No active profile set, falling back to default profiles: default
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:48:43 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 10:48:43 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 10:48:43 -Finished Spring Data repository scanning in 99ms. Found 0 repository interfaces.
2020-03-14 10:48:43 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 10:48:43 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 10:48:43 -Finished Spring Data repository scanning in 61ms. Found 0 repository interfaces.
2020-03-14 10:48:43 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$30593988] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 10:48:44 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2add1e28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 10:48:44 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 10:48:44 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 10:48:44 -Starting service [Tomcat]
2020-03-14 10:48:44 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 10:48:44 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 10:48:45 -Initializing Spring embedded WebApplicationContext
2020-03-14 10:48:45 -Root WebApplicationContext: initialization completed in 3033 ms
2020-03-14 10:48:45 -Filter xssFilter was not registered (disabled)
2020-03-14 10:48:45 -HikariPool-1 - Starting...
2020-03-14 10:48:45 -HikariPool-1 - Start completed.
2020-03-14 10:48:45 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 10:48:46 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 10:48:46 -HHH000206: hibernate.properties not found
2020-03-14 10:48:46 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 10:48:46 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 10:48:46 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:48:47 -Using default implementation for ThreadExecutor
2020-03-14 10:48:47 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 10:48:47 -Quartz Scheduler v.2.3.0 created.
2020-03-14 10:48:47 -RAMJobStore initialized.
2020-03-14 10:48:47 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 10:48:47 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 10:48:47 -Quartz scheduler version: 2.3.0
2020-03-14 10:48:47 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3b576ee3
2020-03-14 10:48:48 -STAET TaskExecutorConfig
2020-03-14 10:48:48 -Initializing ExecutorService
2020-03-14 10:48:48 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 10:48:48 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 10:48:48 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 10:48:49 -Initializing ExecutorService 'taskScheduler'
2020-03-14 10:48:49 -Starting Quartz Scheduler now
2020-03-14 10:48:49 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 10:48:49 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 10:48:49 -Using a shared selector for servlet write/read
2020-03-14 10:48:49 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 10:48:49 -Started LongEcologicalApplication in 9.1 seconds (JVM running for 10.889)
2020-03-14 10:49:03 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 10:49:03 -Initializing Servlet 'dispatcherServlet'
2020-03-14 10:49:03 -Completed initialization in 16 ms
2020-03-14 10:49:03 -此处进行解密+验签+身份验证
2020-03-14 10:49:03 -此处进行解密+验签+身份验证
2020-03-14 10:49:03 -此处进行解密+验签+身份验证
2020-03-14 10:49:03 -此处进行解密+验签+身份验证
2020-03-14 10:49:03 -此处进行解密+验签+身份验证
2020-03-14 10:49:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:03 -Starting without optional epoll library
2020-03-14 10:49:03 -Starting without optional kqueue library
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:49:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:49:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:49:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:49:07 -==> Parameters: 
2020-03-14 10:49:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:49:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:49:07 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:49:07 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:49:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:49:07 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:49:07 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:49:07 -==> Parameters: 1968(String)
2020-03-14 10:49:07 -<==      Total: 0
2020-03-14 10:49:07 -<==      Total: 1
2020-03-14 10:49:07 -耗时 : 3153
2020-03-14 10:49:07 -耗时 : 3153
2020-03-14 10:49:07 -<==      Total: 0
2020-03-14 10:49:07 -耗时 : 3155
2020-03-14 10:49:07 -<==      Total: 0
2020-03-14 10:49:07 -耗时 : 3162
2020-03-14 10:49:07 -<==      Total: 1
2020-03-14 10:49:09 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'map' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPosAllocateCase(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$9a2f13ed.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 10:49:10 -耗时 : 6204
2020-03-14 10:49:39 -此处进行解密+验签+身份验证
2020-03-14 10:49:39 -此处进行解密+验签+身份验证
2020-03-14 10:49:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:49:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:49:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:49:39 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:49:39 -==> Parameters: 
2020-03-14 10:49:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:49:42 -<==      Total: 1
2020-03-14 10:49:42 -耗时 : 3868
2020-03-14 10:49:42 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:49:42 -此处进行解密+验签+身份验证
2020-03-14 10:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:42 -==> Parameters: 1968(String)
2020-03-14 10:49:42 -此处进行解密+验签+身份验证
2020-03-14 10:49:42 -此处进行解密+验签+身份验证
2020-03-14 10:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:49:42 -<==      Total: 1
2020-03-14 10:50:39 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m23s925ms285µs241ns).
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:50:39 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'map' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPosAllocateCase(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$9a2f13ed.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 10:50:39 -耗时 : 60770
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -此处进行解密+验签+身份验证
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:50:39 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:50:39 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:50:39 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:50:39 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 10:50:39 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:50:39 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:50:39 -==> Parameters: 571(String)
2020-03-14 10:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 10:50:39 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 10:50:39 -<==      Total: 0
2020-03-14 10:50:39 -耗时 : 36
2020-03-14 10:50:39 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:50:39 -==> Parameters: 571(String)
2020-03-14 10:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 10:50:39 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:50:39 -==> Parameters: 571(String)
2020-03-14 10:50:39 -<==      Total: 0
2020-03-14 10:50:39 -耗时 : 42
2020-03-14 10:50:39 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 10:50:39 -==> Parameters: 
2020-03-14 10:50:39 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:50:39 -==> Parameters: 571(String)
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:50:39 -==> Parameters: 571(String)
2020-03-14 10:50:39 -<==      Total: 0
2020-03-14 10:50:39 -<==      Total: 2
2020-03-14 10:50:39 -耗时 : 44
2020-03-14 10:50:39 -耗时 : 20
2020-03-14 10:50:39 -<==      Total: 10
2020-03-14 10:50:39 -<==      Total: 3
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -耗时 : 19
2020-03-14 10:50:39 -耗时 : 22
2020-03-14 10:50:39 -耗时 : 22
2020-03-14 10:50:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:50:39 -==> Parameters: 571(String), 571(String)
2020-03-14 10:50:39 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 10:50:39 -==> Parameters: 571(String)
2020-03-14 10:50:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:50:39 -==> Parameters: 571(String), 571(String)
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -MerchantManageServiceImpl -- getReferAgencyNum方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'map' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPosAllocateCase(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyNum(MerchantManageServiceImpl.java:422)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyNum(MerchantManageController.java:189)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$9a2f13ed.getReferAgencyNum(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 10:50:39 -耗时 : 30
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -耗时 : 34
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:39 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:39 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 10:50:39 -<==      Total: 2
2020-03-14 10:50:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:39 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:50:39 -<==      Total: 2
2020-03-14 10:50:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:39 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 10:50:39 -<==    Updates: 2
2020-03-14 10:50:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:50:39 -==> Parameters: 571(String), 571(String)
2020-03-14 10:50:39 -<==    Updates: 2
2020-03-14 10:50:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 10:50:39 -==> Parameters: 571(String), 571(String)
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:39 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:50:39 -<==      Total: 2
2020-03-14 10:50:39 -<==      Total: 1
2020-03-14 10:50:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:39 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 10:50:39 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:50:39 -<==    Updates: 2
2020-03-14 10:50:39 -<==      Total: 2
2020-03-14 10:50:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:50:39 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 10:50:39 -==> Parameters: 
2020-03-14 10:50:40 -<==      Total: 1
2020-03-14 10:50:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:40 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:50:40 -<==    Updates: 2
2020-03-14 10:50:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 10:50:40 -==> Parameters: 
2020-03-14 10:50:40 -<==      Total: 2
2020-03-14 10:50:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:40 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:50:40 -<==      Total: 1
2020-03-14 10:50:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:40 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 10:50:40 -<==    Updates: 2
2020-03-14 10:50:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:50:40 -==> Parameters: 571(String), 571(String)
2020-03-14 10:50:40 -<==      Total: 2
2020-03-14 10:50:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:40 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 10:50:40 -<==      Total: 1
2020-03-14 10:50:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:40 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:50:40 -<==    Updates: 2
2020-03-14 10:50:40 -<==      Total: 2
2020-03-14 10:50:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 10:50:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:40 -==> Parameters: 571(String), 571(String)
2020-03-14 10:50:40 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:50:40 -<==    Updates: 2
2020-03-14 10:50:40 -耗时 : 175
2020-03-14 10:50:40 -<==      Total: 1
2020-03-14 10:50:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 10:50:40 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 10:50:40 -<==      Total: 2
2020-03-14 10:50:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 10:50:40 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 10:50:40 -<==    Updates: 2
2020-03-14 10:50:40 -耗时 : 203
2020-03-14 10:50:40 -解密：
2020-03-14 10:50:40 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 10:50:40 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 10:50:40 -==> Parameters: 01(String), 01(String)
2020-03-14 10:50:40 -<==      Total: 6
2020-03-14 10:50:40 -耗时 : 10
2020-03-14 10:52:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:52:54 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 10:52:54 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 10:52:54 -Shutting down Quartz Scheduler
2020-03-14 10:52:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 10:52:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:52:54 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 10:52:54 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:52:54 -HikariPool-1 - Shutdown initiated...
2020-03-14 10:52:54 -HikariPool-1 - Shutdown completed.
2020-03-14 10:58:01 -Starting LongEcologicalApplication on PC-201905161910 with PID 17148 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 10:58:01 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 10:58:01 -No active profile set, falling back to default profiles: default
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 10:58:03 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 10:58:03 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 10:58:03 -Finished Spring Data repository scanning in 118ms. Found 0 repository interfaces.
2020-03-14 10:58:03 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 10:58:03 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 10:58:03 -Finished Spring Data repository scanning in 46ms. Found 0 repository interfaces.
2020-03-14 10:58:03 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$764c07ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 10:58:03 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$70cfec4b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 10:58:04 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 10:58:04 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 10:58:04 -Starting service [Tomcat]
2020-03-14 10:58:04 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 10:58:04 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 10:58:04 -Initializing Spring embedded WebApplicationContext
2020-03-14 10:58:04 -Root WebApplicationContext: initialization completed in 2538 ms
2020-03-14 10:58:04 -Filter xssFilter was not registered (disabled)
2020-03-14 10:58:05 -HikariPool-1 - Starting...
2020-03-14 10:58:05 -HikariPool-1 - Start completed.
2020-03-14 10:58:05 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 10:58:05 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 10:58:05 -HHH000206: hibernate.properties not found
2020-03-14 10:58:05 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 10:58:05 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 10:58:06 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:58:06 -Using default implementation for ThreadExecutor
2020-03-14 10:58:06 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 10:58:06 -Quartz Scheduler v.2.3.0 created.
2020-03-14 10:58:06 -RAMJobStore initialized.
2020-03-14 10:58:06 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 10:58:06 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 10:58:06 -Quartz scheduler version: 2.3.0
2020-03-14 10:58:06 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@795eddda
2020-03-14 10:58:07 -STAET TaskExecutorConfig
2020-03-14 10:58:07 -Initializing ExecutorService
2020-03-14 10:58:07 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 10:58:07 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 10:58:07 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 10:58:08 -Initializing ExecutorService 'taskScheduler'
2020-03-14 10:58:08 -Starting Quartz Scheduler now
2020-03-14 10:58:08 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 10:58:08 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 10:58:08 -Using a shared selector for servlet write/read
2020-03-14 10:58:08 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 10:58:08 -Started LongEcologicalApplication in 6.859 seconds (JVM running for 8.486)
2020-03-14 10:58:33 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 10:58:33 -Initializing Servlet 'dispatcherServlet'
2020-03-14 10:58:33 -Completed initialization in 12 ms
2020-03-14 10:58:33 -此处进行解密+验签+身份验证
2020-03-14 10:58:33 -此处进行解密+验签+身份验证
2020-03-14 10:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:34 -Starting without optional epoll library
2020-03-14 10:58:34 -Starting without optional kqueue library
2020-03-14 10:58:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:58:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:58:34 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:58:34 -==> Parameters: 571(String)
2020-03-14 10:58:34 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:58:34 -==> Parameters: 571(String)
2020-03-14 10:58:34 -<==      Total: 1
2020-03-14 10:58:34 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:58:34 -==> Parameters: 571(String)
2020-03-14 10:58:34 -<==      Total: 10
2020-03-14 10:58:34 -耗时 : 56
2020-03-14 10:58:34 -<==      Total: 1
2020-03-14 10:58:34 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:58:34 -==> Parameters: 571(String)
2020-03-14 10:58:34 -<==      Total: 1
2020-03-14 10:58:34 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:58:34 -==> Parameters: 571(String)
2020-03-14 10:58:34 -<==      Total: 0
2020-03-14 10:58:34 -耗时 : 74
2020-03-14 10:58:41 -此处进行解密+验签+身份验证
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:41 -此处进行解密+验签+身份验证
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:58:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:58:41 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 10:58:41 -==> Parameters: 
2020-03-14 10:58:41 -此处进行解密+验签+身份验证
2020-03-14 10:58:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:44 -<==      Total: 1
2020-03-14 10:58:44 -耗时 : 2829
2020-03-14 10:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:44 -此处进行解密+验签+身份验证
2020-03-14 10:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:44 -此处进行解密+验签+身份验证
2020-03-14 10:58:44 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 10:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:44 -==> Parameters: 1968(String)
2020-03-14 10:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:58:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:58:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:58:44 -<==      Total: 1
2020-03-14 10:58:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:58:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:58:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:58:51 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:58:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:58:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:58:51 -==> Parameters: 1968(String)
2020-03-14 10:58:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:58:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:58:51 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 10:58:51 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:58:51 -<==      Total: 1
2020-03-14 10:58:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:58:52 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:58:53 -<==      Total: 0
2020-03-14 10:58:53 -耗时 : 9425
2020-03-14 10:58:53 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 10:58:53 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:58:53 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:58:53 -==> Parameters: 
2020-03-14 10:58:53 -<==      Total: 0
2020-03-14 10:58:53 -耗时 : 2118
2020-03-14 10:58:53 -<==      Total: 0
2020-03-14 10:58:54 -耗时 : 2125
2020-03-14 10:58:54 -<==      Total: 1
2020-03-14 10:59:00 -耗时 : 18470
2020-03-14 10:59:05 -此处进行解密+验签+身份验证
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:05 -此处进行解密+验签+身份验证
2020-03-14 10:59:05 -此处进行解密+验签+身份验证
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:05 -此处进行解密+验签+身份验证
2020-03-14 10:59:05 -此处进行解密+验签+身份验证
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:59:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 10:59:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:59:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 10:59:05 -==> Parameters: 
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:59:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:59:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:59:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 10:59:10 -<==      Total: 1
2020-03-14 10:59:10 -耗时 : 4788
2020-03-14 10:59:10 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 10:59:10 -==> Parameters: 1968(String), 1968(String)
2020-03-14 10:59:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:59:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 10:59:10 -<==      Total: 0
2020-03-14 10:59:10 -耗时 : 4796
2020-03-14 10:59:10 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 10:59:10 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 10:59:10 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 10:59:10 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 10:59:10 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 10:59:10 -==> Parameters: 1968(String)
2020-03-14 10:59:10 -<==      Total: 0
2020-03-14 10:59:10 -耗时 : 4801
2020-03-14 10:59:10 -<==      Total: 0
2020-03-14 10:59:10 -<==      Total: 0
2020-03-14 10:59:10 -耗时 : 4812
2020-03-14 10:59:36 -此处进行解密+验签+身份验证
2020-03-14 10:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:36 -此处进行解密+验签+身份验证
2020-03-14 10:59:36 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:607)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$1d579eea.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 10:59:36 -耗时 : 30513
2020-03-14 10:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 10:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 10:59:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 10:59:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 10:59:36 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 10:59:36 -==> Parameters: 571(String)
2020-03-14 10:59:36 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 10:59:36 -==> Parameters: 571(String)
2020-03-14 10:59:36 -<==      Total: 10
2020-03-14 10:59:36 -耗时 : 10
2020-03-14 10:59:36 -<==      Total: 1
2020-03-14 10:59:36 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 10:59:36 -==> Parameters: 571(String)
2020-03-14 10:59:36 -<==      Total: 1
2020-03-14 10:59:36 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 10:59:36 -==> Parameters: 571(String)
2020-03-14 10:59:36 -<==      Total: 1
2020-03-14 10:59:36 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 10:59:36 -==> Parameters: 571(String)
2020-03-14 10:59:36 -<==      Total: 0
2020-03-14 10:59:36 -耗时 : 59
2020-03-14 10:59:58 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:59:58 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 10:59:58 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 10:59:58 -Shutting down Quartz Scheduler
2020-03-14 10:59:58 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 10:59:58 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 10:59:58 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 10:59:58 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 10:59:58 -HikariPool-1 - Shutdown initiated...
2020-03-14 10:59:58 -HikariPool-1 - Shutdown completed.
2020-03-14 11:00:31 -Starting LongEcologicalApplication on PC-201905161910 with PID 8940 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 11:00:31 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 11:00:31 -No active profile set, falling back to default profiles: default
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:00:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 11:00:34 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 11:00:34 -Finished Spring Data repository scanning in 78ms. Found 0 repository interfaces.
2020-03-14 11:00:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 11:00:34 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 11:00:34 -Finished Spring Data repository scanning in 45ms. Found 0 repository interfaces.
2020-03-14 11:00:34 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$32221ccb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 11:00:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2ca6016b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 11:00:35 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 11:00:35 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 11:00:35 -Starting service [Tomcat]
2020-03-14 11:00:35 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 11:00:35 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 11:00:36 -Initializing Spring embedded WebApplicationContext
2020-03-14 11:00:36 -Root WebApplicationContext: initialization completed in 4204 ms
2020-03-14 11:00:36 -Filter xssFilter was not registered (disabled)
2020-03-14 11:00:36 -HikariPool-1 - Starting...
2020-03-14 11:00:36 -HikariPool-1 - Start completed.
2020-03-14 11:00:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 11:00:36 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 11:00:36 -HHH000206: hibernate.properties not found
2020-03-14 11:00:37 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 11:00:37 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 11:00:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 11:00:38 -Using default implementation for ThreadExecutor
2020-03-14 11:00:38 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 11:00:38 -Quartz Scheduler v.2.3.0 created.
2020-03-14 11:00:38 -RAMJobStore initialized.
2020-03-14 11:00:38 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 11:00:38 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 11:00:38 -Quartz scheduler version: 2.3.0
2020-03-14 11:00:38 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7074da1d
2020-03-14 11:00:38 -STAET TaskExecutorConfig
2020-03-14 11:00:38 -Initializing ExecutorService
2020-03-14 11:00:38 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 11:00:39 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 11:00:39 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 11:00:39 -Initializing ExecutorService 'taskScheduler'
2020-03-14 11:00:39 -Starting Quartz Scheduler now
2020-03-14 11:00:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 11:00:39 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 11:00:39 -Using a shared selector for servlet write/read
2020-03-14 11:00:39 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 11:00:39 -Started LongEcologicalApplication in 9.024 seconds (JVM running for 10.073)
2020-03-14 11:01:15 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 11:01:15 -Initializing Servlet 'dispatcherServlet'
2020-03-14 11:01:15 -Completed initialization in 13 ms
2020-03-14 11:01:15 -此处进行解密+验签+身份验证
2020-03-14 11:01:15 -此处进行解密+验签+身份验证
2020-03-14 11:01:15 -此处进行解密+验签+身份验证
2020-03-14 11:01:15 -此处进行解密+验签+身份验证
2020-03-14 11:01:15 -此处进行解密+验签+身份验证
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:15 -Starting without optional epoll library
2020-03-14 11:01:15 -Starting without optional kqueue library
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:01:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:01:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:01:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:01:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:17 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 11:01:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:01:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-14 11:01:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:01:17 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 11:01:17 -==> Parameters: 
2020-03-14 11:01:17 -==> Parameters: 1968(String), 1968(String)
2020-03-14 11:01:17 -==> Parameters: 1968(String)
2020-03-14 11:01:17 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 11:01:17 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 11:01:17 -<==      Total: 0
2020-03-14 11:01:17 -<==      Total: 0
2020-03-14 11:01:17 -<==      Total: 0
2020-03-14 11:01:17 -耗时 : 1780
2020-03-14 11:01:17 -耗时 : 1780
2020-03-14 11:01:17 -耗时 : 1780
2020-03-14 11:01:17 -<==      Total: 1
2020-03-14 11:01:17 -<==      Total: 1
2020-03-14 11:01:17 -耗时 : 1781
2020-03-14 11:01:17 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:01:17 -==> Parameters: 1968(String)
2020-03-14 11:01:17 -<==      Total: 1
2020-03-14 11:01:17 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-14 11:01:17 -==> Parameters: 
2020-03-14 11:01:17 -<==      Total: 1
2020-03-14 11:01:17 -耗时 : 1795
2020-03-14 11:01:20 -此处进行解密+验签+身份验证
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:20 -此处进行解密+验签+身份验证
2020-03-14 11:01:20 -此处进行解密+验签+身份验证
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:20 -此处进行解密+验签+身份验证
2020-03-14 11:01:20 -此处进行解密+验签+身份验证
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:01:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:01:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:01:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type='epos' 
2020-03-14 11:01:22 -==> Parameters: 
2020-03-14 11:01:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-14 11:01:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 11:01:22 -==> Parameters: 1968(String), 1968(String)
2020-03-14 11:01:22 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 11:01:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-14 11:01:22 -==> Parameters: 1968(String)
2020-03-14 11:01:22 -<==      Total: 0
2020-03-14 11:01:22 -耗时 : 1740
2020-03-14 11:01:22 -<==      Total: 1
2020-03-14 11:01:22 -耗时 : 1735
2020-03-14 11:01:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:01:22 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-14 11:01:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:01:22 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-14 11:01:22 -<==      Total: 0
2020-03-14 11:01:22 -耗时 : 1740
2020-03-14 11:01:22 -<==      Total: 0
2020-03-14 11:01:22 -<==      Total: 0
2020-03-14 11:01:22 -耗时 : 2102
2020-03-14 11:01:26 -耗时 : 5724
2020-03-14 11:13:49 -此处进行解密+验签+身份验证
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:49 -此处进行解密+验签+身份验证
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:49 -此处进行解密+验签+身份验证
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:49 -此处进行解密+验签+身份验证
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:49 -此处进行解密+验签+身份验证
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:13:49 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 11:13:49 -==> Parameters: 1960(String)
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:49 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type is null 
2020-03-14 11:13:49 -==> Parameters: 
2020-03-14 11:13:49 -<==      Total: 1
2020-03-14 11:13:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:13:49 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 11:13:49 -==> Parameters: 1960(String)
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:13:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:49 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 11:13:49 -<==      Total: 1
2020-03-14 11:13:49 -耗时 : 24
2020-03-14 11:13:49 -==> Parameters: 1960(String)
2020-03-14 11:13:49 -<==      Total: 1
2020-03-14 11:13:49 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1960,save content:{referer_id=571, parent_chain=571, user_tel=13976313337, id_card=460027199306150615, real_name=李炳深, algebra=2, cre_date=20191107, cre_time=105303, login_password=7a704e80688835268604b22be713a4d4, manager_id=25, pay_password=59bdb71e6a33575f3fd19dd8aaff43d8, id=1960, auth_status=09, status=0}
2020-03-14 11:13:56 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1960,save content:{referer_id=571, parent_chain=571, user_tel=13976313337, id_card=460027199306150615, real_name=李炳深, algebra=2, cre_date=20191107, cre_time=105303, login_password=7a704e80688835268604b22be713a4d4, manager_id=25, pay_password=59bdb71e6a33575f3fd19dd8aaff43d8, id=1960, auth_status=09, status=0}
2020-03-14 11:13:56 -此处进行解密+验签+身份验证
2020-03-14 11:13:56 -<==      Total: 1
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:56 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 11:13:56 -==> Parameters: 1960(String)
2020-03-14 11:13:56 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 11:13:56 -==> Parameters: 1960(String)
2020-03-14 11:13:56 -此处进行解密+验签+身份验证
2020-03-14 11:13:56 -此处进行解密+验签+身份验证
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 11:13:56 -此处进行解密+验签+身份验证
2020-03-14 11:13:56 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:13:56 -此处进行解密+验签+身份验证
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:56 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1960,save content:{referer_id=571, parent_chain=571, user_tel=13976313337, id_card=460027199306150615, real_name=李炳深, algebra=2, cre_date=20191107, cre_time=105303, login_password=7a704e80688835268604b22be713a4d4, manager_id=25, pay_password=59bdb71e6a33575f3fd19dd8aaff43d8, id=1960, auth_status=09, status=0}
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:13:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:13:56 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:13:56 -<==      Total: 1
2020-03-14 11:13:56 -<==      Total: 1
2020-03-14 11:13:56 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:13:56 -==> Parameters: 1960(String)
2020-03-14 11:13:56 -<==      Total: 10
2020-03-14 11:13:56 -耗时 : 7065
2020-03-14 11:13:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:13:56 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1960,save content:{referer_id=571, parent_chain=571, user_tel=13976313337, id_card=460027199306150615, real_name=李炳深, algebra=2, cre_date=20191107, cre_time=105303, login_password=7a704e80688835268604b22be713a4d4, manager_id=25, pay_password=59bdb71e6a33575f3fd19dd8aaff43d8, id=1960, auth_status=09, status=0}
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:13:56 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:13:56 -<==      Total: 5
2020-03-14 11:13:56 -耗时 : 7059
2020-03-14 11:13:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:13:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:56 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type='epos' 
2020-03-14 11:13:56 -==> Parameters: 
2020-03-14 11:13:56 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:13:56 -<==      Total: 1
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:13:56 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1960 and pos_type='epos' 
2020-03-14 11:13:56 -==> Parameters: 
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:13:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:13:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 11:13:56 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:13:56 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 11:13:56 -<==      Total: 1
2020-03-14 11:13:56 -==> Parameters: 1960(String)
2020-03-14 11:13:56 -<==      Total: 5
2020-03-14 11:13:56 -耗时 : 13
2020-03-14 11:13:56 -耗时 : 7072
2020-03-14 11:13:56 -<==      Total: 1
2020-03-14 11:13:56 -耗时 : 7107
2020-03-14 11:13:56 -<==      Total: 0
2020-03-14 11:13:56 -耗时 : 27
2020-03-14 11:13:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:13:56 -<==      Total: 0
2020-03-14 11:13:56 -耗时 : 24
2020-03-14 11:13:56 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:13:56 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:13:56 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:13:56 -<==      Total: 0
2020-03-14 11:13:56 -耗时 : 31
2020-03-14 11:13:56 -<==      Total: 0
2020-03-14 11:13:56 -耗时 : 40
2020-03-14 11:14:36 -此处进行解密+验签+身份验证
2020-03-14 11:14:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:36 -此处进行解密+验签+身份验证
2020-03-14 11:14:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:37 -此处进行解密+验签+身份验证
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:37 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type is null 
2020-03-14 11:14:37 -此处进行解密+验签+身份验证
2020-03-14 11:14:37 -==> Parameters: 
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:37 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 11:14:37 -==> Parameters: 1960(String)
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:37 -此处进行解密+验签+身份验证
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:37 -<==      Total: 1
2020-03-14 11:14:37 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:14:37 -==> Parameters: 1960(String)
2020-03-14 11:14:37 -<==      Total: 1
2020-03-14 11:14:37 -耗时 : 22
2020-03-14 11:14:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:37 -<==      Total: 1
2020-03-14 11:14:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:14:37 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1960 and pos_type='epos' 
2020-03-14 11:14:37 -==> Parameters: 
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:37 -<==      Total: 1
2020-03-14 11:14:37 -耗时 : 40
2020-03-14 11:14:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:37 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:14:37 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:14:37 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 11:14:37 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:14:37 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:14:37 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:14:37 -<==      Total: 5
2020-03-14 11:14:37 -耗时 : 26
2020-03-14 11:14:37 -<==      Total: 10
2020-03-14 11:14:37 -耗时 : 26
2020-03-14 11:14:37 -<==      Total: 5
2020-03-14 11:14:37 -耗时 : 29
2020-03-14 11:14:44 -此处进行解密+验签+身份验证
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:44 -此处进行解密+验签+身份验证
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:44 -此处进行解密+验签+身份验证
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:44 -此处进行解密+验签+身份验证
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:44 -此处进行解密+验签+身份验证
2020-03-14 11:14:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:14:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type='epos' 
2020-03-14 11:14:44 -==> Parameters: 
2020-03-14 11:14:44 -<==      Total: 1
2020-03-14 11:14:44 -耗时 : 11
2020-03-14 11:14:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:14:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:14:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:14:50 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 11:14:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:14:50 -==> Parameters: 1960(String)
2020-03-14 11:14:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:14:50 -<==      Total: 0
2020-03-14 11:14:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:09 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:09 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:15:12 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:15:12 -此处进行解密+验签+身份验证
2020-03-14 11:15:12 -此处进行解密+验签+身份验证
2020-03-14 11:15:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:12 -<==      Total: 0
2020-03-14 11:15:12 -<==      Total: 0
2020-03-14 11:15:12 -耗时 : 22098
2020-03-14 11:15:12 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:15:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:12 -耗时 : 22099
2020-03-14 11:15:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:13 -<==      Total: 0
2020-03-14 11:15:14 -耗时 : 23363
2020-03-14 11:15:33 -耗时 : 49483
2020-03-14 11:15:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 11:15:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 11:15:33 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 11:15:33 -==> Parameters: 571(String)
2020-03-14 11:15:33 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 11:15:33 -==> Parameters: 571(String)
2020-03-14 11:15:33 -<==      Total: 10
2020-03-14 11:15:33 -耗时 : 11
2020-03-14 11:15:33 -<==      Total: 1
2020-03-14 11:15:33 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 11:15:33 -==> Parameters: 571(String)
2020-03-14 11:15:33 -<==      Total: 1
2020-03-14 11:15:33 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:15:33 -==> Parameters: 571(String)
2020-03-14 11:15:33 -<==      Total: 1
2020-03-14 11:15:33 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 11:15:33 -==> Parameters: 571(String)
2020-03-14 11:15:33 -<==      Total: 0
2020-03-14 11:15:33 -耗时 : 61
2020-03-14 11:15:40 -此处进行解密+验签+身份验证
2020-03-14 11:15:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:40 -此处进行解密+验签+身份验证
2020-03-14 11:15:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 11:15:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 11:15:40 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1c489867 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 11:15:40 -==> Parameters: 571(String)
2020-03-14 11:15:40 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3bf36486 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:40 -<==      Total: 1
2020-03-14 11:15:40 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 11:15:40 -==> Parameters: 571(String)
2020-03-14 11:15:40 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@63a0483f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:40 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@470fc7d7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:40 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 11:15:40 -==> Parameters: 571(String)
2020-03-14 11:15:40 -<==      Total: 1
2020-03-14 11:15:40 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:15:40 -==> Parameters: 571(String)
2020-03-14 11:15:40 -<==      Total: 10
2020-03-14 11:15:40 -耗时 : 38
2020-03-14 11:15:40 -<==      Total: 1
2020-03-14 11:15:40 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 11:15:40 -==> Parameters: 571(String)
2020-03-14 11:15:40 -<==      Total: 0
2020-03-14 11:15:40 -耗时 : 58
2020-03-14 11:15:45 -此处进行解密+验签+身份验证
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:45 -此处进行解密+验签+身份验证
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:15:45 -此处进行解密+验签+身份验证
2020-03-14 11:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:46 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type is null 
2020-03-14 11:15:46 -==> Parameters: 
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:46 -此处进行解密+验签+身份验证
2020-03-14 11:15:46 -此处进行解密+验签+身份验证
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:46 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 11:15:46 -==> Parameters: 1960(String)
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:46 -<==      Total: 1
2020-03-14 11:15:46 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:15:46 -==> Parameters: 1960(String)
2020-03-14 11:15:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:46 -<==      Total: 1
2020-03-14 11:15:46 -耗时 : 1100
2020-03-14 11:15:46 -<==      Total: 1
2020-03-14 11:15:46 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1960 and pos_type='epos' 
2020-03-14 11:15:46 -==> Parameters: 
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:15:46 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:46 -<==      Total: 1
2020-03-14 11:15:46 -耗时 : 1117
2020-03-14 11:15:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:46 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:46 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:15:46 -<==      Total: 10
2020-03-14 11:15:46 -耗时 : 26
2020-03-14 11:15:46 -<==      Total: 5
2020-03-14 11:15:46 -耗时 : 17
2020-03-14 11:15:46 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2db78ed2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:46 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:46 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:15:46 -<==      Total: 5
2020-03-14 11:15:46 -耗时 : 32
2020-03-14 11:15:50 -此处进行解密+验签+身份验证
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:50 -此处进行解密+验签+身份验证
2020-03-14 11:15:50 -此处进行解密+验签+身份验证
2020-03-14 11:15:50 -此处进行解密+验签+身份验证
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:50 -此处进行解密+验签+身份验证
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:15:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:15:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:15:52 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-14 11:15:52 -==> Parameters: 1960(String)
2020-03-14 11:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:52 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type='epos' 
2020-03-14 11:15:52 -==> Parameters: 
2020-03-14 11:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:15:52 -<==      Total: 0
2020-03-14 11:15:52 -耗时 : 1644
2020-03-14 11:15:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:52 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:15:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7b5214d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:52 -<==      Total: 0
2020-03-14 11:15:52 -耗时 : 20
2020-03-14 11:15:52 -<==      Total: 1
2020-03-14 11:15:52 -耗时 : 20
2020-03-14 11:15:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@72d9ee00 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:52 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:15:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5b810e7e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 11:15:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:15:52 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:15:52 -<==      Total: 0
2020-03-14 11:15:52 -耗时 : 30
2020-03-14 11:15:52 -<==      Total: 0
2020-03-14 11:15:52 -耗时 : 34
2020-03-14 11:16:05 -此处进行解密+验签+身份验证
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:05 -此处进行解密+验签+身份验证
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:05 -此处进行解密+验签+身份验证
2020-03-14 11:16:05 -此处进行解密+验签+身份验证
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:16:05 -此处进行解密+验签+身份验证
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:16:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:16:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:16:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:16:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:16:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1960
2020-03-14 11:16:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:16:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1960 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1960 and cre_month=202003 and pos_type is null 
2020-03-14 11:16:07 -==> Parameters: 
2020-03-14 11:16:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1960 , return
2020-03-14 11:16:07 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-14 11:16:07 -==> Parameters: 1960(String)
2020-03-14 11:16:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-14 11:16:07 -==> Parameters: 1960(String), 1960(String), 0(String)
2020-03-14 11:16:07 -<==      Total: 1
2020-03-14 11:16:07 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 11:16:07 -==> Parameters: 1960(String)
2020-03-14 11:16:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-14 11:16:07 -==> Parameters: 1960(String), 1960(String), 1(String)
2020-03-14 11:16:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-14 11:16:07 -==> Parameters: 1960(String), 1960(String)
2020-03-14 11:16:07 -<==      Total: 1
2020-03-14 11:16:07 -耗时 : 1938
2020-03-14 11:16:07 -<==      Total: 1
2020-03-14 11:16:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1960 and pos_type='epos' 
2020-03-14 11:16:07 -==> Parameters: 
2020-03-14 11:16:07 -<==      Total: 10
2020-03-14 11:16:07 -耗时 : 1941
2020-03-14 11:16:07 -<==      Total: 5
2020-03-14 11:16:07 -耗时 : 1947
2020-03-14 11:16:07 -<==      Total: 5
2020-03-14 11:16:07 -耗时 : 1951
2020-03-14 11:16:07 -<==      Total: 1
2020-03-14 11:16:07 -耗时 : 1954
2020-03-14 11:16:12 -此处进行解密+验签+身份验证
2020-03-14 11:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:16:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-14 11:16:12 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, DATE_FORMAT(t1.act_date, '%Y-%m-%d') AS act_date, t1.cash_back_status, t.is_reward from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-14 11:16:12 -==> Parameters: 571(String), 000006027281629089(String)
2020-03-14 11:16:12 -<==      Total: 1
2020-03-14 11:16:12 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-14 11:16:12 -==> Parameters: 000006027281629089(String)
2020-03-14 11:16:12 -<==      Total: 0
2020-03-14 11:16:12 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-14 11:16:12 -==> Parameters: 000006027281629089(String)
2020-03-14 11:16:12 -<==      Total: 1
2020-03-14 11:16:12 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-14 11:16:12 -==> Parameters: 000006027281629089(String), 571(String)
2020-03-14 11:16:12 -<==      Total: 1
2020-03-14 11:16:12 -耗时 : 35
2020-03-14 11:16:18 -此处进行解密+验签+身份验证
2020-03-14 11:16:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:16:18 -解密异常：{sn=000006027281629089, token=571|E864GP4A3OXKET45YA41KKCBPD26PRET, sign=AA057B8955CC9F23AF650CEC3C8D48EA}
2020-03-14 11:16:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-03-14 11:16:18 -耗时 : 0
2020-03-14 11:16:18 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-14 11:16:18 -Reconnected to 120.25.164.176:10379
2020-03-14 11:17:47 -此处进行解密+验签+身份验证
2020-03-14 11:17:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:17:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:17:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-03-14 11:18:06 -==>  Preparing: select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? 
2020-03-14 11:18:06 -==> Parameters: 571(String), 000006027281629089(String)
2020-03-14 11:18:06 -<==      Total: 4
2020-03-14 11:18:52 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m11s167ms302µs590ns).
2020-03-14 11:18:52 -MerchantManageServiceImpl -- getTraditionalPosDetail方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPosTradeDetail(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getTraditionalPosTradeDetail(MerchantManageServiceImpl.java:360)
	at com.example.longecological.controller.merchant.MerchantManageController.getTraditionalPosTradeDetail(MerchantManageController.java:167)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor100.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$c4cee04b.getTraditionalPosTradeDetail(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 11:18:52 -耗时 : 64888
2020-03-14 11:20:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 11:20:17 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 11:20:17 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 11:20:17 -Shutting down Quartz Scheduler
2020-03-14 11:20:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 11:20:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 11:20:17 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 11:20:17 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 11:20:17 -HikariPool-1 - Shutdown initiated...
2020-03-14 11:20:17 -HikariPool-1 - Shutdown completed.
2020-03-14 11:20:33 -Starting LongEcologicalApplication on PC-201905161910 with PID 18072 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 11:20:33 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 11:20:33 -No active profile set, falling back to default profiles: default
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 11:20:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 11:20:34 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 11:20:34 -Finished Spring Data repository scanning in 89ms. Found 0 repository interfaces.
2020-03-14 11:20:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 11:20:34 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 11:20:35 -Finished Spring Data repository scanning in 39ms. Found 0 repository interfaces.
2020-03-14 11:20:35 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$fa28dcc7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 11:20:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f4acc167] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 11:20:35 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 11:20:35 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 11:20:35 -Starting service [Tomcat]
2020-03-14 11:20:35 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 11:20:35 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 11:20:36 -Initializing Spring embedded WebApplicationContext
2020-03-14 11:20:36 -Root WebApplicationContext: initialization completed in 2768 ms
2020-03-14 11:20:36 -Filter xssFilter was not registered (disabled)
2020-03-14 11:20:36 -HikariPool-1 - Starting...
2020-03-14 11:20:36 -HikariPool-1 - Start completed.
2020-03-14 11:20:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 11:20:36 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 11:20:36 -HHH000206: hibernate.properties not found
2020-03-14 11:20:37 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 11:20:37 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 11:20:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 11:20:37 -Using default implementation for ThreadExecutor
2020-03-14 11:20:37 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 11:20:37 -Quartz Scheduler v.2.3.0 created.
2020-03-14 11:20:37 -RAMJobStore initialized.
2020-03-14 11:20:37 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 11:20:37 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 11:20:37 -Quartz scheduler version: 2.3.0
2020-03-14 11:20:37 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@71469e01
2020-03-14 11:20:38 -STAET TaskExecutorConfig
2020-03-14 11:20:38 -Initializing ExecutorService
2020-03-14 11:20:38 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 11:20:38 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 11:20:38 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 11:20:39 -Initializing ExecutorService 'taskScheduler'
2020-03-14 11:20:39 -Starting Quartz Scheduler now
2020-03-14 11:20:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 11:20:39 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 11:20:39 -Using a shared selector for servlet write/read
2020-03-14 11:20:39 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 11:20:39 -Started LongEcologicalApplication in 7.072 seconds (JVM running for 8.169)
2020-03-14 11:20:47 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 11:20:47 -Initializing Servlet 'dispatcherServlet'
2020-03-14 11:20:47 -Completed initialization in 13 ms
2020-03-14 11:20:47 -此处进行解密+验签+身份验证
2020-03-14 11:20:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:20:47 -Starting without optional epoll library
2020-03-14 11:20:47 -Starting without optional kqueue library
2020-03-14 11:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:20:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-03-14 11:20:50 -==>  Preparing: select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? 
2020-03-14 11:20:50 -==> Parameters: 571(String), 000006027281629089(String)
2020-03-14 11:20:50 -<==      Total: 4
2020-03-14 11:20:53 -耗时 : 5150
2020-03-14 11:21:06 -此处进行解密+验签+身份验证
2020-03-14 11:21:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:21:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:21:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-03-14 11:21:06 -==>  Preparing: select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? 
2020-03-14 11:21:06 -==> Parameters: 571(String), 000006027281629089(String)
2020-03-14 11:21:06 -<==      Total: 4
2020-03-14 11:21:06 -耗时 : 13
2020-03-14 11:27:08 -此处进行解密+验签+身份验证
2020-03-14 11:27:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 11:27:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 11:27:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosTradeDetail
2020-03-14 11:27:08 -==>  Preparing: select DATE_FORMAT( STR_TO_DATE( trans_time, '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) as trans_time,trans_amount,benefit_money from t_user_trapos_share_benefit_record where user_id=? and sn=? 
2020-03-14 11:27:08 -==> Parameters: 571(String), 000006027281629089(String)
2020-03-14 11:27:08 -<==      Total: 4
2020-03-14 11:27:08 -耗时 : 15
2020-03-14 15:41:01 -此处进行解密+验签+身份验证
2020-03-14 15:41:01 -此处进行解密+验签+身份验证
2020-03-14 15:41:01 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 15:41:01 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 15:41:01 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$96729071.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$ded4908b.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 15:41:01 -耗时 : 66
2020-03-14 15:41:01 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-14 15:41:01 -Reconnected to 120.25.164.176:10379
2020-03-14 15:41:02 -此处进行解密+验签+身份验证
2020-03-14 15:41:02 -解密：
2020-03-14 15:41:02 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 15:41:02 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:41:02 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 15:41:02 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5fd41777 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@78b22d00 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4105189b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3e95d063 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4ca5df36 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2596218f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@77f53e22 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4c3e3466 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5c38f34a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@761876fc (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 15:41:02 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:41:02 -==> Parameters: 04(String), 04(String)
2020-03-14 15:41:02 -<==      Total: 1
2020-03-14 15:41:02 -耗时 : 130
2020-03-14 15:41:02 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 15:41:02 -==> Parameters: 571(String)
2020-03-14 15:41:02 -<==      Total: 1
2020-03-14 15:41:02 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 15:41:02 -==> Parameters: 25(String)
2020-03-14 15:41:02 -<==      Total: 1
2020-03-14 15:41:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:41:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:41:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:41:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:41:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:41:02 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:41:02 -耗时 : 215
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:41:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:41:06 -==> Parameters: 571(String)
2020-03-14 15:41:06 -<==      Total: 1
2020-03-14 15:41:06 -耗时 : 36
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -解密：
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:41:06 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:41:06 -==> Parameters: 01(String), 01(String)
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -<==      Total: 6
2020-03-14 15:41:06 -耗时 : 16
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -此处进行解密+验签+身份验证
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:41:06 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 15:41:06 -==> Parameters: 571(String)
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:41:06 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 15:41:06 -==> Parameters: 
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:41:06 -<==      Total: 2
2020-03-14 15:41:06 -耗时 : 21
2020-03-14 15:41:06 -<==      Total: 3
2020-03-14 15:41:06 -耗时 : 25
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:41:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:41:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:41:06 -==> Parameters: 571(String)
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:41:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:41:06 -<==      Total: 1
2020-03-14 15:41:06 -耗时 : 19
2020-03-14 15:41:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:41:06 -==> Parameters: 571(String), 571(String)
2020-03-14 15:41:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:41:06 -==> Parameters: 571(String), 571(String)
2020-03-14 15:41:06 -<==      Total: 1
2020-03-14 15:41:06 -<==      Total: 1
2020-03-14 15:41:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:06 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:41:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:06 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:41:06 -<==      Total: 2
2020-03-14 15:41:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:06 -<==      Total: 2
2020-03-14 15:41:06 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:41:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:06 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:41:06 -<==    Updates: 2
2020-03-14 15:41:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:41:06 -==> Parameters: 571(String), 571(String)
2020-03-14 15:41:06 -<==    Updates: 2
2020-03-14 15:41:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:41:06 -==> Parameters: 571(String), 571(String)
2020-03-14 15:41:06 -<==      Total: 1
2020-03-14 15:41:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:06 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:41:06 -<==      Total: 1
2020-03-14 15:41:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:06 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:41:06 -<==      Total: 2
2020-03-14 15:41:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:07 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:41:07 -<==      Total: 2
2020-03-14 15:41:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:07 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:41:07 -<==    Updates: 2
2020-03-14 15:41:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:41:07 -==> Parameters: 
2020-03-14 15:41:07 -<==    Updates: 2
2020-03-14 15:41:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:41:07 -==> Parameters: 
2020-03-14 15:41:07 -<==      Total: 1
2020-03-14 15:41:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:07 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:41:07 -<==      Total: 1
2020-03-14 15:41:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:07 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:41:07 -<==      Total: 2
2020-03-14 15:41:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:07 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:41:07 -<==      Total: 2
2020-03-14 15:41:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:07 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:41:07 -<==    Updates: 2
2020-03-14 15:41:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:41:07 -==> Parameters: 571(String), 571(String)
2020-03-14 15:41:07 -<==      Total: 1
2020-03-14 15:41:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:07 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:41:07 -<==    Updates: 2
2020-03-14 15:41:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:41:07 -==> Parameters: 571(String), 571(String)
2020-03-14 15:41:07 -<==      Total: 2
2020-03-14 15:41:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:07 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:41:07 -<==      Total: 1
2020-03-14 15:41:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:41:07 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:41:07 -<==    Updates: 2
2020-03-14 15:41:07 -耗时 : 204
2020-03-14 15:41:07 -<==      Total: 2
2020-03-14 15:41:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:41:07 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:41:07 -<==    Updates: 2
2020-03-14 15:41:07 -耗时 : 239
2020-03-14 15:41:32 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.example.longecological.entity.R com.example.longecological.controller.system.SysAppImgController.getAppImgList(java.util.Map<java.lang.String, java.lang.Object>)]
2020-03-14 15:41:33 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.example.longecological.entity.R com.example.longecological.controller.system.SysAppImgController.getAppImgList(java.util.Map<java.lang.String, java.lang.Object>)]
2020-03-14 15:42:17 -此处进行解密+验签+身份验证
2020-03-14 15:42:17 -此处进行解密+验签+身份验证
2020-03-14 15:42:17 -解密：
2020-03-14 15:42:17 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 15:42:17 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:42:17 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 15:42:17 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:42:17 -==> Parameters: 04(String), 04(String)
2020-03-14 15:42:17 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 15:42:17 -耗时 : 17
2020-03-14 15:42:17 -<==      Total: 1
2020-03-14 15:42:17 -耗时 : 24
2020-03-14 15:42:17 -此处进行解密+验签+身份验证
2020-03-14 15:42:17 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 15:42:17 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 15:42:17 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 15:42:17 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 15:42:17 -==> Parameters: 571(String)
2020-03-14 15:42:17 -<==      Total: 1
2020-03-14 15:42:17 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 15:42:17 -==> Parameters: 25(String)
2020-03-14 15:42:17 -<==      Total: 1
2020-03-14 15:42:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:42:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:42:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:42:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:42:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:42:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:42:17 -耗时 : 100
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:42:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:42:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:42:22 -==> Parameters: 571(String)
2020-03-14 15:42:22 -<==      Total: 1
2020-03-14 15:42:22 -耗时 : 24
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -解密：
2020-03-14 15:42:22 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:42:22 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:42:22 -==> Parameters: 01(String), 01(String)
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:42:22 -<==      Total: 6
2020-03-14 15:42:22 -耗时 : 15
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -此处进行解密+验签+身份验证
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:42:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 15:42:22 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 15:42:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:42:22 -==> Parameters: 571(String)
2020-03-14 15:42:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:42:22 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 15:42:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:42:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 15:42:29 -==> Parameters: 
2020-03-14 15:42:29 -<==      Total: 2
2020-03-14 15:42:29 -耗时 : 6556
2020-03-14 15:42:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:42:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:42:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:42:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:42:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:42:29 -==> Parameters: 571(String)
2020-03-14 15:42:29 -<==      Total: 3
2020-03-14 15:42:29 -耗时 : 6562
2020-03-14 15:42:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:42:34 -<==      Total: 1
2020-03-14 15:42:39 -耗时 : 4807
2020-03-14 15:42:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:42:39 -==> Parameters: 571(String), 571(String)
2020-03-14 15:42:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:42:39 -<==      Total: 1
2020-03-14 15:42:39 -==> Parameters: 571(String), 571(String)
2020-03-14 15:42:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:39 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:42:39 -<==      Total: 2
2020-03-14 15:42:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:39 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:42:39 -<==      Total: 1
2020-03-14 15:42:42 -<==    Updates: 2
2020-03-14 15:42:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:42:42 -==> Parameters: 571(String), 571(String)
2020-03-14 15:42:42 -<==      Total: 1
2020-03-14 15:42:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:42 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:42:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:42 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:42:42 -<==      Total: 2
2020-03-14 15:42:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:42 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:42:42 -<==      Total: 2
2020-03-14 15:42:44 -<==    Updates: 2
2020-03-14 15:42:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:42:44 -==> Parameters: 
2020-03-14 15:42:45 -<==      Total: 1
2020-03-14 15:42:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:45 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:42:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:45 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:42:45 -<==      Total: 2
2020-03-14 15:42:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:45 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:42:45 -<==    Updates: 2
2020-03-14 15:42:46 -<==    Updates: 2
2020-03-14 15:42:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:42:47 -==> Parameters: 571(String), 571(String)
2020-03-14 15:42:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:42:47 -==> Parameters: 571(String), 571(String)
2020-03-14 15:42:47 -<==      Total: 1
2020-03-14 15:42:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:47 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:42:47 -<==      Total: 2
2020-03-14 15:42:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:47 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:42:47 -<==      Total: 1
2020-03-14 15:42:48 -<==    Updates: 2
2020-03-14 15:42:48 -耗时 : 19322
2020-03-14 15:42:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:49 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:42:49 -<==      Total: 2
2020-03-14 15:42:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:52 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:42:52 -<==    Updates: 2
2020-03-14 15:42:54 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:42:54 -==> Parameters: 
2020-03-14 15:42:54 -<==      Total: 1
2020-03-14 15:42:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:42:56 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:42:56 -<==      Total: 2
2020-03-14 15:42:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:42:59 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:42:59 -<==    Updates: 2
2020-03-14 15:43:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:43:03 -==> Parameters: 571(String), 571(String)
2020-03-14 15:43:03 -<==      Total: 1
2020-03-14 15:43:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:43:04 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:43:04 -<==      Total: 2
2020-03-14 15:43:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:43:06 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:43:06 -<==    Updates: 2
2020-03-14 15:43:12 -耗时 : 49851
2020-03-14 15:43:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 15:43:16 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 15:43:16 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 15:43:16 -Shutting down Quartz Scheduler
2020-03-14 15:43:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 15:43:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 15:43:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 15:43:16 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 15:43:16 -HikariPool-1 - Shutdown initiated...
2020-03-14 15:43:16 -HikariPool-1 - Shutdown completed.
2020-03-14 15:44:46 -Starting LongEcologicalApplication on PC-201905161910 with PID 19572 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 15:44:46 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 15:44:46 -No active profile set, falling back to default profiles: default
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 15:44:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 15:44:47 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 15:44:47 -Finished Spring Data repository scanning in 65ms. Found 0 repository interfaces.
2020-03-14 15:44:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 15:44:47 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 15:44:47 -Finished Spring Data repository scanning in 45ms. Found 0 repository interfaces.
2020-03-14 15:44:47 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$6077478f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 15:44:47 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5afb2c2f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 15:44:48 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 15:44:48 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 15:44:48 -Starting service [Tomcat]
2020-03-14 15:44:48 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 15:44:48 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 15:44:48 -Initializing Spring embedded WebApplicationContext
2020-03-14 15:44:48 -Root WebApplicationContext: initialization completed in 2151 ms
2020-03-14 15:44:48 -Filter xssFilter was not registered (disabled)
2020-03-14 15:44:48 -HikariPool-1 - Starting...
2020-03-14 15:44:49 -HikariPool-1 - Start completed.
2020-03-14 15:44:49 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 15:44:49 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 15:44:49 -HHH000206: hibernate.properties not found
2020-03-14 15:44:49 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 15:44:49 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 15:44:49 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 15:44:50 -Using default implementation for ThreadExecutor
2020-03-14 15:44:50 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 15:44:50 -Quartz Scheduler v.2.3.0 created.
2020-03-14 15:44:50 -RAMJobStore initialized.
2020-03-14 15:44:50 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 15:44:50 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 15:44:50 -Quartz scheduler version: 2.3.0
2020-03-14 15:44:50 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@663622b1
2020-03-14 15:44:51 -STAET TaskExecutorConfig
2020-03-14 15:44:51 -Initializing ExecutorService
2020-03-14 15:44:51 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 15:44:51 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 15:44:51 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 15:44:52 -Initializing ExecutorService 'taskScheduler'
2020-03-14 15:44:52 -Starting Quartz Scheduler now
2020-03-14 15:44:52 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 15:44:52 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 15:44:52 -Using a shared selector for servlet write/read
2020-03-14 15:44:52 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 15:44:52 -Started LongEcologicalApplication in 6.676 seconds (JVM running for 7.809)
2020-03-14 15:44:59 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 15:44:59 -Initializing Servlet 'dispatcherServlet'
2020-03-14 15:44:59 -Completed initialization in 33 ms
2020-03-14 15:44:59 -此处进行解密+验签+身份验证
2020-03-14 15:44:59 -此处进行解密+验签+身份验证
2020-03-14 15:44:59 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 15:44:59 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 15:44:59 -Starting without optional epoll library
2020-03-14 15:44:59 -Starting without optional kqueue library
2020-03-14 15:45:00 -解密：
2020-03-14 15:45:00 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:45:00 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:45:00 -==> Parameters: 04(String), 04(String)
2020-03-14 15:45:00 -<==      Total: 1
2020-03-14 15:45:00 -耗时 : 67
2020-03-14 15:45:00 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 15:45:00 -耗时 : 827
2020-03-14 15:45:00 -此处进行解密+验签+身份验证
2020-03-14 15:45:00 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 15:45:00 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 15:45:00 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 15:45:00 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 15:45:00 -==> Parameters: 571(String)
2020-03-14 15:45:00 -<==      Total: 1
2020-03-14 15:45:00 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 15:45:00 -==> Parameters: 25(String)
2020-03-14 15:45:00 -<==      Total: 1
2020-03-14 15:45:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:45:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:45:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:45:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:45:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:45:00 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:45:00 -耗时 : 88
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:45:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:45:04 -==> Parameters: 571(String)
2020-03-14 15:45:04 -<==      Total: 1
2020-03-14 15:45:04 -耗时 : 25
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -解密：
2020-03-14 15:45:04 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:45:04 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:04 -==> Parameters: 01(String), 01(String)
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:04 -<==      Total: 6
2020-03-14 15:45:04 -耗时 : 15
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:04 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 15:45:04 -==> Parameters: 571(String)
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:04 -此处进行解密+验签+身份验证
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:04 -<==      Total: 2
2020-03-14 15:45:04 -耗时 : 17
2020-03-14 15:45:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:45:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:45:04 -==> Parameters: 571(String)
2020-03-14 15:45:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:45:04 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 15:45:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:45:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:45:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:45:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:45:10 -<==      Total: 1
2020-03-14 15:45:10 -耗时 : 5864
2020-03-14 15:45:10 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 15:45:10 -==> Parameters: 
2020-03-14 15:45:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:45:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:10 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:11 -<==      Total: 1
2020-03-14 15:45:11 -<==      Total: 3
2020-03-14 15:45:11 -耗时 : 7114
2020-03-14 15:45:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:11 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:45:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:11 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:11 -<==      Total: 2
2020-03-14 15:45:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:11 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:45:11 -<==      Total: 1
2020-03-14 15:45:11 -<==    Updates: 2
2020-03-14 15:45:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:45:12 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:12 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:45:12 -<==      Total: 1
2020-03-14 15:45:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:12 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:45:12 -<==      Total: 2
2020-03-14 15:45:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:12 -<==      Total: 2
2020-03-14 15:45:12 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:45:12 -<==    Updates: 2
2020-03-14 15:45:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:45:13 -==> Parameters: 
2020-03-14 15:45:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:13 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:45:13 -<==      Total: 1
2020-03-14 15:45:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:13 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:45:13 -<==    Updates: 2
2020-03-14 15:45:14 -<==      Total: 2
2020-03-14 15:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:14 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:45:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:45:14 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:14 -<==    Updates: 2
2020-03-14 15:45:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:14 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:14 -<==      Total: 1
2020-03-14 15:45:14 -<==      Total: 1
2020-03-14 15:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:14 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:14 -<==      Total: 2
2020-03-14 15:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:14 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:45:14 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:45:14 -<==    Updates: 2
2020-03-14 15:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:14 -==> Parameters: appImgFlag(String), 571(String)
2020-03-14 15:45:14 -<==      Total: 2
2020-03-14 15:45:15 -<==      Total: 0
2020-03-14 15:45:16 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 15:45:16 -==> Parameters: 571(String), appImgFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 15:45:16 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:16 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:45:16 -<==    Updates: 1
2020-03-14 15:45:16 -耗时 : 5836
2020-03-14 15:45:16 -<==    Updates: 2
2020-03-14 15:45:16 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:45:16 -==> Parameters: 
2020-03-14 15:45:16 -<==      Total: 1
2020-03-14 15:45:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:17 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:45:17 -<==      Total: 2
2020-03-14 15:45:19 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:19 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:45:19 -<==    Updates: 2
2020-03-14 15:45:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:20 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:20 -<==      Total: 1
2020-03-14 15:45:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:20 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:45:20 -<==      Total: 2
2020-03-14 15:45:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:22 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:45:22 -<==    Updates: 2
2020-03-14 15:45:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:24 -==> Parameters: appImgFlag(String), 571(String)
2020-03-14 15:45:24 -<==      Total: 1
2020-03-14 15:45:28 -耗时 : 23572
2020-03-14 15:45:42 -此处进行解密+验签+身份验证
2020-03-14 15:45:42 -此处进行解密+验签+身份验证
2020-03-14 15:45:42 -解密：
2020-03-14 15:45:42 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 15:45:42 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:45:42 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 15:45:42 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 15:45:42 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:45:42 -==> Parameters: 04(String), 04(String)
2020-03-14 15:45:42 -耗时 : 10
2020-03-14 15:45:42 -<==      Total: 1
2020-03-14 15:45:42 -耗时 : 24
2020-03-14 15:45:42 -此处进行解密+验签+身份验证
2020-03-14 15:45:42 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-14 15:45:42 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 15:45:42 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-14 15:45:42 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 15:45:42 -==> Parameters: 571(String)
2020-03-14 15:45:42 -<==      Total: 1
2020-03-14 15:45:42 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 15:45:42 -==> Parameters: 25(String)
2020-03-14 15:45:42 -<==      Total: 1
2020-03-14 15:45:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:45:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:45:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:45:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:45:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 15:45:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 15:45:42 -耗时 : 81
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:45:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:45:47 -==> Parameters: 571(String)
2020-03-14 15:45:47 -<==      Total: 1
2020-03-14 15:45:47 -耗时 : 23
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -解密：
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:45:47 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:47 -==> Parameters: 01(String), 01(String)
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:47 -<==      Total: 6
2020-03-14 15:45:47 -耗时 : 14
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 15:45:47 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 15:45:47 -==> Parameters: 571(String)
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -此处进行解密+验签+身份验证
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:45:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:45:47 -<==      Total: 2
2020-03-14 15:45:47 -耗时 : 16
2020-03-14 15:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:45:50 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 15:45:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:45:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:45:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:45:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:45:50 -==> Parameters: 571(String)
2020-03-14 15:45:50 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 15:45:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:50 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:50 -==> Parameters: 
2020-03-14 15:45:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:50 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:50 -<==      Total: 1
2020-03-14 15:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:50 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:45:50 -<==      Total: 1
2020-03-14 15:45:50 -耗时 : 21
2020-03-14 15:45:50 -<==      Total: 1
2020-03-14 15:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:50 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:45:50 -<==      Total: 3
2020-03-14 15:45:50 -耗时 : 26
2020-03-14 15:45:50 -<==      Total: 2
2020-03-14 15:45:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:50 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:45:50 -<==      Total: 2
2020-03-14 15:45:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:50 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:45:50 -<==    Updates: 2
2020-03-14 15:45:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:45:50 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:50 -<==    Updates: 2
2020-03-14 15:45:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:45:50 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:50 -<==      Total: 1
2020-03-14 15:45:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:50 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 2
2020-03-14 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:51 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:45:51 -<==    Updates: 2
2020-03-14 15:45:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:45:51 -==> Parameters: 
2020-03-14 15:45:51 -<==      Total: 2
2020-03-14 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:51 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 2
2020-03-14 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:51 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:45:51 -<==    Updates: 2
2020-03-14 15:45:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:45:51 -==> Parameters: 
2020-03-14 15:45:51 -<==    Updates: 2
2020-03-14 15:45:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:51 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 2
2020-03-14 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:51 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:45:51 -<==      Total: 2
2020-03-14 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:51 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:45:51 -<==    Updates: 2
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: appImgFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -耗时 : 127
2020-03-14 15:45:51 -<==    Updates: 2
2020-03-14 15:45:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:45:51 -==> Parameters: 571(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 2
2020-03-14 15:45:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:45:51 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:45:51 -<==    Updates: 2
2020-03-14 15:45:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:45:51 -==> Parameters: appImgFlag(String), 571(String)
2020-03-14 15:45:51 -<==      Total: 1
2020-03-14 15:45:51 -耗时 : 3390
2020-03-14 15:46:03 -此处进行解密+验签+身份验证
2020-03-14 15:46:03 -解密：
2020-03-14 15:46:03 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:46:03 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:46:03 -==> Parameters: 02(String), 02(String)
2020-03-14 15:46:03 -此处进行解密+验签+身份验证
2020-03-14 15:46:03 -解密：
2020-03-14 15:46:03 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 15:46:03 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 15:46:03 -==> Parameters: 03(String), 03(String)
2020-03-14 15:46:03 -<==      Total: 6
2020-03-14 15:46:03 -耗时 : 22
2020-03-14 15:46:03 -<==      Total: 10
2020-03-14 15:46:03 -耗时 : 18
2020-03-14 15:46:05 -此处进行解密+验签+身份验证
2020-03-14 15:46:05 -此处进行解密+验签+身份验证
2020-03-14 15:46:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:46:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 15:46:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:46:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 15:46:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 15:46:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 15:46:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-14 15:46:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 15:46:05 -==> Parameters: 571(String)
2020-03-14 15:46:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-14 15:46:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:46:05 -==> Parameters: 571(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 1
2020-03-14 15:46:05 -耗时 : 22
2020-03-14 15:46:05 -<==      Total: 1
2020-03-14 15:46:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:46:05 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 2
2020-03-14 15:46:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:46:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-14 15:46:05 -<==    Updates: 2
2020-03-14 15:46:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 15:46:05 -==> Parameters: 571(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 1
2020-03-14 15:46:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:46:05 -==> Parameters: recallFlag(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 2
2020-03-14 15:46:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:46:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-14 15:46:05 -<==    Updates: 2
2020-03-14 15:46:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 15:46:05 -==> Parameters: 
2020-03-14 15:46:05 -<==      Total: 1
2020-03-14 15:46:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:46:05 -==> Parameters: collegeFlag(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 2
2020-03-14 15:46:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:46:05 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-14 15:46:05 -<==    Updates: 2
2020-03-14 15:46:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 15:46:05 -==> Parameters: 571(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 1
2020-03-14 15:46:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:46:05 -==> Parameters: cardFlag(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 2
2020-03-14 15:46:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 15:46:05 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-14 15:46:05 -<==    Updates: 2
2020-03-14 15:46:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 15:46:05 -==> Parameters: appImgFlag(String), 571(String)
2020-03-14 15:46:05 -<==      Total: 1
2020-03-14 15:46:05 -耗时 : 194
2020-03-14 16:43:33 -此处进行解密+验签+身份验证
2020-03-14 16:43:33 -此处进行解密+验签+身份验证
2020-03-14 16:43:33 -解密：
2020-03-14 16:43:33 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 16:43:33 -解密：
2020-03-14 16:43:33 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@688f64b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@77c2350e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7ee0e5c1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@dda0b55 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2fdf58c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@77412c9b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@11cd0d38 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@e510d9d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4faa88b2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7cd1ae05 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 16:43:33 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 16:43:33 -==> Parameters: 03(String), 03(String)
2020-03-14 16:43:33 -<==      Total: 7
2020-03-14 16:43:33 -耗时 : 82
2020-03-14 16:43:33 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 16:43:33 -==> Parameters: 02(String), 02(String)
2020-03-14 16:43:33 -<==      Total: 6
2020-03-14 16:43:33 -耗时 : 88
2020-03-14 16:55:31 -此处进行解密+验签+身份验证
2020-03-14 16:55:31 -解密：
2020-03-14 16:55:31 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 16:55:31 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 16:55:31 -==> Parameters: 04(String), 04(String)
2020-03-14 16:55:31 -<==      Total: 0
2020-03-14 16:55:31 -耗时 : 10
2020-03-14 16:55:41 -此处进行解密+验签+身份验证
2020-03-14 16:55:41 -此处进行解密+验签+身份验证
2020-03-14 16:55:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 16:55:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-14 16:55:41 -解密异常：{token=571|E864GP4A3OXKET45YA41KKCBPD26PRET, sign=5CE119F83BDD2E6366D4A0E45A595D34}
2020-03-14 16:55:41 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 16:55:41 -耗时 : 0
2020-03-14 16:55:41 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-14 16:55:41 -Reconnected to 120.25.164.176:10379
2020-03-14 16:55:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-14 16:55:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 16:55:41 -耗时 : 1
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -解密：{"sys_user_account":"13302466111","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"6F95CAA124E1D77B5417D4398B178A66","version_no":"450000000145206","login_type":"account"}
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5f91c5c4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@75bebd57 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7956792b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@28383c20 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@c65b48e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@63947ff8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@48beb4e0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@63332b99 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5876f15a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@18dd3e13 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:05:42 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-14 17:05:42 -==> Parameters: 13302466111(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-14 17:05:42 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200314(String), 170542(String), 1770(Integer)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 17:05:42 -==> Parameters: 25(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:05:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:05:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:05:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:05:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:05:42 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:05:42 -耗时 : 186
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:05:42 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-14 17:05:42 -==> Parameters: 1770(String)
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -解密：
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:05:42 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:05:42 -==> Parameters: 01(String), 01(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -<==      Total: 7
2020-03-14 17:05:42 -耗时 : 9
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_1770,save content:null
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:05:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:05:42 -==> Parameters: 1770(String)
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -此处进行解密+验签+身份验证
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -耗时 : 8
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 17:05:42 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:05:42 -==> Parameters: 
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 17:05:42 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 17:05:42 -==> Parameters: 1770(String)
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:05:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:05:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:05:42 -<==      Total: 3
2020-03-14 17:05:42 -==> Parameters: 1770(String)
2020-03-14 17:05:42 -耗时 : 8
2020-03-14 17:05:42 -<==      Total: 2
2020-03-14 17:05:42 -耗时 : 8
2020-03-14 17:05:42 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 17:05:42 -==> Parameters: 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -耗时 : 11
2020-03-14 17:05:42 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 17:05:42 -==> Parameters: 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1770,save content:{referer_id=null, parent_chain=null, user_tel=13302466111, id_card=411327198605104938, real_name=刘红瑶, algebra=1, cre_date=20190929, cre_time=161603, login_password=c12be3c4489d40e98cffb2b638fa780f, manager_id=25, pay_password=c12be3c4489d40e98cffb2b638fa780f, id=1770, auth_status=09, status=0}
2020-03-14 17:05:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:05:42 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:05:42 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1770,save content:{referer_id=null, parent_chain=null, user_tel=13302466111, id_card=411327198605104938, real_name=刘红瑶, algebra=1, cre_date=20190929, cre_time=161603, login_password=c12be3c4489d40e98cffb2b638fa780f, manager_id=25, pay_password=c12be3c4489d40e98cffb2b638fa780f, id=1770, auth_status=09, status=0}
2020-03-14 17:05:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:05:42 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), applyRateFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), applyRateFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:05:42 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:05:42 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:05:42 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==> Parameters: 1770(String), recallFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), recallFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:05:42 -==> Parameters: 
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:05:42 -==> Parameters: 
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), collegeFlag(String), 0(Integer), 15(Integer), 25(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), collegeFlag(String), 0(Integer), 15(Integer), 25(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:05:42 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:05:42 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), cardFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), cardFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:05:42 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), appImgFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==      Total: 0
2020-03-14 17:05:42 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:05:42 -==> Parameters: 1770(String), appImgFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -耗时 : 161
2020-03-14 17:05:42 -<==    Updates: 1
2020-03-14 17:05:42 -耗时 : 170
2020-03-14 17:06:09 -此处进行解密+验签+身份验证
2020-03-14 17:06:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:09 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-14 17:06:09 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-14 17:06:09 -==> Parameters: 1770(String)
2020-03-14 17:06:09 -<==      Total: 0
2020-03-14 17:06:09 -耗时 : 71
2020-03-14 17:06:10 -此处进行解密+验签+身份验证
2020-03-14 17:06:10 -此处进行解密+验签+身份验证
2020-03-14 17:06:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:06:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:06:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:06:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:06:10 -==> Parameters: 1770(String)
2020-03-14 17:06:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:06:10 -<==      Total: 1
2020-03-14 17:06:10 -耗时 : 11
2020-03-14 17:06:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:06:10 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 1
2020-03-14 17:06:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:10 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 2
2020-03-14 17:06:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:10 -==> Parameters: 0(Integer), 0(Integer), 1770(String), applyRateFlag(String)
2020-03-14 17:06:10 -<==    Updates: 2
2020-03-14 17:06:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:06:10 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 1
2020-03-14 17:06:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:10 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 2
2020-03-14 17:06:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:10 -==> Parameters: 0(Integer), 0(Integer), 1770(String), recallFlag(String)
2020-03-14 17:06:10 -<==    Updates: 2
2020-03-14 17:06:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:06:10 -==> Parameters: 
2020-03-14 17:06:10 -<==      Total: 1
2020-03-14 17:06:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:10 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 2
2020-03-14 17:06:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:10 -==> Parameters: 15(Integer), 15(Integer), 1770(String), collegeFlag(String)
2020-03-14 17:06:10 -<==    Updates: 2
2020-03-14 17:06:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:06:10 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 1
2020-03-14 17:06:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:10 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 2
2020-03-14 17:06:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:10 -==> Parameters: 0(Integer), 0(Integer), 1770(String), cardFlag(String)
2020-03-14 17:06:10 -<==    Updates: 2
2020-03-14 17:06:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:10 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:06:10 -<==      Total: 2
2020-03-14 17:06:10 -耗时 : 126
2020-03-14 17:06:12 -此处进行解密+验签+身份验证
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:12 -此处进行解密+验签+身份验证
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:12 -此处进行解密+验签+身份验证
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:12 -此处进行解密+验签+身份验证
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:12 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:06:12 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:06:12 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:06:12 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-14 17:06:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:06:12 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-14 17:06:12 -==> Parameters: 1770(String)
2020-03-14 17:06:12 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-14 17:06:12 -==> Parameters: 1770(String)
2020-03-14 17:06:12 -<==      Total: 0
2020-03-14 17:06:12 -耗时 : 13
2020-03-14 17:06:12 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-14 17:06:12 -==> Parameters: 25(String), 20200314(String)
2020-03-14 17:06:12 -<==      Total: 0
2020-03-14 17:06:12 -耗时 : 16
2020-03-14 17:06:12 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-14 17:06:12 -==> Parameters: 25(String), 20200314(String)
2020-03-14 17:06:12 -<==      Total: 0
2020-03-14 17:06:12 -耗时 : 46
2020-03-14 17:06:12 -<==      Total: 0
2020-03-14 17:06:12 -耗时 : 34
2020-03-14 17:06:13 -此处进行解密+验签+身份验证
2020-03-14 17:06:13 -此处进行解密+验签+身份验证
2020-03-14 17:06:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:13 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:06:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:06:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:06:13 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:06:13 -==> Parameters: 1770(String)
2020-03-14 17:06:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:06:13 -<==      Total: 1
2020-03-14 17:06:13 -耗时 : 11
2020-03-14 17:06:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:06:13 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 1
2020-03-14 17:06:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:13 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 2
2020-03-14 17:06:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:13 -==> Parameters: 0(Integer), 0(Integer), 1770(String), applyRateFlag(String)
2020-03-14 17:06:13 -<==    Updates: 2
2020-03-14 17:06:13 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:06:13 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 1
2020-03-14 17:06:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:13 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 2
2020-03-14 17:06:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:13 -==> Parameters: 0(Integer), 0(Integer), 1770(String), recallFlag(String)
2020-03-14 17:06:13 -<==    Updates: 2
2020-03-14 17:06:13 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:06:13 -==> Parameters: 
2020-03-14 17:06:13 -<==      Total: 1
2020-03-14 17:06:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:13 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 2
2020-03-14 17:06:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:13 -==> Parameters: 15(Integer), 15(Integer), 1770(String), collegeFlag(String)
2020-03-14 17:06:13 -<==    Updates: 2
2020-03-14 17:06:13 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:06:13 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 1
2020-03-14 17:06:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:13 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 2
2020-03-14 17:06:13 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:13 -==> Parameters: 0(Integer), 0(Integer), 1770(String), cardFlag(String)
2020-03-14 17:06:13 -<==    Updates: 2
2020-03-14 17:06:13 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:13 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:06:13 -<==      Total: 2
2020-03-14 17:06:13 -耗时 : 129
2020-03-14 17:06:19 -此处进行解密+验签+身份验证
2020-03-14 17:06:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:19 -此处进行解密+验签+身份验证
2020-03-14 17:06:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:19 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:06:19 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:06:19 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:06:19 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:19 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:19 -==> Parameters: 1770(String)
2020-03-14 17:06:19 -<==      Total: 0
2020-03-14 17:06:19 -耗时 : 49
2020-03-14 17:06:23 -此处进行解密+验签+身份验证
2020-03-14 17:06:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:23 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:23 -==> Parameters: 1770(String)
2020-03-14 17:06:23 -<==      Total: 0
2020-03-14 17:06:23 -耗时 : 15
2020-03-14 17:06:23 -此处进行解密+验签+身份验证
2020-03-14 17:06:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:23 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:23 -==> Parameters: 1770(String)
2020-03-14 17:06:24 -<==      Total: 0
2020-03-14 17:06:24 -耗时 : 16
2020-03-14 17:06:24 -此处进行解密+验签+身份验证
2020-03-14 17:06:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:24 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:24 -==> Parameters: 1770(String)
2020-03-14 17:06:24 -<==      Total: 0
2020-03-14 17:06:24 -耗时 : 15
2020-03-14 17:06:24 -此处进行解密+验签+身份验证
2020-03-14 17:06:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:24 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:24 -==> Parameters: 1770(String)
2020-03-14 17:06:24 -<==      Total: 0
2020-03-14 17:06:24 -耗时 : 18
2020-03-14 17:06:25 -此处进行解密+验签+身份验证
2020-03-14 17:06:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:25 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:25 -==> Parameters: 1770(String)
2020-03-14 17:06:25 -<==      Total: 0
2020-03-14 17:06:25 -耗时 : 10
2020-03-14 17:06:25 -此处进行解密+验签+身份验证
2020-03-14 17:06:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:25 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:25 -==> Parameters: 1770(String)
2020-03-14 17:06:25 -<==      Total: 0
2020-03-14 17:06:25 -耗时 : 14
2020-03-14 17:06:28 -此处进行解密+验签+身份验证
2020-03-14 17:06:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:06:28 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:06:28 -==> Parameters: 1770(String)
2020-03-14 17:06:28 -<==      Total: 0
2020-03-14 17:06:28 -耗时 : 29
2020-03-14 17:06:29 -此处进行解密+验签+身份验证
2020-03-14 17:06:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:06:29 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:29 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:33 -<==      Total: 0
2020-03-14 17:06:33 -耗时 : 14302
2020-03-14 17:06:35 -此处进行解密+验签+身份验证
2020-03-14 17:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:35 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:35 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:35 -<==      Total: 0
2020-03-14 17:06:35 -耗时 : 18
2020-03-14 17:06:35 -此处进行解密+验签+身份验证
2020-03-14 17:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:35 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:35 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:35 -<==      Total: 0
2020-03-14 17:06:35 -耗时 : 9
2020-03-14 17:06:40 -此处进行解密+验签+身份验证
2020-03-14 17:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:40 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:40 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:40 -<==      Total: 0
2020-03-14 17:06:40 -耗时 : 61
2020-03-14 17:06:41 -此处进行解密+验签+身份验证
2020-03-14 17:06:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:41 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:41 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:41 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:41 -<==      Total: 0
2020-03-14 17:06:41 -耗时 : 11
2020-03-14 17:06:43 -此处进行解密+验签+身份验证
2020-03-14 17:06:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:06:43 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:06:43 -==> Parameters: 1770(String)
2020-03-14 17:06:43 -<==      Total: 0
2020-03-14 17:06:43 -耗时 : 15
2020-03-14 17:06:43 -<==      Total: 0
2020-03-14 17:06:43 -耗时 : 14169
2020-03-14 17:06:44 -此处进行解密+验签+身份验证
2020-03-14 17:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:06:44 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:06:44 -==> Parameters: 1770(String)
2020-03-14 17:06:44 -<==      Total: 0
2020-03-14 17:06:44 -耗时 : 10
2020-03-14 17:06:44 -此处进行解密+验签+身份验证
2020-03-14 17:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:06:44 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:06:44 -==> Parameters: 1770(String)
2020-03-14 17:06:44 -<==      Total: 0
2020-03-14 17:06:44 -耗时 : 10
2020-03-14 17:06:47 -此处进行解密+验签+身份验证
2020-03-14 17:06:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:47 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:47 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:47 -<==      Total: 0
2020-03-14 17:06:47 -耗时 : 13
2020-03-14 17:06:47 -此处进行解密+验签+身份验证
2020-03-14 17:06:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:47 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:47 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:47 -<==      Total: 0
2020-03-14 17:06:47 -耗时 : 11
2020-03-14 17:06:48 -此处进行解密+验签+身份验证
2020-03-14 17:06:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:06:48 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:06:48 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:48 -<==      Total: 0
2020-03-14 17:06:48 -耗时 : 12
2020-03-14 17:06:51 -此处进行解密+验签+身份验证
2020-03-14 17:06:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:06:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:06:51 -==> Parameters: 1770(String)
2020-03-14 17:06:51 -<==      Total: 0
2020-03-14 17:06:51 -耗时 : 16
2020-03-14 17:06:52 -此处进行解密+验签+身份验证
2020-03-14 17:06:52 -此处进行解密+验签+身份验证
2020-03-14 17:06:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 17:06:52 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 17:06:52 -==> Parameters: 1770(String), TraditionalPOS(String)
2020-03-14 17:06:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 17:06:52 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 17:06:52 -==> Parameters: 1770(String), MPOS(String)
2020-03-14 17:06:52 -<==      Total: 0
2020-03-14 17:06:52 -耗时 : 11
2020-03-14 17:06:52 -<==      Total: 0
2020-03-14 17:06:52 -耗时 : 14
2020-03-14 17:06:54 -此处进行解密+验签+身份验证
2020-03-14 17:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:54 -此处进行解密+验签+身份验证
2020-03-14 17:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 17:06:54 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 17:06:54 -==> Parameters: 1770(String), epos(String)
2020-03-14 17:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 17:06:54 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 17:06:54 -==> Parameters: 1770(String), TrafficCard(String)
2020-03-14 17:06:54 -<==      Total: 0
2020-03-14 17:06:54 -耗时 : 14
2020-03-14 17:06:54 -<==      Total: 0
2020-03-14 17:06:54 -耗时 : 12
2020-03-14 17:06:59 -此处进行解密+验签+身份验证
2020-03-14 17:06:59 -此处进行解密+验签+身份验证
2020-03-14 17:06:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:06:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:06:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:06:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:06:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:06:59 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:06:59 -==> Parameters: 1770(String)
2020-03-14 17:06:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:06:59 -<==      Total: 1
2020-03-14 17:06:59 -耗时 : 10
2020-03-14 17:06:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:06:59 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 1
2020-03-14 17:06:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:59 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 2
2020-03-14 17:06:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:59 -==> Parameters: 0(Integer), 0(Integer), 1770(String), applyRateFlag(String)
2020-03-14 17:06:59 -<==    Updates: 2
2020-03-14 17:06:59 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:06:59 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 1
2020-03-14 17:06:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:59 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 2
2020-03-14 17:06:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:59 -==> Parameters: 0(Integer), 0(Integer), 1770(String), recallFlag(String)
2020-03-14 17:06:59 -<==    Updates: 2
2020-03-14 17:06:59 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:06:59 -==> Parameters: 
2020-03-14 17:06:59 -<==      Total: 1
2020-03-14 17:06:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:59 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 2
2020-03-14 17:06:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:59 -==> Parameters: 15(Integer), 15(Integer), 1770(String), collegeFlag(String)
2020-03-14 17:06:59 -<==    Updates: 2
2020-03-14 17:06:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:06:59 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 1
2020-03-14 17:06:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:59 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 2
2020-03-14 17:06:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:06:59 -==> Parameters: 0(Integer), 0(Integer), 1770(String), cardFlag(String)
2020-03-14 17:06:59 -<==    Updates: 2
2020-03-14 17:06:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:06:59 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:06:59 -<==      Total: 2
2020-03-14 17:06:59 -耗时 : 119
2020-03-14 17:09:05 -此处进行解密+验签+身份验证
2020-03-14 17:09:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:05 -此处进行解密+验签+身份验证
2020-03-14 17:09:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:09:05 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:09:05 -==> Parameters: 1770(String)
2020-03-14 17:09:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:09:05 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:09:05 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:09:05 -<==      Total: 0
2020-03-14 17:09:05 -耗时 : 13
2020-03-14 17:09:05 -<==      Total: 0
2020-03-14 17:09:05 -耗时 : 30
2020-03-14 17:09:06 -此处进行解密+验签+身份验证
2020-03-14 17:09:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:09:06 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:09:06 -==> Parameters: 1770(String)
2020-03-14 17:09:06 -<==      Total: 10
2020-03-14 17:09:06 -耗时 : 16
2020-03-14 17:09:16 -此处进行解密+验签+身份验证
2020-03-14 17:09:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:09:16 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:09:16 -==> Parameters: 1770(String)
2020-03-14 17:09:16 -<==      Total: 0
2020-03-14 17:09:16 -耗时 : 13
2020-03-14 17:09:17 -此处进行解密+验签+身份验证
2020-03-14 17:09:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:09:17 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:09:17 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:09:17 -<==      Total: 0
2020-03-14 17:09:17 -耗时 : 12
2020-03-14 17:09:20 -此处进行解密+验签+身份验证
2020-03-14 17:09:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:09:20 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:09:20 -==> Parameters: 1770(String)
2020-03-14 17:09:20 -<==      Total: 0
2020-03-14 17:09:20 -耗时 : 11
2020-03-14 17:09:20 -此处进行解密+验签+身份验证
2020-03-14 17:09:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:09:20 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:09:20 -==> Parameters: 1770(String)
2020-03-14 17:09:20 -<==      Total: 10
2020-03-14 17:09:20 -耗时 : 18
2020-03-14 17:09:21 -此处进行解密+验签+身份验证
2020-03-14 17:09:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:09:21 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:09:21 -==> Parameters: 1770(String)
2020-03-14 17:09:21 -<==      Total: 10
2020-03-14 17:09:21 -耗时 : 11
2020-03-14 17:09:36 -此处进行解密+验签+身份验证
2020-03-14 17:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:36 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:09:36 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:09:36 -==> Parameters: 1770(String)
2020-03-14 17:09:36 -<==      Total: 10
2020-03-14 17:09:36 -耗时 : 18
2020-03-14 17:09:43 -此处进行解密+验签+身份验证
2020-03-14 17:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:43 -此处进行解密+验签+身份验证
2020-03-14 17:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:09:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:09:43 -==> Parameters: 1770(String)
2020-03-14 17:09:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:09:43 -<==      Total: 1
2020-03-14 17:09:43 -耗时 : 14
2020-03-14 17:09:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:09:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:09:43 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 1
2020-03-14 17:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:09:43 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 2
2020-03-14 17:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:09:43 -==> Parameters: 0(Integer), 0(Integer), 1770(String), applyRateFlag(String)
2020-03-14 17:09:43 -<==    Updates: 2
2020-03-14 17:09:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:09:43 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 1
2020-03-14 17:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:09:43 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 2
2020-03-14 17:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:09:43 -==> Parameters: 0(Integer), 0(Integer), 1770(String), recallFlag(String)
2020-03-14 17:09:43 -<==    Updates: 2
2020-03-14 17:09:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:09:43 -==> Parameters: 
2020-03-14 17:09:43 -<==      Total: 1
2020-03-14 17:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:09:43 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 2
2020-03-14 17:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:09:43 -==> Parameters: 15(Integer), 15(Integer), 1770(String), collegeFlag(String)
2020-03-14 17:09:43 -<==    Updates: 2
2020-03-14 17:09:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:09:43 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 1
2020-03-14 17:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:09:43 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 2
2020-03-14 17:09:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:09:43 -==> Parameters: 0(Integer), 0(Integer), 1770(String), cardFlag(String)
2020-03-14 17:09:43 -<==    Updates: 2
2020-03-14 17:09:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:09:43 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:09:43 -<==      Total: 2
2020-03-14 17:09:43 -耗时 : 163
2020-03-14 17:09:48 -此处进行解密+验签+身份验证
2020-03-14 17:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:48 -此处进行解密+验签+身份验证
2020-03-14 17:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:09:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:09:48 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:09:48 -==> Parameters: 1770(String)
2020-03-14 17:09:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:09:48 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:09:48 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:09:48 -<==      Total: 0
2020-03-14 17:09:48 -耗时 : 9
2020-03-14 17:09:48 -<==      Total: 0
2020-03-14 17:09:48 -耗时 : 30
2020-03-14 17:10:04 -此处进行解密+验签+身份验证
2020-03-14 17:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:10:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:10:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:10:04 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:10:04 -==> Parameters: 1770(String)
2020-03-14 17:10:04 -<==      Total: 10
2020-03-14 17:10:04 -耗时 : 17
2020-03-14 17:10:12 -此处进行解密+验签+身份验证
2020-03-14 17:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:10:12 -此处进行解密+验签+身份验证
2020-03-14 17:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:10:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-14 17:10:12 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-14 17:10:12 -==> Parameters: 1770(String)
2020-03-14 17:10:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-14 17:10:12 -<==      Total: 0
2020-03-14 17:10:12 -耗时 : 11
2020-03-14 17:10:12 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-14 17:10:12 -==> Parameters: 1770(String), EPOS20200113081(String)
2020-03-14 17:10:12 -<==      Total: 1
2020-03-14 17:10:12 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-14 17:10:12 -==> Parameters: 
2020-03-14 17:10:12 -<==      Total: 94
2020-03-14 17:10:12 -耗时 : 29
2020-03-14 17:11:14 -此处进行解密+验签+身份验证
2020-03-14 17:11:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:11:14 -此处进行解密+验签+身份验证
2020-03-14 17:11:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:11:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:11:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:11:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:11:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:11:14 -==> Parameters: 1770(String)
2020-03-14 17:11:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:11:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:11:14 -<==      Total: 1
2020-03-14 17:11:14 -耗时 : 10
2020-03-14 17:11:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:11:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:11:14 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:11:14 -<==      Total: 1
2020-03-14 17:11:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:11:14 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:11:14 -<==      Total: 2
2020-03-14 17:11:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:11:14 -==> Parameters: 0(Integer), 0(Integer), 1770(String), applyRateFlag(String)
2020-03-14 17:11:15 -<==    Updates: 2
2020-03-14 17:11:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:11:15 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:11:15 -<==      Total: 1
2020-03-14 17:11:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:11:15 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:11:15 -<==      Total: 2
2020-03-14 17:11:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:11:15 -==> Parameters: 0(Integer), 0(Integer), 1770(String), recallFlag(String)
2020-03-14 17:11:15 -<==    Updates: 2
2020-03-14 17:11:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:11:15 -==> Parameters: 
2020-03-14 17:11:15 -<==      Total: 1
2020-03-14 17:11:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:11:15 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:11:15 -<==      Total: 2
2020-03-14 17:11:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:11:15 -==> Parameters: 15(Integer), 15(Integer), 1770(String), collegeFlag(String)
2020-03-14 17:11:15 -<==    Updates: 2
2020-03-14 17:11:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:11:15 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:11:15 -<==      Total: 1
2020-03-14 17:11:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:11:15 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:11:15 -<==      Total: 2
2020-03-14 17:11:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:11:15 -==> Parameters: 0(Integer), 0(Integer), 1770(String), cardFlag(String)
2020-03-14 17:11:15 -<==    Updates: 2
2020-03-14 17:11:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:11:15 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:11:15 -<==      Total: 2
2020-03-14 17:11:15 -耗时 : 123
2020-03-14 17:11:16 -此处进行解密+验签+身份验证
2020-03-14 17:11:16 -此处进行解密+验签+身份验证
2020-03-14 17:11:16 -解密：
2020-03-14 17:11:16 -解密：
2020-03-14 17:11:16 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:11:16 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:11:16 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:11:16 -==> Parameters: 02(String), 02(String)
2020-03-14 17:11:16 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:11:16 -==> Parameters: 03(String), 03(String)
2020-03-14 17:11:16 -<==      Total: 6
2020-03-14 17:11:16 -耗时 : 9
2020-03-14 17:11:16 -<==      Total: 7
2020-03-14 17:11:16 -耗时 : 14
2020-03-14 17:11:19 -此处进行解密+验签+身份验证
2020-03-14 17:11:19 -解密：
2020-03-14 17:11:19 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:11:19 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:11:19 -==> Parameters: 04(String), 04(String)
2020-03-14 17:11:19 -<==      Total: 0
2020-03-14 17:11:19 -耗时 : 11
2020-03-14 17:14:56 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 17:14:56 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 17:14:56 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 17:14:56 -Shutting down Quartz Scheduler
2020-03-14 17:14:56 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 17:14:56 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 17:14:56 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 17:14:56 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 17:14:56 -HikariPool-1 - Shutdown initiated...
2020-03-14 17:14:56 -HikariPool-1 - Shutdown completed.
2020-03-14 17:16:05 -Starting LongEcologicalApplication on PC-201905161910 with PID 11476 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 17:16:05 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 17:16:05 -No active profile set, falling back to default profiles: default
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:16:06 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:16:06 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:16:07 -Finished Spring Data repository scanning in 99ms. Found 0 repository interfaces.
2020-03-14 17:16:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:16:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:16:07 -Finished Spring Data repository scanning in 45ms. Found 0 repository interfaces.
2020-03-14 17:16:07 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8952e347] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:16:07 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$83d6c7e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:16:08 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 17:16:08 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 17:16:08 -Starting service [Tomcat]
2020-03-14 17:16:08 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 17:16:08 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 17:16:08 -Initializing Spring embedded WebApplicationContext
2020-03-14 17:16:08 -Root WebApplicationContext: initialization completed in 2326 ms
2020-03-14 17:16:08 -Filter xssFilter was not registered (disabled)
2020-03-14 17:16:08 -HikariPool-1 - Starting...
2020-03-14 17:16:08 -HikariPool-1 - Start completed.
2020-03-14 17:16:08 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 17:16:09 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 17:16:09 -HHH000206: hibernate.properties not found
2020-03-14 17:16:09 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 17:16:09 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 17:16:09 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 17:16:10 -Using default implementation for ThreadExecutor
2020-03-14 17:16:10 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 17:16:10 -Quartz Scheduler v.2.3.0 created.
2020-03-14 17:16:10 -RAMJobStore initialized.
2020-03-14 17:16:10 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 17:16:10 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 17:16:10 -Quartz scheduler version: 2.3.0
2020-03-14 17:16:10 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5844a2d1
2020-03-14 17:16:10 -STAET TaskExecutorConfig
2020-03-14 17:16:10 -Initializing ExecutorService
2020-03-14 17:16:10 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 17:16:11 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 17:16:11 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 17:16:11 -Initializing ExecutorService 'taskScheduler'
2020-03-14 17:16:11 -Starting Quartz Scheduler now
2020-03-14 17:16:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 17:16:11 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 17:16:11 -Using a shared selector for servlet write/read
2020-03-14 17:16:11 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 17:16:11 -Started LongEcologicalApplication in 6.546 seconds (JVM running for 7.545)
2020-03-14 17:24:05 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 17:24:05 -Initializing Servlet 'dispatcherServlet'
2020-03-14 17:24:05 -Completed initialization in 11 ms
2020-03-14 17:24:05 -此处进行解密+验签+身份验证
2020-03-14 17:24:05 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 17:24:05 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-14 17:24:05 -Starting without optional epoll library
2020-03-14 17:24:05 -Starting without optional kqueue library
2020-03-14 17:24:06 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-14 17:24:06 -耗时 : 665
2020-03-14 17:30:17 -此处进行解密+验签+身份验证
2020-03-14 17:30:17 -此处进行解密+验签+身份验证
2020-03-14 17:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_1770
2020-03-14 17:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_1770 , return
2020-03-14 17:30:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:30:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1770
2020-03-14 17:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1770 , return
2020-03-14 17:30:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:30:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:17 -==> Parameters: 1770(String)
2020-03-14 17:30:17 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:30:17 -<==      Total: 1
2020-03-14 17:30:17 -<==      Total: 1
2020-03-14 17:30:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:17 -耗时 : 61
2020-03-14 17:30:17 -==> Parameters: applyRateFlag(String), 1770(String)
2020-03-14 17:30:17 -<==      Total: 2
2020-03-14 17:30:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:17 -==> Parameters: 0(Integer), 0(Integer), 1770(String), applyRateFlag(String)
2020-03-14 17:30:17 -<==    Updates: 2
2020-03-14 17:30:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:30:17 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:30:17 -<==      Total: 1
2020-03-14 17:30:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:17 -==> Parameters: recallFlag(String), 1770(String)
2020-03-14 17:30:17 -<==      Total: 2
2020-03-14 17:30:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:17 -==> Parameters: 0(Integer), 0(Integer), 1770(String), recallFlag(String)
2020-03-14 17:30:18 -<==    Updates: 2
2020-03-14 17:30:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:30:18 -==> Parameters: 
2020-03-14 17:30:18 -<==      Total: 1
2020-03-14 17:30:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:18 -==> Parameters: collegeFlag(String), 1770(String)
2020-03-14 17:30:18 -<==      Total: 2
2020-03-14 17:30:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:18 -==> Parameters: 15(Integer), 15(Integer), 1770(String), collegeFlag(String)
2020-03-14 17:30:18 -<==    Updates: 2
2020-03-14 17:30:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:18 -==> Parameters: 1770(String), 1770(String)
2020-03-14 17:30:18 -<==      Total: 1
2020-03-14 17:30:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:18 -==> Parameters: cardFlag(String), 1770(String)
2020-03-14 17:30:18 -<==      Total: 2
2020-03-14 17:30:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:18 -==> Parameters: 0(Integer), 0(Integer), 1770(String), cardFlag(String)
2020-03-14 17:30:18 -<==    Updates: 2
2020-03-14 17:30:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:18 -==> Parameters: appImgFlag(String), 1770(String)
2020-03-14 17:30:18 -<==      Total: 2
2020-03-14 17:30:18 -耗时 : 157
2020-03-14 17:30:25 -此处进行解密+验签+身份验证
2020-03-14 17:30:25 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-14 17:30:25 -token值=======1770|PCQH9WKXMEGUMBIPBPT3PSVC17SHSVFG
2020-03-14 17:30:25 -耗时 : 34
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 17:30:38 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-14 17:30:38 -==> Parameters: 15019499979(String)
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-14 17:30:38 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200314(String), 173038(String), 469(Integer)
2020-03-14 17:30:38 -<==    Updates: 1
2020-03-14 17:30:38 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 17:30:38 -==> Parameters: 25(String)
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:30:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:30:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:30:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:30:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:30:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:30:38 -耗时 : 79
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:38 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-14 17:30:38 -==> Parameters: 469(String)
2020-03-14 17:30:38 -<==      Total: 0
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -解密：
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:38 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_469,save content:null
2020-03-14 17:30:38 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:30:38 -==> Parameters: 01(String), 01(String)
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:38 -<==      Total: 7
2020-03-14 17:30:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:30:38 -耗时 : 13
2020-03-14 17:30:38 -==> Parameters: 469(String)
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -耗时 : 12
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:38 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 17:30:38 -==> Parameters: 
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:38 -<==      Total: 3
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:30:38 -耗时 : 13
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 17:30:38 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 17:30:38 -==> Parameters: 469(String)
2020-03-14 17:30:38 -此处进行解密+验签+身份验证
2020-03-14 17:30:38 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 17:30:38 -==> Parameters: 469(String)
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:38 -<==      Total: 2
2020-03-14 17:30:38 -耗时 : 8
2020-03-14 17:30:38 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 17:30:38 -==> Parameters: 469(String)
2020-03-14 17:30:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:30:38 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:30:38 -==> Parameters: 469(String)
2020-03-14 17:30:38 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_469,save content:{referer_id=null, parent_chain=null, user_tel=15019499979, id_card=441523199409226802, real_name=叶梦蝶, algebra=1, cre_date=20181207, cre_time=150422, login_password=47e6515d924b5ee1fb13711a53804c71, manager_id=25, pay_password=47e6515d924b5ee1fb13711a53804c71, id=469, auth_status=09, status=0}
2020-03-14 17:30:38 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_469,save content:{referer_id=null, parent_chain=null, user_tel=15019499979, id_card=441523199409226802, real_name=叶梦蝶, algebra=1, cre_date=20181207, cre_time=150422, login_password=47e6515d924b5ee1fb13711a53804c71, manager_id=25, pay_password=47e6515d924b5ee1fb13711a53804c71, id=469, auth_status=09, status=0}
2020-03-14 17:30:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:38 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:38 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -耗时 : 8
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:38 -<==      Total: 1
2020-03-14 17:30:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:38 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:30:38 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:30:38 -<==      Total: 0
2020-03-14 17:30:38 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:38 -<==      Total: 0
2020-03-14 17:30:38 -==> Parameters: 469(String), applyRateFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:38 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:38 -==> Parameters: 469(String), applyRateFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:30:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:30:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 1
2020-03-14 17:30:39 -<==      Total: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:30:39 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), recallFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -==> Parameters: 469(String), recallFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:30:39 -==> Parameters: 
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:30:39 -==> Parameters: 
2020-03-14 17:30:39 -<==      Total: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), collegeFlag(String), 0(Integer), 15(Integer), 25(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), collegeFlag(String), 0(Integer), 15(Integer), 25(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), cardFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), cardFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), appImgFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -<==      Total: 0
2020-03-14 17:30:39 -==>  Preparing: insert into t_news_read_state(user_id,news_type,pre_unread_num,unread_num,manager_id) values(?,?,?,?,?) 
2020-03-14 17:30:39 -==> Parameters: 469(String), appImgFlag(String), 0(Integer), 0(Integer), 25(String)
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -耗时 : 154
2020-03-14 17:30:39 -<==    Updates: 1
2020-03-14 17:30:39 -耗时 : 157
2020-03-14 17:30:44 -此处进行解密+验签+身份验证
2020-03-14 17:30:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:30:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:30:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:30:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:44 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 1
2020-03-14 17:30:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:44 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 2
2020-03-14 17:30:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:44 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:30:44 -<==    Updates: 2
2020-03-14 17:30:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:30:44 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 1
2020-03-14 17:30:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:44 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 2
2020-03-14 17:30:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:44 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:30:44 -<==    Updates: 2
2020-03-14 17:30:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:30:44 -==> Parameters: 
2020-03-14 17:30:44 -<==      Total: 1
2020-03-14 17:30:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:44 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 2
2020-03-14 17:30:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:44 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:30:44 -<==    Updates: 2
2020-03-14 17:30:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:44 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 1
2020-03-14 17:30:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:44 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 2
2020-03-14 17:30:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:44 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:30:44 -<==    Updates: 2
2020-03-14 17:30:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:44 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:30:44 -<==      Total: 2
2020-03-14 17:30:44 -耗时 : 119
2020-03-14 17:30:47 -此处进行解密+验签+身份验证
2020-03-14 17:30:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-14 17:30:47 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-14 17:30:47 -==> Parameters: 1(String), 469(String), applyRateFlag(String)
2020-03-14 17:30:47 -<==    Updates: 2
2020-03-14 17:30:47 -耗时 : 14
2020-03-14 17:30:47 -此处进行解密+验签+身份验证
2020-03-14 17:30:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:47 -此处进行解密+验签+身份验证
2020-03-14 17:30:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:47 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-14 17:30:47 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-14 17:30:47 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-14 17:30:47 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:47 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-14 17:30:47 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:47 -<==      Total: 0
2020-03-14 17:30:47 -耗时 : 40
2020-03-14 17:30:47 -<==      Total: 95
2020-03-14 17:30:47 -耗时 : 50
2020-03-14 17:30:51 -此处进行解密+验签+身份验证
2020-03-14 17:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:51 -此处进行解密+验签+身份验证
2020-03-14 17:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:30:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:30:51 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:30:51 -==> Parameters: 469(String)
2020-03-14 17:30:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:51 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 1
2020-03-14 17:30:51 -耗时 : 10
2020-03-14 17:30:51 -<==      Total: 1
2020-03-14 17:30:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:51 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 2
2020-03-14 17:30:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:30:51 -<==    Updates: 2
2020-03-14 17:30:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:30:51 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 1
2020-03-14 17:30:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:51 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 2
2020-03-14 17:30:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:30:51 -<==    Updates: 2
2020-03-14 17:30:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:30:51 -==> Parameters: 
2020-03-14 17:30:51 -<==      Total: 1
2020-03-14 17:30:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:51 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 2
2020-03-14 17:30:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:51 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:30:51 -<==    Updates: 2
2020-03-14 17:30:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:30:51 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 1
2020-03-14 17:30:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:51 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 2
2020-03-14 17:30:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:30:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:30:51 -<==    Updates: 2
2020-03-14 17:30:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:30:51 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:30:51 -<==      Total: 2
2020-03-14 17:30:51 -耗时 : 115
2020-03-14 17:30:59 -此处进行解密+验签+身份验证
2020-03-14 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:59 -此处进行解密+验签+身份验证
2020-03-14 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:30:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:30:59 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:30:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:30:59 -==> Parameters: 469(String)
2020-03-14 17:30:59 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:30:59 -==> Parameters: 469(String), 469(String)
2020-03-14 17:30:59 -<==      Total: 88
2020-03-14 17:30:59 -耗时 : 42
2020-03-14 17:31:03 -此处进行解密+验签+身份验证
2020-03-14 17:31:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:31:03 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:31:03 -==> Parameters: 469(String)
2020-03-14 17:31:03 -<==      Total: 88
2020-03-14 17:31:03 -耗时 : 38
2020-03-14 17:31:04 -此处进行解密+验签+身份验证
2020-03-14 17:31:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:31:04 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 17:31:04 -==> Parameters: 469(String)
2020-03-14 17:31:04 -<==      Total: 0
2020-03-14 17:31:04 -耗时 : 15
2020-03-14 17:31:05 -此处进行解密+验签+身份验证
2020-03-14 17:31:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:31:05 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 17:31:05 -==> Parameters: 469(String)
2020-03-14 17:31:05 -<==      Total: 0
2020-03-14 17:31:05 -耗时 : 14
2020-03-14 17:31:08 -此处进行解密+验签+身份验证
2020-03-14 17:31:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:31:08 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:31:08 -==> Parameters: 469(String)
2020-03-14 17:31:08 -<==      Total: 88
2020-03-14 17:31:08 -耗时 : 32
2020-03-14 17:31:10 -此处进行解密+验签+身份验证
2020-03-14 17:31:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@71484a4f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4fa442c2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7c8d634b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1258515b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2e2a832 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6f3d58fe (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@78bde969 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@28bfadac (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3f8b33b1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 17:31:10 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 17:31:10 -==> Parameters: 469(String)
2020-03-14 17:31:10 -<==      Total: 0
2020-03-14 17:31:10 -耗时 : 73
2020-03-14 17:31:11 -此处进行解密+验签+身份验证
2020-03-14 17:31:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:31:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:31:11 -==> Parameters: 469(String)
2020-03-14 17:31:11 -<==      Total: 0
2020-03-14 17:31:11 -耗时 : 13
2020-03-14 17:31:12 -此处进行解密+验签+身份验证
2020-03-14 17:31:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:31:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 17:31:12 -==> Parameters: 469(String)
2020-03-14 17:31:12 -<==      Total: 0
2020-03-14 17:31:12 -耗时 : 13
2020-03-14 17:31:13 -此处进行解密+验签+身份验证
2020-03-14 17:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:31:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:31:14 -==> Parameters: 469(String)
2020-03-14 17:31:14 -<==      Total: 0
2020-03-14 17:31:14 -耗时 : 13
2020-03-14 17:31:15 -此处进行解密+验签+身份验证
2020-03-14 17:31:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:31:15 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:31:15 -==> Parameters: 469(String)
2020-03-14 17:31:16 -<==      Total: 88
2020-03-14 17:31:16 -耗时 : 63
2020-03-14 17:31:17 -此处进行解密+验签+身份验证
2020-03-14 17:31:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:31:17 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:31:17 -==> Parameters: 469(String)
2020-03-14 17:31:17 -<==      Total: 0
2020-03-14 17:31:17 -耗时 : 13
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:31:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:31:20 -==> Parameters: 469(String)
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -耗时 : 10
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -解密：
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:31:20 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:31:20 -==> Parameters: 01(String), 01(String)
2020-03-14 17:31:20 -<==      Total: 7
2020-03-14 17:31:20 -耗时 : 5
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 17:31:20 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 17:31:20 -==> Parameters: 469(String)
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -耗时 : 6
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:31:20 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 17:31:20 -==> Parameters: 
2020-03-14 17:31:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:31:20 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 3
2020-03-14 17:31:20 -耗时 : 12
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:31:20 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -此处进行解密+验签+身份验证
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:31:20 -==> Parameters: 
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:31:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:31:20 -==> Parameters: 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:31:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -耗时 : 6
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:31:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:31:20 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:31:20 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -耗时 : 103
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:31:20 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:31:20 -==> Parameters: 
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 2
2020-03-14 17:31:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:20 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:31:20 -<==    Updates: 2
2020-03-14 17:31:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:31:20 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:20 -<==      Total: 1
2020-03-14 17:31:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:20 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:31:21 -<==      Total: 2
2020-03-14 17:31:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:31:21 -<==    Updates: 2
2020-03-14 17:31:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:21 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:31:21 -<==      Total: 2
2020-03-14 17:31:21 -耗时 : 117
2020-03-14 17:31:23 -此处进行解密+验签+身份验证
2020-03-14 17:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:23 -此处进行解密+验签+身份验证
2020-03-14 17:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:31:23 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:31:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:23 -==> Parameters: 469(String)
2020-03-14 17:31:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:31:23 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:31:23 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:23 -<==      Total: 4
2020-03-14 17:31:23 -耗时 : 8
2020-03-14 17:31:23 -<==      Total: 88
2020-03-14 17:31:23 -耗时 : 27
2020-03-14 17:31:27 -此处进行解密+验签+身份验证
2020-03-14 17:31:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:31:27 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:31:27 -==> Parameters: 469(String)
2020-03-14 17:31:27 -<==      Total: 88
2020-03-14 17:31:27 -耗时 : 12
2020-03-14 17:31:28 -此处进行解密+验签+身份验证
2020-03-14 17:31:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:31:28 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:31:28 -==> Parameters: 469(String)
2020-03-14 17:31:28 -<==      Total: 0
2020-03-14 17:31:28 -耗时 : 10
2020-03-14 17:31:30 -此处进行解密+验签+身份验证
2020-03-14 17:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:31:30 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:31:30 -==> Parameters: 469(String)
2020-03-14 17:31:30 -<==      Total: 88
2020-03-14 17:31:30 -耗时 : 10
2020-03-14 17:31:30 -此处进行解密+验签+身份验证
2020-03-14 17:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:31:30 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-14 17:31:30 -==> Parameters: 469(String)
2020-03-14 17:31:30 -<==      Total: 0
2020-03-14 17:31:30 -耗时 : 13
2020-03-14 17:31:33 -此处进行解密+验签+身份验证
2020-03-14 17:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:31:34 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:31:34 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:34 -<==      Total: 0
2020-03-14 17:31:34 -耗时 : 17
2020-03-14 17:31:35 -此处进行解密+验签+身份验证
2020-03-14 17:31:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:35 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:31:35 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:31:35 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:35 -<==      Total: 4
2020-03-14 17:31:35 -耗时 : 10
2020-03-14 17:31:36 -此处进行解密+验签+身份验证
2020-03-14 17:31:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:36 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:31:36 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:31:36 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:36 -<==      Total: 0
2020-03-14 17:31:36 -耗时 : 11
2020-03-14 17:31:39 -此处进行解密+验签+身份验证
2020-03-14 17:31:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:39 -此处进行解密+验签+身份验证
2020-03-14 17:31:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:31:39 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:31:39 -==> Parameters: 469(String)
2020-03-14 17:31:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:31:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:31:39 -<==      Total: 1
2020-03-14 17:31:39 -耗时 : 10
2020-03-14 17:31:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:31:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:31:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 1
2020-03-14 17:31:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:39 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 2
2020-03-14 17:31:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:31:39 -<==    Updates: 2
2020-03-14 17:31:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:31:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 1
2020-03-14 17:31:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:39 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 2
2020-03-14 17:31:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:31:39 -<==    Updates: 2
2020-03-14 17:31:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:31:39 -==> Parameters: 
2020-03-14 17:31:39 -<==      Total: 1
2020-03-14 17:31:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:39 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 2
2020-03-14 17:31:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:39 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:31:39 -<==    Updates: 2
2020-03-14 17:31:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:31:39 -==> Parameters: 469(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 1
2020-03-14 17:31:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 2
2020-03-14 17:31:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:31:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:31:39 -<==    Updates: 2
2020-03-14 17:31:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:31:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:31:39 -<==      Total: 2
2020-03-14 17:31:39 -耗时 : 104
2020-03-14 17:31:43 -此处进行解密+验签+身份验证
2020-03-14 17:31:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:43 -此处进行解密+验签+身份验证
2020-03-14 17:31:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 17:31:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-14 17:31:43 -==> Parameters: 469(String)
2020-03-14 17:31:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-14 17:31:43 -==> Parameters: 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-14 17:31:43 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:31:43 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-14 17:31:43 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:31:43 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-14 17:31:43 -==> Parameters: 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -耗时 : 50
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:31:43 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:31:43 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-14 17:31:43 -==> Parameters: 469(String)
2020-03-14 17:31:43 -<==      Total: 1
2020-03-14 17:31:43 -耗时 : 171
2020-03-14 17:31:45 -此处进行解密+验签+身份验证
2020-03-14 17:31:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-14 17:31:45 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 17:31:45 -==> Parameters: 469(String)
2020-03-14 17:31:45 -<==      Total: 0
2020-03-14 17:31:45 -耗时 : 15
2020-03-14 17:31:48 -此处进行解密+验签+身份验证
2020-03-14 17:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 17:31:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-14 17:31:48 -==> Parameters: 469(String)
2020-03-14 17:31:48 -<==      Total: 1
2020-03-14 17:31:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-14 17:31:48 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:31:48 -<==      Total: 1
2020-03-14 17:31:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:31:48 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:31:48 -<==      Total: 1
2020-03-14 17:31:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:31:48 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:31:48 -<==      Total: 1
2020-03-14 17:31:48 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-14 17:31:48 -==> Parameters: 469(String)
2020-03-14 17:31:48 -<==      Total: 1
2020-03-14 17:31:48 -耗时 : 55
2020-03-14 17:31:50 -此处进行解密+验签+身份验证
2020-03-14 17:31:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-03-14 17:31:50 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 17:31:50 -==> Parameters: 469(String)
2020-03-14 17:31:50 -<==      Total: 10
2020-03-14 17:31:50 -耗时 : 26
2020-03-14 17:31:55 -此处进行解密+验签+身份验证
2020-03-14 17:31:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getMposDetail
2020-03-14 17:31:55 -==>  Preparing: select t.sn, t.card_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.act_status, t1.cash_back_status, t.is_reward from t_user_mpos_info t left join t_sys_mpos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-14 17:31:55 -==> Parameters: 469(String), M351846181598(String)
2020-03-14 17:31:55 -<==      Total: 1
2020-03-14 17:31:55 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-14 17:31:55 -==> Parameters: M351846181598(String)
2020-03-14 17:31:55 -<==      Total: 0
2020-03-14 17:31:55 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-14 17:31:55 -==> Parameters: M351846181598(String)
2020-03-14 17:31:55 -<==      Total: 1
2020-03-14 17:31:55 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_mpos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-14 17:31:55 -==> Parameters: M351846181598(String), 469(String)
2020-03-14 17:31:55 -<==      Total: 1
2020-03-14 17:31:55 -耗时 : 47
2020-03-14 17:31:57 -此处进行解密+验签+身份验证
2020-03-14 17:31:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-03-14 17:31:57 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 17:31:57 -==> Parameters: 469(String)
2020-03-14 17:31:57 -<==      Total: 10
2020-03-14 17:31:57 -耗时 : 10
2020-03-14 17:31:59 -此处进行解密+验签+身份验证
2020-03-14 17:31:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:31:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:31:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getMposDetail
2020-03-14 17:31:59 -==>  Preparing: select t.sn, t.card_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.act_status, t1.cash_back_status, t.is_reward from t_user_mpos_info t left join t_sys_mpos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-14 17:31:59 -==> Parameters: 469(String), M351846181592(String)
2020-03-14 17:31:59 -<==      Total: 1
2020-03-14 17:31:59 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-14 17:31:59 -==> Parameters: M351846181592(String)
2020-03-14 17:31:59 -<==      Total: 0
2020-03-14 17:31:59 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-14 17:31:59 -==> Parameters: M351846181592(String)
2020-03-14 17:31:59 -<==      Total: 1
2020-03-14 17:31:59 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_mpos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-14 17:31:59 -==> Parameters: M351846181592(String), 469(String)
2020-03-14 17:31:59 -<==      Total: 1
2020-03-14 17:31:59 -耗时 : 48
2020-03-14 17:32:01 -此处进行解密+验签+身份验证
2020-03-14 17:32:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:01 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-03-14 17:32:01 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 17:32:01 -==> Parameters: 469(String)
2020-03-14 17:32:01 -<==      Total: 10
2020-03-14 17:32:01 -耗时 : 11
2020-03-14 17:32:04 -此处进行解密+验签+身份验证
2020-03-14 17:32:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getMposDetail
2020-03-14 17:32:04 -==>  Preparing: select t.sn, t.card_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.act_status, t1.cash_back_status, t.is_reward from t_user_mpos_info t left join t_sys_mpos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-14 17:32:04 -==> Parameters: 469(String), M351846181600(String)
2020-03-14 17:32:04 -<==      Total: 1
2020-03-14 17:32:04 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-14 17:32:04 -==> Parameters: M351846181600(String)
2020-03-14 17:32:04 -<==      Total: 0
2020-03-14 17:32:04 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-14 17:32:04 -==> Parameters: M351846181600(String)
2020-03-14 17:32:04 -<==      Total: 1
2020-03-14 17:32:04 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_mpos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-14 17:32:04 -==> Parameters: M351846181600(String), 469(String)
2020-03-14 17:32:04 -<==      Total: 1
2020-03-14 17:32:04 -耗时 : 49
2020-03-14 17:32:08 -此处进行解密+验签+身份验证
2020-03-14 17:32:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-03-14 17:32:08 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 17:32:08 -==> Parameters: 469(String)
2020-03-14 17:32:08 -<==      Total: 10
2020-03-14 17:32:08 -耗时 : 9
2020-03-14 17:32:15 -此处进行解密+验签+身份验证
2020-03-14 17:32:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-14 17:32:15 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-14 17:32:15 -==> Parameters: 469(String)
2020-03-14 17:32:15 -<==      Total: 0
2020-03-14 17:32:15 -耗时 : 9
2020-03-14 17:32:33 -此处进行解密+验签+身份验证
2020-03-14 17:32:33 -此处进行解密+验签+身份验证
2020-03-14 17:32:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 17:32:33 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 17:32:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 17:32:33 -==> Parameters: 469(String)
2020-03-14 17:32:33 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 17:32:33 -==> Parameters: 469(String)
2020-03-14 17:32:33 -<==      Total: 3
2020-03-14 17:32:33 -耗时 : 10
2020-03-14 17:32:33 -<==      Total: 1
2020-03-14 17:32:33 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 17:32:33 -==> Parameters: 469(String)
2020-03-14 17:32:33 -<==      Total: 1
2020-03-14 17:32:33 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 17:32:33 -==> Parameters: 469(String)
2020-03-14 17:32:33 -<==      Total: 1
2020-03-14 17:32:33 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 17:32:33 -==> Parameters: 469(String)
2020-03-14 17:32:33 -<==      Total: 0
2020-03-14 17:32:33 -耗时 : 32
2020-03-14 17:32:58 -此处进行解密+验签+身份验证
2020-03-14 17:32:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-14 17:32:58 -==> Parameters: 469(String)
2020-03-14 17:32:58 -此处进行解密+验签+身份验证
2020-03-14 17:32:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-14 17:32:58 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:32:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:32:58 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:32:58 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-14 17:32:58 -==> Parameters: 469(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-14 17:32:58 -==> Parameters: 469(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-14 17:32:58 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -耗时 : 45
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:32:58 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:32:58 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-14 17:32:58 -==> Parameters: 469(String)
2020-03-14 17:32:58 -<==      Total: 1
2020-03-14 17:32:58 -耗时 : 41
2020-03-14 17:33:01 -此处进行解密+验签+身份验证
2020-03-14 17:33:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:33:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:33:01 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 17:33:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-14 17:33:01 -==> Parameters: 469(String)
2020-03-14 17:33:01 -<==      Total: 1
2020-03-14 17:33:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-14 17:33:01 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:33:01 -<==      Total: 1
2020-03-14 17:33:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:33:01 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:33:01 -<==      Total: 1
2020-03-14 17:33:01 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:33:01 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:33:01 -<==      Total: 1
2020-03-14 17:33:01 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-14 17:33:01 -==> Parameters: 469(String)
2020-03-14 17:33:01 -<==      Total: 1
2020-03-14 17:33:01 -耗时 : 34
2020-03-14 17:34:27 -此处进行解密+验签+身份验证
2020-03-14 17:34:27 -此处进行解密+验签+身份验证
2020-03-14 17:34:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:34:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:34:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:34:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:34:27 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:34:27 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:34:27 -==> Parameters: 469(String)
2020-03-14 17:34:27 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:34:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:34:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:34:27 -<==      Total: 1
2020-03-14 17:34:27 -耗时 : 10
2020-03-14 17:34:27 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:34:27 -==> Parameters: 469(String), 469(String)
2020-03-14 17:34:27 -<==      Total: 1
2020-03-14 17:34:27 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:34:27 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:34:27 -<==      Total: 2
2020-03-14 17:34:27 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:34:27 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:34:28 -<==    Updates: 2
2020-03-14 17:34:28 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:34:28 -==> Parameters: 469(String), 469(String)
2020-03-14 17:34:28 -<==      Total: 1
2020-03-14 17:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:34:28 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:34:28 -<==      Total: 2
2020-03-14 17:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:34:28 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:34:28 -<==    Updates: 2
2020-03-14 17:34:28 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:34:28 -==> Parameters: 
2020-03-14 17:34:28 -<==      Total: 1
2020-03-14 17:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:34:28 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:34:28 -<==      Total: 2
2020-03-14 17:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:34:28 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:34:28 -<==    Updates: 2
2020-03-14 17:34:28 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:34:28 -==> Parameters: 469(String), 469(String)
2020-03-14 17:34:28 -<==      Total: 1
2020-03-14 17:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:34:28 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:34:28 -<==      Total: 2
2020-03-14 17:34:28 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:34:28 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:34:28 -<==    Updates: 2
2020-03-14 17:34:28 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:34:28 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:34:28 -<==      Total: 2
2020-03-14 17:34:28 -耗时 : 100
2020-03-14 17:34:29 -此处进行解密+验签+身份验证
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:34:29 -此处进行解密+验签+身份验证
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:34:29 -此处进行解密+验签+身份验证
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:34:29 -此处进行解密+验签+身份验证
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:34:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-14 17:34:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:34:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-14 17:34:29 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-14 17:34:29 -==> Parameters: 469(String)
2020-03-14 17:34:29 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 17:34:29 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:34:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-14 17:34:29 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 17:34:29 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:34:29 -<==      Total: 1
2020-03-14 17:34:29 -耗时 : 13
2020-03-14 17:34:29 -<==      Total: 0
2020-03-14 17:34:29 -耗时 : 9
2020-03-14 17:34:29 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-14 17:34:29 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-14 17:34:29 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:34:29 -<==      Total: 0
2020-03-14 17:34:29 -耗时 : 10
2020-03-14 17:34:29 -<==      Total: 1
2020-03-14 17:34:29 -耗时 : 7
2020-03-14 17:35:15 -此处进行解密+验签+身份验证
2020-03-14 17:35:15 -此处进行解密+验签+身份验证
2020-03-14 17:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:35:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:35:15 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-14 17:35:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-14 17:35:15 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-14 17:35:15 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:35:15 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-14 17:35:15 -==> Parameters: 469(String)
2020-03-14 17:35:15 -<==      Total: 1
2020-03-14 17:35:15 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-14 17:35:15 -==> Parameters: 469(String)
2020-03-14 17:35:15 -<==      Total: 1
2020-03-14 17:35:15 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-14 17:35:15 -==> Parameters: 469(String), 469(String)
2020-03-14 17:35:15 -<==      Total: 0
2020-03-14 17:35:15 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-14 17:35:15 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:35:15 -<==      Total: 1
2020-03-14 17:35:15 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-14 17:35:15 -==> Parameters: 469(String)
2020-03-14 17:35:15 -<==      Total: 0
2020-03-14 17:35:15 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-14 17:35:15 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:35:15 -<==      Total: 0
2020-03-14 17:35:15 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-14 17:35:15 -==> Parameters: 469(String)
2020-03-14 17:35:15 -<==      Total: 0
2020-03-14 17:35:15 -耗时 : 43
2020-03-14 17:35:15 -<==      Total: 1
2020-03-14 17:35:15 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-14 17:35:15 -==> Parameters: 469(String), 469(String)
2020-03-14 17:35:15 -<==      Total: 1
2020-03-14 17:35:15 -耗时 : 79
2020-03-14 17:41:11 -此处进行解密+验签+身份验证
2020-03-14 17:41:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:11 -此处进行解密+验签+身份验证
2020-03-14 17:41:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:41:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:41:11 -==> Parameters: 469(String)
2020-03-14 17:41:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:41:11 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:41:11 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:11 -<==      Total: 4
2020-03-14 17:41:11 -耗时 : 9
2020-03-14 17:41:11 -<==      Total: 88
2020-03-14 17:41:11 -耗时 : 29
2020-03-14 17:41:13 -此处进行解密+验签+身份验证
2020-03-14 17:41:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:41:13 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:41:13 -==> Parameters: 469(String)
2020-03-14 17:41:13 -<==      Total: 10
2020-03-14 17:41:13 -耗时 : 14
2020-03-14 17:41:16 -此处进行解密+验签+身份验证
2020-03-14 17:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:41:16 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:41:16 -==> Parameters: 469(String)
2020-03-14 17:41:16 -<==      Total: 88
2020-03-14 17:41:16 -耗时 : 9
2020-03-14 17:41:18 -此处进行解密+验签+身份验证
2020-03-14 17:41:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:41:18 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:41:18 -==> Parameters: 469(String)
2020-03-14 17:41:18 -<==      Total: 10
2020-03-14 17:41:18 -耗时 : 17
2020-03-14 17:41:22 -此处进行解密+验签+身份验证
2020-03-14 17:41:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:41:22 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-14 17:41:22 -==> Parameters: 469(String)
2020-03-14 17:41:22 -<==      Total: 0
2020-03-14 17:41:22 -耗时 : 17
2020-03-14 17:41:25 -此处进行解密+验签+身份验证
2020-03-14 17:41:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-14 17:41:25 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:41:25 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:25 -<==      Total: 0
2020-03-14 17:41:25 -耗时 : 16
2020-03-14 17:41:28 -此处进行解密+验签+身份验证
2020-03-14 17:41:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:41:28 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:41:28 -==> Parameters: 469(String)
2020-03-14 17:41:28 -<==      Total: 10
2020-03-14 17:41:28 -耗时 : 16
2020-03-14 17:41:32 -此处进行解密+验签+身份验证
2020-03-14 17:41:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:32 -此处进行解密+验签+身份验证
2020-03-14 17:41:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:41:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:41:32 -==> Parameters: 469(String)
2020-03-14 17:41:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:41:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:41:32 -<==      Total: 1
2020-03-14 17:41:32 -耗时 : 9
2020-03-14 17:41:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:41:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:41:32 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 1
2020-03-14 17:41:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:41:32 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 2
2020-03-14 17:41:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:41:32 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:41:32 -<==    Updates: 2
2020-03-14 17:41:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:41:32 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 1
2020-03-14 17:41:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:41:32 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 2
2020-03-14 17:41:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:41:32 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:41:32 -<==    Updates: 2
2020-03-14 17:41:32 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:41:32 -==> Parameters: 
2020-03-14 17:41:32 -<==      Total: 1
2020-03-14 17:41:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:41:32 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 2
2020-03-14 17:41:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:41:32 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:41:32 -<==    Updates: 2
2020-03-14 17:41:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:41:32 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 1
2020-03-14 17:41:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:41:32 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 2
2020-03-14 17:41:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:41:32 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:41:32 -<==    Updates: 2
2020-03-14 17:41:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:41:32 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:41:32 -<==      Total: 2
2020-03-14 17:41:32 -耗时 : 111
2020-03-14 17:41:38 -此处进行解密+验签+身份验证
2020-03-14 17:41:38 -此处进行解密+验签+身份验证
2020-03-14 17:41:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:41:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:41:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-14 17:41:38 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-14 17:41:38 -==> Parameters: 469(String)
2020-03-14 17:41:38 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-14 17:41:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-14 17:41:38 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-14 17:41:38 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-14 17:41:38 -==> Parameters: 469(String)
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-14 17:41:38 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-14 17:41:38 -==> Parameters: 469(String)
2020-03-14 17:41:38 -<==      Total: 0
2020-03-14 17:41:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-14 17:41:38 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:41:38 -<==      Total: 0
2020-03-14 17:41:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-14 17:41:38 -==> Parameters: 469(String)
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -耗时 : 43
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-14 17:41:38 -==> Parameters: 469(String), 469(String)
2020-03-14 17:41:38 -<==      Total: 1
2020-03-14 17:41:38 -耗时 : 81
2020-03-14 17:42:12 -此处进行解密+验签+身份验证
2020-03-14 17:42:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:42:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:42:12 -此处进行解密+验签+身份验证
2020-03-14 17:42:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:42:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:42:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:42:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:42:12 -==> Parameters: 469(String)
2020-03-14 17:42:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:42:12 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:42:12 -==> Parameters: 469(String), 469(String)
2020-03-14 17:42:12 -<==      Total: 4
2020-03-14 17:42:12 -耗时 : 10
2020-03-14 17:42:12 -<==      Total: 88
2020-03-14 17:42:12 -耗时 : 29
2020-03-14 17:42:17 -此处进行解密+验签+身份验证
2020-03-14 17:42:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:42:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:42:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:42:17 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:42:17 -==> Parameters: 469(String)
2020-03-14 17:42:17 -<==      Total: 10
2020-03-14 17:42:17 -耗时 : 15
2020-03-14 17:42:32 -此处进行解密+验签+身份验证
2020-03-14 17:42:32 -此处进行解密+验签+身份验证
2020-03-14 17:42:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:42:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:42:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:42:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:42:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-14 17:42:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-14 17:42:33 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-14 17:42:33 -==> Parameters: 469(String)
2020-03-14 17:42:33 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-14 17:42:33 -==> Parameters: 469(String), EPOS20200113071(String)
2020-03-14 17:42:33 -<==      Total: 2
2020-03-14 17:42:33 -耗时 : 11
2020-03-14 17:42:33 -<==      Total: 1
2020-03-14 17:42:33 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-14 17:42:33 -==> Parameters: 
2020-03-14 17:42:33 -<==      Total: 94
2020-03-14 17:42:33 -耗时 : 28
2020-03-14 17:43:25 -此处进行解密+验签+身份验证
2020-03-14 17:43:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:43:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:43:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-14 17:43:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-14 17:43:25 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-14 17:43:25 -==> Parameters: 691(String)
2020-03-14 17:43:25 -<==      Total: 1
2020-03-14 17:43:25 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_691,save content:{referer_id=469, parent_chain=469, user_tel=13763349409, id_card=441581198810311025, real_name=陈静慧, algebra=2, cre_date=20181222, cre_time=203829, login_password=ac7f900c9e04e2e39d76f3d722ee2815, manager_id=25, pay_password=ac7f900c9e04e2e39d76f3d722ee2815, id=691, auth_status=09, status=0}
2020-03-14 17:43:25 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-14 17:43:25 -==> Parameters: 469(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String)
2020-03-14 17:43:25 -<==      Total: 1
2020-03-14 17:43:25 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and sn in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) GROUP BY is_reward having count(1)>1 
2020-03-14 17:43:25 -==> Parameters: 469(String), EPOS20200113071(String), EPOS20200113072(String), EPOS20200113073(String), EPOS20200113074(String), EPOS20200113075(String), EPOS20200113076(String), EPOS20200113077(String), EPOS20200113078(String), EPOS20200113079(String), EPOS20200113080(String)
2020-03-14 17:43:25 -<==      Total: 1
2020-03-14 17:43:25 -耗时 : 80
2020-03-14 17:43:29 -此处进行解密+验签+身份验证
2020-03-14 17:43:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:43:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:43:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-14 17:43:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-14 17:43:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-14 17:43:29 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-14 17:43:29 -==> Parameters: 469(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String)
2020-03-14 17:43:29 -<==      Total: 1
2020-03-14 17:43:29 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and sn in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) GROUP BY is_reward having count(1)>1 
2020-03-14 17:43:29 -==> Parameters: 469(String), EPOS20200113071(String), EPOS20200113072(String), EPOS20200113073(String), EPOS20200113074(String), EPOS20200113075(String), EPOS20200113076(String), EPOS20200113077(String), EPOS20200113078(String), EPOS20200113079(String), EPOS20200113080(String)
2020-03-14 17:43:29 -<==      Total: 1
2020-03-14 17:43:29 -耗时 : 39
2020-03-14 17:50:44 -Starting LongEcologicalApplication on PC-201905161910 with PID 19780 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 17:50:44 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 17:50:44 -No active profile set, falling back to default profiles: default
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:50:45 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:50:45 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:50:46 -Finished Spring Data repository scanning in 205ms. Found 0 repository interfaces.
2020-03-14 17:50:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:50:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:50:46 -Finished Spring Data repository scanning in 107ms. Found 0 repository interfaces.
2020-03-14 17:50:47 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b79f49d8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:50:47 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b2232e78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:50:47 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 17:50:47 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 17:50:47 -Starting service [Tomcat]
2020-03-14 17:50:47 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 17:50:47 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 17:50:48 -Initializing Spring embedded WebApplicationContext
2020-03-14 17:50:48 -Root WebApplicationContext: initialization completed in 3961 ms
2020-03-14 17:50:48 -Filter xssFilter was not registered (disabled)
2020-03-14 17:50:48 -HikariPool-1 - Starting...
2020-03-14 17:50:48 -HikariPool-1 - Start completed.
2020-03-14 17:50:48 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 17:50:48 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 17:50:48 -HHH000206: hibernate.properties not found
2020-03-14 17:50:48 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 17:50:49 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 17:50:49 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 17:50:49 -Using default implementation for ThreadExecutor
2020-03-14 17:50:49 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 17:50:49 -Quartz Scheduler v.2.3.0 created.
2020-03-14 17:50:49 -RAMJobStore initialized.
2020-03-14 17:50:49 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 17:50:49 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 17:50:49 -Quartz scheduler version: 2.3.0
2020-03-14 17:50:49 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7b95bdb0
2020-03-14 17:50:50 -STAET TaskExecutorConfig
2020-03-14 17:50:50 -Initializing ExecutorService
2020-03-14 17:50:50 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 17:50:50 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 17:50:51 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 17:50:51 -Initializing ExecutorService 'taskScheduler'
2020-03-14 17:50:51 -Starting Quartz Scheduler now
2020-03-14 17:50:51 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 17:50:51 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 17:50:51 -Using a shared selector for servlet write/read
2020-03-14 17:50:51 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 17:50:51 -Started LongEcologicalApplication in 8.191 seconds (JVM running for 9.337)
2020-03-14 17:51:26 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 17:51:26 -Initializing Servlet 'dispatcherServlet'
2020-03-14 17:51:26 -Completed initialization in 13 ms
2020-03-14 17:51:27 -此处进行解密+验签+身份验证
2020-03-14 17:51:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:51:27 -Starting without optional epoll library
2020-03-14 17:51:27 -Starting without optional kqueue library
2020-03-14 17:51:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:51:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-14 17:51:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-14 17:51:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-14 17:51:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-14 17:51:27 -==> Parameters: 469(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String)
2020-03-14 17:51:27 -<==      Total: 1
2020-03-14 17:51:27 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and sn in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) 
2020-03-14 17:51:27 -==> Parameters: 469(String), EPOS20200113071(String), EPOS20200113072(String), EPOS20200113073(String), EPOS20200113074(String), EPOS20200113075(String), EPOS20200113076(String), EPOS20200113077(String), EPOS20200113078(String), EPOS20200113079(String), EPOS20200113080(String)
2020-03-14 17:51:27 -<==      Total: 1
2020-03-14 17:51:27 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and is_ward='0' and sn in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) 
2020-03-14 17:51:27 -==> Parameters: 469(String), EPOS20200113071(String), EPOS20200113072(String), EPOS20200113073(String), EPOS20200113074(String), EPOS20200113075(String), EPOS20200113076(String), EPOS20200113077(String), EPOS20200113078(String), EPOS20200113079(String), EPOS20200113080(String)
2020-03-14 17:51:28 -MachinesManageServiceImpl -- allocationTraditionalPos方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'is_ward' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\machines\MachinesManageMapper.xml]
### The error may involve com.example.longecological.mapper.machines.MachinesManageMapper.checkRepeatSetReward-Inline
### The error occurred while setting parameters
### SQL: select count(*) as cnt from t_user_traditional_pos_info where user_id=?         and pos_type='epos'        and is_ward='0'   and sn in    (      ?    ,     ?    ,     ?    ,     ?    ,     ?    ,     ?    ,     ?    ,     ?    ,     ?    ,     ?    )
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'is_ward' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 'is_ward' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkRepeatSetReward(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationTraditionalPos(MachinesManageServiceImpl.java:366)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$2a480a2e.allocationTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationTraditionalPos(MachinesManageController.java:192)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$59ec8982.allocationTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 17:51:28 -耗时 : 195
2020-03-14 17:52:40 -Starting LongEcologicalApplication on PC-201905161910 with PID 13456 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 17:52:40 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 17:52:40 -No active profile set, falling back to default profiles: default
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:41 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:52:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:52:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:52:42 -Finished Spring Data repository scanning in 117ms. Found 0 repository interfaces.
2020-03-14 17:52:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:52:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:52:42 -Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2020-03-14 17:52:42 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$bae0e229] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:52:42 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b564c6c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:52:43 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 17:52:43 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 17:52:43 -Starting service [Tomcat]
2020-03-14 17:52:43 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 17:52:43 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 17:52:43 -Initializing Spring embedded WebApplicationContext
2020-03-14 17:52:43 -Root WebApplicationContext: initialization completed in 3149 ms
2020-03-14 17:52:43 -Filter xssFilter was not registered (disabled)
2020-03-14 17:52:44 -HikariPool-1 - Starting...
2020-03-14 17:52:44 -HikariPool-1 - Start completed.
2020-03-14 17:52:44 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 17:52:44 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 17:52:44 -HHH000206: hibernate.properties not found
2020-03-14 17:52:44 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 17:52:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 17:52:45 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 17:52:46 -Using default implementation for ThreadExecutor
2020-03-14 17:52:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 17:52:46 -Quartz Scheduler v.2.3.0 created.
2020-03-14 17:52:46 -RAMJobStore initialized.
2020-03-14 17:52:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 17:52:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 17:52:46 -Quartz scheduler version: 2.3.0
2020-03-14 17:52:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6d969330
2020-03-14 17:52:47 -STAET TaskExecutorConfig
2020-03-14 17:52:47 -Initializing ExecutorService
2020-03-14 17:52:47 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 17:52:47 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 17:52:48 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 17:52:48 -Initializing ExecutorService 'taskScheduler'
2020-03-14 17:52:48 -Starting Quartz Scheduler now
2020-03-14 17:52:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 17:52:48 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 17:52:48 -Using a shared selector for servlet write/read
2020-03-14 17:52:48 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 17:52:48 -Started LongEcologicalApplication in 8.579 seconds (JVM running for 9.734)
2020-03-14 17:54:40 -Starting LongEcologicalApplication on PC-201905161910 with PID 920 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-14 17:54:40 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-14 17:54:40 -No active profile set, falling back to default profiles: default
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-14 17:54:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:54:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:54:42 -Finished Spring Data repository scanning in 95ms. Found 0 repository interfaces.
2020-03-14 17:54:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-14 17:54:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-14 17:54:42 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-14 17:54:43 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$970bf2a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:54:43 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$918fd747] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-14 17:54:44 -Tomcat initialized with port(s): 8080 (http)
2020-03-14 17:54:44 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-14 17:54:44 -Starting service [Tomcat]
2020-03-14 17:54:44 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-14 17:54:44 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-14 17:54:44 -Initializing Spring embedded WebApplicationContext
2020-03-14 17:54:44 -Root WebApplicationContext: initialization completed in 3865 ms
2020-03-14 17:54:44 -Filter xssFilter was not registered (disabled)
2020-03-14 17:54:44 -HikariPool-1 - Starting...
2020-03-14 17:54:45 -HikariPool-1 - Start completed.
2020-03-14 17:54:45 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-14 17:54:45 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-14 17:54:45 -HHH000206: hibernate.properties not found
2020-03-14 17:54:45 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-14 17:54:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-14 17:54:46 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 17:54:46 -Using default implementation for ThreadExecutor
2020-03-14 17:54:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-14 17:54:46 -Quartz Scheduler v.2.3.0 created.
2020-03-14 17:54:46 -RAMJobStore initialized.
2020-03-14 17:54:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-14 17:54:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-14 17:54:46 -Quartz scheduler version: 2.3.0
2020-03-14 17:54:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@37c37d67
2020-03-14 17:54:47 -STAET TaskExecutorConfig
2020-03-14 17:54:47 -Initializing ExecutorService
2020-03-14 17:54:47 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-14 17:54:47 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-14 17:54:48 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-14 17:54:48 -Initializing ExecutorService 'taskScheduler'
2020-03-14 17:54:48 -Starting Quartz Scheduler now
2020-03-14 17:54:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-14 17:54:48 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-14 17:54:49 -Using a shared selector for servlet write/read
2020-03-14 17:54:49 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-14 17:54:49 -Started LongEcologicalApplication in 9.66 seconds (JVM running for 11.283)
2020-03-14 17:55:07 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-14 17:55:07 -Initializing Servlet 'dispatcherServlet'
2020-03-14 17:55:07 -Completed initialization in 17 ms
2020-03-14 17:55:07 -此处进行解密+验签+身份验证
2020-03-14 17:55:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:55:07 -Starting without optional epoll library
2020-03-14 17:55:07 -Starting without optional kqueue library
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:55:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-14 17:55:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-14 17:55:08 -==> Parameters: 469(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String)
2020-03-14 17:55:08 -<==      Total: 1
2020-03-14 17:55:08 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and sn in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) 
2020-03-14 17:55:08 -==> Parameters: 469(String), EPOS20200113071(String), EPOS20200113072(String), EPOS20200113073(String), EPOS20200113074(String), EPOS20200113075(String), EPOS20200113076(String), EPOS20200113077(String), EPOS20200113078(String), EPOS20200113079(String), EPOS20200113080(String)
2020-03-14 17:55:08 -<==      Total: 1
2020-03-14 17:55:08 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type='epos' and is_reward='0' and sn in ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) 
2020-03-14 17:55:08 -==> Parameters: 469(String), EPOS20200113071(String), EPOS20200113072(String), EPOS20200113073(String), EPOS20200113074(String), EPOS20200113075(String), EPOS20200113076(String), EPOS20200113077(String), EPOS20200113078(String), EPOS20200113079(String), EPOS20200113080(String)
2020-03-14 17:55:08 -<==      Total: 1
2020-03-14 17:55:08 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-14 17:55:08 -==> Parameters: 691(String), 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String), 20200314(String), 175508(String), 0.485(String), 1(String), 469(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String), 691(String)
2020-03-14 17:55:08 -<==    Updates: 10
2020-03-14 17:55:08 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-14 17:55:08 -==> Parameters: 0.485(String), 0.26(String), 0.26(String), 0.26(String), 0.00(String), 0.000(String), 20(String), 20200314(String), 175508(String), 691(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String)
2020-03-14 17:55:08 -<==    Updates: 0
2020-03-14 17:55:08 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-14 17:55:08 -==> Parameters: 20200314(String), 175508(String), 469(String), EPOS20200113071,EPOS20200113072,EPOS20200113073,EPOS20200113074,EPOS20200113075,EPOS20200113076,EPOS20200113077,EPOS20200113078,EPOS20200113079,EPOS20200113080(String)
2020-03-14 17:55:08 -<==    Updates: 10
2020-03-14 17:55:08 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) 
2020-03-14 17:55:08 -==> Parameters: 469_20200314175508(String), EPOS20200113071(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113072(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113073(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113074(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113075(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113076(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113077(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113078(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113079(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String), 469_20200314175508(String), EPOS20200113080(String), 691(String), epos(String), 2020-03-14 17:55:08(String), 469(String)
2020-03-14 17:55:08 -<==    Updates: 10
2020-03-14 17:55:08 -耗时 : 361
2020-03-14 17:55:08 -此处进行解密+验签+身份验证
2020-03-14 17:55:08 -此处进行解密+验签+身份验证
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:55:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:55:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:55:08 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:55:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:55:08 -==> Parameters: 469(String)
2020-03-14 17:55:09 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:55:09 -==> Parameters: 469(String), 469(String)
2020-03-14 17:55:09 -<==      Total: 0
2020-03-14 17:55:09 -耗时 : 24
2020-03-14 17:55:23 -<==      Total: 4
2020-03-14 17:55:23 -耗时 : 14027
2020-03-14 17:56:39 -此处进行解密+验签+身份验证
2020-03-14 17:56:39 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 17:56:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-14 17:56:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-14 17:56:39 -耗时 : 20
2020-03-14 17:56:51 -此处进行解密+验签+身份验证
2020-03-14 17:56:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:56:51 -此处进行解密+验签+身份验证
2020-03-14 17:56:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:56:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:56:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:56:51 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:56:51 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:56:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:56:51 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:56:51 -==> Parameters: 469(String)
2020-03-14 17:56:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:56:51 -<==      Total: 1
2020-03-14 17:56:51 -耗时 : 25
2020-03-14 17:56:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:56:51 -==> Parameters: 469(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 1
2020-03-14 17:56:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:56:51 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 2
2020-03-14 17:56:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:56:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:56:51 -<==    Updates: 2
2020-03-14 17:56:51 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:56:51 -==> Parameters: 469(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 1
2020-03-14 17:56:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:56:51 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 2
2020-03-14 17:56:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:56:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:56:51 -<==    Updates: 2
2020-03-14 17:56:51 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:56:51 -==> Parameters: 
2020-03-14 17:56:51 -<==      Total: 1
2020-03-14 17:56:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:56:51 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 2
2020-03-14 17:56:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:56:51 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:56:51 -<==    Updates: 2
2020-03-14 17:56:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:56:51 -==> Parameters: 469(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 1
2020-03-14 17:56:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:56:51 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 2
2020-03-14 17:56:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:56:51 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:56:51 -<==    Updates: 2
2020-03-14 17:56:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:56:51 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:56:51 -<==      Total: 2
2020-03-14 17:56:51 -耗时 : 156
2020-03-14 17:57:02 -此处进行解密+验签+身份验证
2020-03-14 17:57:02 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 17:57:02 -此处进行解密+验签+身份验证
2020-03-14 17:57:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-14 17:57:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-14 17:57:02 -耗时 : 14
2020-03-14 17:57:02 -此处进行解密+验签+身份验证
2020-03-14 17:57:02 -解密：
2020-03-14 17:57:02 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"E1ADF59E2F7EBB244336AF6F5C690923","version_no":"450000000145206","login_type":"token","token":"469|7F8VM7UURKH4OH6WHY8R77CKKFJEAGLD","sys_user_account":""}
2020-03-14 17:57:03 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 17:57:03 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:57:03 -token值=======469|7F8VM7UURKH4OH6WHY8R77CKKFJEAGLD
2020-03-14 17:57:03 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:57:03 -==> Parameters: 04(String), 04(String)
2020-03-14 17:57:03 -<==      Total: 0
2020-03-14 17:57:03 -耗时 : 24
2020-03-14 17:57:03 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 17:57:03 -==> Parameters: 469(String)
2020-03-14 17:57:03 -<==      Total: 1
2020-03-14 17:57:03 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-14 17:57:03 -==> Parameters: 25(String)
2020-03-14 17:57:03 -<==      Total: 1
2020-03-14 17:57:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:57:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:57:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:57:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:57:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-14 17:57:03 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-14 17:57:03 -耗时 : 99
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:57:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:57:07 -==> Parameters: 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -耗时 : 20
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -解密：
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 17:57:07 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 17:57:07 -==> Parameters: 01(String), 01(String)
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:07 -<==      Total: 7
2020-03-14 17:57:07 -耗时 : 14
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 17:57:07 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-14 17:57:07 -==> Parameters: 469(String)
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:07 -此处进行解密+验签+身份验证
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -耗时 : 15
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:07 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-14 17:57:07 -==> Parameters: 
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:57:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:57:07 -==> Parameters: 469(String)
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:57:07 -<==      Total: 3
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:57:07 -耗时 : 17
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -耗时 : 14
2020-03-14 17:57:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:57:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:57:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:07 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:07 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:57:07 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:57:07 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:57:07 -==> Parameters: 
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:57:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:57:07 -==> Parameters: 
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:07 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -耗时 : 142
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:07 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 1
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:57:07 -<==    Updates: 2
2020-03-14 17:57:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:07 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:57:07 -<==      Total: 2
2020-03-14 17:57:07 -耗时 : 212
2020-03-14 17:57:16 -此处进行解密+验签+身份验证
2020-03-14 17:57:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:16 -此处进行解密+验签+身份验证
2020-03-14 17:57:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:16 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-14 17:57:16 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-14 17:57:16 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-14 17:57:16 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-14 17:57:16 -==> Parameters: 469(String)
2020-03-14 17:57:16 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-14 17:57:16 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-14 17:57:16 -==> Parameters: 469(String)
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-14 17:57:16 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-14 17:57:16 -==> Parameters: 469(String)
2020-03-14 17:57:16 -<==      Total: 0
2020-03-14 17:57:16 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-14 17:57:16 -==> Parameters: 202003(String), 469(String)
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-14 17:57:16 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:16 -<==      Total: 0
2020-03-14 17:57:16 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-14 17:57:16 -==> Parameters: 469(String)
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -耗时 : 89
2020-03-14 17:57:16 -<==      Total: 1
2020-03-14 17:57:16 -耗时 : 86
2020-03-14 17:57:26 -此处进行解密+验签+身份验证
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:26 -此处进行解密+验签+身份验证
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:26 -此处进行解密+验签+身份验证
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:26 -此处进行解密+验签+身份验证
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:26 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyEposDetail
2020-03-14 17:57:26 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyEposDetail
2020-03-14 17:57:26 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-14 17:57:26 -==> Parameters: 469(String), 20200314(String)
2020-03-14 17:57:26 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-14 17:57:26 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:57:26 -<==      Total: 1
2020-03-14 17:57:26 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantEposDetail
2020-03-14 17:57:26 -耗时 : 13
2020-03-14 17:57:26 -<==      Total: 1
2020-03-14 17:57:26 -耗时 : 19
2020-03-14 17:57:26 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-14 17:57:26 -==> Parameters: 469(String), 20200314(String)
2020-03-14 17:57:26 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantEposDetail
2020-03-14 17:57:26 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-14 17:57:26 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:57:26 -<==      Total: 1
2020-03-14 17:57:26 -耗时 : 15
2020-03-14 17:57:26 -<==      Total: 1
2020-03-14 17:57:26 -耗时 : 10
2020-03-14 17:57:31 -此处进行解密+验签+身份验证
2020-03-14 17:57:31 -此处进行解密+验签+身份验证
2020-03-14 17:57:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:57:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:57:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:57:31 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:57:31 -==> Parameters: 469(String)
2020-03-14 17:57:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:57:31 -<==      Total: 1
2020-03-14 17:57:31 -耗时 : 12
2020-03-14 17:57:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:31 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 1
2020-03-14 17:57:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:31 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 2
2020-03-14 17:57:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:31 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:57:31 -<==    Updates: 2
2020-03-14 17:57:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:57:31 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 1
2020-03-14 17:57:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:31 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 2
2020-03-14 17:57:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:31 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:57:31 -<==    Updates: 2
2020-03-14 17:57:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:57:31 -==> Parameters: 
2020-03-14 17:57:31 -<==      Total: 1
2020-03-14 17:57:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:31 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 2
2020-03-14 17:57:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:31 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:57:31 -<==    Updates: 2
2020-03-14 17:57:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:31 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 1
2020-03-14 17:57:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:31 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 2
2020-03-14 17:57:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:31 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:57:31 -<==    Updates: 2
2020-03-14 17:57:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:31 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:57:31 -<==      Total: 2
2020-03-14 17:57:31 -耗时 : 207
2020-03-14 17:57:34 -此处进行解密+验签+身份验证
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:34 -此处进行解密+验签+身份验证
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:34 -此处进行解密+验签+身份验证
2020-03-14 17:57:34 -此处进行解密+验签+身份验证
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-14 17:57:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-14 17:57:34 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-14 17:57:34 -==> Parameters: 469(String)
2020-03-14 17:57:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 17:57:34 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:57:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-14 17:57:34 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-14 17:57:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 17:57:34 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:57:34 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-14 17:57:34 -==> Parameters: 469(String), 202003(String)
2020-03-14 17:57:34 -<==      Total: 1
2020-03-14 17:57:34 -耗时 : 14
2020-03-14 17:57:34 -<==      Total: 1
2020-03-14 17:57:34 -耗时 : 10
2020-03-14 17:57:34 -<==      Total: 1
2020-03-14 17:57:34 -耗时 : 23
2020-03-14 17:57:34 -<==      Total: 1
2020-03-14 17:57:34 -耗时 : 21
2020-03-14 17:57:41 -此处进行解密+验签+身份验证
2020-03-14 17:57:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:57:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:57:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:57:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:41 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 1
2020-03-14 17:57:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:41 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 2
2020-03-14 17:57:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:41 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:57:41 -<==    Updates: 2
2020-03-14 17:57:41 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:57:41 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 1
2020-03-14 17:57:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:41 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 2
2020-03-14 17:57:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:41 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:57:41 -<==    Updates: 2
2020-03-14 17:57:41 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:57:41 -==> Parameters: 
2020-03-14 17:57:41 -<==      Total: 1
2020-03-14 17:57:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:41 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 2
2020-03-14 17:57:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:41 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:57:41 -<==    Updates: 2
2020-03-14 17:57:41 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:41 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 1
2020-03-14 17:57:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:41 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 2
2020-03-14 17:57:41 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:41 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:57:41 -<==    Updates: 2
2020-03-14 17:57:41 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:41 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:57:41 -<==      Total: 2
2020-03-14 17:57:41 -耗时 : 150
2020-03-14 17:57:45 -此处进行解密+验签+身份验证
2020-03-14 17:57:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:57:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:57:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:57:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:45 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 1
2020-03-14 17:57:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:45 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 2
2020-03-14 17:57:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:57:45 -<==    Updates: 2
2020-03-14 17:57:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:57:45 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 1
2020-03-14 17:57:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:45 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 2
2020-03-14 17:57:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:57:45 -<==    Updates: 2
2020-03-14 17:57:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:57:45 -==> Parameters: 
2020-03-14 17:57:45 -<==      Total: 1
2020-03-14 17:57:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:45 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 2
2020-03-14 17:57:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:45 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:57:45 -<==    Updates: 2
2020-03-14 17:57:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:45 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 1
2020-03-14 17:57:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:45 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 2
2020-03-14 17:57:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:57:45 -<==    Updates: 2
2020-03-14 17:57:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:45 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:57:45 -<==      Total: 2
2020-03-14 17:57:45 -耗时 : 204
2020-03-14 17:57:46 -此处进行解密+验签+身份验证
2020-03-14 17:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:46 -此处进行解密+验签+身份验证
2020-03-14 17:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 17:57:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 17:57:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 17:57:46 -==> Parameters: 469(String)
2020-03-14 17:57:46 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 17:57:46 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:46 -<==      Total: 4
2020-03-14 17:57:46 -耗时 : 13
2020-03-14 17:57:46 -<==      Total: 88
2020-03-14 17:57:46 -耗时 : 44
2020-03-14 17:57:48 -此处进行解密+验签+身份验证
2020-03-14 17:57:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:57:48 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:57:48 -==> Parameters: 469(String)
2020-03-14 17:57:48 -<==      Total: 0
2020-03-14 17:57:48 -耗时 : 17
2020-03-14 17:57:49 -此处进行解密+验签+身份验证
2020-03-14 17:57:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 17:57:49 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 17:57:49 -==> Parameters: 469(String)
2020-03-14 17:57:49 -<==      Total: 0
2020-03-14 17:57:49 -耗时 : 24
2020-03-14 17:57:52 -此处进行解密+验签+身份验证
2020-03-14 17:57:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-14 17:57:52 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-14 17:57:52 -==> Parameters: 469(String)
2020-03-14 17:57:52 -<==      Total: 88
2020-03-14 17:57:52 -耗时 : 14
2020-03-14 17:57:53 -此处进行解密+验签+身份验证
2020-03-14 17:57:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:57:54 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:57:54 -==> Parameters: 469(String)
2020-03-14 17:57:54 -<==      Total: 0
2020-03-14 17:57:54 -耗时 : 14
2020-03-14 17:57:54 -此处进行解密+验签+身份验证
2020-03-14 17:57:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-14 17:57:54 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-14 17:57:54 -==> Parameters: 469(String)
2020-03-14 17:57:54 -<==      Total: 0
2020-03-14 17:57:54 -耗时 : 21
2020-03-14 17:57:56 -此处进行解密+验签+身份验证
2020-03-14 17:57:56 -此处进行解密+验签+身份验证
2020-03-14 17:57:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:57:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:57:56 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 17:57:56 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 17:57:56 -==> Parameters: 469(String)
2020-03-14 17:57:56 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 17:57:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 17:57:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 17:57:56 -<==      Total: 1
2020-03-14 17:57:56 -耗时 : 18
2020-03-14 17:57:56 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:56 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 1
2020-03-14 17:57:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:56 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 2
2020-03-14 17:57:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:56 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 17:57:56 -<==    Updates: 2
2020-03-14 17:57:56 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 17:57:56 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 1
2020-03-14 17:57:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:56 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 2
2020-03-14 17:57:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:56 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 17:57:56 -<==    Updates: 2
2020-03-14 17:57:56 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 17:57:56 -==> Parameters: 
2020-03-14 17:57:56 -<==      Total: 1
2020-03-14 17:57:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:56 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 2
2020-03-14 17:57:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:56 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 17:57:56 -<==    Updates: 2
2020-03-14 17:57:56 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 17:57:56 -==> Parameters: 469(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 1
2020-03-14 17:57:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:56 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 2
2020-03-14 17:57:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 17:57:56 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 17:57:56 -<==    Updates: 2
2020-03-14 17:57:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 17:57:56 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 17:57:56 -<==      Total: 2
2020-03-14 17:57:56 -耗时 : 141
2020-03-14 17:58:15 -此处进行解密+验签+身份验证
2020-03-14 17:58:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:15 -此处进行解密+验签+身份验证
2020-03-14 17:58:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 17:58:15 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-14 17:58:15 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-14 17:58:15 -==> Parameters: 469(String)
2020-03-14 17:58:15 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-14 17:58:15 -==> Parameters: 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-14 17:58:16 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-14 17:58:16 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:58:16 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:58:16 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:58:16 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:58:16 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-14 17:58:16 -==> Parameters: 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -耗时 : 63
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-14 17:58:16 -==> Parameters: 469(String)
2020-03-14 17:58:16 -<==      Total: 1
2020-03-14 17:58:16 -耗时 : 72
2020-03-14 17:58:18 -此处进行解密+验签+身份验证
2020-03-14 17:58:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 17:58:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-14 17:58:18 -==> Parameters: 469(String)
2020-03-14 17:58:18 -<==      Total: 1
2020-03-14 17:58:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-14 17:58:18 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 17:58:18 -<==      Total: 1
2020-03-14 17:58:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 17:58:18 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 17:58:18 -<==      Total: 1
2020-03-14 17:58:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 17:58:18 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 17:58:18 -<==      Total: 1
2020-03-14 17:58:18 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-14 17:58:18 -==> Parameters: 469(String)
2020-03-14 17:58:18 -<==      Total: 1
2020-03-14 17:58:18 -耗时 : 58
2020-03-14 17:58:25 -此处进行解密+验签+身份验证
2020-03-14 17:58:25 -此处进行解密+验签+身份验证
2020-03-14 17:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 17:58:25 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 17:58:25 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 17:58:25 -==> Parameters: 469(String)
2020-03-14 17:58:25 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 17:58:25 -==> Parameters: 469(String)
2020-03-14 17:58:25 -<==      Total: 3
2020-03-14 17:58:25 -<==      Total: 1
2020-03-14 17:58:25 -耗时 : 15
2020-03-14 17:58:25 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 17:58:25 -==> Parameters: 469(String)
2020-03-14 17:58:25 -<==      Total: 1
2020-03-14 17:58:25 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 17:58:25 -==> Parameters: 469(String)
2020-03-14 17:58:25 -<==      Total: 1
2020-03-14 17:58:25 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 17:58:25 -==> Parameters: 469(String)
2020-03-14 17:58:25 -<==      Total: 0
2020-03-14 17:58:25 -耗时 : 60
2020-03-14 17:58:55 -此处进行解密+验签+身份验证
2020-03-14 17:58:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:55 -此处进行解密+验签+身份验证
2020-03-14 17:58:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 17:58:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 17:58:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 17:58:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 17:58:55 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 17:58:55 -==> Parameters: 469(String)
2020-03-14 17:58:55 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 17:58:55 -==> Parameters: 469(String)
2020-03-14 17:58:55 -<==      Total: 1
2020-03-14 17:58:55 -<==      Total: 3
2020-03-14 17:58:55 -耗时 : 20
2020-03-14 17:58:55 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 17:58:55 -==> Parameters: 469(String)
2020-03-14 17:58:55 -<==      Total: 1
2020-03-14 17:58:55 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 17:58:55 -==> Parameters: 469(String)
2020-03-14 17:58:55 -<==      Total: 1
2020-03-14 17:58:55 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 17:58:55 -==> Parameters: 469(String)
2020-03-14 17:58:55 -<==      Total: 0
2020-03-14 17:58:55 -耗时 : 41
2020-03-14 18:06:11 -此处进行解密+验签+身份验证
2020-03-14 18:06:11 -此处进行解密+验签+身份验证
2020-03-14 18:06:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 18:06:12 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 18:06:12 -==> Parameters: 469(String)
2020-03-14 18:06:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 18:06:12 -<==      Total: 1
2020-03-14 18:06:12 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 18:06:12 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 18:06:12 -==> Parameters: 469(String)
2020-03-14 18:06:12 -==> Parameters: 469(String)
2020-03-14 18:06:12 -<==      Total: 1
2020-03-14 18:06:12 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 18:06:12 -==> Parameters: 469(String)
2020-03-14 18:06:12 -<==      Total: 3
2020-03-14 18:06:12 -耗时 : 22
2020-03-14 18:06:12 -<==      Total: 1
2020-03-14 18:06:12 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 18:06:12 -==> Parameters: 469(String)
2020-03-14 18:06:12 -<==      Total: 0
2020-03-14 18:06:12 -耗时 : 39
2020-03-14 18:06:16 -此处进行解密+验签+身份验证
2020-03-14 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:16 -此处进行解密+验签+身份验证
2020-03-14 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-14 18:06:16 -==> Parameters: 469(String)
2020-03-14 18:06:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-14 18:06:16 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-14 18:06:16 -==> Parameters: 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 18:06:16 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 18:06:16 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-14 18:06:16 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-14 18:06:16 -==> Parameters: 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 18:06:16 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -耗时 : 47
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 18:06:16 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-14 18:06:16 -==> Parameters: 469(String)
2020-03-14 18:06:16 -<==      Total: 1
2020-03-14 18:06:16 -耗时 : 70
2020-03-14 18:06:18 -此处进行解密+验签+身份验证
2020-03-14 18:06:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 18:06:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-14 18:06:18 -==> Parameters: 469(String)
2020-03-14 18:06:18 -<==      Total: 1
2020-03-14 18:06:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-14 18:06:18 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 18:06:18 -<==      Total: 1
2020-03-14 18:06:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 18:06:18 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 18:06:18 -<==      Total: 1
2020-03-14 18:06:18 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 18:06:18 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 18:06:18 -<==      Total: 1
2020-03-14 18:06:18 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-14 18:06:18 -==> Parameters: 469(String)
2020-03-14 18:06:18 -<==      Total: 1
2020-03-14 18:06:18 -耗时 : 36
2020-03-14 18:06:26 -此处进行解密+验签+身份验证
2020-03-14 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:26 -此处进行解密+验签+身份验证
2020-03-14 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-14 18:06:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-14 18:06:26 -==> Parameters: 469(String)
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-14 18:06:26 -==> Parameters: 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-14 18:06:26 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-14 18:06:26 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 18:06:26 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-14 18:06:26 -==> Parameters: 469(String), 469(String), 20200213(String), 20200314(String), 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 18:06:26 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-14 18:06:26 -==> Parameters: 469(String), 20200114(String), 469(String), 20200114(String), 20200314(String), 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-14 18:06:26 -==> Parameters: 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-14 18:06:26 -==> Parameters: 469(String)
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -耗时 : 69
2020-03-14 18:06:26 -<==      Total: 1
2020-03-14 18:06:26 -耗时 : 74
2020-03-14 18:28:43 -此处进行解密+验签+身份验证
2020-03-14 18:28:43 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 18:28:43 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-14 18:28:43 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor97.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$1a7c934d.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$f75b4fc.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-14 18:28:43 -耗时 : 14
2020-03-14 18:28:43 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-14 18:28:43 -Reconnected to 120.25.164.176:10379
2020-03-14 18:28:49 -此处进行解密+验签+身份验证
2020-03-14 18:28:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:28:49 -此处进行解密+验签+身份验证
2020-03-14 18:28:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:28:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:28:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:28:49 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:28:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:28:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:28:49 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:28:49 -==> Parameters: 469(String)
2020-03-14 18:28:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:28:49 -<==      Total: 1
2020-03-14 18:28:49 -耗时 : 11
2020-03-14 18:28:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:28:49 -==> Parameters: 469(String), 469(String)
2020-03-14 18:28:49 -<==      Total: 1
2020-03-14 18:28:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:28:49 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:28:49 -<==      Total: 2
2020-03-14 18:28:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:28:49 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:28:49 -<==    Updates: 2
2020-03-14 18:28:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:28:49 -==> Parameters: 469(String), 469(String)
2020-03-14 18:28:49 -<==      Total: 1
2020-03-14 18:28:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:28:49 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:28:49 -<==      Total: 2
2020-03-14 18:28:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:28:49 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:28:49 -<==    Updates: 2
2020-03-14 18:28:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:28:49 -==> Parameters: 
2020-03-14 18:28:49 -<==      Total: 1
2020-03-14 18:28:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:28:49 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:28:49 -<==      Total: 2
2020-03-14 18:28:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:28:49 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:28:50 -<==    Updates: 2
2020-03-14 18:28:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:28:50 -==> Parameters: 469(String), 469(String)
2020-03-14 18:28:50 -<==      Total: 1
2020-03-14 18:28:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:28:50 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:28:50 -<==      Total: 2
2020-03-14 18:28:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:28:50 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:28:50 -<==    Updates: 2
2020-03-14 18:28:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:28:50 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:28:50 -<==      Total: 2
2020-03-14 18:28:50 -耗时 : 110
2020-03-14 18:28:51 -此处进行解密+验签+身份验证
2020-03-14 18:28:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:28:51 -此处进行解密+验签+身份验证
2020-03-14 18:28:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:28:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:28:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:28:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 18:28:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 18:28:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 18:28:51 -==> Parameters: 469(String)
2020-03-14 18:28:51 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 18:28:51 -==> Parameters: 469(String), 469(String)
2020-03-14 18:28:51 -<==      Total: 4
2020-03-14 18:28:51 -耗时 : 23
2020-03-14 18:28:51 -<==      Total: 88
2020-03-14 18:28:51 -耗时 : 32
2020-03-14 18:28:54 -此处进行解密+验签+身份验证
2020-03-14 18:28:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:28:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:28:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:28:54 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 18:28:54 -==> Parameters: 469(String)
2020-03-14 18:28:54 -<==      Total: 0
2020-03-14 18:28:54 -耗时 : 15
2020-03-14 18:28:55 -此处进行解密+验签+身份验证
2020-03-14 18:28:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:28:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:28:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:28:55 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 18:28:55 -==> Parameters: 469(String)
2020-03-14 18:28:56 -<==      Total: 0
2020-03-14 18:28:56 -耗时 : 14
2020-03-14 18:29:17 -此处进行解密+验签+身份验证
2020-03-14 18:29:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:29:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:29:17 -此处进行解密+验签+身份验证
2020-03-14 18:29:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:29:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:29:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:29:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:29:17 -==> Parameters: 469(String)
2020-03-14 18:29:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:29:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:29:17 -<==      Total: 1
2020-03-14 18:29:17 -耗时 : 10
2020-03-14 18:29:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:29:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:29:17 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 1
2020-03-14 18:29:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:17 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 2
2020-03-14 18:29:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:17 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:29:17 -<==    Updates: 2
2020-03-14 18:29:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:29:17 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 1
2020-03-14 18:29:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:17 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 2
2020-03-14 18:29:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:17 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:29:17 -<==    Updates: 2
2020-03-14 18:29:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:29:17 -==> Parameters: 
2020-03-14 18:29:17 -<==      Total: 1
2020-03-14 18:29:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:17 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 2
2020-03-14 18:29:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:17 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:29:17 -<==    Updates: 2
2020-03-14 18:29:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:29:17 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 1
2020-03-14 18:29:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:17 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 2
2020-03-14 18:29:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:17 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:29:17 -<==    Updates: 2
2020-03-14 18:29:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:17 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:29:17 -<==      Total: 2
2020-03-14 18:29:17 -耗时 : 118
2020-03-14 18:29:21 -此处进行解密+验签+身份验证
2020-03-14 18:29:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:29:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:29:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:29:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:29:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:29:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:29:21 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 1
2020-03-14 18:29:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:21 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 2
2020-03-14 18:29:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:29:21 -<==    Updates: 2
2020-03-14 18:29:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:29:21 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 1
2020-03-14 18:29:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:21 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 2
2020-03-14 18:29:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:29:21 -<==    Updates: 2
2020-03-14 18:29:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:29:21 -==> Parameters: 
2020-03-14 18:29:21 -<==      Total: 1
2020-03-14 18:29:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:21 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 2
2020-03-14 18:29:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:21 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:29:21 -<==    Updates: 2
2020-03-14 18:29:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:29:21 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 1
2020-03-14 18:29:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:21 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 2
2020-03-14 18:29:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:29:21 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:29:21 -<==    Updates: 2
2020-03-14 18:29:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:29:21 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:29:21 -<==      Total: 2
2020-03-14 18:29:21 -耗时 : 108
2020-03-14 18:29:23 -此处进行解密+验签+身份验证
2020-03-14 18:29:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:29:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:29:23 -此处进行解密+验签+身份验证
2020-03-14 18:29:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 18:29:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:29:23 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 18:29:23 -==> Parameters: 469(String)
2020-03-14 18:29:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:29:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 18:29:23 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 18:29:23 -==> Parameters: 469(String), 469(String)
2020-03-14 18:29:23 -<==      Total: 88
2020-03-14 18:29:23 -耗时 : 32
2020-03-14 18:29:23 -<==      Total: 4
2020-03-14 18:29:23 -耗时 : 22
2020-03-14 18:29:25 -此处进行解密+验签+身份验证
2020-03-14 18:29:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:29:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:29:25 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:29:25 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 18:29:25 -==> Parameters: 469(String)
2020-03-14 18:29:25 -<==      Total: 0
2020-03-14 18:29:25 -耗时 : 28
2020-03-14 18:30:17 -此处进行解密+验签+身份验证
2020-03-14 18:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:30:17 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:30:17 -==> Parameters: 469(String)
2020-03-14 18:30:17 -<==      Total: 1
2020-03-14 18:30:17 -耗时 : 15
2020-03-14 18:30:21 -此处进行解密+验签+身份验证
2020-03-14 18:30:21 -此处进行解密+验签+身份验证
2020-03-14 18:30:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-14 18:30:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-14 18:30:21 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-14 18:30:21 -==> Parameters: 469(String)
2020-03-14 18:30:21 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-14 18:30:21 -==> Parameters: 469(String), E20200308109(String)
2020-03-14 18:30:21 -<==      Total: 2
2020-03-14 18:30:21 -耗时 : 10
2020-03-14 18:30:21 -<==      Total: 1
2020-03-14 18:30:21 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-14 18:30:21 -==> Parameters: 
2020-03-14 18:30:21 -<==      Total: 94
2020-03-14 18:30:21 -耗时 : 47
2020-03-14 18:30:45 -此处进行解密+验签+身份验证
2020-03-14 18:30:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:45 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-14 18:30:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-14 18:30:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-14 18:30:45 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-14 18:30:45 -==> Parameters: 469(String), E20200308109(String), 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String)
2020-03-14 18:30:45 -<==      Total: 1
2020-03-14 18:30:45 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? ) 
2020-03-14 18:30:45 -==> Parameters: 469(String), E20200308109(String)
2020-03-14 18:30:45 -<==      Total: 1
2020-03-14 18:30:45 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and is_reward='0' and sn in ( ? ) 
2020-03-14 18:30:45 -==> Parameters: 469(String), E20200308109(String)
2020-03-14 18:30:45 -<==      Total: 1
2020-03-14 18:30:45 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-14 18:30:45 -==> Parameters: 691(String), 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String), 20200314(String), 183045(String), 0.48(String), 1(String), 469(String), E20200308109(String), 691(String)
2020-03-14 18:30:45 -<==    Updates: 1
2020-03-14 18:30:45 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-14 18:30:45 -==> Parameters: 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String), 20200314(String), 183045(String), 691(String), E20200308109(String)
2020-03-14 18:30:45 -<==    Updates: 0
2020-03-14 18:30:45 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-14 18:30:45 -==> Parameters: 20200314(String), 183045(String), 469(String), E20200308109(String)
2020-03-14 18:30:45 -<==    Updates: 1
2020-03-14 18:30:45 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-14 18:30:45 -==> Parameters: 469_20200314183045(String), E20200308109(String), 691(String), null, 2020-03-14 18:30:45(String), 469(String)
2020-03-14 18:30:45 -<==    Updates: 1
2020-03-14 18:30:45 -耗时 : 110
2020-03-14 18:30:46 -此处进行解密+验签+身份验证
2020-03-14 18:30:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:46 -此处进行解密+验签+身份验证
2020-03-14 18:30:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:30:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:30:46 -==> Parameters: 469(String)
2020-03-14 18:30:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 18:30:46 -<==      Total: 0
2020-03-14 18:30:46 -耗时 : 11
2020-03-14 18:30:46 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 18:30:46 -==> Parameters: 469(String), 469(String)
2020-03-14 18:30:46 -<==      Total: 4
2020-03-14 18:30:46 -耗时 : 22
2020-03-14 18:30:50 -此处进行解密+验签+身份验证
2020-03-14 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:50 -此处进行解密+验签+身份验证
2020-03-14 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:30:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:50 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:30:50 -==> Parameters: 469(String), MPOS(String)
2020-03-14 18:30:50 -<==      Total: 0
2020-03-14 18:30:50 -耗时 : 12
2020-03-14 18:30:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:30:50 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:30:50 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-14 18:30:50 -<==      Total: 0
2020-03-14 18:30:50 -耗时 : 8
2020-03-14 18:30:53 -此处进行解密+验签+身份验证
2020-03-14 18:30:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:30:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:30:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:30:53 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:30:53 -==> Parameters: 469(String), epos(String)
2020-03-14 18:30:53 -<==      Total: 1
2020-03-14 18:30:53 -耗时 : 26
2020-03-14 18:31:04 -此处进行解密+验签+身份验证
2020-03-14 18:31:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:31:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:31:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:31:04 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 and (min_sn like concat('%',?,'%') or max_sn like concat('%',?,'%')) order by t.allocate_date desc limit 0,10 
2020-03-14 18:31:04 -==> Parameters: 469(String), TraditionalPOS(String), E(String), E(String)
2020-03-14 18:31:04 -<==      Total: 0
2020-03-14 18:31:04 -耗时 : 22
2020-03-14 18:31:07 -此处进行解密+验签+身份验证
2020-03-14 18:31:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:31:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:31:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:31:07 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:31:07 -==> Parameters: 469(String), TrafficCard(String)
2020-03-14 18:31:07 -<==      Total: 0
2020-03-14 18:31:07 -耗时 : 11
2020-03-14 18:31:14 -此处进行解密+验签+身份验证
2020-03-14 18:31:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:31:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:31:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-14 18:31:14 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-14 18:31:14 -==> Parameters: 691(String), EPOS20200113071(String)
2020-03-14 18:31:15 -<==      Total: 1
2020-03-14 18:31:15 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-14 18:31:15 -==> Parameters: 469_20200314175508(String)
2020-03-14 18:31:15 -<==      Total: 1
2020-03-14 18:31:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_691
2020-03-14 18:31:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_691 , return
2020-03-14 18:31:15 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-14 18:31:15 -==> Parameters: 469_20200314175508(String)
2020-03-14 18:31:15 -<==      Total: 1
2020-03-14 18:31:15 -耗时 : 43
2020-03-14 18:31:15 -此处进行解密+验签+身份验证
2020-03-14 18:31:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:31:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:31:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-14 18:31:15 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-14 18:31:15 -==> Parameters: 469(String), EPOS20200113071(String)
2020-03-14 18:31:15 -<==      Total: 1
2020-03-14 18:31:15 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-14 18:31:15 -==> Parameters: 
2020-03-14 18:31:15 -<==      Total: 94
2020-03-14 18:31:15 -耗时 : 47
2020-03-14 18:31:57 -此处进行解密+验签+身份验证
2020-03-14 18:31:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:31:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:31:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:31:57 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:31:57 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-14 18:31:57 -<==      Total: 0
2020-03-14 18:31:57 -耗时 : 11
2020-03-14 18:33:48 -此处进行解密+验签+身份验证
2020-03-14 18:33:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:33:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:33:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:33:48 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-14 18:33:48 -==> Parameters: 469(String)
2020-03-14 18:33:48 -<==      Total: 0
2020-03-14 18:33:48 -耗时 : 15
2020-03-14 18:33:51 -此处进行解密+验签+身份验证
2020-03-14 18:33:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:33:51 -此处进行解密+验签+身份验证
2020-03-14 18:33:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:33:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:33:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:33:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:33:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:33:51 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:33:51 -==> Parameters: 469(String), MPOS(String)
2020-03-14 18:33:51 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:33:51 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-14 18:33:51 -<==      Total: 0
2020-03-14 18:33:51 -耗时 : 11
2020-03-14 18:33:51 -<==      Total: 0
2020-03-14 18:33:51 -耗时 : 22
2020-03-14 18:33:53 -此处进行解密+验签+身份验证
2020-03-14 18:33:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:33:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:33:53 -此处进行解密+验签+身份验证
2020-03-14 18:33:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:33:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:33:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:33:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:33:53 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:33:53 -==> Parameters: 469(String), epos(String)
2020-03-14 18:33:53 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:33:53 -==> Parameters: 469(String), TrafficCard(String)
2020-03-14 18:33:53 -<==      Total: 0
2020-03-14 18:33:53 -耗时 : 13
2020-03-14 18:33:53 -<==      Total: 1
2020-03-14 18:33:53 -耗时 : 24
2020-03-14 18:34:58 -此处进行解密+验签+身份验证
2020-03-14 18:34:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:34:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:34:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:34:58 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:34:58 -==> Parameters: 469(String)
2020-03-14 18:34:58 -<==      Total: 0
2020-03-14 18:34:58 -耗时 : 15
2020-03-14 18:34:59 -此处进行解密+验签+身份验证
2020-03-14 18:34:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:34:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:34:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:34:59 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:34:59 -==> Parameters: 469(String)
2020-03-14 18:34:59 -<==      Total: 0
2020-03-14 18:34:59 -耗时 : 16
2020-03-14 18:35:02 -此处进行解密+验签+身份验证
2020-03-14 18:35:02 -此处进行解密+验签+身份验证
2020-03-14 18:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:35:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:35:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:35:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:35:02 -==> Parameters: 469(String)
2020-03-14 18:35:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:02 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:02 -<==      Total: 1
2020-03-14 18:35:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:02 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:35:02 -<==      Total: 1
2020-03-14 18:35:02 -耗时 : 22
2020-03-14 18:35:02 -<==      Total: 2
2020-03-14 18:35:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:35:02 -<==    Updates: 2
2020-03-14 18:35:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:35:02 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:02 -<==      Total: 1
2020-03-14 18:35:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:02 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:35:02 -<==      Total: 2
2020-03-14 18:35:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:35:02 -<==    Updates: 2
2020-03-14 18:35:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:35:02 -==> Parameters: 
2020-03-14 18:35:02 -<==      Total: 1
2020-03-14 18:35:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:02 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:35:02 -<==      Total: 2
2020-03-14 18:35:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:02 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:35:02 -<==    Updates: 2
2020-03-14 18:35:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:02 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:03 -<==      Total: 1
2020-03-14 18:35:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:03 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:35:03 -<==      Total: 2
2020-03-14 18:35:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:03 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:35:03 -<==    Updates: 2
2020-03-14 18:35:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:03 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:35:03 -<==      Total: 2
2020-03-14 18:35:03 -耗时 : 108
2020-03-14 18:35:04 -此处进行解密+验签+身份验证
2020-03-14 18:35:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:04 -此处进行解密+验签+身份验证
2020-03-14 18:35:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 18:35:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:04 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 18:35:04 -==> Parameters: 469(String)
2020-03-14 18:35:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 18:35:04 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 18:35:04 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:04 -<==      Total: 4
2020-03-14 18:35:04 -<==      Total: 88
2020-03-14 18:35:04 -耗时 : 32
2020-03-14 18:35:04 -耗时 : 22
2020-03-14 18:35:05 -此处进行解密+验签+身份验证
2020-03-14 18:35:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:35:05 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:35:05 -==> Parameters: 469(String)
2020-03-14 18:35:05 -<==      Total: 0
2020-03-14 18:35:05 -耗时 : 15
2020-03-14 18:35:06 -此处进行解密+验签+身份验证
2020-03-14 18:35:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:35:06 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:35:06 -==> Parameters: 469(String)
2020-03-14 18:35:06 -<==      Total: 0
2020-03-14 18:35:06 -耗时 : 26
2020-03-14 18:35:06 -此处进行解密+验签+身份验证
2020-03-14 18:35:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:35:06 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:35:06 -==> Parameters: 469(String)
2020-03-14 18:35:06 -<==      Total: 0
2020-03-14 18:35:06 -耗时 : 16
2020-03-14 18:35:17 -此处进行解密+验签+身份验证
2020-03-14 18:35:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:17 -此处进行解密+验签+身份验证
2020-03-14 18:35:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:35:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:35:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:35:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:35:17 -==> Parameters: 469(String)
2020-03-14 18:35:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:35:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:17 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:17 -<==      Total: 1
2020-03-14 18:35:17 -耗时 : 21
2020-03-14 18:35:17 -<==      Total: 1
2020-03-14 18:35:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:17 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:35:17 -<==      Total: 2
2020-03-14 18:35:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:17 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:35:17 -<==    Updates: 2
2020-03-14 18:35:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:35:17 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:17 -<==      Total: 1
2020-03-14 18:35:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:17 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:35:17 -<==      Total: 2
2020-03-14 18:35:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:17 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:35:17 -<==    Updates: 2
2020-03-14 18:35:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:35:17 -==> Parameters: 
2020-03-14 18:35:17 -<==      Total: 1
2020-03-14 18:35:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:17 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:35:17 -<==      Total: 2
2020-03-14 18:35:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:17 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:35:18 -<==    Updates: 2
2020-03-14 18:35:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:18 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:18 -<==      Total: 1
2020-03-14 18:35:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:18 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:35:18 -<==      Total: 2
2020-03-14 18:35:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:35:18 -<==    Updates: 2
2020-03-14 18:35:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:18 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:35:18 -<==      Total: 2
2020-03-14 18:35:18 -耗时 : 113
2020-03-14 18:35:21 -此处进行解密+验签+身份验证
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:21 -此处进行解密+验签+身份验证
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:21 -此处进行解密+验签+身份验证
2020-03-14 18:35:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-14 18:35:21 -此处进行解密+验签+身份验证
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:35:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:35:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-14 18:35:21 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-14 18:35:21 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-14 18:35:21 -==> Parameters: 25(String), 20200314(String)
2020-03-14 18:35:21 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-14 18:35:21 -==> Parameters: 469(String)
2020-03-14 18:35:21 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-14 18:35:21 -==> Parameters: 25(String), 20200314(String)
2020-03-14 18:35:21 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-14 18:35:21 -==> Parameters: 469(String)
2020-03-14 18:35:21 -<==      Total: 0
2020-03-14 18:35:21 -耗时 : 22
2020-03-14 18:35:21 -<==      Total: 0
2020-03-14 18:35:21 -耗时 : 32
2020-03-14 18:35:21 -<==      Total: 0
2020-03-14 18:35:21 -耗时 : 14
2020-03-14 18:35:21 -<==      Total: 0
2020-03-14 18:35:21 -耗时 : 21
2020-03-14 18:35:22 -此处进行解密+验签+身份验证
2020-03-14 18:35:22 -此处进行解密+验签+身份验证
2020-03-14 18:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:35:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:35:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:35:22 -==> Parameters: 469(String)
2020-03-14 18:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:35:22 -<==      Total: 1
2020-03-14 18:35:22 -耗时 : 11
2020-03-14 18:35:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:22 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:22 -<==      Total: 1
2020-03-14 18:35:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:22 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:35:22 -<==      Total: 2
2020-03-14 18:35:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:22 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:35:23 -<==    Updates: 2
2020-03-14 18:35:23 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:35:23 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:23 -<==      Total: 1
2020-03-14 18:35:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:23 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:35:23 -<==      Total: 2
2020-03-14 18:35:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:23 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:35:23 -<==    Updates: 2
2020-03-14 18:35:23 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:35:23 -==> Parameters: 
2020-03-14 18:35:23 -<==      Total: 1
2020-03-14 18:35:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:23 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:35:23 -<==      Total: 2
2020-03-14 18:35:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:23 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:35:23 -<==    Updates: 2
2020-03-14 18:35:23 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:23 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:23 -<==      Total: 1
2020-03-14 18:35:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:23 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:35:23 -<==      Total: 2
2020-03-14 18:35:23 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:23 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:35:23 -<==    Updates: 2
2020-03-14 18:35:23 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:23 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:35:23 -<==      Total: 2
2020-03-14 18:35:23 -耗时 : 218
2020-03-14 18:35:24 -此处进行解密+验签+身份验证
2020-03-14 18:35:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:24 -此处进行解密+验签+身份验证
2020-03-14 18:35:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-14 18:35:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:24 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-14 18:35:24 -==> Parameters: 469(String)
2020-03-14 18:35:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-14 18:35:24 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-14 18:35:24 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:24 -<==      Total: 4
2020-03-14 18:35:24 -耗时 : 11
2020-03-14 18:35:24 -<==      Total: 88
2020-03-14 18:35:24 -耗时 : 42
2020-03-14 18:35:26 -此处进行解密+验签+身份验证
2020-03-14 18:35:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-14 18:35:26 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-14 18:35:26 -==> Parameters: 469(String)
2020-03-14 18:35:26 -<==      Total: 0
2020-03-14 18:35:26 -耗时 : 28
2020-03-14 18:35:28 -此处进行解密+验签+身份验证
2020-03-14 18:35:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:28 -此处进行解密+验签+身份验证
2020-03-14 18:35:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:35:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:28 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:35:28 -==> Parameters: 469(String), MPOS(String)
2020-03-14 18:35:28 -<==      Total: 0
2020-03-14 18:35:28 -耗时 : 12
2020-03-14 18:35:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:35:28 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:35:28 -==> Parameters: 469(String), TraditionalPOS(String)
2020-03-14 18:35:28 -<==      Total: 0
2020-03-14 18:35:28 -耗时 : 8
2020-03-14 18:35:29 -此处进行解密+验签+身份验证
2020-03-14 18:35:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:35:29 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:35:29 -==> Parameters: 469(String), epos(String)
2020-03-14 18:35:29 -<==      Total: 1
2020-03-14 18:35:29 -耗时 : 12
2020-03-14 18:35:30 -此处进行解密+验签+身份验证
2020-03-14 18:35:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-14 18:35:30 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-14 18:35:30 -==> Parameters: 469(String), TrafficCard(String)
2020-03-14 18:35:30 -<==      Total: 0
2020-03-14 18:35:30 -耗时 : 23
2020-03-14 18:35:39 -此处进行解密+验签+身份验证
2020-03-14 18:35:39 -此处进行解密+验签+身份验证
2020-03-14 18:35:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:35:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:35:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:35:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:35:39 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:35:39 -==> Parameters: 469(String)
2020-03-14 18:35:39 -<==      Total: 1
2020-03-14 18:35:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:39 -耗时 : 11
2020-03-14 18:35:39 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 1
2020-03-14 18:35:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:39 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 2
2020-03-14 18:35:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:35:39 -<==    Updates: 2
2020-03-14 18:35:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:35:39 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 1
2020-03-14 18:35:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:39 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 2
2020-03-14 18:35:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:35:39 -<==    Updates: 2
2020-03-14 18:35:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:35:39 -==> Parameters: 
2020-03-14 18:35:39 -<==      Total: 1
2020-03-14 18:35:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:39 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 2
2020-03-14 18:35:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:39 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:35:39 -<==    Updates: 2
2020-03-14 18:35:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:35:39 -==> Parameters: 469(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 1
2020-03-14 18:35:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:39 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 2
2020-03-14 18:35:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:35:39 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:35:39 -<==    Updates: 2
2020-03-14 18:35:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:35:39 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:35:39 -<==      Total: 2
2020-03-14 18:35:39 -耗时 : 139
2020-03-14 18:35:54 -此处进行解密+验签+身份验证
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:54 -此处进行解密+验签+身份验证
2020-03-14 18:35:54 -此处进行解密+验签+身份验证
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:54 -此处进行解密+验签+身份验证
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:35:54 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-14 18:35:54 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-14 18:35:54 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-14 18:35:54 -==> Parameters: 469(String)
2020-03-14 18:35:54 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-14 18:35:54 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-14 18:35:54 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-14 18:35:54 -==> Parameters: 469(String), 202003(String)
2020-03-14 18:35:54 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 18:35:54 -==> Parameters: 469(String), 202003(String)
2020-03-14 18:35:54 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 18:35:54 -==> Parameters: 469(String), 202003(String)
2020-03-14 18:35:54 -<==      Total: 1
2020-03-14 18:35:54 -耗时 : 10
2020-03-14 18:35:54 -<==      Total: 1
2020-03-14 18:35:54 -耗时 : 11
2020-03-14 18:35:54 -<==      Total: 1
2020-03-14 18:35:54 -耗时 : 21
2020-03-14 18:35:54 -<==      Total: 1
2020-03-14 18:35:54 -耗时 : 12
2020-03-14 18:36:05 -此处进行解密+验签+身份验证
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:05 -此处进行解密+验签+身份验证
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:05 -此处进行解密+验签+身份验证
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-14 18:36:05 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-14 18:36:05 -==> Parameters: 469(String), 20200314(String)
2020-03-14 18:36:05 -此处进行解密+验签+身份验证
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:05 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 18:36:05 -==> Parameters: 469(String), 202003(String)
2020-03-14 18:36:05 -<==      Total: 1
2020-03-14 18:36:05 -耗时 : 11
2020-03-14 18:36:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-14 18:36:05 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-14 18:36:05 -==> Parameters: 469(String), 20200314(String)
2020-03-14 18:36:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-14 18:36:05 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-14 18:36:05 -==> Parameters: 469(String), 202003(String)
2020-03-14 18:36:05 -<==      Total: 1
2020-03-14 18:36:05 -耗时 : 12
2020-03-14 18:36:05 -<==      Total: 1
2020-03-14 18:36:05 -耗时 : 24
2020-03-14 18:36:05 -<==      Total: 1
2020-03-14 18:36:05 -耗时 : 8
2020-03-14 18:36:07 -此处进行解密+验签+身份验证
2020-03-14 18:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:07 -此处进行解密+验签+身份验证
2020-03-14 18:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-14 18:36:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-14 18:36:07 -==> Parameters: 469(String)
2020-03-14 18:36:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:36:07 -<==      Total: 1
2020-03-14 18:36:07 -耗时 : 11
2020-03-14 18:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:36:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:36:07 -==> Parameters: 469(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 1
2020-03-14 18:36:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:07 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 2
2020-03-14 18:36:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:36:07 -<==    Updates: 2
2020-03-14 18:36:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:36:07 -==> Parameters: 469(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 1
2020-03-14 18:36:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:07 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 2
2020-03-14 18:36:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:36:07 -<==    Updates: 2
2020-03-14 18:36:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:36:07 -==> Parameters: 
2020-03-14 18:36:07 -<==      Total: 1
2020-03-14 18:36:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:07 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 2
2020-03-14 18:36:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:07 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:36:07 -<==    Updates: 2
2020-03-14 18:36:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:36:07 -==> Parameters: 469(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 1
2020-03-14 18:36:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:07 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 2
2020-03-14 18:36:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:36:07 -<==    Updates: 2
2020-03-14 18:36:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:07 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:36:07 -<==      Total: 2
2020-03-14 18:36:07 -耗时 : 144
2020-03-14 18:36:25 -此处进行解密+验签+身份验证
2020-03-14 18:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:25 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-14 18:36:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-14 18:36:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:36:25 -==> Parameters: 469(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 1
2020-03-14 18:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:25 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 2
2020-03-14 18:36:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), applyRateFlag(String)
2020-03-14 18:36:25 -<==    Updates: 2
2020-03-14 18:36:25 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-14 18:36:25 -==> Parameters: 469(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 1
2020-03-14 18:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:25 -==> Parameters: recallFlag(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 2
2020-03-14 18:36:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-14 18:36:25 -<==    Updates: 2
2020-03-14 18:36:25 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-14 18:36:25 -==> Parameters: 
2020-03-14 18:36:25 -<==      Total: 1
2020-03-14 18:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:25 -==> Parameters: collegeFlag(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 2
2020-03-14 18:36:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:25 -==> Parameters: 15(Integer), 15(Integer), 469(String), collegeFlag(String)
2020-03-14 18:36:25 -<==    Updates: 2
2020-03-14 18:36:25 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-14 18:36:25 -==> Parameters: 469(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 1
2020-03-14 18:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:25 -==> Parameters: cardFlag(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 2
2020-03-14 18:36:25 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-14 18:36:25 -==> Parameters: 0(Integer), 0(Integer), 469(String), cardFlag(String)
2020-03-14 18:36:25 -<==    Updates: 2
2020-03-14 18:36:25 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-14 18:36:25 -==> Parameters: appImgFlag(String), 469(String)
2020-03-14 18:36:25 -<==      Total: 2
2020-03-14 18:36:25 -耗时 : 114
2020-03-14 18:36:28 -此处进行解密+验签+身份验证
2020-03-14 18:36:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:28 -此处进行解密+验签+身份验证
2020-03-14 18:36:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-14 18:36:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-14 18:36:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-14 18:36:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-14 18:36:28 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-14 18:36:28 -==> Parameters: 469(String)
2020-03-14 18:36:28 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-14 18:36:28 -==> Parameters: 469(String)
2020-03-14 18:36:28 -<==      Total: 3
2020-03-14 18:36:28 -耗时 : 11
2020-03-14 18:36:28 -<==      Total: 1
2020-03-14 18:36:28 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-14 18:36:28 -==> Parameters: 469(String)
2020-03-14 18:36:28 -<==      Total: 1
2020-03-14 18:36:28 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-14 18:36:28 -==> Parameters: 469(String)
2020-03-14 18:36:28 -<==      Total: 1
2020-03-14 18:36:28 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-14 18:36:28 -==> Parameters: 469(String)
2020-03-14 18:36:28 -<==      Total: 1
2020-03-14 18:36:28 -耗时 : 66
2020-03-14 18:42:04 -此处进行解密+验签+身份验证
2020-03-14 18:42:04 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 18:42:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-14 18:42:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-14 18:42:04 -耗时 : 8
2020-03-14 18:42:05 -此处进行解密+验签+身份验证
2020-03-14 18:42:05 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 18:42:05 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-14 18:42:05 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-14 18:42:05 -耗时 : 8
2020-03-14 18:45:38 -此处进行解密+验签+身份验证
2020-03-14 18:45:38 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-14 18:45:38 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-14 18:45:38 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-14 18:45:38 -耗时 : 7
2020-03-14 18:45:59 -此处进行解密+验签+身份验证
2020-03-14 18:45:59 -解密：{
  "login_type" : "token",
  "device_type" : "iOS",
  "sign" : "649D3C95AABE9C8676356AD280D4C213",
  "version_no" : "1.2.0",
  "token" : "2420|2QQXALYB8IOF1YFAASZHT5N9OUVGQ9H5",
  "device_no" : "iOS11.4.1"
}
2020-03-14 18:45:59 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-14 18:45:59 -token值=======2420|2QQXALYB8IOF1YFAASZHT5N9OUVGQ9H5
2020-03-14 18:45:59 -耗时 : 4
2020-03-14 18:45:59 -此处进行解密+验签+身份验证
2020-03-14 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-14 18:45:59 -此处进行解密+验签+身份验证
2020-03-14 18:45:59 -此处进行解密+验签+身份验证
2020-03-14 18:45:59 -此处进行解密+验签+身份验证
2020-03-14 18:45:59 -解密：
2020-03-14 18:45:59 -解密：
2020-03-14 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-14 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-14 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-14 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@ae258c6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@cd2a83e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-14 18:45:59 -耗时 : 0
2020-03-14 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-14 18:45:59 -耗时 : 0
2020-03-14 18:45:59 -此处进行解密+验签+身份验证
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4e84870f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5af9098a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@35e106c7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@581038d4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2d5d5cd5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-14 18:45:59 -耗时 : 0
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7cad22c1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@433420b3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@65a7e632 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-14 18:45:59 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 18:45:59 -==> Parameters: 02(String), 02(String)
2020-03-14 18:45:59 -<==      Total: 6
2020-03-14 18:45:59 -耗时 : 76
2020-03-14 18:45:59 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-14 18:45:59 -==> Parameters: 01(String), 01(String)
2020-03-14 18:45:59 -<==      Total: 7
2020-03-14 18:45:59 -耗时 : 85
2020-03-14 18:51:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 18:51:55 -Shutting down ExecutorService 'taskScheduler'
2020-03-14 18:51:55 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-14 18:51:55 -Shutting down Quartz Scheduler
2020-03-14 18:51:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-14 18:51:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-14 18:51:55 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-14 18:51:55 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-14 18:51:55 -HikariPool-1 - Shutdown initiated...
2020-03-14 18:51:55 -HikariPool-1 - Shutdown completed.
