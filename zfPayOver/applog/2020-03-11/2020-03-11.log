2020-03-11 10:28:06 -Starting LongEcologicalApplication on PC-201905161910 with PID 13076 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-11 10:28:06 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-11 10:28:06 -No active profile set, falling back to default profiles: default
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:28:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 10:28:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 10:28:09 -Finished Spring Data repository scanning in 1200ms. Found 0 repository interfaces.
2020-03-11 10:28:09 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 10:28:09 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 10:28:09 -Finished Spring Data repository scanning in 60ms. Found 0 repository interfaces.
2020-03-11 10:28:09 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$12a709b8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 10:28:09 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d2aee58] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 10:28:10 -Tomcat initialized with port(s): 8080 (http)
2020-03-11 10:28:10 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-11 10:28:10 -Starting service [Tomcat]
2020-03-11 10:28:10 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-11 10:28:10 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-11 10:28:11 -Initializing Spring embedded WebApplicationContext
2020-03-11 10:28:11 -Root WebApplicationContext: initialization completed in 4672 ms
2020-03-11 10:28:11 -Filter xssFilter was not registered (disabled)
2020-03-11 10:28:11 -HikariPool-1 - Starting...
2020-03-11 10:28:12 -HikariPool-1 - Start completed.
2020-03-11 10:28:12 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-11 10:28:12 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-11 10:28:12 -HHH000206: hibernate.properties not found
2020-03-11 10:28:12 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-11 10:28:13 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-11 10:28:13 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-11 10:28:13 -Using default implementation for ThreadExecutor
2020-03-11 10:28:13 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-11 10:28:13 -Quartz Scheduler v.2.3.0 created.
2020-03-11 10:28:13 -RAMJobStore initialized.
2020-03-11 10:28:13 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-11 10:28:13 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-11 10:28:13 -Quartz scheduler version: 2.3.0
2020-03-11 10:28:13 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@727986ad
2020-03-11 10:28:14 -STAET TaskExecutorConfig
2020-03-11 10:28:14 -Initializing ExecutorService
2020-03-11 10:28:14 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-11 10:28:14 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-11 10:28:14 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-11 10:28:15 -Initializing ExecutorService 'taskScheduler'
2020-03-11 10:28:15 -Starting Quartz Scheduler now
2020-03-11 10:28:15 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-11 10:28:15 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-11 10:28:15 -Using a shared selector for servlet write/read
2020-03-11 10:28:15 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-11 10:28:15 -Started LongEcologicalApplication in 9.601 seconds (JVM running for 11.054)
2020-03-11 10:29:49 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-11 10:29:49 -Initializing Servlet 'dispatcherServlet'
2020-03-11 10:29:49 -Completed initialization in 11 ms
2020-03-11 10:29:49 -此处进行解密+验签+身份验证
2020-03-11 10:29:49 -此处进行解密+验签+身份验证
2020-03-11 10:29:49 -此处进行解密+验签+身份验证
2020-03-11 10:29:49 -此处进行解密+验签+身份验证
2020-03-11 10:29:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:50 -Starting without optional epoll library
2020-03-11 10:29:50 -Starting without optional kqueue library
2020-03-11 10:29:50 -解密：{
  "login_type" : "token",
  "device_type" : "iOS",
  "sign" : "8E5A53940ACF7B18C9433A8869630F46",
  "version_no" : "1.1.1",
  "token" : "181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX",
  "device_no" : "iOS11.4.1"
}
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-11 10:29:50 -token值=======181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-11 10:29:50 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-11 10:29:50 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-11 10:29:50 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-11 10:29:50 -耗时 : 20
2020-03-11 10:29:50 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-11 10:29:50 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-11 10:29:50 -==> Parameters: 
2020-03-11 10:29:50 -==> Parameters: 181(String)
2020-03-11 10:29:50 -==> Parameters: 181(String)
2020-03-11 10:29:50 -<==      Total: 2
2020-03-11 10:29:50 -<==      Total: 3
2020-03-11 10:29:50 -耗时 : 51
2020-03-11 10:29:50 -耗时 : 54
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-11 10:29:50 -==> Parameters: 26(String)
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-11 10:29:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-11 10:29:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-11 10:29:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-11 10:29:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-11 10:29:50 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-11 10:29:50 -耗时 : 371
2020-03-11 10:29:50 -此处进行解密+验签+身份验证
2020-03-11 10:29:50 -此处进行解密+验签+身份验证
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:50 -此处进行解密+验签+身份验证
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:50 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:50 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-11 10:29:50 -耗时 : 18
2020-03-11 10:29:50 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-11 10:29:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 10:29:50 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-11 10:29:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 10:29:50 -耗时 : 12
2020-03-11 10:29:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:29:50 -==> Parameters: 181(String), 181(String)
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:29:50 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:29:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 10:29:50 -<==    Updates: 1
2020-03-11 10:29:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 10:29:50 -==> Parameters: 181(String), 181(String)
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:29:50 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:29:50 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 10:29:50 -<==    Updates: 1
2020-03-11 10:29:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 10:29:50 -==> Parameters: 
2020-03-11 10:29:50 -<==      Total: 1
2020-03-11 10:29:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:29:50 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 10:29:51 -<==      Total: 1
2020-03-11 10:29:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:29:51 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 10:29:51 -<==    Updates: 1
2020-03-11 10:29:51 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:29:51 -==> Parameters: 181(String), 181(String)
2020-03-11 10:29:51 -<==      Total: 1
2020-03-11 10:29:51 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:29:51 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 10:29:51 -<==      Total: 1
2020-03-11 10:29:51 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:29:51 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 10:29:51 -<==    Updates: 1
2020-03-11 10:29:51 -耗时 : 105
2020-03-11 10:29:57 -此处进行解密+验签+身份验证
2020-03-11 10:29:57 -此处进行解密+验签+身份验证
2020-03-11 10:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:29:57 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-11 10:29:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 10:29:57 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null 
2020-03-11 10:29:57 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:29:57 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 10:29:57 -==> Parameters: 181(String)
2020-03-11 10:29:57 -<==      Total: 1
2020-03-11 10:29:57 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-11 10:29:57 -==> Parameters: 181(String)
2020-03-11 10:29:57 -<==      Total: 0
2020-03-11 10:29:57 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-11 10:29:57 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:29:57 -<==      Total: 1
2020-03-11 10:29:57 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 10:29:57 -==> Parameters: 181(String), 181(String)
2020-03-11 10:29:58 -<==      Total: 1
2020-03-11 10:29:58 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-11 10:29:58 -==> Parameters: 181(String)
2020-03-11 10:29:58 -<==      Total: 1
2020-03-11 10:29:58 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' 
2020-03-11 10:29:58 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:29:58 -<==      Total: 0
2020-03-11 10:29:58 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-11 10:29:58 -==> Parameters: 181(String)
2020-03-11 10:29:58 -<==      Total: 0
2020-03-11 10:29:58 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：null
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:54)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$a87ed1a9.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 10:29:58 -耗时 : 50
2020-03-11 10:29:58 -<==      Total: 1
2020-03-11 10:29:58 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 10:29:58 -==> Parameters: 181(String), 181(String)
2020-03-11 10:29:58 -<==      Total: 1
2020-03-11 10:29:58 -耗时 : 112
2020-03-11 10:30:03 -此处进行解密+验签+身份验证
2020-03-11 10:30:03 -此处进行解密+验签+身份验证
2020-03-11 10:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:30:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-11 10:30:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-11 10:30:03 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-11 10:30:03 -==> Parameters: 181(String), 20200311(String)
2020-03-11 10:30:03 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 10:30:03 -==> Parameters: 181(String), 202003(String)
2020-03-11 10:30:03 -<==      Total: 0
2020-03-11 10:30:03 -耗时 : 10
2020-03-11 10:30:03 -<==      Total: 1
2020-03-11 10:30:03 -耗时 : 23
2020-03-11 10:39:20 -Starting LongEcologicalApplication on PC-201905161910 with PID 6608 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-11 10:39:20 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-11 10:39:20 -No active profile set, falling back to default profiles: default
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:21 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:39:22 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 10:39:22 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 10:39:22 -Finished Spring Data repository scanning in 118ms. Found 0 repository interfaces.
2020-03-11 10:39:22 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 10:39:22 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 10:39:22 -Finished Spring Data repository scanning in 56ms. Found 0 repository interfaces.
2020-03-11 10:39:22 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$1cb6d4f2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 10:39:22 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$173ab992] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 10:39:23 -Tomcat initialized with port(s): 8080 (http)
2020-03-11 10:39:23 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-11 10:39:23 -Starting service [Tomcat]
2020-03-11 10:39:23 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-11 10:39:23 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-11 10:39:23 -Initializing Spring embedded WebApplicationContext
2020-03-11 10:39:23 -Root WebApplicationContext: initialization completed in 2704 ms
2020-03-11 10:39:23 -Filter xssFilter was not registered (disabled)
2020-03-11 10:39:23 -HikariPool-1 - Starting...
2020-03-11 10:39:23 -HikariPool-1 - Start completed.
2020-03-11 10:39:24 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-11 10:39:24 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-11 10:39:24 -HHH000206: hibernate.properties not found
2020-03-11 10:39:24 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-11 10:39:24 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-11 10:39:24 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-11 10:39:25 -Using default implementation for ThreadExecutor
2020-03-11 10:39:25 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-11 10:39:25 -Quartz Scheduler v.2.3.0 created.
2020-03-11 10:39:25 -RAMJobStore initialized.
2020-03-11 10:39:25 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-11 10:39:25 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-11 10:39:25 -Quartz scheduler version: 2.3.0
2020-03-11 10:39:25 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@664db2ca
2020-03-11 10:39:25 -STAET TaskExecutorConfig
2020-03-11 10:39:25 -Initializing ExecutorService
2020-03-11 10:39:25 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-11 10:39:25 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-11 10:39:25 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-11 10:39:26 -Initializing ExecutorService 'taskScheduler'
2020-03-11 10:39:26 -Starting Quartz Scheduler now
2020-03-11 10:39:26 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-11 10:39:26 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-11 10:39:26 -Using a shared selector for servlet write/read
2020-03-11 10:39:26 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-11 10:39:26 -Started LongEcologicalApplication in 6.181 seconds (JVM running for 7.212)
2020-03-11 10:39:36 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-11 10:39:36 -Initializing Servlet 'dispatcherServlet'
2020-03-11 10:39:36 -Completed initialization in 12 ms
2020-03-11 10:39:36 -此处进行解密+验签+身份验证
2020-03-11 10:39:36 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 10:39:36 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 10:39:36 -Starting without optional epoll library
2020-03-11 10:39:36 -Starting without optional kqueue library
2020-03-11 10:39:37 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 10:39:37 -耗时 : 792
2020-03-11 10:39:40 -此处进行解密+验签+身份验证
2020-03-11 10:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:39:40 -此处进行解密+验签+身份验证
2020-03-11 10:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:39:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:39:40 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-11 10:39:40 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-11 10:39:40 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-11 10:39:40 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 10:39:40 -==> Parameters: 181(String), 202003(String)
2020-03-11 10:39:40 -==> Parameters: 181(String), 20200311(String)
2020-03-11 10:39:40 -<==      Total: 0
2020-03-11 10:39:40 -耗时 : 65
2020-03-11 10:39:40 -<==      Total: 1
2020-03-11 10:39:40 -耗时 : 59
2020-03-11 10:39:56 -此处进行解密+验签+身份验证
2020-03-11 10:39:56 -此处进行解密+验签+身份验证
2020-03-11 10:39:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:39:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:39:56 -此处进行解密+验签+身份验证
2020-03-11 10:39:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:39:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:39:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:39:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:39:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-11 10:39:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-11 10:39:56 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-11 10:39:56 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-11 10:39:56 -==> Parameters: 181(String)
2020-03-11 10:39:56 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 10:39:56 -==> Parameters: 181(String), 202003(String)
2020-03-11 10:39:56 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-11 10:39:56 -==> Parameters: 181(String), 202003(String)
2020-03-11 10:39:56 -<==      Total: 1
2020-03-11 10:39:56 -耗时 : 15
2020-03-11 10:39:56 -<==      Total: 1
2020-03-11 10:39:56 -耗时 : 14
2020-03-11 10:39:56 -<==      Total: 1
2020-03-11 10:39:56 -耗时 : 24
2020-03-11 10:40:03 -此处进行解密+验签+身份验证
2020-03-11 10:40:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:40:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:40:03 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 10:40:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 10:40:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 10:40:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:40:03 -==> Parameters: 181(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:40:03 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:40:03 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 10:40:03 -<==    Updates: 1
2020-03-11 10:40:03 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 10:40:03 -==> Parameters: 181(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:40:03 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:40:03 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 10:40:03 -<==    Updates: 1
2020-03-11 10:40:03 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 10:40:03 -==> Parameters: 
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:40:03 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:40:03 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 10:40:03 -<==    Updates: 1
2020-03-11 10:40:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:40:03 -==> Parameters: 181(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:40:03 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 10:40:03 -<==      Total: 1
2020-03-11 10:40:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:40:03 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 10:40:03 -<==    Updates: 1
2020-03-11 10:40:03 -耗时 : 127
2020-03-11 10:40:08 -此处进行解密+验签+身份验证
2020-03-11 10:40:08 -此处进行解密+验签+身份验证
2020-03-11 10:40:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:40:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:40:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:40:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:40:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-11 10:40:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 10:40:08 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null 
2020-03-11 10:40:08 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:40:08 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 10:40:08 -<==      Total: 1
2020-03-11 10:40:08 -==> Parameters: 181(String)
2020-03-11 10:40:08 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-11 10:40:08 -==> Parameters: 181(String)
2020-03-11 10:40:08 -<==      Total: 0
2020-03-11 10:40:08 -<==      Total: 1
2020-03-11 10:40:08 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-11 10:40:08 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:40:08 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 10:40:08 -==> Parameters: 181(String), 181(String)
2020-03-11 10:40:08 -<==      Total: 1
2020-03-11 10:40:08 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-11 10:40:08 -==> Parameters: 181(String)
2020-03-11 10:40:08 -<==      Total: 1
2020-03-11 10:40:08 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' 
2020-03-11 10:40:08 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:40:08 -<==      Total: 0
2020-03-11 10:40:08 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-11 10:40:08 -==> Parameters: 181(String)
2020-03-11 10:40:08 -<==      Total: 0
2020-03-11 10:40:08 -耗时 : 62
2020-03-11 10:40:08 -<==      Total: 1
2020-03-11 10:40:08 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 10:40:08 -==> Parameters: 181(String), 181(String)
2020-03-11 10:40:08 -<==      Total: 1
2020-03-11 10:40:08 -耗时 : 90
2020-03-11 10:49:50 -此处进行解密+验签+身份验证
2020-03-11 10:49:50 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 10:49:50 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 10:49:50 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 10:49:50 -耗时 : 18
2020-03-11 10:49:58 -此处进行解密+验签+身份验证
2020-03-11 10:49:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:49:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:49:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 10:49:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 10:49:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 10:49:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:49:59 -==> Parameters: 181(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:49:59 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:49:59 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 10:49:59 -<==    Updates: 1
2020-03-11 10:49:59 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 10:49:59 -==> Parameters: 181(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:49:59 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:49:59 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 10:49:59 -<==    Updates: 1
2020-03-11 10:49:59 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 10:49:59 -==> Parameters: 
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:49:59 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:49:59 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 10:49:59 -<==    Updates: 1
2020-03-11 10:49:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:49:59 -==> Parameters: 181(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:49:59 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 10:49:59 -<==      Total: 1
2020-03-11 10:49:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:49:59 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 10:49:59 -<==    Updates: 1
2020-03-11 10:49:59 -耗时 : 132
2020-03-11 10:50:06 -此处进行解密+验签+身份验证
2020-03-11 10:50:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:50:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:50:06 -此处进行解密+验签+身份验证
2020-03-11 10:50:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:50:06 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-11 10:50:06 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null 
2020-03-11 10:50:06 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:50:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:50:06 -<==      Total: 1
2020-03-11 10:50:06 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-11 10:50:06 -==> Parameters: 181(String)
2020-03-11 10:50:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 10:50:06 -<==      Total: 0
2020-03-11 10:50:06 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-11 10:50:06 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:50:06 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 10:50:06 -==> Parameters: 181(String)
2020-03-11 10:50:06 -<==      Total: 1
2020-03-11 10:50:06 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-11 10:50:06 -==> Parameters: 181(String)
2020-03-11 10:50:06 -<==      Total: 1
2020-03-11 10:50:06 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' 
2020-03-11 10:50:06 -==> Parameters: 202003(String), 181(String)
2020-03-11 10:50:06 -<==      Total: 1
2020-03-11 10:50:06 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 10:50:06 -==> Parameters: 181(String), 181(String)
2020-03-11 10:50:06 -<==      Total: 0
2020-03-11 10:50:06 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-11 10:50:06 -==> Parameters: 181(String)
2020-03-11 10:50:06 -<==      Total: 0
2020-03-11 10:50:06 -耗时 : 57
2020-03-11 10:50:06 -<==      Total: 1
2020-03-11 10:50:06 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 10:50:06 -==> Parameters: 181(String), 181(String)
2020-03-11 10:50:06 -<==      Total: 1
2020-03-11 10:50:06 -耗时 : 102
2020-03-11 10:50:43 -此处进行解密+验签+身份验证
2020-03-11 10:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:50:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:50:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 10:50:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 10:50:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 10:50:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:50:44 -==> Parameters: 181(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:50:44 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:50:44 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 10:50:44 -<==    Updates: 1
2020-03-11 10:50:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 10:50:44 -==> Parameters: 181(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:50:44 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:50:44 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 10:50:44 -<==    Updates: 1
2020-03-11 10:50:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 10:50:44 -==> Parameters: 
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:50:44 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:50:44 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 10:50:44 -<==    Updates: 1
2020-03-11 10:50:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 10:50:44 -==> Parameters: 181(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 10:50:44 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 10:50:44 -<==      Total: 1
2020-03-11 10:50:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 10:50:44 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 10:50:44 -<==    Updates: 1
2020-03-11 10:50:44 -耗时 : 134
2020-03-11 10:51:11 -此处进行解密+验签+身份验证
2020-03-11 10:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:51:11 -此处进行解密+验签+身份验证
2020-03-11 10:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:51:11 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-11 10:51:11 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-11 10:51:11 -==> Parameters: 181(String), 20200311(String)
2020-03-11 10:51:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:51:11 -<==      Total: 0
2020-03-11 10:51:11 -耗时 : 12
2020-03-11 10:51:11 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-11 10:51:11 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 10:51:11 -==> Parameters: 181(String), 202003(String)
2020-03-11 10:51:11 -<==      Total: 1
2020-03-11 10:51:11 -耗时 : 9
2020-03-11 10:51:44 -此处进行解密+验签+身份验证
2020-03-11 10:51:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 10:51:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 10:51:44 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosList
2020-03-11 10:51:44 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? t2.pos_type is null order by t1.date 
2020-03-11 10:51:44 -==> Parameters: 20200311(String), 181(String)
2020-03-11 10:51:44 -ReportFormsServiceImpl -- getDayAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 't2.pos_type is null
			 
		order by t1.date' at line 18
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\reportforms\ReportFormsMapper.xml]
### The error may involve com.example.longecological.mapper.reportforms.ReportFormsMapper.getDayAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: SELECT      t1.date,      cast(IFNULL(t2.agency_performance,0.00) as char) as performance,      cast(IFNULL(t2.agency_act_num,0) as char) as act_num,      cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num    from (    SELECT     @num :=@num - 1,     date_format(      adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY),      '%Y%m%d'     ) AS date     FROM     t_sys_assist_query,     (SELECT @num := 1) t) t1   left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ?         t2.pos_type is null        order by t1.date
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 't2.pos_type is null
			 
		order by t1.date' at line 18
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 't2.pos_type is null
			 
		order by t1.date' at line 18
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy122.getDayAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getDayAgencyTraditionalPosList(ReportFormsServiceImpl.java:294)
	at com.example.longecological.controller.reportforms.ReportFormsController.getDayAgencyTraditionalPosList(ReportFormsController.java:134)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor96.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$2ce982d9.getDayAgencyTraditionalPosList(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 10:51:44 -耗时 : 69
2020-03-11 10:58:10 -Starting LongEcologicalApplication on PC-201905161910 with PID 2560 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-11 10:58:10 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-11 10:58:10 -No active profile set, falling back to default profiles: default
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 10:58:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 10:58:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 10:58:11 -Finished Spring Data repository scanning in 94ms. Found 0 repository interfaces.
2020-03-11 10:58:11 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 10:58:11 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 10:58:11 -Finished Spring Data repository scanning in 57ms. Found 0 repository interfaces.
2020-03-11 10:58:12 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$995cf13b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 10:58:12 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$93e0d5db] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 10:58:12 -Tomcat initialized with port(s): 8080 (http)
2020-03-11 10:58:12 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-11 10:58:12 -Starting service [Tomcat]
2020-03-11 10:58:12 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-11 10:58:12 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-11 10:58:13 -Initializing Spring embedded WebApplicationContext
2020-03-11 10:58:13 -Root WebApplicationContext: initialization completed in 2875 ms
2020-03-11 10:58:13 -Filter xssFilter was not registered (disabled)
2020-03-11 10:58:13 -HikariPool-1 - Starting...
2020-03-11 10:58:13 -HikariPool-1 - Start completed.
2020-03-11 10:58:13 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-11 10:58:13 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-11 10:58:13 -HHH000206: hibernate.properties not found
2020-03-11 10:58:13 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-11 10:58:14 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-11 10:58:14 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-11 10:58:14 -Using default implementation for ThreadExecutor
2020-03-11 10:58:14 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-11 10:58:14 -Quartz Scheduler v.2.3.0 created.
2020-03-11 10:58:14 -RAMJobStore initialized.
2020-03-11 10:58:14 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-11 10:58:14 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-11 10:58:14 -Quartz scheduler version: 2.3.0
2020-03-11 10:58:14 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@383cdd4d
2020-03-11 10:58:15 -STAET TaskExecutorConfig
2020-03-11 10:58:15 -Initializing ExecutorService
2020-03-11 10:58:15 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-11 10:58:15 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-11 10:58:15 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-11 10:58:16 -Initializing ExecutorService 'taskScheduler'
2020-03-11 10:58:16 -Starting Quartz Scheduler now
2020-03-11 10:58:16 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-11 10:58:16 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-11 10:58:16 -Using a shared selector for servlet write/read
2020-03-11 10:58:16 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-11 10:58:16 -Started LongEcologicalApplication in 6.568 seconds (JVM running for 7.698)
2020-03-11 11:02:58 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-11 11:02:58 -Initializing Servlet 'dispatcherServlet'
2020-03-11 11:02:58 -Completed initialization in 13 ms
2020-03-11 11:02:58 -此处进行解密+验签+身份验证
2020-03-11 11:02:58 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 11:02:58 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 11:02:58 -Starting without optional epoll library
2020-03-11 11:02:58 -Starting without optional kqueue library
2020-03-11 11:02:59 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 11:02:59 -耗时 : 760
2020-03-11 11:03:05 -此处进行解密+验签+身份验证
2020-03-11 11:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosList
2020-03-11 11:03:05 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-11 11:03:05 -==> Parameters: 20200301(String), 181(String)
2020-03-11 11:03:05 -<==      Total: 7
2020-03-11 11:03:05 -耗时 : 80
2020-03-11 11:03:08 -此处进行解密+验签+身份验证
2020-03-11 11:03:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:08 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosList
2020-03-11 11:03:08 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-11 11:03:08 -==> Parameters: 20200311(String), 181(String)
2020-03-11 11:03:08 -<==      Total: 7
2020-03-11 11:03:08 -耗时 : 21
2020-03-11 11:03:23 -此处进行解密+验签+身份验证
2020-03-11 11:03:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:23 -此处进行解密+验签+身份验证
2020-03-11 11:03:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:23 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-11 11:03:23 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-11 11:03:23 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-11 11:03:23 -==> Parameters: 181(String), 20200311(String)
2020-03-11 11:03:23 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 11:03:23 -==> Parameters: 181(String), 202003(String)
2020-03-11 11:03:23 -<==      Total: 0
2020-03-11 11:03:23 -耗时 : 20
2020-03-11 11:03:23 -<==      Total: 1
2020-03-11 11:03:23 -耗时 : 21
2020-03-11 11:03:24 -此处进行解密+验签+身份验证
2020-03-11 11:03:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:24 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosList
2020-03-11 11:03:24 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-11 11:03:24 -==> Parameters: 20200301(String), 181(String)
2020-03-11 11:03:25 -<==      Total: 7
2020-03-11 11:03:25 -耗时 : 19
2020-03-11 11:03:38 -此处进行解密+验签+身份验证
2020-03-11 11:03:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:38 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosList
2020-03-11 11:03:38 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-11 11:03:38 -==> Parameters: 20200311(String), 181(String)
2020-03-11 11:03:38 -<==      Total: 7
2020-03-11 11:03:38 -耗时 : 20
2020-03-11 11:03:50 -此处进行解密+验签+身份验证
2020-03-11 11:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 11:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 11:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 11:03:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:03:50 -==> Parameters: 181(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:03:50 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:03:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 11:03:50 -<==    Updates: 1
2020-03-11 11:03:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 11:03:50 -==> Parameters: 181(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:03:50 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:03:50 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 11:03:50 -<==    Updates: 1
2020-03-11 11:03:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 11:03:50 -==> Parameters: 
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:03:50 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:03:50 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 11:03:50 -<==    Updates: 1
2020-03-11 11:03:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:03:50 -==> Parameters: 181(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:03:50 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 11:03:50 -<==      Total: 1
2020-03-11 11:03:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:03:50 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 11:03:50 -<==    Updates: 1
2020-03-11 11:03:50 -耗时 : 193
2020-03-11 11:03:59 -此处进行解密+验签+身份验证
2020-03-11 11:03:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:03:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:03:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 11:03:59 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 11:03:59 -==> Parameters: 181(String)
2020-03-11 11:03:59 -<==      Total: 1
2020-03-11 11:03:59 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 11:03:59 -==> Parameters: 181(String), 181(String)
2020-03-11 11:03:59 -<==      Total: 1
2020-03-11 11:03:59 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 11:03:59 -==> Parameters: 181(String), 181(String)
2020-03-11 11:03:59 -<==      Total: 1
2020-03-11 11:03:59 -耗时 : 98
2020-03-11 11:04:02 -此处进行解密+验签+身份验证
2020-03-11 11:04:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-11 11:04:02 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-11 11:04:02 -==> Parameters: 1(String), 181(String), recallFlag(String)
2020-03-11 11:04:02 -<==    Updates: 1
2020-03-11 11:04:02 -耗时 : 21
2020-03-11 11:04:02 -此处进行解密+验签+身份验证
2020-03-11 11:04:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-11 11:04:02 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:02 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:02 -<==      Total: 0
2020-03-11 11:04:02 -耗时 : 19
2020-03-11 11:04:05 -此处进行解密+验签+身份验证
2020-03-11 11:04:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-11 11:04:05 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:05 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:05 -<==      Total: 0
2020-03-11 11:04:05 -耗时 : 21
2020-03-11 11:04:05 -此处进行解密+验签+身份验证
2020-03-11 11:04:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-11 11:04:05 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:05 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:05 -<==      Total: 0
2020-03-11 11:04:05 -耗时 : 19
2020-03-11 11:04:06 -此处进行解密+验签+身份验证
2020-03-11 11:04:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-11 11:04:06 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:06 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:06 -<==      Total: 0
2020-03-11 11:04:06 -耗时 : 20
2020-03-11 11:04:06 -此处进行解密+验签+身份验证
2020-03-11 11:04:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-03-11 11:04:06 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:06 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:06 -<==      Total: 0
2020-03-11 11:04:06 -耗时 : 19
2020-03-11 11:04:07 -此处进行解密+验签+身份验证
2020-03-11 11:04:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-11 11:04:07 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:07 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:07 -<==      Total: 0
2020-03-11 11:04:07 -耗时 : 18
2020-03-11 11:04:07 -此处进行解密+验签+身份验证
2020-03-11 11:04:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-11 11:04:07 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 11:04:07 -==> Parameters: 181(String), 00(String)
2020-03-11 11:04:07 -<==      Total: 0
2020-03-11 11:04:07 -耗时 : 14
2020-03-11 11:04:08 -此处进行解密+验签+身份验证
2020-03-11 11:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 11:04:08 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 11:04:08 -==> Parameters: 181(String)
2020-03-11 11:04:08 -<==      Total: 1
2020-03-11 11:04:08 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 11:04:08 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:08 -<==      Total: 1
2020-03-11 11:04:08 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 11:04:08 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:08 -<==      Total: 1
2020-03-11 11:04:08 -耗时 : 95
2020-03-11 11:04:10 -此处进行解密+验签+身份验证
2020-03-11 11:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 11:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 11:04:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 11:04:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:04:10 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:10 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:10 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 11:04:10 -<==    Updates: 1
2020-03-11 11:04:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 11:04:10 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:10 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:10 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 11:04:10 -<==    Updates: 1
2020-03-11 11:04:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 11:04:10 -==> Parameters: 
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:10 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:10 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 11:04:10 -<==    Updates: 1
2020-03-11 11:04:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:04:10 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:10 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 11:04:10 -<==      Total: 1
2020-03-11 11:04:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:10 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 11:04:10 -<==    Updates: 1
2020-03-11 11:04:10 -耗时 : 187
2020-03-11 11:04:14 -此处进行解密+验签+身份验证
2020-03-11 11:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-11 11:04:14 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-11 11:04:14 -==> Parameters: 181(String)
2020-03-11 11:04:14 -此处进行解密+验签+身份验证
2020-03-11 11:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:14 -<==      Total: 2
2020-03-11 11:04:14 -耗时 : 19
2020-03-11 11:04:14 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-11 11:04:14 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-11 11:04:14 -==> Parameters: 
2020-03-11 11:04:14 -<==      Total: 3
2020-03-11 11:04:14 -耗时 : 15
2020-03-11 11:04:20 -此处进行解密+验签+身份验证
2020-03-11 11:04:20 -此处进行解密+验签+身份验证
2020-03-11 11:04:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:20 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-11 11:04:20 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-11 11:04:20 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 11:04:20 -==> Parameters: 181(String), 202003(String)
2020-03-11 11:04:20 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-11 11:04:20 -==> Parameters: 181(String), 20200311(String)
2020-03-11 11:04:20 -<==      Total: 1
2020-03-11 11:04:20 -耗时 : 18
2020-03-11 11:04:20 -<==      Total: 0
2020-03-11 11:04:20 -耗时 : 19
2020-03-11 11:04:22 -此处进行解密+验签+身份验证
2020-03-11 11:04:22 -此处进行解密+验签+身份验证
2020-03-11 11:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-11 11:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-11 11:04:22 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-11 11:04:22 -==> Parameters: 181(String), 20200311(String)
2020-03-11 11:04:22 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 11:04:22 -==> Parameters: 181(String), 202003(String)
2020-03-11 11:04:22 -<==      Total: 0
2020-03-11 11:04:22 -耗时 : 20
2020-03-11 11:04:22 -<==      Total: 1
2020-03-11 11:04:22 -耗时 : 18
2020-03-11 11:04:26 -此处进行解密+验签+身份验证
2020-03-11 11:04:26 -此处进行解密+验签+身份验证
2020-03-11 11:04:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:26 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyMposDetail
2020-03-11 11:04:26 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyMposDetail
2020-03-11 11:04:26 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-11 11:04:26 -==> Parameters: 181(String), 20200311(String)
2020-03-11 11:04:26 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-11 11:04:26 -==> Parameters: 181(String), 202003(String)
2020-03-11 11:04:26 -<==      Total: 1
2020-03-11 11:04:26 -耗时 : 19
2020-03-11 11:04:26 -<==      Total: 1
2020-03-11 11:04:26 -耗时 : 20
2020-03-11 11:04:28 -此处进行解密+验签+身份验证
2020-03-11 11:04:28 -此处进行解密+验签+身份验证
2020-03-11 11:04:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:28 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantMposDetail
2020-03-11 11:04:28 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantMposDetail
2020-03-11 11:04:28 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-11 11:04:28 -==> Parameters: 181(String), 20200311(String)
2020-03-11 11:04:28 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-11 11:04:28 -==> Parameters: 181(String), 202003(String)
2020-03-11 11:04:28 -<==      Total: 1
2020-03-11 11:04:28 -耗时 : 18
2020-03-11 11:04:28 -<==      Total: 1
2020-03-11 11:04:28 -耗时 : 18
2020-03-11 11:04:31 -此处进行解密+验签+身份验证
2020-03-11 11:04:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:31 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantMposList
2020-03-11 11:04:31 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_mpos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? order by t1.date 
2020-03-11 11:04:31 -==> Parameters: 20200301(String), 181(String)
2020-03-11 11:04:31 -<==      Total: 7
2020-03-11 11:04:31 -耗时 : 24
2020-03-11 11:04:34 -此处进行解密+验签+身份验证
2020-03-11 11:04:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 11:04:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 11:04:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 11:04:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:04:34 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:34 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:34 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 11:04:34 -<==    Updates: 1
2020-03-11 11:04:34 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 11:04:34 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:34 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:34 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 11:04:34 -<==    Updates: 1
2020-03-11 11:04:34 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 11:04:34 -==> Parameters: 
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:34 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:34 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 11:04:34 -<==    Updates: 1
2020-03-11 11:04:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:04:34 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:04:34 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 11:04:34 -<==      Total: 1
2020-03-11 11:04:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:04:34 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 11:04:34 -<==    Updates: 1
2020-03-11 11:04:34 -耗时 : 184
2020-03-11 11:04:35 -此处进行解密+验签+身份验证
2020-03-11 11:04:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-11 11:04:35 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-11 11:04:35 -==> Parameters: 1(String), 181(String), applyRateFlag(String)
2020-03-11 11:04:35 -<==    Updates: 1
2020-03-11 11:04:35 -耗时 : 22
2020-03-11 11:04:37 -此处进行解密+验签+身份验证
2020-03-11 11:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:37 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-11 11:04:37 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-11 11:04:37 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:37 -<==      Total: 536
2020-03-11 11:04:37 -耗时 : 89
2020-03-11 11:04:40 -此处进行解密+验签+身份验证
2020-03-11 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:40 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-11 11:04:40 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-11 11:04:40 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:40 -<==      Total: 1118
2020-03-11 11:04:40 -耗时 : 105
2020-03-11 11:04:49 -此处进行解密+验签+身份验证
2020-03-11 11:04:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:04:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:04:49 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-11 11:04:49 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-11 11:04:49 -==> Parameters: 181(String), 181(String)
2020-03-11 11:04:49 -<==      Total: 536
2020-03-11 11:04:49 -耗时 : 27
2020-03-11 11:05:20 -此处进行解密+验签+身份验证
2020-03-11 11:05:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:05:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:05:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 11:05:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 11:05:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 11:05:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:05:20 -==> Parameters: 181(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:05:20 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:05:20 -==> Parameters: 0(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 11:05:20 -<==    Updates: 1
2020-03-11 11:05:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 11:05:20 -==> Parameters: 181(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:05:20 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:05:20 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 11:05:20 -<==    Updates: 1
2020-03-11 11:05:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 11:05:20 -==> Parameters: 
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:05:20 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:05:20 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 11:05:20 -<==    Updates: 1
2020-03-11 11:05:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:05:20 -==> Parameters: 181(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:05:20 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 11:05:20 -<==      Total: 1
2020-03-11 11:05:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:05:20 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 11:05:20 -<==    Updates: 1
2020-03-11 11:05:20 -耗时 : 185
2020-03-11 11:07:39 -此处进行解密+验签+身份验证
2020-03-11 11:07:39 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 11:07:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 11:07:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 11:07:39 -耗时 : 16
2020-03-11 11:07:40 -此处进行解密+验签+身份验证
2020-03-11 11:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:07:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 11:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 11:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 11:07:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:07:40 -==> Parameters: 181(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:07:40 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:07:40 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 11:07:40 -<==    Updates: 1
2020-03-11 11:07:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 11:07:40 -==> Parameters: 181(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:07:40 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:07:40 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 11:07:40 -<==    Updates: 1
2020-03-11 11:07:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 11:07:40 -==> Parameters: 
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:07:40 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:07:40 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 11:07:40 -<==    Updates: 1
2020-03-11 11:07:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 11:07:40 -==> Parameters: 181(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 11:07:40 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 11:07:40 -<==      Total: 1
2020-03-11 11:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 11:07:40 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 11:07:40 -<==    Updates: 1
2020-03-11 11:07:40 -耗时 : 182
2020-03-11 11:08:49 -此处进行解密+验签+身份验证
2020-03-11 11:08:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 11:08:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 11:08:49 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 11:08:49 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 11:08:49 -==> Parameters: 181(String)
2020-03-11 11:08:49 -<==      Total: 1
2020-03-11 11:08:49 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 11:08:49 -==> Parameters: 181(String), 181(String)
2020-03-11 11:08:49 -<==      Total: 1
2020-03-11 11:08:49 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 11:08:49 -==> Parameters: 181(String), 181(String)
2020-03-11 11:08:49 -<==      Total: 1
2020-03-11 11:08:49 -耗时 : 97
2020-03-11 11:24:28 -此处进行解密+验签+身份验证
2020-03-11 11:24:28 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 11:24:28 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 11:24:28 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$94d0d88d.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$69d84289.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 11:24:28 -耗时 : 11
2020-03-11 11:24:28 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-11 11:24:28 -Reconnected to 120.25.164.176:10379
2020-03-11 14:58:15 -Starting LongEcologicalApplication on PC-201905161910 with PID 14544 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-11 14:58:15 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-11 14:58:15 -No active profile set, falling back to default profiles: default
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 14:58:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 14:58:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 14:58:16 -Finished Spring Data repository scanning in 89ms. Found 0 repository interfaces.
2020-03-11 14:58:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 14:58:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 14:58:16 -Finished Spring Data repository scanning in 51ms. Found 0 repository interfaces.
2020-03-11 14:58:17 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8250ec90] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 14:58:17 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$7cd4d130] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 14:58:17 -Tomcat initialized with port(s): 8080 (http)
2020-03-11 14:58:17 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-11 14:58:17 -Starting service [Tomcat]
2020-03-11 14:58:17 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-11 14:58:17 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-11 14:58:17 -Initializing Spring embedded WebApplicationContext
2020-03-11 14:58:17 -Root WebApplicationContext: initialization completed in 2315 ms
2020-03-11 14:58:17 -Filter xssFilter was not registered (disabled)
2020-03-11 14:58:18 -HikariPool-1 - Starting...
2020-03-11 14:58:18 -HikariPool-1 - Start completed.
2020-03-11 14:58:18 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-11 14:58:18 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-11 14:58:18 -HHH000206: hibernate.properties not found
2020-03-11 14:58:18 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-11 14:58:18 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-11 14:58:18 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-11 14:58:19 -Using default implementation for ThreadExecutor
2020-03-11 14:58:19 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-11 14:58:19 -Quartz Scheduler v.2.3.0 created.
2020-03-11 14:58:19 -RAMJobStore initialized.
2020-03-11 14:58:19 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-11 14:58:19 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-11 14:58:19 -Quartz scheduler version: 2.3.0
2020-03-11 14:58:19 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3a4e524
2020-03-11 14:58:19 -STAET TaskExecutorConfig
2020-03-11 14:58:19 -Initializing ExecutorService
2020-03-11 14:58:19 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-11 14:58:20 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-11 14:58:20 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-11 14:58:20 -Initializing ExecutorService 'taskScheduler'
2020-03-11 14:58:21 -Starting Quartz Scheduler now
2020-03-11 14:58:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-11 14:58:21 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-11 14:58:21 -Using a shared selector for servlet write/read
2020-03-11 14:58:21 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-11 14:58:21 -Started LongEcologicalApplication in 6.149 seconds (JVM running for 7.302)
2020-03-11 14:58:35 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-11 14:58:35 -Initializing Servlet 'dispatcherServlet'
2020-03-11 14:58:35 -Completed initialization in 13 ms
2020-03-11 14:58:35 -此处进行解密+验签+身份验证
2020-03-11 14:58:35 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 14:58:35 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 14:58:35 -Starting without optional epoll library
2020-03-11 14:58:35 -Starting without optional kqueue library
2020-03-11 14:58:36 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 14:58:36 -耗时 : 785
2020-03-11 14:58:37 -此处进行解密+验签+身份验证
2020-03-11 14:58:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 14:58:37 -此处进行解密+验签+身份验证
2020-03-11 14:58:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 14:58:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 14:58:37 -此处进行解密+验签+身份验证
2020-03-11 14:58:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 14:58:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 14:58:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 14:58:37 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-11 14:58:37 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-11 14:58:37 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-11 14:58:37 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-11 14:58:37 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-11 14:58:37 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-11 14:58:37 -==> Parameters: 181(String), 202003(String)
2020-03-11 14:58:37 -==> Parameters: 181(String), 202003(String)
2020-03-11 14:58:37 -==> Parameters: 181(String)
2020-03-11 14:58:37 -<==      Total: 1
2020-03-11 14:58:37 -<==      Total: 1
2020-03-11 14:58:37 -<==      Total: 1
2020-03-11 14:58:37 -耗时 : 43
2020-03-11 14:58:37 -耗时 : 46
2020-03-11 14:58:37 -耗时 : 52
2020-03-11 14:58:54 -此处进行解密+验签+身份验证
2020-03-11 14:58:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 14:58:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 14:58:54 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 14:58:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 14:58:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 14:58:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 14:58:54 -==> Parameters: 181(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 14:58:54 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 14:58:54 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 14:58:54 -<==    Updates: 1
2020-03-11 14:58:54 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 14:58:54 -==> Parameters: 181(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 14:58:54 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 14:58:54 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 14:58:54 -<==    Updates: 1
2020-03-11 14:58:54 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 14:58:54 -==> Parameters: 
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 14:58:54 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 14:58:54 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 14:58:54 -<==    Updates: 1
2020-03-11 14:58:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 14:58:54 -==> Parameters: 181(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 14:58:54 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 14:58:54 -<==      Total: 1
2020-03-11 14:58:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 14:58:54 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 14:58:54 -<==    Updates: 1
2020-03-11 14:58:54 -耗时 : 102
2020-03-11 14:58:55 -此处进行解密+验签+身份验证
2020-03-11 14:58:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 14:58:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 14:58:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-11 14:58:55 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-11 14:58:55 -==> Parameters: 181(String)
2020-03-11 14:58:55 -<==      Total: 1004
2020-03-11 14:58:55 -耗时 : 76
2020-03-11 15:01:29 -此处进行解密+验签+身份验证
2020-03-11 15:01:29 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:01:29 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:01:29 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:01:29 -耗时 : 9
2020-03-11 15:03:45 -此处进行解密+验签+身份验证
2020-03-11 15:03:45 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:03:45 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:03:45 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:03:45 -耗时 : 8
2020-03-11 15:03:47 -此处进行解密+验签+身份验证
2020-03-11 15:03:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:03:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:03:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 15:03:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 15:03:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 15:03:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:03:47 -==> Parameters: 181(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:03:47 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:03:47 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 15:03:47 -<==    Updates: 1
2020-03-11 15:03:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 15:03:47 -==> Parameters: 181(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:03:47 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:03:47 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 15:03:47 -<==    Updates: 1
2020-03-11 15:03:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 15:03:47 -==> Parameters: 
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:03:47 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:03:47 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 15:03:47 -<==    Updates: 1
2020-03-11 15:03:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:03:47 -==> Parameters: 181(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:03:47 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 15:03:47 -<==      Total: 1
2020-03-11 15:03:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:03:47 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 15:03:47 -<==    Updates: 1
2020-03-11 15:03:47 -耗时 : 166
2020-03-11 15:09:30 -此处进行解密+验签+身份验证
2020-03-11 15:09:30 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:09:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:09:30 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:09:30 -耗时 : 9
2020-03-11 15:13:48 -此处进行解密+验签+身份验证
2020-03-11 15:13:48 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:13:48 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:13:48 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$249f8270.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$55f73776.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 15:13:48 -耗时 : 10
2020-03-11 15:13:48 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-11 15:13:48 -Reconnected to 120.25.164.176:10379
2020-03-11 15:16:58 -此处进行解密+验签+身份验证
2020-03-11 15:16:58 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:16:58 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:16:58 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:16:58 -耗时 : 15
2020-03-11 15:17:31 -此处进行解密+验签+身份验证
2020-03-11 15:17:31 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:17:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:17:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:17:31 -耗时 : 18
2020-03-11 15:17:34 -此处进行解密+验签+身份验证
2020-03-11 15:17:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:17:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:17:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5b50104b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1d78f119 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@467178b5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@68c8a416 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@486cebe5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@12c63bc8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5fbf4df5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@72faba00 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5d665479 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7edd3c66 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 15:17:34 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-11 15:17:34 -==> Parameters: 181(String)
2020-03-11 15:17:34 -<==      Total: 1004
2020-03-11 15:17:34 -耗时 : 105
2020-03-11 15:17:35 -此处进行解密+验签+身份验证
2020-03-11 15:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:17:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 15:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 15:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 15:17:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:17:35 -==> Parameters: 181(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:17:35 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:17:35 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 15:17:35 -<==    Updates: 1
2020-03-11 15:17:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 15:17:35 -==> Parameters: 181(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:17:35 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:17:35 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 15:17:35 -<==    Updates: 1
2020-03-11 15:17:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 15:17:35 -==> Parameters: 
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:17:35 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:17:35 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 15:17:35 -<==    Updates: 1
2020-03-11 15:17:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:17:35 -==> Parameters: 181(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:17:35 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:17:35 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 15:17:35 -<==    Updates: 1
2020-03-11 15:17:35 -耗时 : 134
2020-03-11 15:17:35 -此处进行解密+验签+身份验证
2020-03-11 15:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:17:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:17:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 15:17:35 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 15:17:35 -==> Parameters: 181(String)
2020-03-11 15:17:35 -<==      Total: 1
2020-03-11 15:17:35 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 15:17:35 -==> Parameters: 181(String), 181(String)
2020-03-11 15:17:36 -<==      Total: 1
2020-03-11 15:17:36 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 15:17:36 -==> Parameters: 181(String), 181(String)
2020-03-11 15:17:36 -<==      Total: 1
2020-03-11 15:17:36 -耗时 : 98
2020-03-11 15:21:44 -此处进行解密+验签+身份验证
2020-03-11 15:21:44 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:21:44 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:21:44 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:21:44 -耗时 : 15
2020-03-11 15:21:45 -此处进行解密+验签+身份验证
2020-03-11 15:21:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:21:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:21:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 15:21:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 15:21:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 15:21:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:21:45 -==> Parameters: 181(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:21:45 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:21:45 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 15:21:45 -<==    Updates: 1
2020-03-11 15:21:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 15:21:45 -==> Parameters: 181(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:21:45 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:21:45 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 15:21:45 -<==    Updates: 1
2020-03-11 15:21:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 15:21:45 -==> Parameters: 
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:21:45 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:21:45 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 15:21:45 -<==    Updates: 1
2020-03-11 15:21:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:21:45 -==> Parameters: 181(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:21:45 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 15:21:45 -<==      Total: 1
2020-03-11 15:21:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:21:45 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 15:21:45 -<==    Updates: 1
2020-03-11 15:21:45 -耗时 : 135
2020-03-11 15:22:04 -此处进行解密+验签+身份验证
2020-03-11 15:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:22:04 -此处进行解密+验签+身份验证
2020-03-11 15:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:22:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-11 15:22:04 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-11 15:22:04 -==> Parameters: 181(String)
2020-03-11 15:22:04 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-11 15:22:04 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-11 15:22:04 -==> Parameters: 
2020-03-11 15:22:04 -<==      Total: 2
2020-03-11 15:22:04 -耗时 : 13
2020-03-11 15:22:04 -<==      Total: 3
2020-03-11 15:22:04 -耗时 : 14
2020-03-11 15:24:19 -此处进行解密+验签+身份验证
2020-03-11 15:24:19 -此处进行解密+验签+身份验证
2020-03-11 15:24:19 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:24:19 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:24:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:24:19 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:24:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:24:19 -耗时 : 20
2020-03-11 15:24:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 15:24:19 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 15:24:19 -==> Parameters: 181(String)
2020-03-11 15:24:19 -<==      Total: 1
2020-03-11 15:24:19 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 15:24:19 -==> Parameters: 181(String), 181(String)
2020-03-11 15:24:20 -<==      Total: 1
2020-03-11 15:24:20 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 15:24:20 -==> Parameters: 181(String), 181(String)
2020-03-11 15:24:20 -<==      Total: 1
2020-03-11 15:24:20 -耗时 : 82
2020-03-11 15:24:23 -此处进行解密+验签+身份验证
2020-03-11 15:24:23 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-11 15:24:23 -token值=======181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX
2020-03-11 15:24:23 -耗时 : 45
2020-03-11 15:24:33 -此处进行解密+验签+身份验证
2020-03-11 15:24:33 -解密：{
  "sign" : "9D5CC032B2EC3173FAC52AFB32102B70",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "BDFA762517DBEE605DDEA6AC0205B3EC",
  "token" : "181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-11 15:24:34 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-11 15:24:34 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-11 15:24:34 -==> Parameters: 13322990711(String)
2020-03-11 15:24:34 -<==      Total: 1
2020-03-11 15:24:34 -耗时 : 23
2020-03-11 15:25:04 -此处进行解密+验签+身份验证
2020-03-11 15:25:04 -请求地址 : http://192.168.191.1:8080/api/common/imgCode/createImgCode
2020-03-11 15:25:05 -耗时 : 162
2020-03-11 15:26:11 -此处进行解密+验签+身份验证
2020-03-11 15:26:11 -解密：{
  "sys_user_account" : "13322990711",
  "sign" : "204A06085B27C179C5F57DEFE1D2C23D",
  "img_id" : "20200311152504842667303",
  "bus_type" : "FrontForgetPass",
  "img_code" : "FBXY",
  "token" : "181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX"
}
2020-03-11 15:26:11 -请求地址 : http://192.168.191.1:8080/api/common/smsCode/sendSmsCodeOnly
2020-03-11 15:26:11 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-11 15:26:11 -==> Parameters: 13322990711(String)
2020-03-11 15:26:11 -<==      Total: 1
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_verifySendHourLimit
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_verifySendHourLimit , return
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_verifySendDayLimit
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_verifySendDayLimit , return
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_verifySendDuration
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_verifySendDuration , return
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_verifyInvalidDuration
2020-03-11 15:26:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_verifyInvalidDuration , return
2020-03-11 15:26:11 -==>  Preparing: SELECT * FROM t_verify_record WHERE system_type = ? and bus_type = ? and acc_type = ? and user_name = ? order by send_time desc limit 0,1 
2020-03-11 15:26:11 -==> Parameters: SystemFront(String), FrontForgetPass(String), 1(String), 13322990711(String)
2020-03-11 15:26:11 -<==      Total: 0
2020-03-11 15:26:11 -==>  Preparing: SELECT count(*) FROM t_verify_record WHERE system_type = ? and user_name = ? and send_time>? -INTERVAL ? HOUR 
2020-03-11 15:26:11 -==> Parameters: SystemFront(String), 13322990711(String), 2020-03-11 15:26:11(String), 1(Integer)
2020-03-11 15:26:11 -<==      Total: 1
2020-03-11 15:26:11 -==>  Preparing: SELECT count(*) FROM t_verify_record WHERE system_type = ? and user_name = ? and send_time>? -INTERVAL ? HOUR 
2020-03-11 15:26:11 -==> Parameters: SystemFront(String), 13322990711(String), 2020-03-11 15:26:11(String), 24(Integer)
2020-03-11 15:26:11 -<==      Total: 1
2020-03-11 15:26:11 -==>  Preparing: insert into t_verify_record ( user_id, user_name, system_type, bus_type, acc_type, account, code, create_time, send_time, invalid_time, msg_template ) values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-03-11 15:26:11 -==> Parameters: 181(String), 13322990711(String), SystemFront(String), FrontForgetPass(String), 1(String), 13322990711(String), 571487(String), 2020-03-11 15:26:11(String), 2020-03-11 15:26:11(String), 2020-03-11 15:41:11(String), lcw(String)
2020-03-11 15:26:11 -<==    Updates: 1
2020-03-11 15:26:11 -耗时 : 224
2020-03-11 15:27:15 -此处进行解密+验签+身份验证
2020-03-11 15:27:15 -解密：{
  "sys_user_account" : "13322990711",
  "sign" : "37FABB8EA55F5B084AF3DA48C1BEC602",
  "sms_code" : "571487",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX"
}
2020-03-11 15:27:15 -请求地址 : http://192.168.191.1:8080/api/user/login/userForgetPass
2020-03-11 15:27:15 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-11 15:27:15 -==> Parameters: 13322990711(String)
2020-03-11 15:27:15 -<==      Total: 1
2020-03-11 15:27:15 -==>  Preparing: SELECT * FROM t_verify_record WHERE user_id = ? and system_type = ? and bus_type = ? and acc_type = ? and user_name = ? order by send_time desc limit 0,1 
2020-03-11 15:27:15 -==> Parameters: 181(String), SystemFront(String), FrontForgetPass(String), 1(String), 13322990711(String)
2020-03-11 15:27:15 -<==      Total: 1
2020-03-11 15:27:15 -==>  Preparing: update t_verify_record SET `id` = ?, `user_id` = ?, `user_name` = ?, `system_type` = ?, `bus_type` = ?, `acc_type` = ?, `account` = ?, `code` = ?, `status` = ?, `create_time` = ?, `send_time` = ?, `invalid_time` = ?, `verify_time` = ? where id = ? 
2020-03-11 15:27:15 -==> Parameters: 32(Integer), 181(String), 13322990711(String), SystemFront(String), FrontForgetPass(String), 1(String), 13322990711(String), 571487(String), 1(String), 2020-03-11 15:26:11(String), 2020-03-11 15:26:11(String), 2020-03-11 15:41:11(String), 2020-03-11 15:27:15(String), 32(Integer)
2020-03-11 15:27:15 -<==    Updates: 1
2020-03-11 15:27:15 -==>  Preparing: update t_user_info set login_password=? where id=? 
2020-03-11 15:27:15 -==> Parameters: c397d63f66b982939130d48b396235f8(String), 181(Integer)
2020-03-11 15:27:15 -<==    Updates: 1
2020-03-11 15:27:15 -耗时 : 81
2020-03-11 15:27:19 -此处进行解密+验签+身份验证
2020-03-11 15:27:19 -解密：{
  "sign" : "9D5CC032B2EC3173FAC52AFB32102B70",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "BDFA762517DBEE605DDEA6AC0205B3EC",
  "token" : "181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-11 15:27:19 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-11 15:27:19 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-11 15:27:19 -==> Parameters: 13322990711(String)
2020-03-11 15:27:19 -<==      Total: 1
2020-03-11 15:27:19 -耗时 : 15
2020-03-11 15:27:28 -此处进行解密+验签+身份验证
2020-03-11 15:27:28 -解密：{
  "sign" : "B4646B001E8C2C77A427AE6F2299BD4D",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|2D169USZGVNL8SIPDF95TLMCU4YEA2GX",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-11 15:27:28 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-11 15:27:28 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-11 15:27:28 -==> Parameters: 13322990711(String)
2020-03-11 15:27:28 -<==      Total: 1
2020-03-11 15:27:28 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-11 15:27:28 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200311(String), 152728(String), 181(Integer)
2020-03-11 15:27:28 -<==    Updates: 1
2020-03-11 15:27:28 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-11 15:27:28 -==> Parameters: 26(String)
2020-03-11 15:27:28 -<==      Total: 1
2020-03-11 15:27:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-11 15:27:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-11 15:27:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-11 15:27:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-11 15:27:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-11 15:27:28 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-11 15:27:28 -耗时 : 109
2020-03-11 15:27:28 -此处进行解密+验签+身份验证
2020-03-11 15:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:27:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-11 15:27:29 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-11 15:27:29 -==> Parameters: 181(String)
2020-03-11 15:27:29 -此处进行解密+验签+身份验证
2020-03-11 15:27:29 -此处进行解密+验签+身份验证
2020-03-11 15:27:29 -此处进行解密+验签+身份验证
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:27:29 -<==      Total: 2
2020-03-11 15:27:29 -耗时 : 9
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:27:29 -此处进行解密+验签+身份验证
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 15:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-11 15:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-11 15:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-11 15:27:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-11 15:27:29 -==> Parameters: 
2020-03-11 15:27:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-11 15:27:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-11 15:27:29 -<==      Total: 3
2020-03-11 15:27:29 -耗时 : 11
2020-03-11 15:27:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-11 15:27:29 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-11 15:27:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 15:27:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 15:27:29 -耗时 : 35
2020-03-11 15:27:29 -耗时 : 34
2020-03-11 15:27:29 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-11 15:27:29 -==> Parameters: 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_181,save content:{referer_id=null, parent_chain=null, user_tel=13322990711, id_card=352228198203282016, real_name=李贤耀, algebra=1, cre_date=20181119, cre_time=203311, login_password=c397d63f66b982939130d48b396235f8, manager_id=26, pay_password=40282677fa88708b60422f90d398a355, id=181, auth_status=09, status=0}
2020-03-11 15:27:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:27:29 -==> Parameters: 181(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:27:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:27:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 15:27:29 -<==    Updates: 1
2020-03-11 15:27:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 15:27:29 -==> Parameters: 181(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:27:29 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:27:29 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 15:27:29 -<==    Updates: 1
2020-03-11 15:27:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 15:27:29 -==> Parameters: 
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:27:29 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:27:29 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 15:27:29 -<==    Updates: 1
2020-03-11 15:27:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 15:27:29 -==> Parameters: 181(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 15:27:29 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 15:27:29 -<==      Total: 1
2020-03-11 15:27:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 15:27:29 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 15:27:29 -<==    Updates: 1
2020-03-11 15:27:29 -耗时 : 126
2020-03-11 15:29:52 -此处进行解密+验签+身份验证
2020-03-11 15:29:52 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 15:29:52 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 15:29:52 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 15:29:52 -耗时 : 15
2020-03-11 16:07:33 -此处进行解密+验签+身份验证
2020-03-11 16:07:33 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 16:07:33 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 16:07:33 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$249f8270.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$55f73776.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 16:07:33 -耗时 : 12
2020-03-11 16:07:33 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-11 16:07:33 -Reconnected to 120.25.164.176:10379
2020-03-11 16:07:34 -此处进行解密+验签+身份验证
2020-03-11 16:07:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:07:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:07:34 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5e8bdc45 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2c62fefe (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@50f175b9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5018e216 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@79fc123b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@17be80fc (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@410d51d9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7317ce7d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2c34badd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4fee66c7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:07:34 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 16:07:34 -==> Parameters: 181(String)
2020-03-11 16:07:35 -<==      Total: 1
2020-03-11 16:07:35 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 16:07:35 -==> Parameters: 181(String), 181(String)
2020-03-11 16:07:35 -<==      Total: 1
2020-03-11 16:07:35 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 16:07:35 -==> Parameters: 181(String), 181(String)
2020-03-11 16:07:35 -<==      Total: 1
2020-03-11 16:07:35 -耗时 : 201
2020-03-11 16:07:40 -此处进行解密+验签+身份验证
2020-03-11 16:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:07:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 16:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 16:07:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 16:07:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:07:40 -==> Parameters: 181(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:07:40 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:07:40 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 16:07:40 -<==    Updates: 1
2020-03-11 16:07:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 16:07:40 -==> Parameters: 181(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:07:40 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:07:40 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 16:07:40 -<==    Updates: 1
2020-03-11 16:07:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 16:07:40 -==> Parameters: 
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:07:40 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:07:40 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 16:07:40 -<==    Updates: 1
2020-03-11 16:07:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:07:40 -==> Parameters: 181(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:07:40 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 16:07:40 -<==      Total: 1
2020-03-11 16:07:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:07:40 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 16:07:40 -<==    Updates: 1
2020-03-11 16:07:40 -耗时 : 217
2020-03-11 16:07:41 -此处进行解密+验签+身份验证
2020-03-11 16:07:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:07:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:07:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-11 16:07:41 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-11 16:07:41 -==> Parameters: 1(String), 181(String), applyRateFlag(String)
2020-03-11 16:07:41 -<==    Updates: 1
2020-03-11 16:07:41 -耗时 : 24
2020-03-11 16:07:46 -此处进行解密+验签+身份验证
2020-03-11 16:07:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:07:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:07:46 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-11 16:07:46 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-11 16:07:46 -==> Parameters: 181(String), 181(String)
2020-03-11 16:07:46 -<==      Total: 536
2020-03-11 16:07:46 -耗时 : 92
2020-03-11 16:07:54 -此处进行解密+验签+身份验证
2020-03-11 16:07:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:07:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:07:54 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-11 16:07:54 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-11 16:07:54 -==> Parameters: 181(String)
2020-03-11 16:07:54 -<==      Total: 8
2020-03-11 16:07:54 -耗时 : 24
2020-03-11 16:08:47 -此处进行解密+验签+身份验证
2020-03-11 16:08:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:08:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:08:47 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-11 16:08:47 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-11 16:08:47 -==> Parameters: 181(String)
2020-03-11 16:08:47 -<==      Total: 8
2020-03-11 16:08:47 -耗时 : 22
2020-03-11 16:08:53 -此处进行解密+验签+身份验证
2020-03-11 16:08:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:08:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:08:53 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-11 16:08:53 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-11 16:08:53 -==> Parameters: 181(String)
2020-03-11 16:08:53 -<==      Total: 8
2020-03-11 16:08:53 -耗时 : 24
2020-03-11 16:09:02 -此处进行解密+验签+身份验证
2020-03-11 16:09:02 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 16:09:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 16:09:02 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 16:09:02 -耗时 : 14
2020-03-11 16:09:04 -此处进行解密+验签+身份验证
2020-03-11 16:09:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:09:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:09:04 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-11 16:09:04 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-11 16:09:04 -==> Parameters: 181(String)
2020-03-11 16:09:04 -<==      Total: 8
2020-03-11 16:09:04 -耗时 : 25
2020-03-11 16:09:08 -此处进行解密+验签+身份验证
2020-03-11 16:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:09:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 16:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 16:09:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 16:09:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:09:08 -==> Parameters: 181(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:09:08 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:09:08 -==> Parameters: 0(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 16:09:08 -<==    Updates: 1
2020-03-11 16:09:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 16:09:08 -==> Parameters: 181(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:09:08 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:09:08 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 16:09:08 -<==    Updates: 1
2020-03-11 16:09:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 16:09:08 -==> Parameters: 
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:09:08 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:09:08 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 16:09:08 -<==    Updates: 1
2020-03-11 16:09:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:09:08 -==> Parameters: 181(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:09:08 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 16:09:08 -<==      Total: 1
2020-03-11 16:09:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:09:08 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 16:09:08 -<==    Updates: 1
2020-03-11 16:09:08 -耗时 : 210
2020-03-11 16:09:23 -此处进行解密+验签+身份验证
2020-03-11 16:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:09:23 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-11 16:09:23 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-11 16:09:23 -==> Parameters: 1(String), 181(String), applyRateFlag(String)
2020-03-11 16:09:23 -<==    Updates: 1
2020-03-11 16:09:23 -耗时 : 25
2020-03-11 16:09:30 -此处进行解密+验签+身份验证
2020-03-11 16:09:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:09:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:09:30 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-11 16:09:30 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-11 16:09:30 -==> Parameters: 181(String)
2020-03-11 16:09:30 -<==      Total: 8
2020-03-11 16:09:30 -耗时 : 23
2020-03-11 16:20:27 -此处进行解密+验签+身份验证
2020-03-11 16:20:27 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 16:20:27 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 16:20:27 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 16:20:27 -耗时 : 15
2020-03-11 16:20:29 -此处进行解密+验签+身份验证
2020-03-11 16:20:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:20:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:20:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 16:20:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 16:20:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 16:20:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:20:29 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:29 -<==      Total: 1
2020-03-11 16:20:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:29 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 16:20:29 -<==      Total: 1
2020-03-11 16:20:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:29 -==> Parameters: 0(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 16:20:29 -<==    Updates: 1
2020-03-11 16:20:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 16:20:29 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:30 -<==      Total: 1
2020-03-11 16:20:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:30 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 16:20:30 -<==      Total: 1
2020-03-11 16:20:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:30 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 16:20:30 -<==    Updates: 1
2020-03-11 16:20:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 16:20:30 -==> Parameters: 
2020-03-11 16:20:30 -<==      Total: 1
2020-03-11 16:20:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:30 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 16:20:30 -<==      Total: 1
2020-03-11 16:20:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:30 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 16:20:30 -<==    Updates: 1
2020-03-11 16:20:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:20:30 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:30 -<==      Total: 1
2020-03-11 16:20:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:30 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 16:20:30 -<==      Total: 1
2020-03-11 16:20:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:30 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 16:20:30 -<==    Updates: 1
2020-03-11 16:20:30 -耗时 : 216
2020-03-11 16:20:31 -此处进行解密+验签+身份验证
2020-03-11 16:20:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:20:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:20:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 16:20:31 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 16:20:31 -==> Parameters: 181(String)
2020-03-11 16:20:31 -<==      Total: 1
2020-03-11 16:20:31 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 16:20:31 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:31 -<==      Total: 1
2020-03-11 16:20:31 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 16:20:31 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:31 -<==      Total: 1
2020-03-11 16:20:31 -耗时 : 103
2020-03-11 16:20:33 -此处进行解密+验签+身份验证
2020-03-11 16:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:20:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 16:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 16:20:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 16:20:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:20:33 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:33 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:33 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 16:20:33 -<==    Updates: 1
2020-03-11 16:20:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 16:20:33 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:33 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:33 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 16:20:33 -<==    Updates: 1
2020-03-11 16:20:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 16:20:33 -==> Parameters: 
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:33 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:33 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 16:20:33 -<==    Updates: 1
2020-03-11 16:20:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 16:20:33 -==> Parameters: 181(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 16:20:33 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 16:20:33 -<==      Total: 1
2020-03-11 16:20:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 16:20:33 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 16:20:33 -<==    Updates: 1
2020-03-11 16:20:33 -耗时 : 218
2020-03-11 16:20:36 -此处进行解密+验签+身份验证
2020-03-11 16:20:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:20:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:20:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-11 16:20:36 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-11 16:20:36 -==> Parameters: 181(String)
2020-03-11 16:20:36 -<==      Total: 1
2020-03-11 16:20:36 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-11 16:20:36 -==> Parameters: 181(String), 181(String), 202003(String)
2020-03-11 16:20:36 -<==      Total: 1
2020-03-11 16:20:36 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-11 16:20:36 -==> Parameters: 181(String), 181(String), 20200210(String), 20200311(String), 181(String)
2020-03-11 16:20:36 -<==      Total: 1
2020-03-11 16:20:36 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-11 16:20:36 -==> Parameters: 181(String), 20200111(String), 181(String), 20200111(String), 20200311(String), 181(String)
2020-03-11 16:20:36 -<==      Total: 1
2020-03-11 16:20:36 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-11 16:20:36 -==> Parameters: 181(String)
2020-03-11 16:20:36 -<==      Total: 1
2020-03-11 16:20:36 -耗时 : 130
2020-03-11 16:20:37 -此处进行解密+验签+身份验证
2020-03-11 16:20:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:20:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:20:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-11 16:20:37 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-11 16:20:37 -==> Parameters: 181(String)
2020-03-11 16:20:37 -<==      Total: 10
2020-03-11 16:20:37 -耗时 : 24
2020-03-11 16:20:53 -此处进行解密+验签+身份验证
2020-03-11 16:20:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:20:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:20:53 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-11 16:20:53 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-11 16:20:53 -==> Parameters: 181(String), E20200308300(String)
2020-03-11 16:20:53 -<==      Total: 1
2020-03-11 16:20:53 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-11 16:20:53 -==> Parameters: E20200308300(String)
2020-03-11 16:20:53 -<==      Total: 0
2020-03-11 16:20:53 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-11 16:20:53 -==> Parameters: E20200308300(String)
2020-03-11 16:20:53 -<==      Total: 1
2020-03-11 16:20:53 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-11 16:20:53 -==> Parameters: E20200308300(String), 181(String)
2020-03-11 16:20:53 -<==      Total: 2
2020-03-11 16:20:53 -MerchantManageServiceImpl -- getTraditionalPosDetail方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPOSTradeStatistical(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getTraditionalPosDetail(MerchantManageServiceImpl.java:336)
	at com.example.longecological.controller.merchant.MerchantManageController.getTraditionalPosDetail(MerchantManageController.java:156)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$4e5a0af1.getTraditionalPosDetail(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 16:20:53 -耗时 : 80
2020-03-11 16:21:18 -此处进行解密+验签+身份验证
2020-03-11 16:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:21:18 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-11 16:21:18 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-11 16:21:18 -==> Parameters: 181(String), E20200308302(String)
2020-03-11 16:21:18 -<==      Total: 1
2020-03-11 16:21:18 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-11 16:21:18 -==> Parameters: E20200308302(String)
2020-03-11 16:21:18 -<==      Total: 0
2020-03-11 16:21:18 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-11 16:21:18 -==> Parameters: E20200308302(String)
2020-03-11 16:21:18 -<==      Total: 1
2020-03-11 16:21:18 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-11 16:21:18 -==> Parameters: E20200308302(String), 181(String)
2020-03-11 16:21:18 -<==      Total: 2
2020-03-11 16:21:18 -MerchantManageServiceImpl -- getTraditionalPosDetail方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPOSTradeStatistical(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getTraditionalPosDetail(MerchantManageServiceImpl.java:336)
	at com.example.longecological.controller.merchant.MerchantManageController.getTraditionalPosDetail(MerchantManageController.java:156)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$4e5a0af1.getTraditionalPosDetail(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 16:21:18 -耗时 : 75
2020-03-11 16:21:22 -此处进行解密+验签+身份验证
2020-03-11 16:21:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:21:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:21:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-11 16:21:22 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-11 16:21:22 -==> Parameters: 181(String), E20200308304(String)
2020-03-11 16:21:22 -<==      Total: 1
2020-03-11 16:21:22 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-11 16:21:22 -==> Parameters: E20200308304(String)
2020-03-11 16:21:22 -<==      Total: 0
2020-03-11 16:21:22 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-11 16:21:22 -==> Parameters: E20200308304(String)
2020-03-11 16:21:22 -<==      Total: 1
2020-03-11 16:21:22 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-11 16:21:22 -==> Parameters: E20200308304(String), 181(String)
2020-03-11 16:21:22 -<==      Total: 2
2020-03-11 16:21:22 -MerchantManageServiceImpl -- getTraditionalPosDetail方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getTraditionalPOSTradeStatistical(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getTraditionalPosDetail(MerchantManageServiceImpl.java:336)
	at com.example.longecological.controller.merchant.MerchantManageController.getTraditionalPosDetail(MerchantManageController.java:156)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$4e5a0af1.getTraditionalPosDetail(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 16:21:22 -耗时 : 77
2020-03-11 16:23:09 -此处进行解密+验签+身份验证
2020-03-11 16:23:09 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 16:23:09 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 16:23:09 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor91.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$249f8270.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$55f73776.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 16:23:09 -耗时 : 10
2020-03-11 16:23:09 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-11 16:23:09 -Reconnected to 120.25.164.176:10379
2020-03-11 16:27:43 -此处进行解密+验签+身份验证
2020-03-11 16:27:43 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 16:27:43 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 16:27:43 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 16:27:43 -耗时 : 17
2020-03-11 16:28:15 -Starting LongEcologicalApplication on PC-201905161910 with PID 12924 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-11 16:28:15 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-11 16:28:15 -No active profile set, falling back to default profiles: default
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-11 16:28:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 16:28:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 16:28:16 -Finished Spring Data repository scanning in 90ms. Found 0 repository interfaces.
2020-03-11 16:28:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-11 16:28:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-11 16:28:16 -Finished Spring Data repository scanning in 54ms. Found 0 repository interfaces.
2020-03-11 16:28:16 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c3b567c8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 16:28:16 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$be394c68] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-11 16:28:17 -Tomcat initialized with port(s): 8080 (http)
2020-03-11 16:28:17 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-11 16:28:17 -Starting service [Tomcat]
2020-03-11 16:28:17 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-11 16:28:17 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-11 16:28:17 -Initializing Spring embedded WebApplicationContext
2020-03-11 16:28:17 -Root WebApplicationContext: initialization completed in 2559 ms
2020-03-11 16:28:17 -Filter xssFilter was not registered (disabled)
2020-03-11 16:28:18 -HikariPool-1 - Starting...
2020-03-11 16:28:18 -HikariPool-1 - Start completed.
2020-03-11 16:28:18 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-11 16:28:18 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-11 16:28:18 -HHH000206: hibernate.properties not found
2020-03-11 16:28:18 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-11 16:28:19 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-11 16:28:19 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-11 16:28:19 -Using default implementation for ThreadExecutor
2020-03-11 16:28:19 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-11 16:28:19 -Quartz Scheduler v.2.3.0 created.
2020-03-11 16:28:19 -RAMJobStore initialized.
2020-03-11 16:28:19 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-11 16:28:19 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-11 16:28:19 -Quartz scheduler version: 2.3.0
2020-03-11 16:28:19 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@55421b8d
2020-03-11 16:28:20 -STAET TaskExecutorConfig
2020-03-11 16:28:20 -Initializing ExecutorService
2020-03-11 16:28:20 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-11 16:28:20 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-11 16:28:20 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-11 16:28:21 -Initializing ExecutorService 'taskScheduler'
2020-03-11 16:28:21 -Starting Quartz Scheduler now
2020-03-11 16:28:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-11 16:28:21 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-11 16:28:21 -Using a shared selector for servlet write/read
2020-03-11 16:28:21 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-11 16:28:21 -Started LongEcologicalApplication in 6.548 seconds (JVM running for 7.603)
2020-03-11 16:28:36 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-11 16:28:36 -Initializing Servlet 'dispatcherServlet'
2020-03-11 16:28:36 -Completed initialization in 12 ms
2020-03-11 16:28:36 -此处进行解密+验签+身份验证
2020-03-11 16:28:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:28:36 -Starting without optional epoll library
2020-03-11 16:28:36 -Starting without optional kqueue library
2020-03-11 16:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:28:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-11 16:28:37 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-11 16:28:37 -==> Parameters: 181(String)
2020-03-11 16:28:37 -<==      Total: 10
2020-03-11 16:28:37 -耗时 : 77
2020-03-11 16:28:40 -此处进行解密+验签+身份验证
2020-03-11 16:28:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:28:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:28:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-11 16:28:40 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-11 16:28:40 -==> Parameters: 181(String), E20200308300(String)
2020-03-11 16:28:40 -<==      Total: 1
2020-03-11 16:28:40 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-11 16:28:40 -==> Parameters: E20200308300(String)
2020-03-11 16:28:40 -<==      Total: 0
2020-03-11 16:28:40 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-11 16:28:40 -==> Parameters: E20200308300(String)
2020-03-11 16:28:40 -<==      Total: 1
2020-03-11 16:28:40 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-11 16:28:40 -==> Parameters: E20200308300(String), 181(String)
2020-03-11 16:28:40 -<==      Total: 1
2020-03-11 16:28:40 -耗时 : 72
2020-03-11 16:47:51 -此处进行解密+验签+身份验证
2020-03-11 16:47:51 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 16:47:51 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 16:47:51 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$772b32a2.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$a7730ef5.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 16:47:51 -耗时 : 15
2020-03-11 16:47:51 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-11 16:47:51 -Reconnected to 120.25.164.176:10379
2020-03-11 16:47:59 -此处进行解密+验签+身份验证
2020-03-11 16:47:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 16:47:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 16:47:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@702f7d87 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@9964797 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2ded067 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@460dc665 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3dd45da7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6451f75 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@72ecba32 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5afa64e4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@45dc3379 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6bcc3200 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 16:47:59 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-11 16:47:59 -==> Parameters: 181(String), E20200308300(String)
2020-03-11 16:47:59 -<==      Total: 1
2020-03-11 16:47:59 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-11 16:47:59 -==> Parameters: E20200308300(String)
2020-03-11 16:47:59 -<==      Total: 0
2020-03-11 16:47:59 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-11 16:47:59 -==> Parameters: E20200308300(String)
2020-03-11 16:47:59 -<==      Total: 1
2020-03-11 16:47:59 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-11 16:47:59 -==> Parameters: E20200308300(String), 181(String)
2020-03-11 16:47:59 -<==      Total: 1
2020-03-11 16:47:59 -耗时 : 95
2020-03-11 17:02:04 -此处进行解密+验签+身份验证
2020-03-11 17:02:04 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 17:02:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 17:02:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 17:02:04 -耗时 : 17
2020-03-11 17:02:20 -此处进行解密+验签+身份验证
2020-03-11 17:02:20 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 17:02:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 17:02:20 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 17:02:20 -耗时 : 15
2020-03-11 17:02:21 -此处进行解密+验签+身份验证
2020-03-11 17:02:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:02:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:02:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 17:02:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 17:02:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 17:02:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:02:21 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:21 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:21 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 17:02:21 -<==    Updates: 1
2020-03-11 17:02:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 17:02:21 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:21 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:21 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 17:02:21 -<==    Updates: 1
2020-03-11 17:02:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 17:02:21 -==> Parameters: 
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:21 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:21 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 17:02:21 -<==    Updates: 1
2020-03-11 17:02:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:02:21 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:21 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 17:02:21 -<==      Total: 1
2020-03-11 17:02:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:21 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 17:02:21 -<==    Updates: 1
2020-03-11 17:02:21 -耗时 : 129
2020-03-11 17:02:34 -此处进行解密+验签+身份验证
2020-03-11 17:02:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:02:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:02:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 17:02:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 17:02:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 17:02:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:02:34 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:34 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:34 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 17:02:34 -<==    Updates: 1
2020-03-11 17:02:34 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 17:02:34 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:34 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:34 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 17:02:34 -<==    Updates: 1
2020-03-11 17:02:34 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 17:02:34 -==> Parameters: 
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:34 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:34 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 17:02:34 -<==    Updates: 1
2020-03-11 17:02:34 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:02:34 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:34 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 17:02:34 -<==      Total: 1
2020-03-11 17:02:34 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:34 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 17:02:34 -<==    Updates: 1
2020-03-11 17:02:34 -耗时 : 114
2020-03-11 17:02:36 -此处进行解密+验签+身份验证
2020-03-11 17:02:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:02:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:02:36 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 17:02:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 17:02:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 17:02:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:02:36 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:36 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:36 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 17:02:36 -<==    Updates: 1
2020-03-11 17:02:36 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 17:02:36 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:36 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:36 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 17:02:36 -<==    Updates: 1
2020-03-11 17:02:36 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 17:02:36 -==> Parameters: 
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:36 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:36 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 17:02:36 -<==    Updates: 1
2020-03-11 17:02:36 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:02:36 -==> Parameters: 181(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:02:36 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 17:02:36 -<==      Total: 1
2020-03-11 17:02:36 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:02:36 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 17:02:36 -<==    Updates: 1
2020-03-11 17:02:36 -耗时 : 120
2020-03-11 17:02:37 -此处进行解密+验签+身份验证
2020-03-11 17:02:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:02:37 -此处进行解密+验签+身份验证
2020-03-11 17:02:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:02:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:02:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:02:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-11 17:02:37 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-11 17:02:37 -==> Parameters: 181(String)
2020-03-11 17:02:37 -<==      Total: 2
2020-03-11 17:02:37 -耗时 : 12
2020-03-11 17:02:37 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-11 17:02:37 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-11 17:02:37 -==> Parameters: 
2020-03-11 17:02:37 -<==      Total: 3
2020-03-11 17:02:37 -耗时 : 11
2020-03-11 17:13:53 -此处进行解密+验签+身份验证
2020-03-11 17:13:53 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 17:13:53 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 17:13:53 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$772b32a2.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$a7730ef5.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-11 17:13:53 -耗时 : 8
2020-03-11 17:13:53 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-11 17:13:53 -Reconnected to 120.25.164.176:10379
2020-03-11 17:13:54 -此处进行解密+验签+身份验证
2020-03-11 17:13:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:13:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:13:54 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6a28328 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1909c23d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@cdc2c31 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1ef54541 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@70a661b1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3d3a9613 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5053d8cb (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@506cfd0b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@388abac4 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@51e939c8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-11 17:13:55 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 17:13:55 -==> Parameters: 181(String)
2020-03-11 17:13:55 -<==      Total: 1
2020-03-11 17:13:55 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 17:13:55 -==> Parameters: 181(String), 181(String)
2020-03-11 17:13:55 -<==      Total: 1
2020-03-11 17:13:55 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 17:13:55 -==> Parameters: 181(String), 181(String)
2020-03-11 17:13:55 -<==      Total: 1
2020-03-11 17:13:55 -耗时 : 146
2020-03-11 17:13:58 -此处进行解密+验签+身份验证
2020-03-11 17:13:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:13:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:13:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-11 17:13:58 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-11 17:13:58 -==> Parameters: 1(String), 181(String), recallFlag(String)
2020-03-11 17:13:58 -<==    Updates: 1
2020-03-11 17:13:58 -耗时 : 15
2020-03-11 17:13:58 -此处进行解密+验签+身份验证
2020-03-11 17:13:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:13:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:13:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-11 17:13:58 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 17:13:58 -==> Parameters: 181(String), 00(String)
2020-03-11 17:13:58 -<==      Total: 0
2020-03-11 17:13:58 -耗时 : 18
2020-03-11 17:14:00 -此处进行解密+验签+身份验证
2020-03-11 17:14:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallMposList
2020-03-11 17:14:00 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 17:14:00 -==> Parameters: 181(String), 00(String)
2020-03-11 17:14:00 -<==      Total: 0
2020-03-11 17:14:00 -耗时 : 13
2020-03-11 17:14:01 -此处进行解密+验签+身份验证
2020-03-11 17:14:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTrafficCardList
2020-03-11 17:14:01 -==>  Preparing: SELECT cast(id as char) as recall_id, card_no, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trafficcard_recall_record_info WHERE acce_user_id = ? AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 17:14:01 -==> Parameters: 181(String), 00(String)
2020-03-11 17:14:01 -<==      Total: 0
2020-03-11 17:14:01 -耗时 : 13
2020-03-11 17:14:01 -此处进行解密+验签+身份验证
2020-03-11 17:14:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-11 17:14:01 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-11 17:14:01 -==> Parameters: 181(String), 00(String)
2020-03-11 17:14:01 -<==      Total: 0
2020-03-11 17:14:01 -耗时 : 8
2020-03-11 17:14:04 -此处进行解密+验签+身份验证
2020-03-11 17:14:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-11 17:14:04 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-11 17:14:04 -==> Parameters: 181(String)
2020-03-11 17:14:04 -<==      Total: 1
2020-03-11 17:14:04 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-11 17:14:04 -==> Parameters: 181(String), 181(String)
2020-03-11 17:14:04 -<==      Total: 1
2020-03-11 17:14:04 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-11 17:14:04 -==> Parameters: 181(String), 181(String)
2020-03-11 17:14:04 -<==      Total: 1
2020-03-11 17:14:04 -耗时 : 78
2020-03-11 17:14:06 -此处进行解密+验签+身份验证
2020-03-11 17:14:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-11 17:14:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-11 17:14:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-11 17:14:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:14:06 -==> Parameters: 181(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:14:06 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:14:06 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-11 17:14:06 -<==    Updates: 1
2020-03-11 17:14:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-11 17:14:06 -==> Parameters: 181(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:14:06 -==> Parameters: recallFlag(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:14:06 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-11 17:14:06 -<==    Updates: 1
2020-03-11 17:14:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-11 17:14:06 -==> Parameters: 
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:14:06 -==> Parameters: collegeFlag(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:14:06 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-11 17:14:06 -<==    Updates: 1
2020-03-11 17:14:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-11 17:14:06 -==> Parameters: 181(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-11 17:14:06 -==> Parameters: cardFlag(String), 181(String)
2020-03-11 17:14:06 -<==      Total: 1
2020-03-11 17:14:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-11 17:14:06 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-11 17:14:06 -<==    Updates: 1
2020-03-11 17:14:06 -耗时 : 127
2020-03-11 17:14:08 -此处进行解密+验签+身份验证
2020-03-11 17:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-11 17:14:08 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-11 17:14:08 -==> Parameters: 181(String)
2020-03-11 17:14:08 -<==      Total: 1004
2020-03-11 17:14:08 -耗时 : 57
2020-03-11 17:14:12 -此处进行解密+验签+身份验证
2020-03-11 17:14:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-11 17:14:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-11 17:14:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-11 17:14:12 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-11 17:14:12 -==> Parameters: 181(String)
2020-03-11 17:14:12 -<==      Total: 4
2020-03-11 17:14:12 -耗时 : 113
2020-03-11 17:17:03 -此处进行解密+验签+身份验证
2020-03-11 17:17:03 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-11 17:17:03 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-11 17:17:03 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-11 17:17:03 -耗时 : 9
