2020-04-30 17:26:06 -Starting LongEcologicalApplication on PC-201905161910 with PID 13620 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-30 17:26:06 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-30 17:26:06 -No active profile set, falling back to default profiles: default
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:26:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-30 17:26:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-30 17:26:07 -Finished Spring Data repository scanning in 45ms. Found 0 repository interfaces.
2020-04-30 17:26:07 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-30 17:26:07 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-30 17:26:07 -Finished Spring Data repository scanning in 17ms. Found 0 repository interfaces.
2020-04-30 17:26:07 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b58c1dc9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-30 17:26:07 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b0100269] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-30 17:26:08 -Tomcat initialized with port(s): 8080 (http)
2020-04-30 17:26:08 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-30 17:26:08 -Starting service [Tomcat]
2020-04-30 17:26:08 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-30 17:26:08 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-30 17:26:08 -Initializing Spring embedded WebApplicationContext
2020-04-30 17:26:08 -Root WebApplicationContext: initialization completed in 2058 ms
2020-04-30 17:26:08 -Filter xssFilter was not registered (disabled)
2020-04-30 17:26:08 -HikariPool-1 - Starting...
2020-04-30 17:26:08 -HikariPool-1 - Start completed.
2020-04-30 17:26:08 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-30 17:26:08 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-30 17:26:08 -HHH000206: hibernate.properties not found
2020-04-30 17:26:09 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-30 17:26:09 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-30 17:26:09 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-30 17:26:09 -Using default implementation for ThreadExecutor
2020-04-30 17:26:09 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-30 17:26:09 -Quartz Scheduler v.2.3.0 created.
2020-04-30 17:26:09 -RAMJobStore initialized.
2020-04-30 17:26:09 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-30 17:26:09 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-30 17:26:09 -Quartz scheduler version: 2.3.0
2020-04-30 17:26:09 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@57b9389f
2020-04-30 17:26:10 -STAET TaskExecutorConfig
2020-04-30 17:26:10 -Initializing ExecutorService
2020-04-30 17:26:10 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-30 17:26:10 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-30 17:26:10 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-30 17:26:11 -Initializing ExecutorService 'taskScheduler'
2020-04-30 17:26:11 -Starting Quartz Scheduler now
2020-04-30 17:26:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-30 17:26:11 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-30 17:26:11 -Using a shared selector for servlet write/read
2020-04-30 17:26:11 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-30 17:26:11 -Started LongEcologicalApplication in 5.505 seconds (JVM running for 6.446)
2020-04-30 17:30:49 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-30 17:30:49 -Initializing Servlet 'dispatcherServlet'
2020-04-30 17:30:49 -Completed initialization in 18 ms
2020-04-30 17:30:49 -此处进行解密+验签+身份验证
2020-04-30 17:30:50 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"C3412D9251DA25F736634EAE10214B96","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3"}
2020-04-30 17:30:50 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-30 17:30:50 -token值=======181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3
2020-04-30 17:30:50 -Starting without optional epoll library
2020-04-30 17:30:50 -Starting without optional kqueue library
2020-04-30 17:30:52 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-04-30 17:30:52 -==> Parameters: 181(String)
2020-04-30 17:30:52 -<==      Total: 1
2020-04-30 17:30:52 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-30 17:30:52 -==> Parameters: 26(String)
2020-04-30 17:30:52 -<==      Total: 1
2020-04-30 17:30:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-30 17:30:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-30 17:30:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-30 17:30:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-30 17:30:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-30 17:30:53 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-30 17:30:53 -耗时 : 2828
2020-04-30 17:30:59 -此处进行解密+验签+身份验证
2020-04-30 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:30:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-30 17:30:59 -此处进行解密+验签+身份验证
2020-04-30 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:30:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:30:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-30 17:30:59 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:30:59 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-30 17:30:59 -==> Parameters: 181(String), 181(String)
2020-04-30 17:30:59 -==> Parameters: 181(String)
2020-04-30 17:30:59 -<==      Total: 1161
2020-04-30 17:30:59 -耗时 : 638
2020-04-30 17:31:00 -<==      Total: 1600
2020-04-30 17:31:00 -耗时 : 856
2020-04-30 17:31:02 -此处进行解密+验签+身份验证
2020-04-30 17:31:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:31:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:31:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-30 17:31:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-30 17:31:02 -==> Parameters: 181(String)
2020-04-30 17:31:02 -此处进行解密+验签+身份验证
2020-04-30 17:31:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -耗时 : 6
2020-04-30 17:31:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:31:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-30 17:31:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-30 17:31:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-30 17:31:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:31:02 -==> Parameters: 181(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:31:02 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 2
2020-04-30 17:31:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:31:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-30 17:31:02 -<==    Updates: 2
2020-04-30 17:31:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-30 17:31:02 -==> Parameters: 181(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:31:02 -==> Parameters: recallFlag(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:31:02 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-30 17:31:02 -<==    Updates: 1
2020-04-30 17:31:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-30 17:31:02 -==> Parameters: 
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:31:02 -==> Parameters: collegeFlag(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:31:02 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-30 17:31:02 -<==    Updates: 1
2020-04-30 17:31:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:31:02 -==> Parameters: 181(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:31:02 -==> Parameters: cardFlag(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:31:02 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-30 17:31:02 -<==    Updates: 1
2020-04-30 17:31:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:31:02 -==> Parameters: appImgFlag(String), 181(String)
2020-04-30 17:31:02 -<==      Total: 1
2020-04-30 17:31:02 -耗时 : 167
2020-04-30 17:31:09 -此处进行解密+验签+身份验证
2020-04-30 17:31:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:31:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:31:09 -此处进行解密+验签+身份验证
2020-04-30 17:31:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-30 17:31:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:31:09 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-30 17:31:09 -==> Parameters: 181(String)
2020-04-30 17:31:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:31:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-30 17:31:09 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:31:09 -==> Parameters: 181(String), 181(String)
2020-04-30 17:31:09 -<==      Total: 1161
2020-04-30 17:31:09 -耗时 : 269
2020-04-30 17:31:10 -<==      Total: 1600
2020-04-30 17:31:10 -耗时 : 531
2020-04-30 17:31:10 -此处进行解密+验签+身份验证
2020-04-30 17:31:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:31:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:31:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-30 17:31:10 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-30 17:31:10 -==> Parameters: 181(String)
2020-04-30 17:31:11 -<==      Total: 1160
2020-04-30 17:31:11 -耗时 : 354
2020-04-30 17:31:19 -此处进行解密+验签+身份验证
2020-04-30 17:31:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:31:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:31:19 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:31:19 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:31:19 -==> Parameters: 181(String), 181(String)
2020-04-30 17:31:20 -<==      Total: 571
2020-04-30 17:31:20 -耗时 : 742
2020-04-30 17:32:18 -此处进行解密+验签+身份验证
2020-04-30 17:32:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:32:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:32:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-04-30 17:32:18 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-04-30 17:32:18 -==> Parameters: 181(String)
2020-04-30 17:32:18 -<==      Total: 851
2020-04-30 17:32:18 -耗时 : 133
2020-04-30 17:33:05 -此处进行解密+验签+身份验证
2020-04-30 17:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-04-30 17:33:05 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-04-30 17:33:05 -==> Parameters: 181(String)
2020-04-30 17:33:05 -此处进行解密+验签+身份验证
2020-04-30 17:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-04-30 17:33:05 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-04-30 17:33:05 -==> Parameters: 181(String), 00000302J8NL01087403(String)
2020-04-30 17:33:05 -<==      Total: 1
2020-04-30 17:33:05 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-04-30 17:33:05 -==> Parameters: 
2020-04-30 17:33:05 -<==      Total: 144
2020-04-30 17:33:05 -耗时 : 104
2020-04-30 17:33:05 -<==      Total: 101
2020-04-30 17:33:05 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-30 17:33:05 -==> Parameters: 00000302J8NL01087403(String)
2020-04-30 17:33:05 -<==      Total: 1
2020-04-30 17:33:05 -耗时 : 93
2020-04-30 17:33:58 -此处进行解密+验签+身份验证
2020-04-30 17:33:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:33:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:33:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-04-30 17:33:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-30 17:33:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-30 17:33:58 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-04-30 17:33:58 -==> Parameters: 181(String), 00000302J8NL01087403(String), 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String)
2020-04-30 17:33:58 -<==      Total: 1
2020-04-30 17:33:58 -==>  Preparing: select count(distinct is_reward) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? ) 
2020-04-30 17:33:58 -==> Parameters: 181(String), 00000302J8NL01087403(String)
2020-04-30 17:33:58 -<==      Total: 1
2020-04-30 17:33:58 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where module_type=3 and isuse=1 and sn in ( ? ) 
2020-04-30 17:33:58 -==> Parameters: 00000302J8NL01087403(String)
2020-04-30 17:33:58 -<==      Total: 1
2020-04-30 17:33:58 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type, is_reward ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type, ? FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-04-30 17:33:58 -==> Parameters: 70(String), 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String), 20200430(String), 173358(String), 0.520(String), 1(String), 181(String), 00000302J8NL01087403(String), 70(String)
2020-04-30 17:33:58 -<==    Updates: 1
2020-04-30 17:33:58 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-04-30 17:33:58 -==> Parameters: 0.520(String), 0.280(String), 0.280(String), 0.280(String), 0.000(String), 0.000(String), 18.000(String), 20200430(String), 173358(String), 70(String), 00000302J8NL01087403(String)
2020-04-30 17:33:58 -<==    Updates: 0
2020-04-30 17:33:58 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-04-30 17:33:58 -==> Parameters: 20200430(String), 173358(String), 181(String), 00000302J8NL01087403(String)
2020-04-30 17:33:59 -<==    Updates: 1
2020-04-30 17:33:59 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-04-30 17:33:59 -==> Parameters: 181_20200430173359(String), 00000302J8NL01087403(String), 70(String), TraditionalPOS(String), 2020-04-30 17:33:59(String), 181(String)
2020-04-30 17:33:59 -<==    Updates: 1
2020-04-30 17:33:59 -耗时 : 340
2020-04-30 17:33:59 -此处进行解密+验签+身份验证
2020-04-30 17:33:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:33:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:33:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-04-30 17:33:59 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(max(module1_end_date),'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-04-30 17:33:59 -此处进行解密+验签+身份验证
2020-04-30 17:33:59 -==> Parameters: 181(String)
2020-04-30 17:33:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:33:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:33:59 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:33:59 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:33:59 -==> Parameters: 181(String), 181(String)
2020-04-30 17:33:59 -<==      Total: 850
2020-04-30 17:33:59 -耗时 : 98
2020-04-30 17:34:00 -<==      Total: 572
2020-04-30 17:34:00 -耗时 : 757
2020-04-30 17:34:47 -此处进行解密+验签+身份验证
2020-04-30 17:34:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:34:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:34:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:34:47 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND t.sn >= ? AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:34:47 -==> Parameters: 181(String), 00000302J8NL010(String), 181(String)
2020-04-30 17:34:48 -<==      Total: 567
2020-04-30 17:34:48 -耗时 : 651
2020-04-30 17:34:49 -此处进行解密+验签+身份验证
2020-04-30 17:34:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:34:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:34:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-30 17:34:49 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:34:49 -==> Parameters: 181(String), 181(String)
2020-04-30 17:34:50 -<==      Total: 1600
2020-04-30 17:34:50 -耗时 : 448
2020-04-30 17:34:51 -此处进行解密+验签+身份验证
2020-04-30 17:34:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:34:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:34:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:34:51 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:34:51 -==> Parameters: 181(String), 181(String)
2020-04-30 17:34:52 -<==      Total: 572
2020-04-30 17:34:52 -耗时 : 721
2020-04-30 17:34:57 -此处进行解密+验签+身份验证
2020-04-30 17:34:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:34:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:34:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:34:57 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:34:57 -==> Parameters: 181(String), 181(String)
2020-04-30 17:34:57 -<==      Total: 2
2020-04-30 17:34:57 -耗时 : 24
2020-04-30 17:35:20 -此处进行解密+验签+身份验证
2020-04-30 17:35:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:35:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:35:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:35:20 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND t.sn >= ? AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:35:20 -==> Parameters: 181(String), 87403(String), 181(String)
2020-04-30 17:35:20 -<==      Total: 0
2020-04-30 17:35:20 -耗时 : 43
2020-04-30 17:35:22 -此处进行解密+验签+身份验证
2020-04-30 17:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:35:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:35:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:35:22 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:35:22 -==> Parameters: 181(String), 181(String)
2020-04-30 17:35:23 -<==      Total: 572
2020-04-30 17:35:23 -耗时 : 647
2020-04-30 17:35:29 -此处进行解密+验签+身份验证
2020-04-30 17:35:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:35:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:35:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:35:29 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND t.sn <= ? AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:35:29 -==> Parameters: 181(String), 87403(String), 181(String)
2020-04-30 17:35:30 -<==      Total: 552
2020-04-30 17:35:30 -耗时 : 622
2020-04-30 17:35:32 -此处进行解密+验签+身份验证
2020-04-30 17:35:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:35:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:35:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:35:32 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:35:32 -==> Parameters: 181(String), 181(String)
2020-04-30 17:35:33 -<==      Total: 572
2020-04-30 17:35:33 -耗时 : 634
2020-04-30 17:36:06 -此处进行解密+验签+身份验证
2020-04-30 17:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:06 -此处进行解密+验签+身份验证
2020-04-30 17:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:06 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-30 17:36:06 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-30 17:36:06 -==> Parameters: 181(String)
2020-04-30 17:36:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-30 17:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -耗时 : 3
2020-04-30 17:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-30 17:36:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:36:06 -==> Parameters: 181(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:36:06 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 2
2020-04-30 17:36:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:36:06 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-30 17:36:06 -<==    Updates: 2
2020-04-30 17:36:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-30 17:36:06 -==> Parameters: 181(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:36:06 -==> Parameters: recallFlag(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:36:06 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-30 17:36:06 -<==    Updates: 1
2020-04-30 17:36:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-30 17:36:06 -==> Parameters: 
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:36:06 -==> Parameters: collegeFlag(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:36:06 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-30 17:36:06 -<==    Updates: 1
2020-04-30 17:36:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:36:06 -==> Parameters: 181(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:36:06 -==> Parameters: cardFlag(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:36:06 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-30 17:36:06 -<==    Updates: 1
2020-04-30 17:36:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:36:06 -==> Parameters: appImgFlag(String), 181(String)
2020-04-30 17:36:06 -<==      Total: 1
2020-04-30 17:36:06 -耗时 : 128
2020-04-30 17:36:07 -此处进行解密+验签+身份验证
2020-04-30 17:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-04-30 17:36:07 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-04-30 17:36:07 -==> Parameters: 181(String)
2020-04-30 17:36:07 -此处进行解密+验签+身份验证
2020-04-30 17:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-04-30 17:36:07 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:36:07 -==> Parameters: 181(String), 181(String)
2020-04-30 17:36:07 -<==      Total: 1161
2020-04-30 17:36:07 -耗时 : 163
2020-04-30 17:36:07 -<==      Total: 1600
2020-04-30 17:36:07 -耗时 : 461
2020-04-30 17:36:08 -此处进行解密+验签+身份验证
2020-04-30 17:36:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:08 -此处进行解密+验签+身份验证
2020-04-30 17:36:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-04-30 17:36:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-04-30 17:36:08 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-04-30 17:36:08 -==> Parameters: 181(String), TraditionalPOS(String)
2020-04-30 17:36:08 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-04-30 17:36:08 -==> Parameters: 181(String), MPOS(String)
2020-04-30 17:36:08 -<==      Total: 10
2020-04-30 17:36:08 -<==      Total: 10
2020-04-30 17:36:08 -耗时 : 71
2020-04-30 17:36:08 -耗时 : 67
2020-04-30 17:36:12 -此处进行解密+验签+身份验证
2020-04-30 17:36:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-04-30 17:36:12 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-04-30 17:36:12 -==> Parameters: 181(String), epos(String)
2020-04-30 17:36:12 -<==      Total: 5
2020-04-30 17:36:12 -耗时 : 12
2020-04-30 17:36:14 -此处进行解密+验签+身份验证
2020-04-30 17:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-04-30 17:36:14 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-04-30 17:36:14 -==> Parameters: 70(String), 00000302J8NL01087403(String)
2020-04-30 17:36:14 -<==      Total: 1
2020-04-30 17:36:14 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-30 17:36:14 -==> Parameters: 00000302J8NL01087403(String)
2020-04-30 17:36:14 -<==      Total: 1
2020-04-30 17:36:14 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-04-30 17:36:14 -==> Parameters: 181_20200430173359(String)
2020-04-30 17:36:14 -<==      Total: 1
2020-04-30 17:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-30 17:36:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-30 17:36:14 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-04-30 17:36:14 -==> Parameters: 181_20200430173359(String)
2020-04-30 17:36:14 -<==      Total: 1
2020-04-30 17:36:14 -耗时 : 79
2020-04-30 17:36:15 -此处进行解密+验签+身份验证
2020-04-30 17:36:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:36:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:36:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-04-30 17:36:15 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-04-30 17:36:15 -==> Parameters: 181(String), 00000302J8NL01087403(String)
2020-04-30 17:36:15 -<==      Total: 1
2020-04-30 17:36:15 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-04-30 17:36:15 -==> Parameters: 
2020-04-30 17:36:15 -<==      Total: 101
2020-04-30 17:36:15 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-04-30 17:36:15 -==> Parameters: 00000302J8NL01087403(String)
2020-04-30 17:36:15 -<==      Total: 1
2020-04-30 17:36:15 -耗时 : 40
2020-04-30 17:37:02 -此处进行解密+验签+身份验证
2020-04-30 17:37:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-04-30 17:37:02 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-04-30 17:37:02 -==> Parameters: 181(String)
2020-04-30 17:37:02 -<==      Total: 1160
2020-04-30 17:37:02 -耗时 : 219
2020-04-30 17:37:05 -此处进行解密+验签+身份验证
2020-04-30 17:37:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:05 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:37:05 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:37:05 -==> Parameters: 181(String), 181(String)
2020-04-30 17:37:05 -<==      Total: 572
2020-04-30 17:37:05 -耗时 : 683
2020-04-30 17:37:24 -此处进行解密+验签+身份验证
2020-04-30 17:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:37:24 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND t.sn >= ? AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:37:24 -==> Parameters: 181(String), 00000302J8NL01087403(String), 181(String)
2020-04-30 17:37:25 -<==      Total: 567
2020-04-30 17:37:25 -耗时 : 721
2020-04-30 17:37:33 -此处进行解密+验签+身份验证
2020-04-30 17:37:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/recallTraditionalPos
2020-04-30 17:37:33 -==>  Preparing: INSERT INTO t_user_trapos_recall_record_info ( send_user_id, acce_user_id, sn, cre_date, cre_time, pos_type ) SELECT ?, user_id, sn, ?, ?, pos_type FROM t_user_traditional_pos_info WHERE state_status = '1' AND del='0' AND FIND_IN_SET(sn, ?) AND user_id in (select id from t_user_info where referer_id = ?) 
2020-04-30 17:37:33 -==> Parameters: 181(String), 20200430(String), 173733(String), 00000302J8NL01087403(String), 181(String)
2020-04-30 17:37:33 -<==    Updates: 1
2020-04-30 17:37:33 -==>  Preparing: select * from t_user_traditional_pos_info where sn in ( ? ) and state_status='1' 
2020-04-30 17:37:33 -==> Parameters: 00000302J8NL01087403(String)
2020-04-30 17:37:33 -<==      Total: 1
2020-04-30 17:37:33 -==>  Preparing: update t_news_read_state set read_flag=? where user_id in ( ? ) and news_type=? 
2020-04-30 17:37:33 -==> Parameters: 0(String), 70(Integer), recallFlag(String)
2020-04-30 17:37:33 -<==    Updates: 1
2020-04-30 17:37:33 -耗时 : 80
2020-04-30 17:37:33 -此处进行解密+验签+身份验证
2020-04-30 17:37:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:33 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-04-30 17:37:33 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-04-30 17:37:33 -==> Parameters: 181(String), 181(String)
2020-04-30 17:37:34 -<==      Total: 571
2020-04-30 17:37:34 -耗时 : 686
2020-04-30 17:37:39 -此处进行解密+验签+身份验证
2020-04-30 17:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:39 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-30 17:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-04-30 17:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-04-30 17:37:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:37:39 -==> Parameters: 181(String), 181(String)
2020-04-30 17:37:39 -此处进行解密+验签+身份验证
2020-04-30 17:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-04-30 17:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-04-30 17:37:39 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-30 17:37:39 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-30 17:37:39 -==> Parameters: 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -耗时 : 2
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:37:39 -==> Parameters: applyRateFlag(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 2
2020-04-30 17:37:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:37:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-04-30 17:37:39 -<==    Updates: 2
2020-04-30 17:37:39 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-30 17:37:39 -==> Parameters: 181(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:37:39 -==> Parameters: recallFlag(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:37:39 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-04-30 17:37:39 -<==    Updates: 1
2020-04-30 17:37:39 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-30 17:37:39 -==> Parameters: 
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:37:39 -==> Parameters: collegeFlag(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:37:39 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-04-30 17:37:39 -<==    Updates: 1
2020-04-30 17:37:39 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:37:39 -==> Parameters: 181(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:37:39 -==> Parameters: cardFlag(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:37:39 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-04-30 17:37:39 -<==    Updates: 1
2020-04-30 17:37:39 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:37:39 -==> Parameters: appImgFlag(String), 181(String)
2020-04-30 17:37:39 -<==      Total: 1
2020-04-30 17:37:39 -耗时 : 98
2020-04-30 17:37:45 -此处进行解密+验签+身份验证
2020-04-30 17:37:45 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-04-30 17:37:45 -token值=======181|JEHXMU4HGEN1SBHZGN9MS27K95WJXGM3
2020-04-30 17:37:45 -==>  Preparing: update t_user_info set device_token=? where id=? 
2020-04-30 17:37:45 -==> Parameters: null, 181(String)
2020-04-30 17:37:45 -<==    Updates: 1
2020-04-30 17:37:45 -耗时 : 30
2020-04-30 17:38:08 -此处进行解密+验签+身份验证
2020-04-30 17:38:08 -解密：{"version_no":"","login_password":"F5B4166AFD7EA843A09FEE4AFD9979F4","login_type":"account","sign":"61BADFCDFEDB6BD8AA8078877F803F88","device_no":"1.1.7","device_type":"android","sys_user_account":"15296017722"}
2020-04-30 17:38:08 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-04-30 17:38:08 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-04-30 17:38:08 -==> Parameters: 15296017722(String)
2020-04-30 17:38:08 -<==      Total: 1
2020-04-30 17:38:08 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-04-30 17:38:08 -==> Parameters: android(String), 1.1.7(String), (String), null, 192.168.191.1(String), 20200430(String), 173808(String), 70(Integer)
2020-04-30 17:38:08 -<==    Updates: 1
2020-04-30 17:38:08 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-04-30 17:38:08 -==> Parameters: 26(String)
2020-04-30 17:38:08 -<==      Total: 1
2020-04-30 17:38:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-30 17:38:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-30 17:38:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-30 17:38:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-30 17:38:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-04-30 17:38:08 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-04-30 17:38:08 -耗时 : 62
2020-04-30 17:38:08 -此处进行解密+验签+身份验证
2020-04-30 17:38:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:08 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-30 17:38:08 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-30 17:38:08 -==> Parameters: 70(String)
2020-04-30 17:38:08 -<==      Total: 1
2020-04-30 17:38:08 -耗时 : 1
2020-04-30 17:38:08 -此处进行解密+验签+身份验证
2020-04-30 17:38:08 -解密：
2020-04-30 17:38:08 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-04-30 17:38:08 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-04-30 17:38:08 -==> Parameters: 01(String), 01(String)
2020-04-30 17:38:08 -<==      Total: 4
2020-04-30 17:38:08 -耗时 : 11
2020-04-30 17:38:08 -此处进行解密+验签+身份验证
2020-04-30 17:38:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-04-30 17:38:08 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-04-30 17:38:08 -==> Parameters: 70(String)
2020-04-30 17:38:08 -<==      Total: 2
2020-04-30 17:38:08 -耗时 : 32
2020-04-30 17:38:09 -此处进行解密+验签+身份验证
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:09 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-04-30 17:38:09 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-04-30 17:38:09 -==> Parameters: 
2020-04-30 17:38:09 -此处进行解密+验签+身份验证
2020-04-30 17:38:09 -<==      Total: 3
2020-04-30 17:38:09 -耗时 : 7
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-30 17:38:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:38:09 -==> Parameters: 70(String), 70(String)
2020-04-30 17:38:09 -此处进行解密+验签+身份验证
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-30 17:38:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-04-30 17:38:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-04-30 17:38:09 -==> Parameters: 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -耗时 : 2
2020-04-30 17:38:09 -<==      Total: 2
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 0(Integer), 0(Integer), 70(String), applyRateFlag(String)
2020-04-30 17:38:09 -<==    Updates: 2
2020-04-30 17:38:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-30 17:38:09 -==> Parameters: 70(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: recallFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 0(Integer), 1(Integer), 70(String), recallFlag(String)
2020-04-30 17:38:09 -<==    Updates: 1
2020-04-30 17:38:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-30 17:38:09 -==> Parameters: 
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: collegeFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 0(Integer), 25(Integer), 70(String), collegeFlag(String)
2020-04-30 17:38:09 -<==    Updates: 1
2020-04-30 17:38:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:38:09 -==> Parameters: 70(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: cardFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 0(Integer), 0(Integer), 70(String), cardFlag(String)
2020-04-30 17:38:09 -<==    Updates: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: appImgFlag(String), 70(String)
2020-04-30 17:38:09 -此处进行解密+验签+身份验证
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -耗时 : 106
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_70
2020-04-30 17:38:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_70 , return
2020-04-30 17:38:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:38:09 -==> Parameters: 70(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: applyRateFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 2
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 0(Integer), 0(Integer), 70(String), applyRateFlag(String)
2020-04-30 17:38:09 -<==    Updates: 2
2020-04-30 17:38:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-04-30 17:38:09 -==> Parameters: 70(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: recallFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 1(Integer), 1(Integer), 70(String), recallFlag(String)
2020-04-30 17:38:09 -<==    Updates: 1
2020-04-30 17:38:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-04-30 17:38:09 -==> Parameters: 
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: collegeFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 25(Integer), 25(Integer), 70(String), collegeFlag(String)
2020-04-30 17:38:09 -<==    Updates: 1
2020-04-30 17:38:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-04-30 17:38:09 -==> Parameters: 70(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: cardFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-04-30 17:38:09 -==> Parameters: 0(Integer), 0(Integer), 70(String), cardFlag(String)
2020-04-30 17:38:09 -<==    Updates: 1
2020-04-30 17:38:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-04-30 17:38:09 -==> Parameters: appImgFlag(String), 70(String)
2020-04-30 17:38:09 -<==      Total: 1
2020-04-30 17:38:09 -耗时 : 61
2020-04-30 17:38:14 -此处进行解密+验签+身份验证
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-04-30 17:38:14 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-04-30 17:38:14 -==> Parameters: 1(String), 70(String), recallFlag(String)
2020-04-30 17:38:14 -<==    Updates: 1
2020-04-30 17:38:14 -耗时 : 9
2020-04-30 17:38:14 -此处进行解密+验签+身份验证
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:14 -此处进行解密+验签+身份验证
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-30 17:38:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-30 17:38:14 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-30 17:38:14 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-30 17:38:14 -==> Parameters: 70(String), 09(String)
2020-04-30 17:38:14 -==> Parameters: 70(String), 08(String)
2020-04-30 17:38:14 -<==      Total: 0
2020-04-30 17:38:14 -<==      Total: 0
2020-04-30 17:38:14 -耗时 : 2
2020-04-30 17:38:14 -耗时 : 1
2020-04-30 17:38:14 -此处进行解密+验签+身份验证
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:38:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:38:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-04-30 17:38:14 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc 
2020-04-30 17:38:14 -==> Parameters: 70(String), 00(String)
2020-04-30 17:38:14 -<==      Total: 1
2020-04-30 17:38:14 -耗时 : 31
2020-04-30 17:38:46 -Starting LongEcologicalApplication on PC-201905161910 with PID 8132 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-04-30 17:38:46 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-04-30 17:38:46 -No active profile set, falling back to default profiles: default
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-04-30 17:38:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-30 17:38:47 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-30 17:38:47 -Finished Spring Data repository scanning in 43ms. Found 0 repository interfaces.
2020-04-30 17:38:47 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-04-30 17:38:47 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-04-30 17:38:47 -Finished Spring Data repository scanning in 16ms. Found 0 repository interfaces.
2020-04-30 17:38:48 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$72e3f702] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-30 17:38:48 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6d67dba2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-04-30 17:38:49 -Tomcat initialized with port(s): 8080 (http)
2020-04-30 17:38:49 -Initializing ProtocolHandler ["http-nio-8080"]
2020-04-30 17:38:49 -Starting service [Tomcat]
2020-04-30 17:38:49 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-04-30 17:38:49 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-04-30 17:38:49 -Initializing Spring embedded WebApplicationContext
2020-04-30 17:38:49 -Root WebApplicationContext: initialization completed in 2456 ms
2020-04-30 17:38:49 -Filter xssFilter was not registered (disabled)
2020-04-30 17:38:49 -HikariPool-1 - Starting...
2020-04-30 17:38:49 -HikariPool-1 - Start completed.
2020-04-30 17:38:50 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-04-30 17:38:50 -HHH000412: Hibernate Core {5.3.7.Final}
2020-04-30 17:38:50 -HHH000206: hibernate.properties not found
2020-04-30 17:38:50 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-04-30 17:38:50 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-04-30 17:38:50 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-04-30 17:38:51 -Using default implementation for ThreadExecutor
2020-04-30 17:38:51 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-04-30 17:38:51 -Quartz Scheduler v.2.3.0 created.
2020-04-30 17:38:51 -RAMJobStore initialized.
2020-04-30 17:38:51 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-04-30 17:38:51 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-04-30 17:38:51 -Quartz scheduler version: 2.3.0
2020-04-30 17:38:51 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@5f781173
2020-04-30 17:38:52 -STAET TaskExecutorConfig
2020-04-30 17:38:52 -Initializing ExecutorService
2020-04-30 17:38:52 -Initializing ExecutorService 'getAsyncExecutor'
2020-04-30 17:38:52 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-04-30 17:38:52 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-04-30 17:38:53 -Initializing ExecutorService 'taskScheduler'
2020-04-30 17:38:53 -Starting Quartz Scheduler now
2020-04-30 17:38:53 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-04-30 17:38:53 -Starting ProtocolHandler ["http-nio-8080"]
2020-04-30 17:38:53 -Using a shared selector for servlet write/read
2020-04-30 17:38:53 -Tomcat started on port(s): 8080 (http) with context path ''
2020-04-30 17:38:53 -Started LongEcologicalApplication in 7.422 seconds (JVM running for 10.544)
2020-04-30 17:39:23 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-30 17:39:23 -Initializing Servlet 'dispatcherServlet'
2020-04-30 17:39:23 -Completed initialization in 12 ms
2020-04-30 17:39:23 -此处进行解密+验签+身份验证
2020-04-30 17:39:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_70
2020-04-30 17:39:23 -Starting without optional epoll library
2020-04-30 17:39:23 -Starting without optional kqueue library
2020-04-30 17:39:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_70 , return
2020-04-30 17:39:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/dealRecallTraditionalPos
2020-04-30 17:39:32 -==>  Preparing: UPDATE t_user_trapos_recall_record_info SET status = ?, up_date = ?, up_time = ? WHERE acce_user_id = ? and find_in_set(id, ?) and status = '00' 
2020-04-30 17:39:32 -==> Parameters: 09(String), 20200430(String), 173931(String), 70(String), 703(String)
2020-04-30 17:39:32 -<==    Updates: 1
2020-04-30 17:39:38 -==>  Preparing: UPDATE t_user_traditional_pos_info t SET t.state_status = '1', t.up_date = ?, t.up_time = ? WHERE t.state_status = '0' and EXISTS (select 1 from t_user_trapos_recall_record_info t1 where find_in_set(t1.id, ?) and t1.send_user_id = t.user_id and t1.sn = t.sn ) 
2020-04-30 17:39:38 -==> Parameters: 20200430(String), 173931(String), 703(String)
2020-04-30 17:39:41 -<==    Updates: 1
2020-04-30 17:40:03 -==>  Preparing: UPDATE t_user_traditional_pos_info t SET t.state_status = '0', t.del = '1', t.up_date = ?, t.up_time = ? WHERE t.state_status = '1' and EXISTS (select 1 from t_user_trapos_recall_record_info t1 where find_in_set(t1.id, ?) and t1.acce_user_id = t.user_id and t1.sn = t.sn ) 
2020-04-30 17:40:03 -==> Parameters: 20200430(String), 173931(String), 703(String)
2020-04-30 17:40:05 -<==    Updates: 1
2020-04-30 17:40:25 -==>  Preparing: delete from t_user_pos_batch_allocate where sn in(select sn from t_user_trapos_recall_record_info where FIND_IN_SET(id,?) ) and user_id=? 
2020-04-30 17:40:25 -==> Parameters: 703(String), 70(String)
2020-04-30 17:40:30 -<==    Updates: 1
2020-04-30 17:40:41 -耗时 : 77833
2020-04-30 18:34:31 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-30 18:34:31 -Shutting down ExecutorService 'taskScheduler'
2020-04-30 18:34:31 -Shutting down ExecutorService 'getAsyncExecutor'
2020-04-30 18:34:31 -Shutting down Quartz Scheduler
2020-04-30 18:34:31 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-04-30 18:34:31 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-04-30 18:34:31 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-04-30 18:34:31 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-04-30 18:34:31 -HikariPool-1 - Shutdown initiated...
2020-04-30 18:34:31 -HikariPool-1 - Shutdown completed.
