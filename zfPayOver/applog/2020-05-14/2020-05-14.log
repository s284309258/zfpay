2020-05-14 09:48:40 -Starting LongEcologicalApplication on PC-201905161910 with PID 5020 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-05-14 09:48:40 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-05-14 09:48:40 -No active profile set, falling back to default profiles: default
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 09:48:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-14 09:48:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-05-14 09:48:42 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-05-14 09:48:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-14 09:48:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-05-14 09:48:42 -Finished Spring Data repository scanning in 17ms. Found 0 repository interfaces.
2020-05-14 09:48:42 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8a5fc0a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-14 09:48:42 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$84e3a547] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-14 09:48:43 -Tomcat initialized with port(s): 8080 (http)
2020-05-14 09:48:43 -Initializing ProtocolHandler ["http-nio-8080"]
2020-05-14 09:48:43 -Starting service [Tomcat]
2020-05-14 09:48:43 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-05-14 09:48:43 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-05-14 09:48:43 -Initializing Spring embedded WebApplicationContext
2020-05-14 09:48:43 -Root WebApplicationContext: initialization completed in 3384 ms
2020-05-14 09:48:44 -Filter xssFilter was not registered (disabled)
2020-05-14 09:48:44 -HikariPool-1 - Starting...
2020-05-14 09:48:44 -HikariPool-1 - Start completed.
2020-05-14 09:48:44 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-05-14 09:48:45 -HHH000412: Hibernate Core {5.3.7.Final}
2020-05-14 09:48:45 -HHH000206: hibernate.properties not found
2020-05-14 09:48:45 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-05-14 09:48:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-05-14 09:48:45 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-14 09:48:46 -Using default implementation for ThreadExecutor
2020-05-14 09:48:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-05-14 09:48:46 -Quartz Scheduler v.2.3.0 created.
2020-05-14 09:48:46 -RAMJobStore initialized.
2020-05-14 09:48:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-05-14 09:48:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-05-14 09:48:46 -Quartz scheduler version: 2.3.0
2020-05-14 09:48:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@3dcbbbc
2020-05-14 09:48:46 -STAET TaskExecutorConfig
2020-05-14 09:48:46 -Initializing ExecutorService
2020-05-14 09:48:46 -Initializing ExecutorService 'getAsyncExecutor'
2020-05-14 09:48:47 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-14 09:48:47 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-14 09:48:47 -Initializing ExecutorService 'taskScheduler'
2020-05-14 09:48:47 -Starting Quartz Scheduler now
2020-05-14 09:48:47 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-05-14 09:48:47 -Starting ProtocolHandler ["http-nio-8080"]
2020-05-14 09:48:48 -Using a shared selector for servlet write/read
2020-05-14 09:48:48 -Tomcat started on port(s): 8080 (http) with context path ''
2020-05-14 09:48:48 -Started LongEcologicalApplication in 8.963 seconds (JVM running for 10.133)
2020-05-14 10:03:58 -Starting LongEcologicalApplication on PC-201905161910 with PID 1568 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-05-14 10:03:58 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-05-14 10:03:58 -No active profile set, falling back to default profiles: default
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-05-14 10:03:59 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-14 10:03:59 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-05-14 10:03:59 -Finished Spring Data repository scanning in 41ms. Found 0 repository interfaces.
2020-05-14 10:03:59 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-05-14 10:03:59 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-05-14 10:03:59 -Finished Spring Data repository scanning in 22ms. Found 0 repository interfaces.
2020-05-14 10:04:00 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$4f829292] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-14 10:04:00 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4a067732] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-05-14 10:04:01 -Tomcat initialized with port(s): 8080 (http)
2020-05-14 10:04:01 -Initializing ProtocolHandler ["http-nio-8080"]
2020-05-14 10:04:01 -Starting service [Tomcat]
2020-05-14 10:04:01 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-05-14 10:04:01 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Redis\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-05-14 10:04:01 -Initializing Spring embedded WebApplicationContext
2020-05-14 10:04:01 -Root WebApplicationContext: initialization completed in 2509 ms
2020-05-14 10:04:01 -Filter xssFilter was not registered (disabled)
2020-05-14 10:04:01 -HikariPool-1 - Starting...
2020-05-14 10:04:01 -HikariPool-1 - Start completed.
2020-05-14 10:04:01 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-05-14 10:04:01 -HHH000412: Hibernate Core {5.3.7.Final}
2020-05-14 10:04:01 -HHH000206: hibernate.properties not found
2020-05-14 10:04:02 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-05-14 10:04:02 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-05-14 10:04:02 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-05-14 10:04:03 -Using default implementation for ThreadExecutor
2020-05-14 10:04:03 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-05-14 10:04:03 -Quartz Scheduler v.2.3.0 created.
2020-05-14 10:04:03 -RAMJobStore initialized.
2020-05-14 10:04:03 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-05-14 10:04:03 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-05-14 10:04:03 -Quartz scheduler version: 2.3.0
2020-05-14 10:04:03 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1ad1c363
2020-05-14 10:04:04 -STAET TaskExecutorConfig
2020-05-14 10:04:04 -Initializing ExecutorService
2020-05-14 10:04:04 -Initializing ExecutorService 'getAsyncExecutor'
2020-05-14 10:04:04 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-05-14 10:04:05 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-05-14 10:04:05 -Initializing ExecutorService 'taskScheduler'
2020-05-14 10:04:05 -Starting Quartz Scheduler now
2020-05-14 10:04:05 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-05-14 10:04:05 -Starting ProtocolHandler ["http-nio-8080"]
2020-05-14 10:04:05 -Using a shared selector for servlet write/read
2020-05-14 10:04:05 -Tomcat started on port(s): 8080 (http) with context path ''
2020-05-14 10:04:05 -Started LongEcologicalApplication in 8.159 seconds (JVM running for 9.66)
2020-05-14 10:06:10 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-05-14 10:06:10 -Initializing Servlet 'dispatcherServlet'
2020-05-14 10:06:10 -Completed initialization in 11 ms
2020-05-14 10:06:10 -此处进行解密+验签+身份验证
2020-05-14 10:06:10 -此处进行解密+验签+身份验证
2020-05-14 10:06:11 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-05-14 10:06:11 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-05-14 10:06:11 -Starting without optional epoll library
2020-05-14 10:06:11 -Starting without optional kqueue library
2020-05-14 10:06:11 -解密：
2020-05-14 10:06:11 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-05-14 10:06:11 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-05-14 10:06:11 -==> Parameters: 04(String), 04(String)
2020-05-14 10:06:11 -<==      Total: 1
2020-05-14 10:06:11 -耗时 : 56
2020-05-14 10:06:11 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-05-14 10:06:11 -耗时 : 931
2020-05-14 10:06:12 -此处进行解密+验签+身份验证
2020-05-14 10:06:12 -解密：{"version_no":"","login_password":"","login_type":"token","sign":"3A5204C4AACD43F05D9DEB1310CA7477","device_no":"1.1.7","device_type":"android","sys_user_account":"","token":"181|4JIZW2KQNXHVV4OUUTM85UAA5P34X8AY"}
2020-05-14 10:06:12 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-05-14 10:06:12 -token值=======181|4JIZW2KQNXHVV4OUUTM85UAA5P34X8AY
2020-05-14 10:06:12 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-05-14 10:06:12 -==> Parameters: 181(String)
2020-05-14 10:06:12 -<==      Total: 1
2020-05-14 10:06:12 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-05-14 10:06:12 -==> Parameters: 26(String)
2020-05-14 10:06:12 -<==      Total: 1
2020-05-14 10:06:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-05-14 10:06:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-05-14 10:06:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-05-14 10:06:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-05-14 10:06:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-05-14 10:06:12 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-05-14 10:06:12 -耗时 : 45
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-05-14 10:06:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-05-14 10:06:15 -==> Parameters: 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -耗时 : 5
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -解密：
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-05-14 10:06:15 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.szbypos.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num desc 
2020-05-14 10:06:15 -==> Parameters: 01(String), 01(String)
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:15 -<==      Total: 4
2020-05-14 10:06:15 -耗时 : 2
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-05-14 10:06:15 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-05-14 10:06:15 -==> Parameters: 181(String)
2020-05-14 10:06:15 -<==      Total: 2
2020-05-14 10:06:15 -耗时 : 22
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-05-14 10:06:15 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-05-14 10:06:15 -==> Parameters: 
2020-05-14 10:06:15 -<==      Total: 3
2020-05-14 10:06:15 -耗时 : 7
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-05-14 10:06:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-05-14 10:06:15 -==> Parameters: 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -耗时 : 2
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:15 -此处进行解密+验签+身份验证
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-05-14 10:06:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-05-14 10:06:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-05-14 10:06:15 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-05-14 10:06:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-05-14 10:06:15 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: applyRateFlag(String), 181(String)
2020-05-14 10:06:15 -==> Parameters: applyRateFlag(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 2
2020-05-14 10:06:15 -<==      Total: 2
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-05-14 10:06:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), applyRateFlag(String)
2020-05-14 10:06:15 -<==    Updates: 2
2020-05-14 10:06:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-05-14 10:06:15 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:15 -<==    Updates: 2
2020-05-14 10:06:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-05-14 10:06:15 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: recallFlag(String), 181(String)
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: recallFlag(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-05-14 10:06:15 -<==    Updates: 1
2020-05-14 10:06:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-05-14 10:06:15 -==> Parameters: 
2020-05-14 10:06:15 -<==    Updates: 1
2020-05-14 10:06:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-05-14 10:06:15 -==> Parameters: 
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==> Parameters: collegeFlag(String), 181(String)
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: collegeFlag(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==> Parameters: 25(Integer), 25(Integer), 181(String), collegeFlag(String)
2020-05-14 10:06:15 -<==    Updates: 1
2020-05-14 10:06:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-05-14 10:06:15 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -<==    Updates: 1
2020-05-14 10:06:15 -==> Parameters: cardFlag(String), 181(String)
2020-05-14 10:06:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-05-14 10:06:15 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: cardFlag(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-05-14 10:06:15 -==> Parameters: 7(Integer), 7(Integer), 181(String), cardFlag(String)
2020-05-14 10:06:15 -<==    Updates: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: appImgFlag(String), 181(String)
2020-05-14 10:06:15 -<==    Updates: 1
2020-05-14 10:06:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-05-14 10:06:15 -==> Parameters: appImgFlag(String), 181(String)
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -耗时 : 153
2020-05-14 10:06:15 -<==      Total: 1
2020-05-14 10:06:15 -耗时 : 149
2020-05-14 10:06:32 -此处进行解密+验签+身份验证
2020-05-14 10:06:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:32 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-05-14 10:06:32 -此处进行解密+验签+身份验证
2020-05-14 10:06:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:32 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-05-14 10:06:32 -==> Parameters: 202005(String), 181(String)
2020-05-14 10:06:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-05-14 10:06:32 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-05-14 10:06:32 -==> Parameters: 181(String)
2020-05-14 10:06:32 -<==      Total: 1
2020-05-14 10:06:32 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-05-14 10:06:32 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:32 -<==      Total: 1
2020-05-14 10:06:32 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-05-14 10:06:32 -==> Parameters: 181(String)
2020-05-14 10:06:32 -<==      Total: 0
2020-05-14 10:06:32 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-05-14 10:06:32 -==> Parameters: 202005(String), 181(String)
2020-05-14 10:06:32 -<==      Total: 1
2020-05-14 10:06:32 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-05-14 10:06:32 -==> Parameters: 181(String)
2020-05-14 10:06:32 -<==      Total: 0
2020-05-14 10:06:32 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-05-14 10:06:32 -==> Parameters: 202005(String), 181(String)
2020-05-14 10:06:32 -<==      Total: 1
2020-05-14 10:06:32 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-05-14 10:06:32 -==> Parameters: 181(String)
2020-05-14 10:06:32 -<==      Total: 0
2020-05-14 10:06:32 -耗时 : 86
2020-05-14 10:06:35 -<==      Total: 1
2020-05-14 10:06:35 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-05-14 10:06:35 -==> Parameters: 181(String), 181(String)
2020-05-14 10:06:35 -<==      Total: 1
2020-05-14 10:06:35 -耗时 : 2863
2020-05-14 10:06:44 -此处进行解密+验签+身份验证
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-05-14 10:06:44 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast(money as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-05-14 10:06:44 -==> Parameters: 181(String)
2020-05-14 10:06:44 -<==      Total: 1
2020-05-14 10:06:44 -耗时 : 5
2020-05-14 10:06:44 -此处进行解密+验签+身份验证
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:44 -此处进行解密+验签+身份验证
2020-05-14 10:06:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:44 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-05-14 10:06:44 -==> Parameters: 181(String), 202005(String)
2020-05-14 10:06:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-05-14 10:06:44 -<==      Total: 1
2020-05-14 10:06:44 -耗时 : 5
2020-05-14 10:06:44 -此处进行解密+验签+身份验证
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:06:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:06:44 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-05-14 10:06:44 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-05-14 10:06:44 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-05-14 10:06:44 -==> Parameters: 181(String), 202005(String)
2020-05-14 10:06:44 -==> Parameters: 181(String), 202005(String)
2020-05-14 10:06:44 -<==      Total: 0
2020-05-14 10:06:44 -耗时 : 14
2020-05-14 10:06:44 -<==      Total: 1
2020-05-14 10:06:44 -耗时 : 26
2020-05-14 10:24:33 -此处进行解密+验签+身份验证
2020-05-14 10:24:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:24:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:24:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-05-14 10:24:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-05-14 10:24:33 -==> Parameters: 181(String), 202001(String)
2020-05-14 10:24:33 -<==      Total: 0
2020-05-14 10:24:33 -耗时 : 3
2020-05-14 10:24:33 -此处进行解密+验签+身份验证
2020-05-14 10:24:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:24:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:24:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-05-14 10:24:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-05-14 10:24:33 -==> Parameters: 181(String), 202001(String)
2020-05-14 10:24:33 -<==      Total: 1
2020-05-14 10:24:33 -耗时 : 5
2020-05-14 10:24:33 -此处进行解密+验签+身份验证
2020-05-14 10:24:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-05-14 10:24:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-05-14 10:24:33 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-05-14 10:24:33 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-05-14 10:24:33 -==> Parameters: 181(String), 202001(String)
2020-05-14 10:24:33 -<==      Total: 1
2020-05-14 10:24:33 -耗时 : 3
