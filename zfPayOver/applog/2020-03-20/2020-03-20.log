2020-03-20 09:50:54 -Starting LongEcologicalApplication on PC-201905161910 with PID 9260 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 09:50:54 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 09:50:54 -No active profile set, falling back to default profiles: default
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 09:50:55 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 09:50:55 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 09:50:56 -Finished Spring Data repository scanning in 109ms. Found 0 repository interfaces.
2020-03-20 09:50:56 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 09:50:56 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 09:50:56 -Finished Spring Data repository scanning in 67ms. Found 0 repository interfaces.
2020-03-20 09:50:56 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$e4fd1ccf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 09:50:56 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$df81016f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 09:50:57 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 09:50:57 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 09:50:57 -Starting service [Tomcat]
2020-03-20 09:50:57 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 09:50:57 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 09:50:57 -Initializing Spring embedded WebApplicationContext
2020-03-20 09:50:57 -Root WebApplicationContext: initialization completed in 2669 ms
2020-03-20 09:50:57 -Filter xssFilter was not registered (disabled)
2020-03-20 09:50:57 -HikariPool-1 - Starting...
2020-03-20 09:50:58 -HikariPool-1 - Start completed.
2020-03-20 09:50:58 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 09:50:58 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 09:50:58 -HHH000206: hibernate.properties not found
2020-03-20 09:50:58 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 09:50:58 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 09:50:58 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 09:50:59 -Using default implementation for ThreadExecutor
2020-03-20 09:50:59 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 09:50:59 -Quartz Scheduler v.2.3.0 created.
2020-03-20 09:50:59 -RAMJobStore initialized.
2020-03-20 09:50:59 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 09:50:59 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 09:50:59 -Quartz scheduler version: 2.3.0
2020-03-20 09:50:59 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7772d266
2020-03-20 09:50:59 -STAET TaskExecutorConfig
2020-03-20 09:50:59 -Initializing ExecutorService
2020-03-20 09:50:59 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 09:51:00 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 09:51:00 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 09:51:00 -Initializing ExecutorService 'taskScheduler'
2020-03-20 09:51:00 -Starting Quartz Scheduler now
2020-03-20 09:51:00 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 09:51:00 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 09:51:00 -Using a shared selector for servlet write/read
2020-03-20 09:51:00 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 09:51:00 -Started LongEcologicalApplication in 7.562 seconds (JVM running for 9.329)
2020-03-20 10:03:23 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 10:03:23 -Initializing Servlet 'dispatcherServlet'
2020-03-20 10:03:23 -Completed initialization in 16 ms
2020-03-20 10:03:23 -此处进行解密+验签+身份验证
2020-03-20 10:03:23 -此处进行解密+验签+身份验证
2020-03-20 10:03:23 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-20 10:03:23 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-20 10:03:23 -Starting without optional epoll library
2020-03-20 10:03:23 -Starting without optional kqueue library
2020-03-20 10:03:23 -解密：
2020-03-20 10:03:23 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 10:03:23 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 10:03:23 -==> Parameters: 04(String), 04(String)
2020-03-20 10:03:23 -<==      Total: 1
2020-03-20 10:03:23 -耗时 : 60
2020-03-20 10:03:24 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-20 10:03:24 -耗时 : 738
2020-03-20 10:03:24 -此处进行解密+验签+身份验证
2020-03-20 10:03:24 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"9A66375E03E6CC6D2752A8D8554BC593","version_no":"450000000145206","login_type":"token","token":"469|1UTR3W99W6JNCDIRWJU56WLZJFBS9Z4S","sys_user_account":""}
2020-03-20 10:03:24 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-20 10:03:24 -token值=======469|1UTR3W99W6JNCDIRWJU56WLZJFBS9Z4S
2020-03-20 10:03:24 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-20 10:03:24 -==> Parameters: 469(String)
2020-03-20 10:03:24 -<==      Total: 1
2020-03-20 10:03:24 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-20 10:03:24 -==> Parameters: 25(String)
2020-03-20 10:03:24 -<==      Total: 1
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 10:03:24 -耗时 : 85
2020-03-20 10:03:24 -此处进行解密+验签+身份验证
2020-03-20 10:03:24 -解密：
2020-03-20 10:03:24 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 10:03:24 -此处进行解密+验签+身份验证
2020-03-20 10:03:24 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 10:03:24 -==> Parameters: 04(String), 04(String)
2020-03-20 10:03:24 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-20 10:03:24 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-20 10:03:24 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-20 10:03:24 -<==      Total: 1
2020-03-20 10:03:24 -耗时 : 13
2020-03-20 10:03:24 -耗时 : 15
2020-03-20 10:03:24 -此处进行解密+验签+身份验证
2020-03-20 10:03:24 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"9A66375E03E6CC6D2752A8D8554BC593","version_no":"450000000145206","login_type":"token","token":"469|1UTR3W99W6JNCDIRWJU56WLZJFBS9Z4S","sys_user_account":""}
2020-03-20 10:03:24 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-20 10:03:24 -token值=======469|1UTR3W99W6JNCDIRWJU56WLZJFBS9Z4S
2020-03-20 10:03:24 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-20 10:03:24 -==> Parameters: 469(String)
2020-03-20 10:03:24 -<==      Total: 1
2020-03-20 10:03:24 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-20 10:03:24 -==> Parameters: 25(String)
2020-03-20 10:03:24 -<==      Total: 1
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 10:03:24 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 10:03:24 -耗时 : 79
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 10:03:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 10:03:29 -==> Parameters: 469(String)
2020-03-20 10:03:29 -<==      Total: 1
2020-03-20 10:03:29 -耗时 : 18
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -解密：
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:29 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 10:03:29 -==> Parameters: 01(String), 01(String)
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:29 -<==      Total: 4
2020-03-20 10:03:29 -耗时 : 10
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-20 10:03:29 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-20 10:03:29 -==> Parameters: 469(String)
2020-03-20 10:03:29 -此处进行解密+验签+身份验证
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:29 -<==      Total: 2
2020-03-20 10:03:29 -耗时 : 14
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-20 10:03:29 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-20 10:03:29 -==> Parameters: 
2020-03-20 10:03:29 -<==      Total: 3
2020-03-20 10:03:29 -耗时 : 11
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 10:03:29 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 10:03:29 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 10:03:29 -==> Parameters: 469(String)
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 10:03:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 10:03:29 -<==      Total: 1
2020-03-20 10:03:29 -耗时 : 11
2020-03-20 10:03:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:03:29 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:03:29 -<==      Total: 1
2020-03-20 10:03:29 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:29 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 10:03:29 -<==      Total: 1
2020-03-20 10:03:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:29 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 10:03:29 -<==      Total: 1
2020-03-20 10:03:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:29 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 10:03:29 -<==      Total: 1
2020-03-20 10:03:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:29 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 10:03:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 10:03:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:30 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:30 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 10:03:30 -==> Parameters: 
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 10:03:30 -==> Parameters: 
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:30 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:30 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:03:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:03:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:30 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:30 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 10:03:30 -<==    Updates: 1
2020-03-20 10:03:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:30 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -耗时 : 181
2020-03-20 10:03:30 -<==      Total: 1
2020-03-20 10:03:30 -耗时 : 182
2020-03-20 10:03:38 -此处进行解密+验签+身份验证
2020-03-20 10:03:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:38 -此处进行解密+验签+身份验证
2020-03-20 10:03:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 10:03:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-20 10:03:38 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-20 10:03:38 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:38 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 10:03:38 -==> Parameters: 469(String)
2020-03-20 10:03:38 -<==      Total: 82
2020-03-20 10:03:38 -耗时 : 99
2020-03-20 10:03:39 -<==      Total: 7
2020-03-20 10:03:39 -耗时 : 306
2020-03-20 10:03:40 -此处进行解密+验签+身份验证
2020-03-20 10:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:03:40 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 10:03:40 -==> Parameters: 469(String)
2020-03-20 10:03:40 -<==      Total: 0
2020-03-20 10:03:40 -耗时 : 29
2020-03-20 10:03:42 -此处进行解密+验签+身份验证
2020-03-20 10:03:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:03:42 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:03:42 -==> Parameters: 469(String)
2020-03-20 10:03:42 -<==      Total: 5
2020-03-20 10:03:42 -耗时 : 29
2020-03-20 10:03:43 -此处进行解密+验签+身份验证
2020-03-20 10:03:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTrafficCardAllocationList
2020-03-20 10:03:43 -==>  Preparing: SELECT card_no FROM t_user_traffic_card_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by card_no 
2020-03-20 10:03:43 -==> Parameters: 469(String)
2020-03-20 10:03:43 -<==      Total: 0
2020-03-20 10:03:43 -耗时 : 13
2020-03-20 10:03:44 -此处进行解密+验签+身份验证
2020-03-20 10:03:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:44 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:03:44 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:03:44 -==> Parameters: 469(String)
2020-03-20 10:03:44 -<==      Total: 5
2020-03-20 10:03:44 -耗时 : 26
2020-03-20 10:03:46 -此处进行解密+验签+身份验证
2020-03-20 10:03:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:03:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:03:46 -==> Parameters: 469(String)
2020-03-20 10:03:46 -<==      Total: 5
2020-03-20 10:03:46 -耗时 : 28
2020-03-20 10:03:49 -此处进行解密+验签+身份验证
2020-03-20 10:03:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:03:49 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 10:03:49 -==> Parameters: 469(String)
2020-03-20 10:03:49 -<==      Total: 0
2020-03-20 10:03:49 -耗时 : 31
2020-03-20 10:03:50 -此处进行解密+验签+身份验证
2020-03-20 10:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-20 10:03:50 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-20 10:03:50 -==> Parameters: 469(String)
2020-03-20 10:03:50 -<==      Total: 82
2020-03-20 10:03:50 -耗时 : 51
2020-03-20 10:03:55 -此处进行解密+验签+身份验证
2020-03-20 10:03:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:55 -此处进行解密+验签+身份验证
2020-03-20 10:03:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:03:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:03:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 10:03:55 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 10:03:55 -==> Parameters: 469(String)
2020-03-20 10:03:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 10:03:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 10:03:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -耗时 : 13
2020-03-20 10:03:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:03:55 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:55 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:55 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 10:03:55 -<==    Updates: 1
2020-03-20 10:03:55 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 10:03:55 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:55 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:55 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 10:03:55 -<==    Updates: 1
2020-03-20 10:03:55 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 10:03:55 -==> Parameters: 
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:55 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:55 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 10:03:55 -<==    Updates: 1
2020-03-20 10:03:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:03:55 -==> Parameters: 469(String), 469(String)
2020-03-20 10:03:55 -<==      Total: 1
2020-03-20 10:03:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:55 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 10:03:56 -<==      Total: 1
2020-03-20 10:03:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:03:56 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 10:03:56 -<==    Updates: 1
2020-03-20 10:03:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:03:56 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 10:03:56 -<==      Total: 1
2020-03-20 10:03:56 -耗时 : 153
2020-03-20 10:04:08 -此处进行解密+验签+身份验证
2020-03-20 10:04:08 -此处进行解密+验签+身份验证
2020-03-20 10:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-20 10:04:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-20 10:04:08 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-20 10:04:08 -==> Parameters: 469(String)
2020-03-20 10:04:08 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-20 10:04:08 -==> Parameters: 469(String)
2020-03-20 10:04:08 -<==      Total: 4
2020-03-20 10:04:08 -耗时 : 20
2020-03-20 10:04:08 -<==      Total: 1
2020-03-20 10:04:08 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:04:08 -==> Parameters: 469(String)
2020-03-20 10:04:08 -<==      Total: 1
2020-03-20 10:04:08 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 10:04:08 -==> Parameters: 469(String)
2020-03-20 10:04:08 -<==      Total: 1
2020-03-20 10:04:08 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 10:04:08 -==> Parameters: 469(String)
2020-03-20 10:04:08 -<==      Total: 1
2020-03-20 10:04:08 -耗时 : 41
2020-03-20 10:04:19 -此处进行解密+验签+身份验证
2020-03-20 10:04:19 -此处进行解密+验签+身份验证
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 10:04:19 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2392 and cre_month=202003 and pos_type is null 
2020-03-20 10:04:19 -==> Parameters: 
2020-03-20 10:04:19 -此处进行解密+验签+身份验证
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:19 -此处进行解密+验签+身份验证
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:19 -此处进行解密+验签+身份验证
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:19 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-20 10:04:19 -==> Parameters: 2392(String)
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:19 -<==      Total: 1
2020-03-20 10:04:19 -耗时 : 27
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:19 -<==      Total: 1
2020-03-20 10:04:19 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 10:04:19 -==> Parameters: 2392(String)
2020-03-20 10:04:19 -<==      Total: 1
2020-03-20 10:04:19 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2392 and pos_type='epos' 
2020-03-20 10:04:19 -==> Parameters: 
2020-03-20 10:04:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:19 -<==      Total: 1
2020-03-20 10:04:19 -耗时 : 60
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:19 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:19 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:04:19 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:19 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:04:19 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:19 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:04:19 -<==      Total: 0
2020-03-20 10:04:19 -耗时 : 44
2020-03-20 10:04:19 -<==      Total: 0
2020-03-20 10:04:19 -耗时 : 45
2020-03-20 10:04:19 -<==      Total: 0
2020-03-20 10:04:19 -耗时 : 52
2020-03-20 10:04:22 -此处进行解密+验签+身份验证
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:22 -此处进行解密+验签+身份验证
2020-03-20 10:04:22 -此处进行解密+验签+身份验证
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:22 -此处进行解密+验签+身份验证
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:22 -此处进行解密+验签+身份验证
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 10:04:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2392 and cre_month=202003 and pos_type='epos' 
2020-03-20 10:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:22 -==> Parameters: 
2020-03-20 10:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:22 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:22 -<==      Total: 1
2020-03-20 10:04:22 -耗时 : 24
2020-03-20 10:04:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:22 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:04:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:22 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-20 10:04:22 -==> Parameters: 2392(String)
2020-03-20 10:04:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:22 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:04:22 -<==      Total: 1
2020-03-20 10:04:22 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 10:04:22 -==> Parameters: 2392(String)
2020-03-20 10:04:22 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:22 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:04:22 -<==      Total: 1
2020-03-20 10:04:22 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2392 and pos_type='epos' 
2020-03-20 10:04:22 -==> Parameters: 
2020-03-20 10:04:22 -<==      Total: 0
2020-03-20 10:04:22 -耗时 : 46
2020-03-20 10:04:22 -<==      Total: 0
2020-03-20 10:04:22 -耗时 : 48
2020-03-20 10:04:22 -<==      Total: 1
2020-03-20 10:04:22 -耗时 : 50
2020-03-20 10:04:22 -<==      Total: 0
2020-03-20 10:04:22 -耗时 : 48
2020-03-20 10:04:23 -此处进行解密+验签+身份验证
2020-03-20 10:04:23 -此处进行解密+验签+身份验证
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:23 -此处进行解密+验签+身份验证
2020-03-20 10:04:23 -此处进行解密+验签+身份验证
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:23 -此处进行解密+验签+身份验证
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 10:04:23 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2392 and cre_month=202003 
2020-03-20 10:04:23 -==> Parameters: 
2020-03-20 10:04:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:04:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:04:23 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:23 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 10:04:23 -==> Parameters: 2392(String)
2020-03-20 10:04:23 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:23 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:04:23 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:23 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:04:23 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:23 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:04:23 -<==      Total: 1
2020-03-20 10:04:23 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:04:23 -==> Parameters: 2392(String)
2020-03-20 10:04:23 -<==      Total: 1
2020-03-20 10:04:23 -耗时 : 44
2020-03-20 10:04:23 -<==      Total: 1
2020-03-20 10:04:23 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2392 
2020-03-20 10:04:23 -==> Parameters: 
2020-03-20 10:04:23 -<==      Total: 1
2020-03-20 10:04:23 -耗时 : 81
2020-03-20 10:04:23 -<==      Total: 4
2020-03-20 10:04:23 -<==      Total: 1
2020-03-20 10:04:23 -耗时 : 82
2020-03-20 10:04:23 -耗时 : 82
2020-03-20 10:04:23 -<==      Total: 5
2020-03-20 10:04:23 -耗时 : 83
2020-03-20 10:04:26 -此处进行解密+验签+身份验证
2020-03-20 10:04:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getMposDetail
2020-03-20 10:04:26 -==>  Preparing: select t.sn, t.card_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.act_status, t1.cash_back_status, t.is_reward from t_user_mpos_info t left join t_sys_mpos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-20 10:04:26 -==> Parameters: 469(String), M351846116679(String)
2020-03-20 10:04:26 -<==      Total: 1
2020-03-20 10:04:26 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-20 10:04:26 -==> Parameters: M351846116679(String)
2020-03-20 10:04:26 -<==      Total: 0
2020-03-20 10:04:26 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-20 10:04:26 -==> Parameters: M351846116679(String)
2020-03-20 10:04:26 -<==      Total: 1
2020-03-20 10:04:26 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_mpos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-20 10:04:26 -==> Parameters: M351846116679(String), 469(String)
2020-03-20 10:04:26 -<==      Total: 1
2020-03-20 10:04:26 -耗时 : 71
2020-03-20 10:04:37 -此处进行解密+验签+身份验证
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:37 -此处进行解密+验签+身份验证
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:37 -此处进行解密+验签+身份验证
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:37 -此处进行解密+验签+身份验证
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:37 -此处进行解密+验签+身份验证
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 10:04:38 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2392 and cre_month=202003 and pos_type is null 
2020-03-20 10:04:38 -==> Parameters: 
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:04:38 -<==      Total: 1
2020-03-20 10:04:38 -耗时 : 12
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:38 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-20 10:04:38 -==> Parameters: 2392(String)
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:38 -<==      Total: 1
2020-03-20 10:04:38 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 10:04:38 -==> Parameters: 2392(String)
2020-03-20 10:04:38 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:38 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:04:38 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:38 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:04:38 -<==      Total: 1
2020-03-20 10:04:38 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2392 and pos_type='epos' 
2020-03-20 10:04:38 -==> Parameters: 
2020-03-20 10:04:38 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:38 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:04:38 -<==      Total: 0
2020-03-20 10:04:38 -耗时 : 36
2020-03-20 10:04:38 -<==      Total: 0
2020-03-20 10:04:38 -耗时 : 31
2020-03-20 10:04:38 -<==      Total: 1
2020-03-20 10:04:38 -耗时 : 49
2020-03-20 10:04:38 -<==      Total: 0
2020-03-20 10:04:38 -耗时 : 41
2020-03-20 10:04:43 -此处进行解密+验签+身份验证
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:43 -此处进行解密+验签+身份验证
2020-03-20 10:04:43 -此处进行解密+验签+身份验证
2020-03-20 10:04:43 -此处进行解密+验签+身份验证
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:43 -此处进行解密+验签+身份验证
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:04:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 10:04:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:04:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:04:43 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2392 and cre_month=202003 
2020-03-20 10:04:43 -==> Parameters: 
2020-03-20 10:04:43 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 10:04:43 -==> Parameters: 2392(String)
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:04:43 -<==      Total: 1
2020-03-20 10:04:43 -耗时 : 12
2020-03-20 10:04:43 -<==      Total: 1
2020-03-20 10:04:43 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:04:43 -==> Parameters: 2392(String)
2020-03-20 10:04:43 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:43 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:04:43 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:43 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:04:43 -<==      Total: 1
2020-03-20 10:04:43 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2392 
2020-03-20 10:04:43 -==> Parameters: 
2020-03-20 10:04:43 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:04:43 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:04:43 -<==      Total: 5
2020-03-20 10:04:43 -耗时 : 28
2020-03-20 10:04:43 -<==      Total: 4
2020-03-20 10:04:43 -耗时 : 34
2020-03-20 10:04:43 -<==      Total: 1
2020-03-20 10:04:43 -耗时 : 51
2020-03-20 10:04:43 -<==      Total: 1
2020-03-20 10:04:43 -耗时 : 39
2020-03-20 10:04:45 -此处进行解密+验签+身份验证
2020-03-20 10:04:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:04:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:04:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getMposDetail
2020-03-20 10:04:45 -==>  Preparing: select t.sn, t.card_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.act_status, t1.cash_back_status, t.is_reward from t_user_mpos_info t left join t_sys_mpos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-20 10:04:45 -==> Parameters: 469(String), M351846116679(String)
2020-03-20 10:04:45 -<==      Total: 1
2020-03-20 10:04:45 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-20 10:04:45 -==> Parameters: M351846116679(String)
2020-03-20 10:04:45 -<==      Total: 0
2020-03-20 10:04:45 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-20 10:04:45 -==> Parameters: M351846116679(String)
2020-03-20 10:04:45 -<==      Total: 1
2020-03-20 10:04:45 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_mpos_trans_all where 1=1 and sn=? and user_id=? 
2020-03-20 10:04:45 -==> Parameters: M351846116679(String), 469(String)
2020-03-20 10:04:45 -<==      Total: 1
2020-03-20 10:04:45 -耗时 : 37
2020-03-20 10:05:02 -此处进行解密+验签+身份验证
2020-03-20 10:05:02 -此处进行解密+验签+身份验证
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:02 -此处进行解密+验签+身份验证
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 10:05:02 -此处进行解密+验签+身份验证
2020-03-20 10:05:02 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2392 and cre_month=202003 and pos_type is null 
2020-03-20 10:05:02 -==> Parameters: 
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:02 -此处进行解密+验签+身份验证
2020-03-20 10:05:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:02 -<==      Total: 1
2020-03-20 10:05:02 -耗时 : 12
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:02 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-20 10:05:02 -==> Parameters: 2392(String)
2020-03-20 10:05:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:02 -<==      Total: 1
2020-03-20 10:05:02 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 10:05:02 -==> Parameters: 2392(String)
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:02 -<==      Total: 1
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:02 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2392 and pos_type='epos' 
2020-03-20 10:05:02 -==> Parameters: 
2020-03-20 10:05:02 -<==      Total: 1
2020-03-20 10:05:02 -耗时 : 46
2020-03-20 10:05:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:02 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:05:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:02 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:05:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:02 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:05:02 -<==      Total: 0
2020-03-20 10:05:02 -耗时 : 32
2020-03-20 10:05:02 -<==      Total: 0
2020-03-20 10:05:02 -耗时 : 29
2020-03-20 10:05:02 -<==      Total: 0
2020-03-20 10:05:02 -耗时 : 38
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 10:05:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2392 and cre_month=202003 
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -==> Parameters: 
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:04 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -耗时 : 12
2020-03-20 10:05:04 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 10:05:04 -==> Parameters: 2392(String)
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -耗时 : 30
2020-03-20 10:05:04 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:04 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:05:04 -==> Parameters: 2392(String)
2020-03-20 10:05:04 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:04 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:05:04 -<==      Total: 5
2020-03-20 10:05:04 -耗时 : 33
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2392 
2020-03-20 10:05:04 -==> Parameters: 
2020-03-20 10:05:04 -<==      Total: 4
2020-03-20 10:05:04 -耗时 : 39
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -耗时 : 47
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -此处进行解密+验签+身份验证
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 10:05:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2392 and cre_month=202003 and pos_type='epos' 
2020-03-20 10:05:04 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-20 10:05:04 -==> Parameters: 
2020-03-20 10:05:04 -==> Parameters: 2392(String)
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -耗时 : 12
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 10:05:04 -==> Parameters: 2392(String)
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:04 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:04 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2392 and pos_type='epos' 
2020-03-20 10:05:04 -==> Parameters: 
2020-03-20 10:05:04 -<==      Total: 0
2020-03-20 10:05:04 -耗时 : 32
2020-03-20 10:05:04 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:04 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:05:04 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:04 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:05:04 -<==      Total: 1
2020-03-20 10:05:04 -耗时 : 52
2020-03-20 10:05:04 -<==      Total: 0
2020-03-20 10:05:04 -耗时 : 34
2020-03-20 10:05:04 -<==      Total: 0
2020-03-20 10:05:04 -耗时 : 35
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 10:05:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2392 and cre_month=202003 
2020-03-20 10:05:05 -==> Parameters: 
2020-03-20 10:05:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 10:05:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:05 -<==      Total: 1
2020-03-20 10:05:05 -耗时 : 12
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:05 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:05 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:05:05 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:05 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:05:05 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 10:05:05 -==> Parameters: 2392(String)
2020-03-20 10:05:05 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:05 -<==      Total: 4
2020-03-20 10:05:05 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:05:05 -耗时 : 30
2020-03-20 10:05:05 -<==      Total: 5
2020-03-20 10:05:05 -耗时 : 34
2020-03-20 10:05:05 -<==      Total: 1
2020-03-20 10:05:05 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:05:05 -==> Parameters: 2392(String)
2020-03-20 10:05:05 -<==      Total: 1
2020-03-20 10:05:05 -耗时 : 42
2020-03-20 10:05:05 -<==      Total: 1
2020-03-20 10:05:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2392 
2020-03-20 10:05:05 -==> Parameters: 
2020-03-20 10:05:05 -<==      Total: 1
2020-03-20 10:05:05 -耗时 : 55
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -此处进行解密+验签+身份验证
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 10:05:06 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=2392 and cre_month=202003 and pos_type is null 
2020-03-20 10:05:06 -==> Parameters: 
2020-03-20 10:05:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 10:05:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:06 -<==      Total: 1
2020-03-20 10:05:06 -耗时 : 13
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:06 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:05:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:06 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:05:06 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:06 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:05:06 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-20 10:05:06 -==> Parameters: 2392(String)
2020-03-20 10:05:06 -<==      Total: 0
2020-03-20 10:05:06 -耗时 : 32
2020-03-20 10:05:06 -<==      Total: 0
2020-03-20 10:05:06 -耗时 : 32
2020-03-20 10:05:06 -<==      Total: 0
2020-03-20 10:05:06 -耗时 : 34
2020-03-20 10:05:06 -<==      Total: 1
2020-03-20 10:05:06 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 10:05:06 -==> Parameters: 2392(String)
2020-03-20 10:05:06 -<==      Total: 1
2020-03-20 10:05:06 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=2392 and pos_type='epos' 
2020-03-20 10:05:06 -==> Parameters: 
2020-03-20 10:05:06 -<==      Total: 1
2020-03-20 10:05:06 -耗时 : 66
2020-03-20 10:05:07 -此处进行解密+验签+身份验证
2020-03-20 10:05:07 -此处进行解密+验签+身份验证
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:07 -此处进行解密+验签+身份验证
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:07 -此处进行解密+验签+身份验证
2020-03-20 10:05:07 -此处进行解密+验签+身份验证
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 10:05:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 10:05:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2392
2020-03-20 10:05:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=2392 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=2392 and cre_month=202003 
2020-03-20 10:05:07 -==> Parameters: 
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2392 , return
2020-03-20 10:05:07 -<==      Total: 1
2020-03-20 10:05:07 -耗时 : 12
2020-03-20 10:05:07 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:07 -==> Parameters: 2392(String), 2392(String)
2020-03-20 10:05:07 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 10:05:07 -==> Parameters: 2392(String)
2020-03-20 10:05:07 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:07 -==> Parameters: 2392(String), 2392(String), 0(String)
2020-03-20 10:05:07 -<==      Total: 5
2020-03-20 10:05:07 -耗时 : 33
2020-03-20 10:05:07 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:07 -==> Parameters: 2392(String), 2392(String), 1(String)
2020-03-20 10:05:07 -<==      Total: 1
2020-03-20 10:05:07 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:05:07 -==> Parameters: 2392(String)
2020-03-20 10:05:07 -<==      Total: 4
2020-03-20 10:05:07 -耗时 : 35
2020-03-20 10:05:07 -<==      Total: 1
2020-03-20 10:05:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=2392 
2020-03-20 10:05:07 -==> Parameters: 
2020-03-20 10:05:07 -<==      Total: 1
2020-03-20 10:05:07 -耗时 : 42
2020-03-20 10:05:07 -<==      Total: 1
2020-03-20 10:05:07 -耗时 : 46
2020-03-20 10:05:17 -此处进行解密+验签+身份验证
2020-03-20 10:05:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:17 -此处进行解密+验签+身份验证
2020-03-20 10:05:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-20 10:05:17 -==> Parameters: 469(String)
2020-03-20 10:05:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-20 10:05:17 -==> Parameters: 469(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-20 10:05:17 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-20 10:05:17 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-20 10:05:17 -==> Parameters: 469(String), 469(String), 20200219(String), 20200320(String), 469(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-20 10:05:17 -==> Parameters: 469(String), 20200120(String), 469(String), 20200120(String), 20200320(String), 469(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-20 10:05:17 -==> Parameters: 469(String), 469(String), 20200219(String), 20200320(String), 469(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-20 10:05:17 -==> Parameters: 469(String)
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -耗时 : 88
2020-03-20 10:05:17 -<==      Total: 1
2020-03-20 10:05:17 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-20 10:05:17 -==> Parameters: 469(String), 20200120(String), 469(String), 20200120(String), 20200320(String), 469(String)
2020-03-20 10:05:18 -<==      Total: 1
2020-03-20 10:05:18 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-20 10:05:18 -==> Parameters: 469(String)
2020-03-20 10:05:18 -<==      Total: 1
2020-03-20 10:05:18 -耗时 : 387
2020-03-20 10:05:19 -此处进行解密+验签+身份验证
2020-03-20 10:05:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:19 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-20 10:05:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-20 10:05:19 -==> Parameters: 469(String)
2020-03-20 10:05:19 -<==      Total: 1
2020-03-20 10:05:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-20 10:05:19 -==> Parameters: 469(String), 469(String), 202003(String)
2020-03-20 10:05:19 -<==      Total: 1
2020-03-20 10:05:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-20 10:05:19 -==> Parameters: 469(String), 469(String), 20200219(String), 20200320(String), 469(String)
2020-03-20 10:05:19 -<==      Total: 1
2020-03-20 10:05:19 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-20 10:05:19 -==> Parameters: 469(String), 20200120(String), 469(String), 20200120(String), 20200320(String), 469(String)
2020-03-20 10:05:19 -<==      Total: 1
2020-03-20 10:05:19 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-20 10:05:19 -==> Parameters: 469(String)
2020-03-20 10:05:19 -<==      Total: 1
2020-03-20 10:05:19 -耗时 : 149
2020-03-20 10:05:20 -此处进行解密+验签+身份验证
2020-03-20 10:05:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantMposList
2020-03-20 10:05:20 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:20 -==> Parameters: 469(String)
2020-03-20 10:05:20 -<==      Total: 10
2020-03-20 10:05:20 -耗时 : 36
2020-03-20 10:05:24 -此处进行解密+验签+身份验证
2020-03-20 10:05:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-20 10:05:24 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' and t1.pos_type='epos' ORDER BY t.id desc limit 0,10 
2020-03-20 10:05:24 -==> Parameters: 469(String)
2020-03-20 10:05:24 -<==      Total: 5
2020-03-20 10:05:24 -耗时 : 31
2020-03-20 10:05:31 -此处进行解密+验签+身份验证
2020-03-20 10:05:31 -此处进行解密+验签+身份验证
2020-03-20 10:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-20 10:05:31 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-20 10:05:31 -==> Parameters: 469(String)
2020-03-20 10:05:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-20 10:05:31 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-20 10:05:31 -==> Parameters: 469(String)
2020-03-20 10:05:31 -<==      Total: 4
2020-03-20 10:05:31 -耗时 : 13
2020-03-20 10:05:31 -<==      Total: 1
2020-03-20 10:05:31 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 10:05:31 -==> Parameters: 469(String)
2020-03-20 10:05:31 -<==      Total: 1
2020-03-20 10:05:31 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 10:05:31 -==> Parameters: 469(String)
2020-03-20 10:05:31 -<==      Total: 1
2020-03-20 10:05:31 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 10:05:31 -==> Parameters: 469(String)
2020-03-20 10:05:31 -<==      Total: 1
2020-03-20 10:05:31 -耗时 : 36
2020-03-20 10:05:42 -此处进行解密+验签+身份验证
2020-03-20 10:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:42 -此处进行解密+验签+身份验证
2020-03-20 10:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 10:05:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 10:05:42 -==> Parameters: 469(String)
2020-03-20 10:05:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 10:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 10:05:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -耗时 : 13
2020-03-20 10:05:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:05:42 -==> Parameters: 469(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:05:42 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:05:42 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 10:05:42 -<==    Updates: 1
2020-03-20 10:05:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 10:05:42 -==> Parameters: 469(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:05:42 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:05:42 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 10:05:42 -<==    Updates: 1
2020-03-20 10:05:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 10:05:42 -==> Parameters: 
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:05:42 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:05:42 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 10:05:42 -<==    Updates: 1
2020-03-20 10:05:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:05:42 -==> Parameters: 469(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:05:42 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:05:42 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 10:05:42 -<==    Updates: 1
2020-03-20 10:05:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:05:42 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 10:05:42 -<==      Total: 1
2020-03-20 10:05:42 -耗时 : 199
2020-03-20 10:05:46 -此处进行解密+验签+身份验证
2020-03-20 10:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:46 -此处进行解密+验签+身份验证
2020-03-20 10:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 10:05:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 10:05:46 -==> Parameters: 469(String)
2020-03-20 10:05:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-20 10:05:46 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-20 10:05:46 -==> Parameters: 469(String), 469(String)
2020-03-20 10:05:46 -<==      Total: 82
2020-03-20 10:05:46 -耗时 : 38
2020-03-20 10:05:46 -<==      Total: 7
2020-03-20 10:05:46 -耗时 : 258
2020-03-20 10:05:49 -此处进行解密+验签+身份验证
2020-03-20 10:05:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:05:49 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:05:49 -==> Parameters: 469(String)
2020-03-20 10:05:49 -<==      Total: 5
2020-03-20 10:05:49 -耗时 : 25
2020-03-20 10:05:51 -此处进行解密+验签+身份验证
2020-03-20 10:05:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:51 -此处进行解密+验签+身份验证
2020-03-20 10:05:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:05:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:05:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-20 10:05:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-20 10:05:52 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-20 10:05:52 -==> Parameters: 469(String)
2020-03-20 10:05:52 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-20 10:05:52 -==> Parameters: 469(String), EPOS20200318046(String)
2020-03-20 10:05:52 -<==      Total: 3
2020-03-20 10:05:52 -耗时 : 14
2020-03-20 10:05:52 -<==      Total: 1
2020-03-20 10:05:52 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-20 10:05:52 -==> Parameters: 
2020-03-20 10:05:52 -<==      Total: 101
2020-03-20 10:05:52 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-20 10:05:52 -==> Parameters: EPOS20200318046(String)
2020-03-20 10:05:52 -<==      Total: 0
2020-03-20 10:05:52 -耗时 : 59
2020-03-20 10:07:11 -此处进行解密+验签+身份验证
2020-03-20 10:07:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:07:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:07:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@363fbd9a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1a3d40fd (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5125fd4d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7efac695 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@72c9aeff (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@20332f3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7c32786b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@54d4d716 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6b553525 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@705a0616 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 10:07:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 10:07:11 -==> Parameters: 469(String)
2020-03-20 10:07:11 -<==      Total: 0
2020-03-20 10:07:11 -耗时 : 127
2020-03-20 10:07:12 -此处进行解密+验签+身份验证
2020-03-20 10:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:07:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:07:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:07:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:07:12 -==> Parameters: 469(String)
2020-03-20 10:07:12 -<==      Total: 5
2020-03-20 10:07:12 -耗时 : 34
2020-03-20 10:07:14 -此处进行解密+验签+身份验证
2020-03-20 10:07:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:07:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:07:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTrafficCardAllocationList
2020-03-20 10:07:14 -==>  Preparing: SELECT card_no FROM t_user_traffic_card_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by card_no 
2020-03-20 10:07:14 -==> Parameters: 469(String)
2020-03-20 10:07:14 -<==      Total: 0
2020-03-20 10:07:14 -耗时 : 22
2020-03-20 10:07:15 -此处进行解密+验签+身份验证
2020-03-20 10:07:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:07:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:07:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:07:15 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:07:15 -==> Parameters: 469(String)
2020-03-20 10:07:15 -<==      Total: 5
2020-03-20 10:07:15 -耗时 : 34
2020-03-20 10:08:27 -此处进行解密+验签+身份验证
2020-03-20 10:08:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:08:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:08:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTrafficCardAllocationList
2020-03-20 10:08:27 -==>  Preparing: SELECT card_no FROM t_user_traffic_card_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by card_no 
2020-03-20 10:08:27 -==> Parameters: 469(String)
2020-03-20 10:08:27 -<==      Total: 0
2020-03-20 10:08:27 -耗时 : 21
2020-03-20 10:08:28 -此处进行解密+验签+身份验证
2020-03-20 10:08:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:08:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:08:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:08:28 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:08:28 -==> Parameters: 469(String)
2020-03-20 10:08:28 -<==      Total: 5
2020-03-20 10:08:28 -耗时 : 35
2020-03-20 10:08:28 -此处进行解密+验签+身份验证
2020-03-20 10:08:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:08:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:08:28 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:08:28 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 10:08:28 -==> Parameters: 469(String)
2020-03-20 10:08:28 -<==      Total: 0
2020-03-20 10:08:28 -耗时 : 27
2020-03-20 10:08:29 -此处进行解密+验签+身份验证
2020-03-20 10:08:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:08:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:08:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 10:08:29 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 10:08:29 -==> Parameters: 469(String)
2020-03-20 10:08:29 -<==      Total: 82
2020-03-20 10:08:29 -耗时 : 53
2020-03-20 10:08:30 -此处进行解密+验签+身份验证
2020-03-20 10:08:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:08:30 -此处进行解密+验签+身份验证
2020-03-20 10:08:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:08:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:08:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:08:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 10:08:30 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 10:08:30 -==> Parameters: 469(String)
2020-03-20 10:08:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 10:08:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 10:08:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -耗时 : 21
2020-03-20 10:08:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:08:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:08:30 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:08:30 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 10:08:30 -<==    Updates: 1
2020-03-20 10:08:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 10:08:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:08:30 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:08:30 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 10:08:30 -<==    Updates: 1
2020-03-20 10:08:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 10:08:30 -==> Parameters: 
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:08:30 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:08:30 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 10:08:30 -<==    Updates: 1
2020-03-20 10:08:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:08:30 -==> Parameters: 469(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:08:30 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:08:30 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 10:08:30 -<==    Updates: 1
2020-03-20 10:08:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:08:30 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 10:08:30 -<==      Total: 1
2020-03-20 10:08:30 -耗时 : 234
2020-03-20 10:09:40 -此处进行解密+验签+身份验证
2020-03-20 10:09:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:09:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:09:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNoticeDetail
2020-03-20 10:09:40 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, t.notice_content, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.id=? 
2020-03-20 10:09:40 -==> Parameters: 10(String)
2020-03-20 10:09:40 -<==      Total: 1
2020-03-20 10:09:40 -耗时 : 24
2020-03-20 10:09:45 -此处进行解密+验签+身份验证
2020-03-20 10:09:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:09:45 -此处进行解密+验签+身份验证
2020-03-20 10:09:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:09:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:09:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:09:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 10:09:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 10:09:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 10:09:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 10:09:45 -==> Parameters: 469(String)
2020-03-20 10:09:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:09:45 -耗时 : 21
2020-03-20 10:09:45 -==> Parameters: 469(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:09:45 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:09:45 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 10:09:45 -<==    Updates: 1
2020-03-20 10:09:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 10:09:45 -==> Parameters: 469(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:09:45 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:09:45 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 10:09:45 -<==    Updates: 1
2020-03-20 10:09:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 10:09:45 -==> Parameters: 
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:09:45 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:09:45 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 10:09:45 -<==    Updates: 1
2020-03-20 10:09:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 10:09:45 -==> Parameters: 469(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:09:45 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 10:09:45 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 10:09:45 -<==    Updates: 1
2020-03-20 10:09:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 10:09:45 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 10:09:45 -<==      Total: 1
2020-03-20 10:09:45 -耗时 : 120
2020-03-20 10:10:09 -此处进行解密+验签+身份验证
2020-03-20 10:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:10:09 -此处进行解密+验签+身份验证
2020-03-20 10:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:10:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:10:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 10:10:09 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 10:10:09 -==> Parameters: 469(String)
2020-03-20 10:10:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-20 10:10:09 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-20 10:10:09 -==> Parameters: 469(String), 469(String)
2020-03-20 10:10:09 -<==      Total: 82
2020-03-20 10:10:09 -耗时 : 51
2020-03-20 10:10:10 -<==      Total: 7
2020-03-20 10:10:10 -耗时 : 259
2020-03-20 10:10:11 -此处进行解密+验签+身份验证
2020-03-20 10:10:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:10:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:10:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:10:11 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:10:11 -==> Parameters: 469(String)
2020-03-20 10:10:11 -<==      Total: 5
2020-03-20 10:10:11 -耗时 : 35
2020-03-20 10:10:12 -此处进行解密+验签+身份验证
2020-03-20 10:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:10:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:10:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:10:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 10:10:12 -==> Parameters: 469(String)
2020-03-20 10:10:12 -<==      Total: 0
2020-03-20 10:10:12 -耗时 : 34
2020-03-20 10:10:13 -此处进行解密+验签+身份验证
2020-03-20 10:10:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:10:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:10:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 10:10:13 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 10:10:13 -==> Parameters: 469(String)
2020-03-20 10:10:13 -<==      Total: 5
2020-03-20 10:10:13 -耗时 : 33
2020-03-20 10:10:13 -此处进行解密+验签+身份验证
2020-03-20 10:10:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 10:10:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 10:10:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTrafficCardAllocationList
2020-03-20 10:10:13 -==>  Preparing: SELECT card_no FROM t_user_traffic_card_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by card_no 
2020-03-20 10:10:13 -==> Parameters: 469(String)
2020-03-20 10:10:13 -<==      Total: 0
2020-03-20 10:10:13 -耗时 : 15
2020-03-20 11:46:10 -此处进行解密+验签+身份验证
2020-03-20 11:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 11:46:10 -解密异常：{end_number=, token=469|1UTR3W99W6JNCDIRWJU56WLZJFBS9Z4S, start_number=, sign=020419B4B30F4251DD35147C7E9A0E15}
2020-03-20 11:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 11:46:10 -耗时 : 0
2020-03-20 11:46:10 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-20 11:46:10 -Reconnected to 120.25.164.176:10379
2020-03-20 15:06:28 -Starting LongEcologicalApplication on PC-201905161910 with PID 3044 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 15:06:28 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 15:06:28 -No active profile set, falling back to default profiles: default
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:06:29 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 15:06:29 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 15:06:29 -Finished Spring Data repository scanning in 105ms. Found 0 repository interfaces.
2020-03-20 15:06:29 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 15:06:29 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 15:06:29 -Finished Spring Data repository scanning in 50ms. Found 0 repository interfaces.
2020-03-20 15:06:30 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$2fd8d1b9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 15:06:30 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2a5cb659] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 15:06:31 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 15:06:31 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 15:06:31 -Starting service [Tomcat]
2020-03-20 15:06:31 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 15:06:31 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 15:06:31 -Initializing Spring embedded WebApplicationContext
2020-03-20 15:06:31 -Root WebApplicationContext: initialization completed in 3288 ms
2020-03-20 15:06:31 -Filter xssFilter was not registered (disabled)
2020-03-20 15:06:32 -HikariPool-1 - Starting...
2020-03-20 15:06:32 -HikariPool-1 - Start completed.
2020-03-20 15:06:32 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 15:06:32 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 15:06:32 -HHH000206: hibernate.properties not found
2020-03-20 15:06:33 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 15:06:33 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 15:06:33 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 15:06:34 -Using default implementation for ThreadExecutor
2020-03-20 15:06:34 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 15:06:34 -Quartz Scheduler v.2.3.0 created.
2020-03-20 15:06:34 -RAMJobStore initialized.
2020-03-20 15:06:34 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 15:06:34 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 15:06:34 -Quartz scheduler version: 2.3.0
2020-03-20 15:06:34 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2dd08ff1
2020-03-20 15:06:35 -STAET TaskExecutorConfig
2020-03-20 15:06:35 -Initializing ExecutorService
2020-03-20 15:06:35 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 15:06:35 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 15:06:36 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 15:06:36 -Initializing ExecutorService 'taskScheduler'
2020-03-20 15:06:36 -Starting Quartz Scheduler now
2020-03-20 15:06:36 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 15:06:36 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 15:06:37 -Using a shared selector for servlet write/read
2020-03-20 15:06:37 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 15:06:37 -Started LongEcologicalApplication in 9.63 seconds (JVM running for 12.345)
2020-03-20 15:07:05 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 15:07:05 -Initializing Servlet 'dispatcherServlet'
2020-03-20 15:07:05 -Completed initialization in 15 ms
2020-03-20 15:07:05 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.example.longecological.entity.R com.example.longecological.controller.user.UserLoginController.userLogin(java.util.Map<java.lang.String, java.lang.Object>)]
2020-03-20 15:07:19 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.example.longecological.entity.R com.example.longecological.controller.user.UserLoginController.userLogin(java.util.Map<java.lang.String, java.lang.Object>)]
2020-03-20 15:07:51 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.example.longecological.entity.R com.example.longecological.controller.user.UserLoginController.userLogin(java.util.Map<java.lang.String, java.lang.Object>)]
2020-03-20 15:07:58 -Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public com.example.longecological.entity.R com.example.longecological.controller.user.UserLoginController.userLogin(java.util.Map<java.lang.String, java.lang.Object>)]
2020-03-20 15:10:54 -此处进行解密+验签+身份验证
2020-03-20 15:10:54 -此处进行解密+验签+身份验证
2020-03-20 15:10:54 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-20 15:10:54 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-20 15:10:54 -Starting without optional epoll library
2020-03-20 15:10:54 -Starting without optional kqueue library
2020-03-20 15:10:54 -解密：
2020-03-20 15:10:55 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 15:10:55 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 15:10:55 -==> Parameters: 04(String), 04(String)
2020-03-20 15:10:55 -<==      Total: 1
2020-03-20 15:10:55 -耗时 : 83
2020-03-20 15:10:55 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-20 15:10:55 -耗时 : 1277
2020-03-20 15:11:47 -此处进行解密+验签+身份验证
2020-03-20 15:11:47 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"CB22A8339FFA3C82D47D502E18B961FA","device_no":"1.0.9","device_type":"android","sys_user_account":"15019499979"}
2020-03-20 15:11:47 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-20 15:11:47 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-20 15:11:47 -==> Parameters: 15019499979(String)
2020-03-20 15:11:47 -<==      Total: 1
2020-03-20 15:11:47 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-20 15:11:47 -==> Parameters: android(String), 1.0.9(String), (String), null, 192.168.191.1(String), 20200320(String), 151147(String), 469(Integer)
2020-03-20 15:11:47 -<==    Updates: 1
2020-03-20 15:11:47 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-20 15:11:47 -==> Parameters: 25(String)
2020-03-20 15:11:47 -<==      Total: 1
2020-03-20 15:11:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 15:11:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 15:11:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 15:11:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 15:11:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 15:11:47 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 15:11:47 -耗时 : 118
2020-03-20 15:11:48 -此处进行解密+验签+身份验证
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 15:11:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 15:11:48 -==> Parameters: 469(String)
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -耗时 : 20
2020-03-20 15:11:48 -此处进行解密+验签+身份验证
2020-03-20 15:11:48 -解密：
2020-03-20 15:11:48 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 15:11:48 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 15:11:48 -==> Parameters: 01(String), 01(String)
2020-03-20 15:11:48 -<==      Total: 4
2020-03-20 15:11:48 -耗时 : 12
2020-03-20 15:11:48 -此处进行解密+验签+身份验证
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-20 15:11:48 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-20 15:11:48 -==> Parameters: 469(String)
2020-03-20 15:11:48 -<==      Total: 2
2020-03-20 15:11:48 -耗时 : 14
2020-03-20 15:11:48 -此处进行解密+验签+身份验证
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 15:11:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 15:11:48 -==> Parameters: 469(String)
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -耗时 : 9
2020-03-20 15:11:48 -此处进行解密+验签+身份验证
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:48 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-20 15:11:48 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-20 15:11:48 -==> Parameters: 
2020-03-20 15:11:48 -<==      Total: 3
2020-03-20 15:11:48 -耗时 : 13
2020-03-20 15:11:48 -此处进行解密+验签+身份验证
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 15:11:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 15:11:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 15:11:48 -==> Parameters: 469(String), 469(String)
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:48 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:48 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 15:11:48 -<==    Updates: 1
2020-03-20 15:11:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 15:11:48 -==> Parameters: 469(String), 469(String)
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:48 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:48 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 15:11:48 -<==    Updates: 1
2020-03-20 15:11:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 15:11:48 -==> Parameters: 
2020-03-20 15:11:48 -<==      Total: 1
2020-03-20 15:11:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:48 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:49 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 15:11:49 -<==    Updates: 1
2020-03-20 15:11:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 15:11:49 -==> Parameters: 469(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:49 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 15:11:49 -<==    Updates: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 15:11:49 -此处进行解密+验签+身份验证
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -耗时 : 168
2020-03-20 15:11:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:49 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 15:11:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 15:11:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 15:11:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 15:11:49 -==> Parameters: 469(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:49 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 15:11:49 -<==    Updates: 1
2020-03-20 15:11:49 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 15:11:49 -==> Parameters: 469(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:49 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 15:11:49 -<==    Updates: 1
2020-03-20 15:11:49 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 15:11:49 -==> Parameters: 
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:49 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 15:11:49 -<==    Updates: 1
2020-03-20 15:11:49 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 15:11:49 -==> Parameters: 469(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 15:11:49 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 15:11:49 -<==    Updates: 1
2020-03-20 15:11:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 15:11:49 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 15:11:49 -<==      Total: 1
2020-03-20 15:11:49 -耗时 : 156
2020-03-20 15:11:58 -此处进行解密+验签+身份验证
2020-03-20 15:11:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-20 15:11:58 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-20 15:11:58 -==> Parameters: 469(String)
2020-03-20 15:11:58 -<==      Total: 4
2020-03-20 15:11:58 -耗时 : 52
2020-03-20 15:11:58 -此处进行解密+验签+身份验证
2020-03-20 15:11:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:11:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:11:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-20 15:11:58 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-20 15:11:58 -==> Parameters: 469(String)
2020-03-20 15:11:58 -<==      Total: 1
2020-03-20 15:11:58 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 15:11:58 -==> Parameters: 469(String)
2020-03-20 15:11:58 -<==      Total: 1
2020-03-20 15:11:58 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 15:11:58 -==> Parameters: 469(String)
2020-03-20 15:11:58 -<==      Total: 1
2020-03-20 15:11:58 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 15:11:58 -==> Parameters: 469(String)
2020-03-20 15:11:58 -<==      Total: 1
2020-03-20 15:11:58 -耗时 : 39
2020-03-20 15:12:43 -此处进行解密+验签+身份验证
2020-03-20 15:12:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:12:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:12:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 15:12:43 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type is null 
2020-03-20 15:12:43 -==> Parameters: 
2020-03-20 15:12:43 -此处进行解密+验签+身份验证
2020-03-20 15:12:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:12:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:12:43 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 15:12:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:12:43 -<==      Total: 1
2020-03-20 15:12:43 -耗时 : 28
2020-03-20 15:12:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:12:55 -此处进行解密+验签+身份验证
2020-03-20 15:12:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:12:55 -此处进行解密+验签+身份验证
2020-03-20 15:12:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:12:55 -此处进行解密+验签+身份验证
2020-03-20 15:12:55 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-20 15:12:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:12:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:12:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:12:55 -==> Parameters: 1842(String)
2020-03-20 15:12:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:12:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:12:55 -<==      Total: 1
2020-03-20 15:15:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:12:55 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:15:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:15:44 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m11s789ms558µs269ns).
2020-03-20 15:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:15:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:15:48 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 15:15:48 -==> Parameters: 1842(String)
2020-03-20 15:15:48 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:15:48 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:15:48 -<==      Total: 1
2020-03-20 15:15:50 -<==      Total: 0
2020-03-20 15:15:50 -耗时 : 175311
2020-03-20 15:15:50 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:15:50 -解密异常：{user_id=1842, sign=5F790C2ECAFC06DACCB903800154BD6F, token=469|5OAWXECYX3ZGVWJU2PL1686OH0M024BV}
2020-03-20 15:15:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:15:50 -耗时 : 1
2020-03-20 15:15:50 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-20 15:15:50 -==> Parameters: 
2020-03-20 15:15:50 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:15:50 -<==      Total: 1
2020-03-20 15:15:50 -耗时 : 187070
2020-03-20 15:15:50 -<==      Total: 0
2020-03-20 15:15:50 -耗时 : 175345
2020-03-20 15:16:08 -此处进行解密+验签+身份验证
2020-03-20 15:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 15:16:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type is null 
2020-03-20 15:16:08 -==> Parameters: 
2020-03-20 15:16:08 -<==      Total: 1
2020-03-20 15:16:08 -耗时 : 25
2020-03-20 15:16:08 -此处进行解密+验签+身份验证
2020-03-20 15:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 15:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:12 -此处进行解密+验签+身份验证
2020-03-20 15:16:12 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:12 -==> Parameters: 1842(String)
2020-03-20 15:16:12 -此处进行解密+验签+身份验证
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:12 -此处进行解密+验签+身份验证
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:12 -<==      Total: 1
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:12 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-20 15:16:12 -==> Parameters: 1842(String)
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:12 -<==      Total: 1
2020-03-20 15:16:12 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-20 15:16:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:16:12 -==> Parameters: 
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:16:12 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:16:12 -<==      Total: 1
2020-03-20 15:16:12 -耗时 : 4136
2020-03-20 15:16:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:16:12 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:16:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type is null and t2.pos_type is null where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:16:12 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:16:12 -<==      Total: 0
2020-03-20 15:16:12 -耗时 : 35
2020-03-20 15:16:12 -<==      Total: 0
2020-03-20 15:16:12 -耗时 : 32
2020-03-20 15:16:12 -<==      Total: 0
2020-03-20 15:16:12 -耗时 : 43
2020-03-20 15:16:16 -此处进行解密+验签+身份验证
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 15:16:16 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-20 15:16:16 -==> Parameters: 
2020-03-20 15:16:16 -此处进行解密+验签+身份验证
2020-03-20 15:16:16 -<==      Total: 1
2020-03-20 15:16:16 -耗时 : 23
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:16 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:16:16 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:16:16 -<==      Total: 0
2020-03-20 15:16:16 -耗时 : 33
2020-03-20 15:16:16 -此处进行解密+验签+身份验证
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:16 -此处进行解密+验签+身份验证
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:16 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:16:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:16:23 -此处进行解密+验签+身份验证
2020-03-20 15:16:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:16:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:16:26 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:16:26 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:16:26 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-20 15:16:26 -==> Parameters: 1842(String)
2020-03-20 15:16:26 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:16:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:16:26 -<==      Total: 1
2020-03-20 15:16:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:17:10 -<==      Total: 0
2020-03-20 15:17:10 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=56s56ms698µs897ns).
2020-03-20 15:17:12 -耗时 : 56234
2020-03-20 15:17:12 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as e_act_num,cast((pos_num-act_num) as char) as e_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 15:17:12 -==> Parameters: 1842(String)
2020-03-20 15:17:12 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:17:12 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:17:12 -<==      Total: 1
2020-03-20 15:17:23 -<==      Total: 0
2020-03-20 15:17:23 -耗时 : 57462
2020-03-20 15:17:27 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-20 15:17:27 -==> Parameters: 
2020-03-20 15:17:27 -<==      Total: 1
2020-03-20 15:17:27 -耗时 : 71087
2020-03-20 15:21:41 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-20 15:21:41 -Shutting down ExecutorService 'taskScheduler'
2020-03-20 15:21:41 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-20 15:21:41 -Shutting down Quartz Scheduler
2020-03-20 15:21:41 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-20 15:21:41 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-20 15:21:41 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-20 15:21:41 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 15:21:41 -HikariPool-1 - Shutdown initiated...
2020-03-20 15:21:41 -HikariPool-1 - Shutdown completed.
2020-03-20 15:24:18 -Starting LongEcologicalApplication on PC-201905161910 with PID 15356 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 15:24:18 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 15:24:18 -No active profile set, falling back to default profiles: default
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:24:20 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 15:24:20 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 15:24:20 -Finished Spring Data repository scanning in 83ms. Found 0 repository interfaces.
2020-03-20 15:24:20 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 15:24:20 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 15:24:20 -Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2020-03-20 15:24:20 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$591851da] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 15:24:21 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$539c367a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 15:24:22 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 15:24:22 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 15:24:22 -Starting service [Tomcat]
2020-03-20 15:24:22 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 15:24:22 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 15:24:22 -Initializing Spring embedded WebApplicationContext
2020-03-20 15:24:22 -Root WebApplicationContext: initialization completed in 3595 ms
2020-03-20 15:24:22 -Filter xssFilter was not registered (disabled)
2020-03-20 15:24:22 -HikariPool-1 - Starting...
2020-03-20 15:24:23 -HikariPool-1 - Start completed.
2020-03-20 15:24:23 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 15:24:23 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 15:24:23 -HHH000206: hibernate.properties not found
2020-03-20 15:24:23 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 15:24:24 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 15:24:24 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 15:24:25 -Using default implementation for ThreadExecutor
2020-03-20 15:24:25 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 15:24:25 -Quartz Scheduler v.2.3.0 created.
2020-03-20 15:24:25 -RAMJobStore initialized.
2020-03-20 15:24:25 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 15:24:25 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 15:24:25 -Quartz scheduler version: 2.3.0
2020-03-20 15:24:25 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@21ffc00e
2020-03-20 15:24:26 -STAET TaskExecutorConfig
2020-03-20 15:24:26 -Initializing ExecutorService
2020-03-20 15:24:26 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 15:24:26 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 15:24:27 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 15:24:27 -Initializing ExecutorService 'taskScheduler'
2020-03-20 15:24:27 -Starting Quartz Scheduler now
2020-03-20 15:24:27 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 15:24:27 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 15:24:28 -Using a shared selector for servlet write/read
2020-03-20 15:24:28 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 15:24:28 -Started LongEcologicalApplication in 10.252 seconds (JVM running for 11.908)
2020-03-20 15:24:53 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 15:24:53 -Initializing Servlet 'dispatcherServlet'
2020-03-20 15:24:53 -Completed initialization in 38 ms
2020-03-20 15:24:53 -此处进行解密+验签+身份验证
2020-03-20 15:24:53 -此处进行解密+验签+身份验证
2020-03-20 15:24:53 -此处进行解密+验签+身份验证
2020-03-20 15:24:53 -此处进行解密+验签+身份验证
2020-03-20 15:24:53 -此处进行解密+验签+身份验证
2020-03-20 15:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:24:53 -Starting without optional epoll library
2020-03-20 15:24:53 -Starting without optional kqueue library
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:24:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 15:24:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:24:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 15:24:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:24:54 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:24:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1842 and cre_month=202003 
2020-03-20 15:24:54 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 15:24:54 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:24:54 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:24:54 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:24:54 -==> Parameters: 
2020-03-20 15:24:54 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:24:54 -==> Parameters: 1842(String)
2020-03-20 15:24:54 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:24:54 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:24:54 -<==      Total: 1
2020-03-20 15:24:54 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 15:24:54 -==> Parameters: 1842(String)
2020-03-20 15:24:54 -<==      Total: 1
2020-03-20 15:24:54 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1842 
2020-03-20 15:24:54 -==> Parameters: 
2020-03-20 15:24:54 -<==      Total: 0
2020-03-20 15:24:54 -耗时 : 122
2020-03-20 15:24:54 -<==      Total: 1
2020-03-20 15:24:54 -耗时 : 125
2020-03-20 15:24:54 -<==      Total: 0
2020-03-20 15:24:54 -耗时 : 127
2020-03-20 15:24:54 -<==      Total: 0
2020-03-20 15:24:54 -耗时 : 127
2020-03-20 15:24:54 -<==      Total: 1
2020-03-20 15:24:54 -耗时 : 139
2020-03-20 15:25:00 -此处进行解密+验签+身份验证
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:00 -此处进行解密+验签+身份验证
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:00 -此处进行解密+验签+身份验证
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:00 -此处进行解密+验签+身份验证
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:00 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:25:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 15:25:00 -此处进行解密+验签+身份验证
2020-03-20 15:25:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:00 -<==      Total: 0
2020-03-20 15:25:00 -耗时 : 52
2020-03-20 15:25:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:00 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:25:02 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:02 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 15:25:02 -<==      Total: 0
2020-03-20 15:25:02 -耗时 : 2393
2020-03-20 15:25:02 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-20 15:25:02 -==> Parameters: 
2020-03-20 15:25:02 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:25:02 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-20 15:25:02 -==> Parameters: 1842(String)
2020-03-20 15:25:02 -<==      Total: 1
2020-03-20 15:25:02 -<==      Total: 1
2020-03-20 15:25:02 -耗时 : 22
2020-03-20 15:25:02 -<==      Total: 0
2020-03-20 15:25:02 -耗时 : 2401
2020-03-20 15:25:08 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'map' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy117.getTraditionalPosAllocateCase(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$76d19bbe.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-20 15:25:08 -耗时 : 7868
2020-03-20 15:25:37 -此处进行解密+验签+身份验证
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 15:25:37 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1842 and cre_month=202003 
2020-03-20 15:25:37 -==> Parameters: 
2020-03-20 15:25:37 -<==      Total: 1
2020-03-20 15:25:37 -耗时 : 15
2020-03-20 15:25:37 -此处进行解密+验签+身份验证
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:37 -此处进行解密+验签+身份验证
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:37 -此处进行解密+验签+身份验证
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:37 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 15:25:37 -==> Parameters: 1842(String)
2020-03-20 15:25:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:37 -<==      Total: 1
2020-03-20 15:25:37 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 15:25:37 -==> Parameters: 1842(String)
2020-03-20 15:25:38 -<==      Total: 1
2020-03-20 15:25:38 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1842 
2020-03-20 15:25:38 -==> Parameters: 
2020-03-20 15:25:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:38 -此处进行解密+验签+身份验证
2020-03-20 15:25:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:38 -<==      Total: 1
2020-03-20 15:25:38 -耗时 : 62
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:38 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:38 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:25:38 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:38 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:25:38 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:38 -<==      Total: 0
2020-03-20 15:25:38 -耗时 : 47
2020-03-20 15:25:38 -<==      Total: 0
2020-03-20 15:25:38 -耗时 : 44
2020-03-20 15:25:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:38 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:38 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:25:38 -<==      Total: 0
2020-03-20 15:25:38 -耗时 : 40
2020-03-20 15:25:39 -此处进行解密+验签+身份验证
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:39 -此处进行解密+验签+身份验证
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:39 -此处进行解密+验签+身份验证
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:39 -此处进行解密+验签+身份验证
2020-03-20 15:25:39 -此处进行解密+验签+身份验证
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 15:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 15:25:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:39 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-20 15:25:39 -==> Parameters: 
2020-03-20 15:25:39 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:39 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:25:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:39 -<==      Total: 0
2020-03-20 15:25:39 -耗时 : 39
2020-03-20 15:25:39 -<==      Total: 1
2020-03-20 15:25:39 -耗时 : 14
2020-03-20 15:25:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:25:45 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:45 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:25:45 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:25:45 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:25:45 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-20 15:25:45 -==> Parameters: 1842(String)
2020-03-20 15:25:45 -<==      Total: 0
2020-03-20 15:25:45 -耗时 : 6118
2020-03-20 15:25:45 -<==      Total: 0
2020-03-20 15:25:45 -耗时 : 6113
2020-03-20 15:25:45 -<==      Total: 1
2020-03-20 15:25:57 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'map' not found. Available parameters are [user_id, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy117.getTraditionalPosAllocateCase(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor98.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$76d19bbe.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-20 15:25:57 -耗时 : 17586
2020-03-20 15:28:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-20 15:28:09 -Shutting down ExecutorService 'taskScheduler'
2020-03-20 15:28:09 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-20 15:28:09 -Shutting down Quartz Scheduler
2020-03-20 15:28:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-20 15:28:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-20 15:28:09 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-20 15:28:09 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 15:28:09 -HikariPool-1 - Shutdown initiated...
2020-03-20 15:28:09 -HikariPool-1 - Shutdown completed.
2020-03-20 15:28:38 -Starting LongEcologicalApplication on PC-201905161910 with PID 6060 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 15:28:38 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 15:28:38 -No active profile set, falling back to default profiles: default
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 15:28:40 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 15:28:40 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 15:28:41 -Finished Spring Data repository scanning in 136ms. Found 0 repository interfaces.
2020-03-20 15:28:41 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 15:28:41 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 15:28:41 -Finished Spring Data repository scanning in 67ms. Found 0 repository interfaces.
2020-03-20 15:28:42 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$cf46f65c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 15:28:42 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c9cadafc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 15:28:43 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 15:28:43 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 15:28:43 -Starting service [Tomcat]
2020-03-20 15:28:43 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 15:28:43 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 15:28:43 -Initializing Spring embedded WebApplicationContext
2020-03-20 15:28:43 -Root WebApplicationContext: initialization completed in 4935 ms
2020-03-20 15:28:44 -Filter xssFilter was not registered (disabled)
2020-03-20 15:28:44 -HikariPool-1 - Starting...
2020-03-20 15:28:44 -HikariPool-1 - Start completed.
2020-03-20 15:28:44 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 15:28:45 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 15:28:45 -HHH000206: hibernate.properties not found
2020-03-20 15:28:45 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 15:28:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 15:28:46 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 15:28:46 -Using default implementation for ThreadExecutor
2020-03-20 15:28:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 15:28:46 -Quartz Scheduler v.2.3.0 created.
2020-03-20 15:28:46 -RAMJobStore initialized.
2020-03-20 15:28:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 15:28:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 15:28:46 -Quartz scheduler version: 2.3.0
2020-03-20 15:28:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@aa633e6
2020-03-20 15:28:47 -STAET TaskExecutorConfig
2020-03-20 15:28:47 -Initializing ExecutorService
2020-03-20 15:28:47 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 15:28:48 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 15:28:48 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 15:28:48 -Initializing ExecutorService 'taskScheduler'
2020-03-20 15:28:48 -Starting Quartz Scheduler now
2020-03-20 15:28:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 15:28:48 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 15:28:49 -Using a shared selector for servlet write/read
2020-03-20 15:28:49 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 15:28:49 -Started LongEcologicalApplication in 11.325 seconds (JVM running for 13.286)
2020-03-20 15:29:35 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 15:29:35 -Initializing Servlet 'dispatcherServlet'
2020-03-20 15:29:35 -Completed initialization in 24 ms
2020-03-20 15:29:35 -此处进行解密+验签+身份验证
2020-03-20 15:29:35 -此处进行解密+验签+身份验证
2020-03-20 15:29:35 -此处进行解密+验签+身份验证
2020-03-20 15:29:35 -此处进行解密+验签+身份验证
2020-03-20 15:29:35 -此处进行解密+验签+身份验证
2020-03-20 15:29:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:35 -Starting without optional epoll library
2020-03-20 15:29:35 -Starting without optional kqueue library
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 15:29:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:29:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 15:29:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:29:36 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:36 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1842 and cre_month=202003 
2020-03-20 15:29:36 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:29:36 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-20 15:29:36 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:29:36 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:29:36 -==> Parameters: 1842(String)
2020-03-20 15:29:36 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:29:36 -==> Parameters: 
2020-03-20 15:29:36 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:29:36 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:29:36 -<==      Total: 1
2020-03-20 15:29:36 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-20 15:29:36 -==> Parameters: 1842(String)
2020-03-20 15:29:36 -<==      Total: 0
2020-03-20 15:29:36 -耗时 : 118
2020-03-20 15:29:36 -<==      Total: 0
2020-03-20 15:29:36 -耗时 : 122
2020-03-20 15:29:36 -<==      Total: 1
2020-03-20 15:29:36 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1842 
2020-03-20 15:29:36 -==> Parameters: 
2020-03-20 15:29:36 -<==      Total: 0
2020-03-20 15:29:36 -耗时 : 144
2020-03-20 15:29:36 -<==      Total: 1
2020-03-20 15:29:36 -耗时 : 148
2020-03-20 15:29:36 -<==      Total: 1
2020-03-20 15:29:36 -耗时 : 159
2020-03-20 15:29:41 -此处进行解密+验签+身份验证
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:41 -此处进行解密+验签+身份验证
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:41 -此处进行解密+验签+身份验证
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:41 -此处进行解密+验签+身份验证
2020-03-20 15:29:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:41 -此处进行解密+验签+身份验证
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 15:29:41 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-20 15:29:41 -==> Parameters: 1842(String), 1842(String)
2020-03-20 15:29:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-20 15:29:44 -==> Parameters: 1842(String), 1842(String), 0(String)
2020-03-20 15:29:44 -<==      Total: 0
2020-03-20 15:29:44 -耗时 : 2962
2020-03-20 15:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-20 15:29:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-20 15:29:44 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-20 15:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1842
2020-03-20 15:29:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1842 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1842 and cre_month=202003 and pos_type='epos' 
2020-03-20 15:29:44 -==> Parameters: 
2020-03-20 15:29:44 -==> Parameters: 1842(String)
2020-03-20 15:29:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1842 , return
2020-03-20 15:29:44 -<==      Total: 1
2020-03-20 15:29:44 -耗时 : 23
2020-03-20 15:29:44 -<==      Total: 0
2020-03-20 15:29:44 -耗时 : 2972
2020-03-20 15:29:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn and t1.pos_type='epos' and t2.pos_type='epos' where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-20 15:29:44 -==> Parameters: 1842(String), 1842(String), 1(String)
2020-03-20 15:29:44 -<==      Total: 1
2020-03-20 15:29:46 -<==      Total: 0
2020-03-20 15:29:46 -耗时 : 2257
2020-03-20 15:29:46 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-20 15:29:46 -==> Parameters: 1842(String)
2020-03-20 15:29:46 -<==      Total: 1
2020-03-20 15:29:48 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1842 and pos_type='epos' 
2020-03-20 15:29:48 -==> Parameters: 
2020-03-20 15:29:48 -<==      Total: 1
2020-03-20 15:29:50 -耗时 : 9411
2020-03-20 16:30:41 -此处进行解密+验签+身份验证
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:30:41 -此处进行解密+验签+身份验证
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:30:41 -此处进行解密+验签+身份验证
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:30:41 -此处进行解密+验签+身份验证
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:30:41 -解密异常：{last_id=, user_id=1842, trade_status=1, sign=7D2BB5DE3DC8367155161C5703ABC5F2, token=469|5OAWXECYX3ZGVWJU2PL1686OH0M024BV}
2020-03-20 16:30:41 -此处进行解密+验签+身份验证
2020-03-20 16:30:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:30:41 -耗时 : 0
2020-03-20 16:30:41 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-20 16:30:41 -Reconnected to 120.25.164.176:10379
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:30:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:30:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-20 16:30:41 -耗时 : 0
2020-03-20 16:30:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 16:30:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-20 16:30:41 -耗时 : 1
2020-03-20 16:30:41 -耗时 : 1
2020-03-20 16:30:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-20 16:30:41 -耗时 : 1
2020-03-20 16:44:59 -此处进行解密+验签+身份验证
2020-03-20 16:44:59 -此处进行解密+验签+身份验证
2020-03-20 16:44:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:44:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:44:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:44:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:44:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 16:44:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 16:44:59 -耗时 : 6
2020-03-20 16:44:59 -耗时 : 7
2020-03-20 16:45:13 -此处进行解密+验签+身份验证
2020-03-20 16:45:13 -解密：{"sys_user_account":"15019499979","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"F1380DC96310DB3B2158845351AD5A96","version_no":"450000000145206","login_type":"account"}
2020-03-20 16:45:13 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1c994eb1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@42de1340 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@a869329 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5cbca80e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3d6d0d72 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@f9b5d8c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@313a888d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@87faa7c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5d2c209c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@80e7188 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 16:45:13 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-20 16:45:13 -==> Parameters: 15019499979(String)
2020-03-20 16:45:13 -<==      Total: 1
2020-03-20 16:45:13 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-20 16:45:13 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), null, 192.168.191.1(String), 20200320(String), 164513(String), 469(Integer)
2020-03-20 16:45:13 -<==    Updates: 1
2020-03-20 16:45:13 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-20 16:45:13 -==> Parameters: 25(String)
2020-03-20 16:45:13 -<==      Total: 1
2020-03-20 16:45:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 16:45:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 16:45:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 16:45:13 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 16:45:14 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 16:45:14 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 16:45:14 -耗时 : 210
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 16:45:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 16:45:14 -==> Parameters: 469(String)
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -解密：
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -耗时 : 9
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:14 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 16:45:14 -==> Parameters: 01(String), 01(String)
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:14 -<==      Total: 4
2020-03-20 16:45:14 -耗时 : 14
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:14 -此处进行解密+验签+身份验证
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-20 16:45:14 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-20 16:45:14 -==> Parameters: 469(String)
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 16:45:14 -<==      Total: 2
2020-03-20 16:45:14 -耗时 : 9
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-20 16:45:14 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-20 16:45:14 -==> Parameters: 
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 16:45:14 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 16:45:14 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 16:45:14 -==> Parameters: 469(String)
2020-03-20 16:45:14 -<==      Total: 3
2020-03-20 16:45:14 -耗时 : 12
2020-03-20 16:45:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:45:14 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -耗时 : 9
2020-03-20 16:45:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 16:45:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:45:14 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 16:45:14 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 16:45:14 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 16:45:14 -==> Parameters: 
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 16:45:14 -==> Parameters: 
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:45:14 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:45:14 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:45:14 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 16:45:14 -<==    Updates: 1
2020-03-20 16:45:14 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:45:14 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -耗时 : 159
2020-03-20 16:45:14 -<==      Total: 1
2020-03-20 16:45:14 -耗时 : 143
2020-03-20 16:45:16 -此处进行解密+验签+身份验证
2020-03-20 16:45:16 -此处进行解密+验签+身份验证
2020-03-20 16:45:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-20 16:45:16 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 16:45:16 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 16:45:16 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-20 16:45:16 -==> Parameters: 469(String), 469(String)
2020-03-20 16:45:16 -==> Parameters: 469(String)
2020-03-20 16:45:16 -<==      Total: 82
2020-03-20 16:45:16 -耗时 : 53
2020-03-20 16:45:17 -<==      Total: 7
2020-03-20 16:45:17 -耗时 : 274
2020-03-20 16:45:20 -此处进行解密+验签+身份验证
2020-03-20 16:45:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 16:45:20 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 16:45:20 -==> Parameters: 469(String)
2020-03-20 16:45:20 -<==      Total: 0
2020-03-20 16:45:20 -耗时 : 25
2020-03-20 16:45:21 -此处进行解密+验签+身份验证
2020-03-20 16:45:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 16:45:21 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 16:45:21 -==> Parameters: 469(String)
2020-03-20 16:45:21 -<==      Total: 82
2020-03-20 16:45:21 -耗时 : 40
2020-03-20 16:45:22 -此处进行解密+验签+身份验证
2020-03-20 16:45:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 16:45:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 16:45:22 -==> Parameters: 469(String)
2020-03-20 16:45:22 -<==      Total: 5
2020-03-20 16:45:22 -耗时 : 25
2020-03-20 16:45:24 -此处进行解密+验签+身份验证
2020-03-20 16:45:24 -此处进行解密+验签+身份验证
2020-03-20 16:45:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-20 16:45:24 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-20 16:45:24 -==> Parameters: 469(String)
2020-03-20 16:45:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-20 16:45:24 -<==      Total: 3
2020-03-20 16:45:24 -耗时 : 14
2020-03-20 16:45:24 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-20 16:45:24 -==> Parameters: 469(String), EPOS20200318046(String)
2020-03-20 16:45:24 -<==      Total: 1
2020-03-20 16:45:24 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-20 16:45:24 -==> Parameters: 
2020-03-20 16:45:24 -<==      Total: 101
2020-03-20 16:45:24 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-20 16:45:24 -==> Parameters: EPOS20200318046(String)
2020-03-20 16:45:24 -<==      Total: 0
2020-03-20 16:45:24 -耗时 : 55
2020-03-20 16:45:38 -此处进行解密+验签+身份验证
2020-03-20 16:45:38 -此处进行解密+验签+身份验证
2020-03-20 16:45:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:45:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:45:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-20 16:45:38 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-20 16:45:38 -==> Parameters: 469(String), EPOS20200318046(String)
2020-03-20 16:45:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-20 16:45:38 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-20 16:45:38 -<==      Total: 1
2020-03-20 16:45:38 -==> Parameters: 469(String)
2020-03-20 16:45:38 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-20 16:45:38 -==> Parameters: 
2020-03-20 16:45:38 -<==      Total: 3
2020-03-20 16:45:38 -耗时 : 12
2020-03-20 16:45:38 -<==      Total: 101
2020-03-20 16:45:38 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-20 16:45:38 -==> Parameters: EPOS20200318046(String)
2020-03-20 16:45:38 -<==      Total: 0
2020-03-20 16:45:38 -耗时 : 28
2020-03-20 16:54:38 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-20 16:54:38 -Shutting down ExecutorService 'taskScheduler'
2020-03-20 16:54:38 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-20 16:54:38 -Shutting down Quartz Scheduler
2020-03-20 16:54:38 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-20 16:54:38 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-20 16:54:38 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-20 16:54:38 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 16:54:38 -HikariPool-1 - Shutdown initiated...
2020-03-20 16:54:38 -HikariPool-1 - Shutdown completed.
2020-03-20 16:55:00 -Starting LongEcologicalApplication on PC-201905161910 with PID 8432 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 16:55:00 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 16:55:00 -No active profile set, falling back to default profiles: default
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 16:55:01 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 16:55:01 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 16:55:02 -Finished Spring Data repository scanning in 120ms. Found 0 repository interfaces.
2020-03-20 16:55:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 16:55:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 16:55:02 -Finished Spring Data repository scanning in 46ms. Found 0 repository interfaces.
2020-03-20 16:55:02 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$8b00c82d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 16:55:02 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$8584accd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 16:55:03 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 16:55:03 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 16:55:03 -Starting service [Tomcat]
2020-03-20 16:55:03 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 16:55:03 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 16:55:03 -Initializing Spring embedded WebApplicationContext
2020-03-20 16:55:03 -Root WebApplicationContext: initialization completed in 2900 ms
2020-03-20 16:55:03 -Filter xssFilter was not registered (disabled)
2020-03-20 16:55:04 -HikariPool-1 - Starting...
2020-03-20 16:55:04 -HikariPool-1 - Start completed.
2020-03-20 16:55:04 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 16:55:04 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 16:55:04 -HHH000206: hibernate.properties not found
2020-03-20 16:55:04 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 16:55:04 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 16:55:05 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 16:55:05 -Using default implementation for ThreadExecutor
2020-03-20 16:55:05 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 16:55:05 -Quartz Scheduler v.2.3.0 created.
2020-03-20 16:55:05 -RAMJobStore initialized.
2020-03-20 16:55:05 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 16:55:05 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 16:55:05 -Quartz scheduler version: 2.3.0
2020-03-20 16:55:05 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@25567581
2020-03-20 16:55:06 -STAET TaskExecutorConfig
2020-03-20 16:55:06 -Initializing ExecutorService
2020-03-20 16:55:06 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 16:55:06 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 16:55:06 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 16:55:07 -Initializing ExecutorService 'taskScheduler'
2020-03-20 16:55:07 -Starting Quartz Scheduler now
2020-03-20 16:55:07 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 16:55:07 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 16:55:07 -Using a shared selector for servlet write/read
2020-03-20 16:55:07 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 16:55:07 -Started LongEcologicalApplication in 7.393 seconds (JVM running for 8.651)
2020-03-20 16:55:42 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 16:55:42 -Initializing Servlet 'dispatcherServlet'
2020-03-20 16:55:42 -Completed initialization in 15 ms
2020-03-20 16:55:42 -此处进行解密+验签+身份验证
2020-03-20 16:55:42 -解密：{"version_no":"","login_password":"8A6F2805B4515AC12058E79E66539BE9","login_type":"account","sign":"CB22A8339FFA3C82D47D502E18B961FA","device_no":"1.0.9","device_type":"android","sys_user_account":"15019499979"}
2020-03-20 16:55:42 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-20 16:55:42 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-20 16:55:42 -==> Parameters: 15019499979(String)
2020-03-20 16:55:42 -<==      Total: 1
2020-03-20 16:55:42 -Starting without optional epoll library
2020-03-20 16:55:42 -Starting without optional kqueue library
2020-03-20 16:55:43 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?,device_token=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-20 16:55:43 -==> Parameters: android(String), 1.0.9(String), (String), null, 192.168.191.1(String), 20200320(String), 165543(String), 469(Integer)
2020-03-20 16:55:43 -<==    Updates: 1
2020-03-20 16:55:43 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-20 16:55:43 -==> Parameters: 25(String)
2020-03-20 16:55:43 -<==      Total: 1
2020-03-20 16:55:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 16:55:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 16:55:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 16:55:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 16:55:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-20 16:55:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-20 16:55:43 -耗时 : 851
2020-03-20 16:55:43 -此处进行解密+验签+身份验证
2020-03-20 16:55:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 16:55:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 16:55:43 -==> Parameters: 469(String)
2020-03-20 16:55:43 -<==      Total: 1
2020-03-20 16:55:43 -耗时 : 20
2020-03-20 16:55:44 -此处进行解密+验签+身份验证
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-20 16:55:44 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-20 16:55:44 -==> Parameters: 469(String)
2020-03-20 16:55:44 -此处进行解密+验签+身份验证
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:44 -<==      Total: 2
2020-03-20 16:55:44 -耗时 : 23
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:44 -此处进行解密+验签+身份验证
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:44 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-20 16:55:44 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-20 16:55:44 -==> Parameters: 
2020-03-20 16:55:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 16:55:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 16:55:44 -==> Parameters: 469(String)
2020-03-20 16:55:44 -<==      Total: 3
2020-03-20 16:55:44 -耗时 : 22
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -耗时 : 27
2020-03-20 16:55:44 -此处进行解密+验签+身份验证
2020-03-20 16:55:44 -此处进行解密+验签+身份验证
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:44 -解密：
2020-03-20 16:55:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 16:55:44 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 16:55:44 -==> Parameters: 01(String), 01(String)
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 16:55:44 -<==      Total: 4
2020-03-20 16:55:44 -耗时 : 27
2020-03-20 16:55:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:55:44 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:44 -此处进行解密+验签+身份验证
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 16:55:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:55:44 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 16:55:44 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 16:55:44 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 16:55:44 -==> Parameters: 
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 16:55:44 -==> Parameters: 
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:55:44 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 16:55:44 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -耗时 : 157
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 16:55:44 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 16:55:44 -<==    Updates: 1
2020-03-20 16:55:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 16:55:44 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 16:55:44 -<==      Total: 1
2020-03-20 16:55:44 -耗时 : 254
2020-03-20 16:55:46 -此处进行解密+验签+身份验证
2020-03-20 16:55:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 16:55:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 16:55:46 -==> Parameters: 469(String)
2020-03-20 16:55:47 -此处进行解密+验签+身份验证
2020-03-20 16:55:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-20 16:55:47 -<==      Total: 82
2020-03-20 16:55:47 -耗时 : 81
2020-03-20 16:55:47 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-20 16:55:47 -==> Parameters: 469(String), 469(String)
2020-03-20 16:55:47 -<==      Total: 7
2020-03-20 16:55:47 -耗时 : 268
2020-03-20 16:55:51 -此处进行解密+验签+身份验证
2020-03-20 16:55:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 16:55:51 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 16:55:51 -==> Parameters: 469(String)
2020-03-20 16:55:51 -<==      Total: 5
2020-03-20 16:55:51 -耗时 : 39
2020-03-20 16:55:53 -此处进行解密+验签+身份验证
2020-03-20 16:55:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:53 -此处进行解密+验签+身份验证
2020-03-20 16:55:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 16:55:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 16:55:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-20 16:55:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-20 16:55:53 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-20 16:55:53 -==> Parameters: 469(String)
2020-03-20 16:55:53 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-20 16:55:53 -==> Parameters: 469(String), EPOS20200318046(String)
2020-03-20 16:55:53 -<==      Total: 3
2020-03-20 16:55:53 -耗时 : 29
2020-03-20 16:55:53 -<==      Total: 1
2020-03-20 16:55:53 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-20 16:55:53 -==> Parameters: 
2020-03-20 16:55:53 -<==      Total: 101
2020-03-20 16:55:53 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-20 16:55:53 -==> Parameters: EPOS20200318046(String)
2020-03-20 16:55:53 -<==      Total: 0
2020-03-20 16:55:53 -耗时 : 62
2020-03-20 17:05:33 -此处进行解密+验签+身份验证
2020-03-20 17:05:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:33 -此处进行解密+验签+身份验证
2020-03-20 17:05:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 17:05:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:33 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 17:05:33 -==> Parameters: 469(String)
2020-03-20 17:05:33 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 17:05:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 17:05:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -耗时 : 23
2020-03-20 17:05:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 17:05:33 -==> Parameters: 469(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 17:05:33 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 17:05:33 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 17:05:33 -<==    Updates: 1
2020-03-20 17:05:33 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 17:05:33 -==> Parameters: 469(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 17:05:33 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 17:05:33 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 17:05:33 -<==    Updates: 1
2020-03-20 17:05:33 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 17:05:33 -==> Parameters: 
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 17:05:33 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 17:05:33 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 17:05:33 -<==    Updates: 1
2020-03-20 17:05:33 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 17:05:33 -==> Parameters: 469(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 17:05:33 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 17:05:33 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 17:05:33 -<==    Updates: 1
2020-03-20 17:05:33 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 17:05:33 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 17:05:33 -<==      Total: 1
2020-03-20 17:05:33 -耗时 : 211
2020-03-20 17:05:34 -此处进行解密+验签+身份验证
2020-03-20 17:05:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:34 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-20 17:05:34 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-20 17:05:34 -==> Parameters: 1(String), 469(String), applyRateFlag(String)
2020-03-20 17:05:34 -<==    Updates: 1
2020-03-20 17:05:34 -耗时 : 31
2020-03-20 17:05:34 -此处进行解密+验签+身份验证
2020-03-20 17:05:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:34 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 17:05:34 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 17:05:34 -==> Parameters: 469(String), 469(String)
2020-03-20 17:05:34 -<==      Total: 0
2020-03-20 17:05:34 -耗时 : 40
2020-03-20 17:05:34 -此处进行解密+验签+身份验证
2020-03-20 17:05:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:34 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-20 17:05:34 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 17:05:34 -==> Parameters: 469(String), 469(String)
2020-03-20 17:05:34 -<==      Total: 90
2020-03-20 17:05:34 -耗时 : 80
2020-03-20 17:05:36 -此处进行解密+验签+身份验证
2020-03-20 17:05:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:36 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 17:05:36 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 17:05:36 -==> Parameters: 469(String), 469(String)
2020-03-20 17:05:36 -<==      Total: 5
2020-03-20 17:05:36 -耗时 : 30
2020-03-20 17:05:39 -此处进行解密+验签+身份验证
2020-03-20 17:05:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:05:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:05:39 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 17:05:39 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,cacheKey:zfpay_sys_param_rate_list_1
2020-03-20 17:05:39 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,has cacheKey:zfpay_sys_param_rate_list_1 , return
2020-03-20 17:05:39 -耗时 : 8
2020-03-20 17:06:01 -此处进行解密+验签+身份验证
2020-03-20 17:06:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:06:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:06:01 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 17:06:01 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,cacheKey:zfpay_sys_param_rate_list_1
2020-03-20 17:06:01 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,has cacheKey:zfpay_sys_param_rate_list_1 , return
2020-03-20 17:06:01 -耗时 : 9
2020-03-20 17:08:56 -Starting LongEcologicalApplication on PC-201905161910 with PID 6608 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 17:08:56 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 17:08:56 -No active profile set, falling back to default profiles: default
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:57 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:08:58 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 17:08:58 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 17:08:58 -Finished Spring Data repository scanning in 103ms. Found 0 repository interfaces.
2020-03-20 17:08:58 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 17:08:58 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 17:08:58 -Finished Spring Data repository scanning in 59ms. Found 0 repository interfaces.
2020-03-20 17:08:58 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$76736fdb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 17:08:59 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$70f7547b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 17:08:59 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 17:08:59 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 17:08:59 -Starting service [Tomcat]
2020-03-20 17:08:59 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 17:08:59 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 17:09:00 -Initializing Spring embedded WebApplicationContext
2020-03-20 17:09:00 -Root WebApplicationContext: initialization completed in 3507 ms
2020-03-20 17:09:00 -Filter xssFilter was not registered (disabled)
2020-03-20 17:09:00 -HikariPool-1 - Starting...
2020-03-20 17:09:00 -HikariPool-1 - Start completed.
2020-03-20 17:09:01 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 17:09:01 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 17:09:01 -HHH000206: hibernate.properties not found
2020-03-20 17:09:01 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 17:09:01 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 17:09:01 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 17:09:02 -Using default implementation for ThreadExecutor
2020-03-20 17:09:02 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 17:09:02 -Quartz Scheduler v.2.3.0 created.
2020-03-20 17:09:02 -RAMJobStore initialized.
2020-03-20 17:09:02 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 17:09:02 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 17:09:02 -Quartz scheduler version: 2.3.0
2020-03-20 17:09:02 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2a5abd3c
2020-03-20 17:09:03 -STAET TaskExecutorConfig
2020-03-20 17:09:03 -Initializing ExecutorService
2020-03-20 17:09:03 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 17:09:04 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 17:09:04 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 17:09:04 -Initializing ExecutorService 'taskScheduler'
2020-03-20 17:09:04 -Starting Quartz Scheduler now
2020-03-20 17:09:04 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 17:09:04 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 17:09:04 -Using a shared selector for servlet write/read
2020-03-20 17:09:04 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 17:09:04 -Started LongEcologicalApplication in 9.065 seconds (JVM running for 10.72)
2020-03-20 17:09:13 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 17:09:13 -Initializing Servlet 'dispatcherServlet'
2020-03-20 17:09:13 -Completed initialization in 17 ms
2020-03-20 17:09:14 -此处进行解密+验签+身份验证
2020-03-20 17:09:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:09:14 -Starting without optional epoll library
2020-03-20 17:09:14 -Starting without optional kqueue library
2020-03-20 17:09:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:09:15 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 17:09:15 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,cacheKey:zfpay_sys_param_rate_list_1
2020-03-20 17:09:15 -List com.example.longecological.service.common.impl.SysParamRateServiceImpl.getRateListByType(String) enable cache service,has cacheKey:zfpay_sys_param_rate_list_1 , return
2020-03-20 17:09:15 -耗时 : 31
2020-03-20 17:10:14 -Starting LongEcologicalApplication on PC-201905161910 with PID 14796 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-20 17:10:14 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-20 17:10:14 -No active profile set, falling back to default profiles: default
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-20 17:10:15 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 17:10:15 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 17:10:16 -Finished Spring Data repository scanning in 91ms. Found 0 repository interfaces.
2020-03-20 17:10:16 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-20 17:10:16 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-20 17:10:16 -Finished Spring Data repository scanning in 47ms. Found 0 repository interfaces.
2020-03-20 17:10:16 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$2d0fa7e1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 17:10:16 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$27938c81] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-20 17:10:17 -Tomcat initialized with port(s): 8080 (http)
2020-03-20 17:10:17 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-20 17:10:17 -Starting service [Tomcat]
2020-03-20 17:10:17 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-20 17:10:17 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-20 17:10:17 -Initializing Spring embedded WebApplicationContext
2020-03-20 17:10:17 -Root WebApplicationContext: initialization completed in 2519 ms
2020-03-20 17:10:17 -Filter xssFilter was not registered (disabled)
2020-03-20 17:10:17 -HikariPool-1 - Starting...
2020-03-20 17:10:17 -HikariPool-1 - Start completed.
2020-03-20 17:10:18 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-20 17:10:18 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-20 17:10:18 -HHH000206: hibernate.properties not found
2020-03-20 17:10:18 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-20 17:10:18 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-20 17:10:18 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-20 17:10:19 -Using default implementation for ThreadExecutor
2020-03-20 17:10:19 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-20 17:10:19 -Quartz Scheduler v.2.3.0 created.
2020-03-20 17:10:19 -RAMJobStore initialized.
2020-03-20 17:10:19 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-20 17:10:19 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-20 17:10:19 -Quartz scheduler version: 2.3.0
2020-03-20 17:10:19 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@2edb2f8b
2020-03-20 17:10:19 -STAET TaskExecutorConfig
2020-03-20 17:10:19 -Initializing ExecutorService
2020-03-20 17:10:19 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-20 17:10:20 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-20 17:10:20 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-20 17:10:20 -Initializing ExecutorService 'taskScheduler'
2020-03-20 17:10:20 -Starting Quartz Scheduler now
2020-03-20 17:10:20 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-20 17:10:20 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-20 17:10:20 -Using a shared selector for servlet write/read
2020-03-20 17:10:20 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-20 17:10:20 -Started LongEcologicalApplication in 6.907 seconds (JVM running for 8.481)
2020-03-20 17:11:21 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-20 17:11:21 -Initializing Servlet 'dispatcherServlet'
2020-03-20 17:11:21 -Completed initialization in 20 ms
2020-03-20 17:11:21 -此处进行解密+验签+身份验证
2020-03-20 17:11:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:11:21 -Starting without optional epoll library
2020-03-20 17:11:21 -Starting without optional kqueue library
2020-03-20 17:11:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:11:22 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 17:11:22 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-20 17:11:22 -==> Parameters: 1(String)
2020-03-20 17:11:22 -<==      Total: 10
2020-03-20 17:11:22 -耗时 : 56
2020-03-20 17:17:41 -此处进行解密+验签+身份验证
2020-03-20 17:17:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:17:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:17:41 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 17:17:41 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-20 17:17:41 -==> Parameters: 1(String)
2020-03-20 17:17:41 -<==      Total: 10
2020-03-20 17:17:41 -耗时 : 14
2020-03-20 17:17:51 -此处进行解密+验签+身份验证
2020-03-20 17:17:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 17:17:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 17:17:51 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 17:17:51 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-20 17:17:51 -==> Parameters: 1(String)
2020-03-20 17:17:51 -<==      Total: 10
2020-03-20 17:17:51 -耗时 : 15
2020-03-20 18:20:44 -此处进行解密+验签+身份验证
2020-03-20 18:20:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:44 -解密异常：{sign=21249687C81A83A3C01B74D065CDC649, token=469|4PJOSLKDDN5DBTLME0L5SUC581YORWA5}
2020-03-20 18:20:44 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 18:20:44 -耗时 : 0
2020-03-20 18:20:44 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-20 18:20:44 -Reconnected to 120.25.164.176:10379
2020-03-20 18:20:48 -此处进行解密+验签+身份验证
2020-03-20 18:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:48 -此处进行解密+验签+身份验证
2020-03-20 18:20:48 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:48 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:20:48 -==> Parameters: 469(String)
2020-03-20 18:20:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -耗时 : 26
2020-03-20 18:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:20:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:20:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:20:48 -==> Parameters: 469(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:20:48 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:20:48 -==> Parameters: 0(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:20:48 -<==    Updates: 1
2020-03-20 18:20:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:20:48 -==> Parameters: 469(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:20:48 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:20:48 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:20:48 -<==    Updates: 1
2020-03-20 18:20:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:20:48 -==> Parameters: 
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:20:48 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:20:48 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:20:48 -<==    Updates: 1
2020-03-20 18:20:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:20:48 -==> Parameters: 469(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:20:48 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:20:48 -<==      Total: 1
2020-03-20 18:20:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:20:48 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:20:49 -<==    Updates: 1
2020-03-20 18:20:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:20:49 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:20:49 -<==      Total: 1
2020-03-20 18:20:49 -耗时 : 191
2020-03-20 18:20:51 -此处进行解密+验签+身份验证
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:51 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-20 18:20:51 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-20 18:20:51 -==> Parameters: 469(String)
2020-03-20 18:20:51 -<==      Total: 1
2020-03-20 18:20:51 -耗时 : 16
2020-03-20 18:20:51 -此处进行解密+验签+身份验证
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:51 -此处进行解密+验签+身份验证
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:51 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-20 18:20:51 -此处进行解密+验签+身份验证
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:51 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-20 18:20:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:51 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-20 18:20:51 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-20 18:20:51 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:20:51 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-20 18:20:51 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:20:51 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-20 18:20:51 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:20:51 -<==      Total: 0
2020-03-20 18:20:51 -耗时 : 30
2020-03-20 18:20:51 -<==      Total: 1
2020-03-20 18:20:51 -耗时 : 27
2020-03-20 18:20:51 -<==      Total: 1
2020-03-20 18:20:51 -耗时 : 59
2020-03-20 18:20:55 -此处进行解密+验签+身份验证
2020-03-20 18:20:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:55 -此处进行解密+验签+身份验证
2020-03-20 18:20:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:20:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:20:55 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-20 18:20:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-20 18:20:55 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-20 18:20:55 -==> Parameters: 469(String)
2020-03-20 18:20:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:20:55 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:20:55 -<==      Total: 1
2020-03-20 18:20:55 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-20 18:20:55 -==> Parameters: 469(String), 469(String)
2020-03-20 18:20:55 -<==      Total: 1
2020-03-20 18:20:55 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-20 18:20:55 -==> Parameters: 469(String)
2020-03-20 18:20:55 -<==      Total: 0
2020-03-20 18:20:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:20:55 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:20:55 -<==      Total: 1
2020-03-20 18:20:55 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-20 18:20:55 -==> Parameters: 469(String)
2020-03-20 18:20:55 -<==      Total: 0
2020-03-20 18:20:55 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:20:55 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:20:55 -<==      Total: 1
2020-03-20 18:20:55 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-20 18:20:55 -==> Parameters: 469(String)
2020-03-20 18:20:55 -<==      Total: 0
2020-03-20 18:20:55 -耗时 : 104
2020-03-20 18:20:56 -<==      Total: 1
2020-03-20 18:20:56 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-20 18:20:56 -==> Parameters: 469(String), 469(String)
2020-03-20 18:20:56 -<==      Total: 1
2020-03-20 18:20:56 -耗时 : 222
2020-03-20 18:21:01 -此处进行解密+验签+身份验证
2020-03-20 18:21:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:01 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitEposList
2020-03-20 18:21:01 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-20 18:21:01 -==> Parameters: 469(String), 20200301(String), 20200331(String)
2020-03-20 18:21:02 -<==      Total: 0
2020-03-20 18:21:02 -耗时 : 430
2020-03-20 18:21:03 -此处进行解密+验签+身份验证
2020-03-20 18:21:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:03 -此处进行解密+验签+身份验证
2020-03-20 18:21:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:21:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:21:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:21:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:21:04 -==> Parameters: 469(String)
2020-03-20 18:21:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -耗时 : 11
2020-03-20 18:21:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:04 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:04 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:21:04 -<==    Updates: 1
2020-03-20 18:21:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:21:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:04 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:04 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:21:04 -<==    Updates: 1
2020-03-20 18:21:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:21:04 -==> Parameters: 
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:04 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:04 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:21:04 -<==    Updates: 1
2020-03-20 18:21:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:04 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:04 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:21:04 -<==    Updates: 1
2020-03-20 18:21:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:04 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:21:04 -<==      Total: 1
2020-03-20 18:21:04 -耗时 : 180
2020-03-20 18:21:05 -此处进行解密+验签+身份验证
2020-03-20 18:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:21:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:21:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:05 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:05 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:05 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:21:05 -<==    Updates: 1
2020-03-20 18:21:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:21:05 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:05 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:05 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:21:05 -<==    Updates: 1
2020-03-20 18:21:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:21:05 -==> Parameters: 
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:05 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:05 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:21:05 -<==    Updates: 1
2020-03-20 18:21:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:05 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:05 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:05 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:21:05 -<==    Updates: 1
2020-03-20 18:21:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:05 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:21:05 -<==      Total: 1
2020-03-20 18:21:05 -耗时 : 167
2020-03-20 18:21:16 -此处进行解密+验签+身份验证
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:16 -此处进行解密+验签+身份验证
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:16 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-20 18:21:16 -此处进行解密+验签+身份验证
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:16 -此处进行解密+验签+身份验证
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-20 18:21:16 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-20 18:21:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-20 18:21:16 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-20 18:21:16 -==> Parameters: 469(String), 09(String)
2020-03-20 18:21:16 -请求地址 : http://192.168.191.1:8080/api/user/cardInfo/getUserValidCardList
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-20 18:21:16 -==>  Preparing: SELECT id AS card_id, user_id, account, account_name, bank_code, bank_name, card_photo, status, is_default, remark FROM t_user_card_info WHERE user_id=? AND status=? order by is_default desc,id desc 
2020-03-20 18:21:16 -==> Parameters: 469(String), 09(String)
2020-03-20 18:21:16 -<==      Total: 1
2020-03-20 18:21:16 -耗时 : 21
2020-03-20 18:21:16 -请求地址 : http://192.168.191.1:8080/api/user/cashRecord/getCashInfo
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashSingleFeet
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-20 18:21:16 -<==      Total: 1
2020-03-20 18:21:16 -耗时 : 22
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashSingleFeet , return
2020-03-20 18:21:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:21:16 -==> Parameters: 469(String)
2020-03-20 18:21:16 -<==      Total: 1
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashMinNum
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashMinNum , return
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_cashFeetRate
2020-03-20 18:21:16 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_cashFeetRate , return
2020-03-20 18:21:16 -耗时 : 136
2020-03-20 18:21:16 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:21:16 -==> Parameters: 469(String)
2020-03-20 18:21:16 -<==      Total: 1
2020-03-20 18:21:16 -耗时 : 123
2020-03-20 18:21:18 -此处进行解密+验签+身份验证
2020-03-20 18:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:18 -此处进行解密+验签+身份验证
2020-03-20 18:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:21:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:21:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:21:18 -==> Parameters: 469(String)
2020-03-20 18:21:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -耗时 : 12
2020-03-20 18:21:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:18 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:18 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:18 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:21:18 -<==    Updates: 1
2020-03-20 18:21:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:21:18 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:18 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:21:18 -<==    Updates: 1
2020-03-20 18:21:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:21:18 -==> Parameters: 
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:18 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:18 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:21:18 -<==    Updates: 1
2020-03-20 18:21:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:18 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:18 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:21:18 -<==      Total: 1
2020-03-20 18:21:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:18 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:21:19 -<==    Updates: 1
2020-03-20 18:21:19 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:19 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:21:19 -<==      Total: 1
2020-03-20 18:21:19 -耗时 : 251
2020-03-20 18:21:22 -此处进行解密+验签+身份验证
2020-03-20 18:21:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:22 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitTraditionalPosList
2020-03-20 18:21:22 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and cre_date between ? and ? and pos_type is null ORDER BY id desc limit 0,10 
2020-03-20 18:21:22 -==> Parameters: 469(String), 20200301(String), 20200331(String)
2020-03-20 18:21:22 -<==      Total: 0
2020-03-20 18:21:22 -耗时 : 427
2020-03-20 18:21:24 -此处进行解密+验签+身份验证
2020-03-20 18:21:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:24 -此处进行解密+验签+身份验证
2020-03-20 18:21:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:21:24 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:21:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:21:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:21:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:21:24 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:21:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:24 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:24 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:21:24 -==> Parameters: 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:24 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -耗时 : 22
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:24 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:21:24 -<==    Updates: 1
2020-03-20 18:21:24 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:21:24 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:24 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:24 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:21:24 -<==    Updates: 1
2020-03-20 18:21:24 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:21:24 -==> Parameters: 
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:24 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:24 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:21:24 -<==    Updates: 1
2020-03-20 18:21:24 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:21:24 -==> Parameters: 469(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:24 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:21:24 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:21:24 -<==    Updates: 1
2020-03-20 18:21:24 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:21:24 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:21:24 -<==      Total: 1
2020-03-20 18:21:24 -耗时 : 165
2020-03-20 18:22:04 -此处进行解密+验签+身份验证
2020-03-20 18:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:22:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:22:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:22:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:22:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:04 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:04 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:22:04 -<==    Updates: 1
2020-03-20 18:22:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:22:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:04 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:04 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:22:04 -<==    Updates: 1
2020-03-20 18:22:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:22:04 -==> Parameters: 
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:04 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:04 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:22:04 -<==    Updates: 1
2020-03-20 18:22:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:22:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:04 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:04 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:22:04 -<==    Updates: 1
2020-03-20 18:22:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:04 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:22:04 -<==      Total: 1
2020-03-20 18:22:04 -耗时 : 142
2020-03-20 18:22:07 -此处进行解密+验签+身份验证
2020-03-20 18:22:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:22:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:22:07 -请求地址 : http://192.168.191.1:8080/api/sys/mpos/getMposList
2020-03-20 18:22:07 -==>  Preparing: SELECT cast(t.id as char) as mpos_id, t1.sn, t1.name, t1.tel FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' order by t.id desc limit 0,10 
2020-03-20 18:22:07 -==> Parameters: 469(String)
2020-03-20 18:22:07 -<==      Total: 10
2020-03-20 18:22:07 -耗时 : 38
2020-03-20 18:22:09 -此处进行解密+验签+身份验证
2020-03-20 18:22:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:22:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:22:09 -此处进行解密+验签+身份验证
2020-03-20 18:22:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:22:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:22:09 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:22:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:22:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:22:09 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:22:09 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:22:09 -==> Parameters: 469(String)
2020-03-20 18:22:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:22:09 -==> Parameters: 469(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -耗时 : 16
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:09 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:09 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:22:09 -<==    Updates: 1
2020-03-20 18:22:09 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:22:09 -==> Parameters: 469(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:09 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:09 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:22:09 -<==    Updates: 1
2020-03-20 18:22:09 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:22:09 -==> Parameters: 
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:09 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:09 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:22:09 -<==    Updates: 1
2020-03-20 18:22:09 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:22:09 -==> Parameters: 469(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:09 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:22:09 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:22:09 -<==    Updates: 1
2020-03-20 18:22:09 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:22:09 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:22:09 -<==      Total: 1
2020-03-20 18:22:09 -耗时 : 240
2020-03-20 18:23:57 -此处进行解密+验签+身份验证
2020-03-20 18:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:23:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:23:57 -此处进行解密+验签+身份验证
2020-03-20 18:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:23:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:23:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:23:57 -==> Parameters: 469(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:23:57 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:23:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:23:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:23:57 -==> Parameters: 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -耗时 : 12
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:23:57 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:23:57 -<==    Updates: 1
2020-03-20 18:23:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:23:57 -==> Parameters: 469(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:23:57 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:23:57 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:23:57 -<==    Updates: 1
2020-03-20 18:23:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:23:57 -==> Parameters: 
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:23:57 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:23:57 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:23:57 -<==    Updates: 1
2020-03-20 18:23:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:23:57 -==> Parameters: 469(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:23:57 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:23:57 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:23:57 -<==    Updates: 1
2020-03-20 18:23:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:23:57 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:23:57 -<==      Total: 1
2020-03-20 18:23:57 -耗时 : 250
2020-03-20 18:24:07 -此处进行解密+验签+身份验证
2020-03-20 18:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-20 18:24:07 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@20391e1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:24:07 -此处进行解密+验签+身份验证
2020-03-20 18:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:07 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-20 18:24:07 -==> Parameters: 469(String)
2020-03-20 18:24:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-20 18:24:07 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-20 18:24:07 -==> Parameters: 469(String), 469(String)
2020-03-20 18:24:07 -<==      Total: 82
2020-03-20 18:24:07 -耗时 : 72
2020-03-20 18:24:08 -<==      Total: 7
2020-03-20 18:24:08 -耗时 : 270
2020-03-20 18:24:53 -此处进行解密+验签+身份验证
2020-03-20 18:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 18:24:53 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-20 18:24:53 -==> Parameters: 469(String)
2020-03-20 18:24:53 -<==      Total: 0
2020-03-20 18:24:53 -耗时 : 35
2020-03-20 18:24:54 -此处进行解密+验签+身份验证
2020-03-20 18:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 18:24:54 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 18:24:54 -==> Parameters: 469(String)
2020-03-20 18:24:54 -<==      Total: 5
2020-03-20 18:24:54 -耗时 : 35
2020-03-20 18:24:55 -此处进行解密+验签+身份验证
2020-03-20 18:24:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTrafficCardAllocationList
2020-03-20 18:24:55 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7a39547f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:24:55 -==>  Preparing: SELECT card_no FROM t_user_traffic_card_info WHERE user_id = ? AND state_status = '1' AND del = '0' order by card_no 
2020-03-20 18:24:55 -==> Parameters: 469(String)
2020-03-20 18:24:55 -<==      Total: 0
2020-03-20 18:24:55 -耗时 : 26
2020-03-20 18:24:56 -此处进行解密+验签+身份验证
2020-03-20 18:24:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 18:24:56 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 18:24:56 -==> Parameters: 469(String)
2020-03-20 18:24:56 -<==      Total: 5
2020-03-20 18:24:56 -耗时 : 36
2020-03-20 18:24:57 -此处进行解密+验签+身份验证
2020-03-20 18:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:24:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:24:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-20 18:24:57 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-20 18:24:57 -==> Parameters: 469(String)
2020-03-20 18:24:57 -<==      Total: 5
2020-03-20 18:24:57 -耗时 : 35
2020-03-20 18:25:02 -此处进行解密+验签+身份验证
2020-03-20 18:25:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:02 -此处进行解密+验签+身份验证
2020-03-20 18:25:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-20 18:25:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:02 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-20 18:25:02 -==> Parameters: 469(String), EPOS20200318049(String)
2020-03-20 18:25:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-20 18:25:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@739746a6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:25:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1a28fe8d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:25:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@65784e2f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:25:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2c138650 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:25:02 -<==      Total: 1
2020-03-20 18:25:02 -==>  Preparing: select FORMAT(rate,3) as rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-20 18:25:02 -==> Parameters: 
2020-03-20 18:25:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@32ce490f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:25:02 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6f4f154d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:25:02 -<==      Total: 101
2020-03-20 18:25:02 -==>  Preparing: select policy_name from t_sys_pos_policy_info where sn=? and module_type=3 and isuse=1 
2020-03-20 18:25:02 -==> Parameters: EPOS20200318049(String)
2020-03-20 18:25:02 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-20 18:25:02 -==> Parameters: 469(String)
2020-03-20 18:25:02 -<==      Total: 0
2020-03-20 18:25:02 -耗时 : 75
2020-03-20 18:25:02 -<==      Total: 3
2020-03-20 18:25:02 -耗时 : 60
2020-03-20 18:25:40 -此处进行解密+验签+身份验证
2020-03-20 18:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:40 -此处进行解密+验签+身份验证
2020-03-20 18:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:40 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:25:40 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:25:40 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:25:40 -==> Parameters: 469(String)
2020-03-20 18:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:25:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -耗时 : 21
2020-03-20 18:25:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:25:40 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:25:40 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:25:40 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:25:40 -<==    Updates: 1
2020-03-20 18:25:40 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:25:40 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:25:40 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:25:40 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:25:40 -<==    Updates: 1
2020-03-20 18:25:40 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:25:40 -==> Parameters: 
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:25:40 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:25:40 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:25:40 -<==    Updates: 1
2020-03-20 18:25:40 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:25:40 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:25:40 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:25:40 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:25:40 -<==    Updates: 1
2020-03-20 18:25:40 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:25:40 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:25:40 -<==      Total: 1
2020-03-20 18:25:40 -耗时 : 230
2020-03-20 18:25:41 -此处进行解密+验签+身份验证
2020-03-20 18:25:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-20 18:25:41 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-20 18:25:41 -==> Parameters: 1(String), 469(String), applyRateFlag(String)
2020-03-20 18:25:41 -<==    Updates: 1
2020-03-20 18:25:41 -耗时 : 25
2020-03-20 18:25:41 -此处进行解密+验签+身份验证
2020-03-20 18:25:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:41 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 18:25:41 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:25:41 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:41 -<==      Total: 0
2020-03-20 18:25:41 -耗时 : 27
2020-03-20 18:25:41 -此处进行解密+验签+身份验证
2020-03-20 18:25:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:41 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-20 18:25:41 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:25:41 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:41 -<==      Total: 90
2020-03-20 18:25:41 -耗时 : 78
2020-03-20 18:25:44 -此处进行解密+验签+身份验证
2020-03-20 18:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:44 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 18:25:44 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:25:44 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:44 -<==      Total: 0
2020-03-20 18:25:44 -耗时 : 23
2020-03-20 18:25:45 -此处进行解密+验签+身份验证
2020-03-20 18:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:45 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 18:25:45 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:25:45 -==> Parameters: 469(String), 469(String)
2020-03-20 18:25:45 -<==      Total: 5
2020-03-20 18:25:45 -耗时 : 39
2020-03-20 18:25:47 -此处进行解密+验签+身份验证
2020-03-20 18:25:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:25:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:25:47 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 18:25:47 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-20 18:25:47 -==> Parameters: 1(String)
2020-03-20 18:25:47 -<==      Total: 10
2020-03-20 18:25:47 -耗时 : 22
2020-03-20 18:26:22 -此处进行解密+验签+身份验证
2020-03-20 18:26:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:22 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 18:26:22 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:26:22 -==> Parameters: 469(String), 469(String)
2020-03-20 18:26:22 -<==      Total: 0
2020-03-20 18:26:22 -耗时 : 33
2020-03-20 18:26:24 -此处进行解密+验签+身份验证
2020-03-20 18:26:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:24 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-20 18:26:24 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@169eab76 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-20 18:26:24 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:26:24 -==> Parameters: 469(String), 469(String)
2020-03-20 18:26:24 -<==      Total: 90
2020-03-20 18:26:24 -耗时 : 30
2020-03-20 18:26:33 -此处进行解密+验签+身份验证
2020-03-20 18:26:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:33 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposRecordList
2020-03-20 18:26:33 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_mpos_record_info where user_id = ? order by id desc limit 0,10 
2020-03-20 18:26:33 -==> Parameters: 469(String)
2020-03-20 18:26:33 -<==      Total: 5
2020-03-20 18:26:33 -耗时 : 22
2020-03-20 18:26:34 -此处进行解密+验签+身份验证
2020-03-20 18:26:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:34 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-20 18:26:34 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-20 18:26:34 -==> Parameters: 469(String)
2020-03-20 18:26:34 -<==      Total: 0
2020-03-20 18:26:34 -耗时 : 16
2020-03-20 18:26:37 -此处进行解密+验签+身份验证
2020-03-20 18:26:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:37 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-20 18:26:37 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type='epos' order by id desc limit 0,10 
2020-03-20 18:26:37 -==> Parameters: 469(String)
2020-03-20 18:26:37 -<==      Total: 0
2020-03-20 18:26:37 -耗时 : 21
2020-03-20 18:26:42 -此处进行解密+验签+身份验证
2020-03-20 18:26:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:42 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposRecordList
2020-03-20 18:26:42 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_mpos_record_info where user_id = ? AND id < ? order by id desc limit 0,10 
2020-03-20 18:26:42 -==> Parameters: 469(String), 483(String)
2020-03-20 18:26:42 -<==      Total: 0
2020-03-20 18:26:42 -耗时 : 21
2020-03-20 18:26:49 -此处进行解密+验签+身份验证
2020-03-20 18:26:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:26:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:26:49 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getCreditCardRateList
2020-03-20 18:26:49 -==>  Preparing: select FORMAT(rate,3) as rate from t_sys_param_rate where type=? 
2020-03-20 18:26:49 -==> Parameters: 1(String)
2020-03-20 18:26:49 -<==      Total: 10
2020-03-20 18:26:49 -耗时 : 27
2020-03-20 18:27:04 -此处进行解密+验签+身份验证
2020-03-20 18:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:04 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/addApplyRateMpos
2020-03-20 18:27:04 -==>  Preparing: insert into t_user_apply_cardrate_mpos_record_info(user_id, sn, credit_card_rate_old, credit_card_rate_new, card_settle_price, cre_date, cre_time) select ?, t.sn, t1.credit_card_rate, ?, t.card_settle_price, ?, ? FROM t_user_mpos_info t LEFT JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and find_in_set(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) 
2020-03-20 18:27:04 -==> Parameters: 469(String), 0.560(String), 20200320(String), 182704(String), 469(String), M351846181600(String), 469(String)
2020-03-20 18:27:04 -<==    Updates: 1
2020-03-20 18:27:04 -耗时 : 112
2020-03-20 18:27:05 -此处进行解密+验签+身份验证
2020-03-20 18:27:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:05 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-20 18:27:05 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:27:05 -==> Parameters: 469(String), 469(String)
2020-03-20 18:27:05 -此处进行解密+验签+身份验证
2020-03-20 18:27:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:05 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-20 18:27:05 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-20 18:27:05 -==> Parameters: 469(String), 469(String)
2020-03-20 18:27:05 -<==      Total: 0
2020-03-20 18:27:05 -耗时 : 12
2020-03-20 18:27:05 -<==      Total: 89
2020-03-20 18:27:05 -耗时 : 79
2020-03-20 18:27:07 -此处进行解密+验签+身份验证
2020-03-20 18:27:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:07 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposRecordList
2020-03-20 18:27:07 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_mpos_record_info where user_id = ? order by id desc limit 0,10 
2020-03-20 18:27:07 -==> Parameters: 469(String)
2020-03-20 18:27:07 -<==      Total: 6
2020-03-20 18:27:07 -耗时 : 23
2020-03-20 18:27:08 -此处进行解密+验签+身份验证
2020-03-20 18:27:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:08 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-20 18:27:08 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-20 18:27:08 -==> Parameters: 469(String)
2020-03-20 18:27:08 -<==      Total: 0
2020-03-20 18:27:08 -耗时 : 12
2020-03-20 18:27:10 -此处进行解密+验签+身份验证
2020-03-20 18:27:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:10 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-20 18:27:10 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type='epos' order by id desc limit 0,10 
2020-03-20 18:27:10 -==> Parameters: 469(String)
2020-03-20 18:27:10 -<==      Total: 0
2020-03-20 18:27:10 -耗时 : 20
2020-03-20 18:27:46 -此处进行解密+验签+身份验证
2020-03-20 18:27:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:46 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposRecordList
2020-03-20 18:27:46 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_mpos_record_info where user_id = ? order by id desc limit 0,10 
2020-03-20 18:27:46 -==> Parameters: 469(String)
2020-03-20 18:27:46 -<==      Total: 6
2020-03-20 18:27:46 -耗时 : 24
2020-03-20 18:27:46 -此处进行解密+验签+身份验证
2020-03-20 18:27:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:46 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-20 18:27:46 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-20 18:27:46 -==> Parameters: 469(String)
2020-03-20 18:27:46 -<==      Total: 0
2020-03-20 18:27:46 -耗时 : 15
2020-03-20 18:27:47 -此处进行解密+验签+身份验证
2020-03-20 18:27:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:47 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-20 18:27:47 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type='epos' order by id desc limit 0,10 
2020-03-20 18:27:47 -==> Parameters: 469(String)
2020-03-20 18:27:47 -<==      Total: 0
2020-03-20 18:27:47 -耗时 : 22
2020-03-20 18:27:50 -此处进行解密+验签+身份验证
2020-03-20 18:27:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:50 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:27:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:27:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:27:50 -此处进行解密+验签+身份验证
2020-03-20 18:27:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:27:50 -==> Parameters: 469(String), 469(String)
2020-03-20 18:27:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:27:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:27:50 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:27:50 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:27:50 -==> Parameters: 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -耗时 : 12
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:27:50 -==> Parameters: 0(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:27:50 -<==    Updates: 1
2020-03-20 18:27:50 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:27:50 -==> Parameters: 469(String), 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:27:50 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:27:50 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:27:50 -<==    Updates: 1
2020-03-20 18:27:50 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:27:50 -==> Parameters: 
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:27:50 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:27:50 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:27:50 -<==    Updates: 1
2020-03-20 18:27:50 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:27:50 -==> Parameters: 469(String), 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:27:50 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:27:50 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:27:50 -<==    Updates: 1
2020-03-20 18:27:50 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:27:50 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:27:50 -<==      Total: 1
2020-03-20 18:27:50 -耗时 : 243
2020-03-20 18:27:57 -此处进行解密+验签+身份验证
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:57 -此处进行解密+验签+身份验证
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:57 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyMposDetail
2020-03-20 18:27:57 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-20 18:27:57 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:27:57 -<==      Total: 1
2020-03-20 18:27:57 -耗时 : 10
2020-03-20 18:27:57 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyMposDetail
2020-03-20 18:27:57 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-20 18:27:57 -==> Parameters: 469(String), 20200320(String)
2020-03-20 18:27:57 -<==      Total: 0
2020-03-20 18:27:57 -耗时 : 23
2020-03-20 18:27:57 -此处进行解密+验签+身份验证
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:57 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantMposDetail
2020-03-20 18:27:57 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-20 18:27:57 -==> Parameters: 469(String), 20200320(String)
2020-03-20 18:27:57 -<==      Total: 0
2020-03-20 18:27:57 -耗时 : 14
2020-03-20 18:27:57 -此处进行解密+验签+身份验证
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:27:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:27:57 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantMposDetail
2020-03-20 18:27:57 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-20 18:27:57 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:27:57 -<==      Total: 1
2020-03-20 18:27:57 -耗时 : 17
2020-03-20 18:28:02 -此处进行解密+验签+身份验证
2020-03-20 18:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:02 -此处进行解密+验签+身份验证
2020-03-20 18:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:02 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:28:02 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:28:02 -==> Parameters: 469(String)
2020-03-20 18:28:02 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -耗时 : 20
2020-03-20 18:28:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:02 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:02 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:02 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:28:02 -<==    Updates: 1
2020-03-20 18:28:02 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:28:02 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:02 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:02 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:28:02 -<==    Updates: 1
2020-03-20 18:28:02 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:28:02 -==> Parameters: 
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:02 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:02 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:28:02 -<==    Updates: 1
2020-03-20 18:28:02 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:02 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:02 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:02 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:28:02 -<==    Updates: 1
2020-03-20 18:28:02 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:02 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:28:02 -<==      Total: 1
2020-03-20 18:28:02 -耗时 : 241
2020-03-20 18:28:04 -此处进行解密+验签+身份验证
2020-03-20 18:28:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:04 -此处进行解密+验签+身份验证
2020-03-20 18:28:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:04 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyMposDetail
2020-03-20 18:28:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:04 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-20 18:28:04 -==> Parameters: 469(String), 20200320(String)
2020-03-20 18:28:04 -<==      Total: 0
2020-03-20 18:28:04 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyMposDetail
2020-03-20 18:28:04 -耗时 : 21
2020-03-20 18:28:04 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-20 18:28:04 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:28:04 -<==      Total: 1
2020-03-20 18:28:04 -耗时 : 15
2020-03-20 18:28:04 -此处进行解密+验签+身份验证
2020-03-20 18:28:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantMposDetail
2020-03-20 18:28:05 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_everyday where user_id = ? and cre_date = ? 
2020-03-20 18:28:05 -==> Parameters: 469(String), 20200320(String)
2020-03-20 18:28:05 -此处进行解密+验签+身份验证
2020-03-20 18:28:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:05 -<==      Total: 0
2020-03-20 18:28:05 -耗时 : 12
2020-03-20 18:28:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:05 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantMposDetail
2020-03-20 18:28:05 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_mpos_benefit_month where user_id = ? and cre_month = ? 
2020-03-20 18:28:05 -==> Parameters: 469(String), 202003(String)
2020-03-20 18:28:05 -<==      Total: 1
2020-03-20 18:28:05 -耗时 : 15
2020-03-20 18:28:07 -此处进行解密+验签+身份验证
2020-03-20 18:28:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:07 -此处进行解密+验签+身份验证
2020-03-20 18:28:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:28:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:28:07 -==> Parameters: 469(String)
2020-03-20 18:28:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:28:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -耗时 : 9
2020-03-20 18:28:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:28:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:07 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:07 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:07 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:28:07 -<==    Updates: 1
2020-03-20 18:28:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:28:07 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:07 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:07 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:28:07 -<==    Updates: 1
2020-03-20 18:28:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:28:07 -==> Parameters: 
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:07 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:07 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:28:07 -<==    Updates: 1
2020-03-20 18:28:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:07 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:07 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:07 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:28:07 -<==    Updates: 1
2020-03-20 18:28:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:07 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:28:07 -<==      Total: 1
2020-03-20 18:28:07 -耗时 : 231
2020-03-20 18:28:08 -此处进行解密+验签+身份验证
2020-03-20 18:28:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:08 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:28:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:28:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:28:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:08 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:08 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:08 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:28:08 -<==    Updates: 1
2020-03-20 18:28:08 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:28:08 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:08 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:08 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:28:08 -<==    Updates: 1
2020-03-20 18:28:08 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:28:08 -==> Parameters: 
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:08 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:08 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:28:08 -<==    Updates: 1
2020-03-20 18:28:08 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:08 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:08 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:08 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:28:08 -<==    Updates: 1
2020-03-20 18:28:08 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:08 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:28:08 -<==      Total: 1
2020-03-20 18:28:08 -耗时 : 223
2020-03-20 18:28:15 -此处进行解密+验签+身份验证
2020-03-20 18:28:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:15 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitEposList
2020-03-20 18:28:15 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-20 18:28:15 -==> Parameters: 469(String), 20200301(String), 20200331(String)
2020-03-20 18:28:15 -<==      Total: 0
2020-03-20 18:28:15 -耗时 : 437
2020-03-20 18:28:17 -此处进行解密+验签+身份验证
2020-03-20 18:28:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:17 -此处进行解密+验签+身份验证
2020-03-20 18:28:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:18 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:28:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:28:18 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:28:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:28:18 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:28:18 -==> Parameters: 469(String)
2020-03-20 18:28:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:18 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -耗时 : 21
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:18 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:18 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:28:18 -<==    Updates: 1
2020-03-20 18:28:18 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:28:18 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:18 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:18 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:28:18 -<==    Updates: 1
2020-03-20 18:28:18 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:28:18 -==> Parameters: 
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:18 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:18 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:28:18 -<==    Updates: 1
2020-03-20 18:28:18 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:18 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:18 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:18 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:28:18 -<==    Updates: 1
2020-03-20 18:28:18 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:18 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:28:18 -<==      Total: 1
2020-03-20 18:28:18 -耗时 : 139
2020-03-20 18:28:37 -此处进行解密+验签+身份验证
2020-03-20 18:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:37 -此处进行解密+验签+身份验证
2020-03-20 18:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:37 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:28:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:37 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:37 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:28:37 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:28:37 -==> Parameters: 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:37 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -耗时 : 9
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:37 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:28:37 -<==    Updates: 1
2020-03-20 18:28:37 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:28:37 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:37 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:37 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:28:37 -<==    Updates: 1
2020-03-20 18:28:37 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:28:37 -==> Parameters: 
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:37 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:37 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:28:37 -<==    Updates: 1
2020-03-20 18:28:37 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:37 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:37 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:37 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:28:37 -<==    Updates: 1
2020-03-20 18:28:37 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:37 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:28:37 -<==      Total: 1
2020-03-20 18:28:37 -耗时 : 241
2020-03-20 18:28:52 -此处进行解密+验签+身份验证
2020-03-20 18:28:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:28:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:28:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:28:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:28:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:28:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:52 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:52 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:52 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:28:52 -<==    Updates: 1
2020-03-20 18:28:52 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:28:52 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:52 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:52 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:28:52 -<==    Updates: 1
2020-03-20 18:28:52 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:28:52 -==> Parameters: 
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:52 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:52 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:28:52 -<==    Updates: 1
2020-03-20 18:28:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:28:52 -==> Parameters: 469(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:52 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:28:52 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:28:52 -<==    Updates: 1
2020-03-20 18:28:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:28:52 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:28:52 -<==      Total: 1
2020-03-20 18:28:52 -耗时 : 123
2020-03-20 18:29:04 -此处进行解密+验签+身份验证
2020-03-20 18:29:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:04 -此处进行解密+验签+身份验证
2020-03-20 18:29:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-20 18:29:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:29:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:29:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-20 18:29:04 -==> Parameters: 469(String)
2020-03-20 18:29:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -耗时 : 22
2020-03-20 18:29:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:04 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:04 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:29:04 -<==    Updates: 1
2020-03-20 18:29:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:29:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:04 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:04 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:29:04 -<==    Updates: 1
2020-03-20 18:29:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:29:04 -==> Parameters: 
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:04 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:04 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:29:04 -<==    Updates: 1
2020-03-20 18:29:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:04 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:04 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:04 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:29:04 -<==    Updates: 1
2020-03-20 18:29:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:04 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:29:04 -<==      Total: 1
2020-03-20 18:29:04 -耗时 : 147
2020-03-20 18:29:06 -此处进行解密+验签+身份验证
2020-03-20 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:06 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:29:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:29:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:06 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:06 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:06 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:29:06 -<==    Updates: 1
2020-03-20 18:29:06 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:29:06 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:06 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:06 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:29:06 -<==    Updates: 1
2020-03-20 18:29:06 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:29:06 -==> Parameters: 
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:06 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:06 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:29:06 -<==    Updates: 1
2020-03-20 18:29:06 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:06 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:06 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:06 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:29:06 -<==    Updates: 1
2020-03-20 18:29:06 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:06 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:29:06 -<==      Total: 1
2020-03-20 18:29:06 -耗时 : 229
2020-03-20 18:29:38 -此处进行解密+验签+身份验证
2020-03-20 18:29:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:38 -此处进行解密+验签+身份验证
2020-03-20 18:29:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-20 18:29:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:38 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-20 18:29:38 -==> Parameters: 469(String)
2020-03-20 18:29:38 -<==      Total: 1
2020-03-20 18:29:38 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-20 18:29:38 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-20 18:29:38 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:38 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:38 -<==      Total: 1
2020-03-20 18:29:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-20 18:29:38 -==> Parameters: 469(String)
2020-03-20 18:29:38 -<==      Total: 0
2020-03-20 18:29:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:38 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:38 -<==      Total: 1
2020-03-20 18:29:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-20 18:29:38 -==> Parameters: 469(String)
2020-03-20 18:29:39 -<==      Total: 0
2020-03-20 18:29:39 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:39 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:39 -<==      Total: 1
2020-03-20 18:29:39 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-20 18:29:39 -==> Parameters: 469(String)
2020-03-20 18:29:39 -<==      Total: 0
2020-03-20 18:29:39 -耗时 : 45
2020-03-20 18:29:39 -<==      Total: 1
2020-03-20 18:29:39 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-20 18:29:39 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:39 -<==      Total: 1
2020-03-20 18:29:39 -耗时 : 240
2020-03-20 18:29:41 -此处进行解密+验签+身份验证
2020-03-20 18:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:29:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:29:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:42 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:42 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:42 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:29:42 -<==    Updates: 1
2020-03-20 18:29:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:29:42 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:42 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:42 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:29:42 -<==    Updates: 1
2020-03-20 18:29:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:29:42 -==> Parameters: 
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:42 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:42 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:29:42 -<==    Updates: 1
2020-03-20 18:29:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:42 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:42 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:42 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:29:42 -<==    Updates: 1
2020-03-20 18:29:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:42 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:29:42 -<==      Total: 1
2020-03-20 18:29:42 -耗时 : 231
2020-03-20 18:29:48 -此处进行解密+验签+身份验证
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:48 -此处进行解密+验签+身份验证
2020-03-20 18:29:48 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:48 -此处进行解密+验签+身份验证
2020-03-20 18:29:48 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-20 18:29:48 -==> Parameters: 
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:48 -此处进行解密+验签+身份验证
2020-03-20 18:29:48 -<==      Total: 3
2020-03-20 18:29:48 -耗时 : 16
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-20 18:29:48 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-20 18:29:48 -==> Parameters: 469(String)
2020-03-20 18:29:48 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_469
2020-03-20 18:29:48 -<==      Total: 2
2020-03-20 18:29:48 -耗时 : 7
2020-03-20 18:29:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_469 , return
2020-03-20 18:29:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:48 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:48 -==> Parameters: applyRateFlag(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:48 -==> Parameters: 5(Integer), 5(Integer), 469(String), applyRateFlag(String)
2020-03-20 18:29:48 -<==    Updates: 1
2020-03-20 18:29:48 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-20 18:29:48 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:48 -==> Parameters: recallFlag(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:48 -==> Parameters: 0(Integer), 0(Integer), 469(String), recallFlag(String)
2020-03-20 18:29:48 -<==    Updates: 1
2020-03-20 18:29:48 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-20 18:29:48 -==> Parameters: 
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:48 -==> Parameters: collegeFlag(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:48 -==> Parameters: 25(Integer), 25(Integer), 469(String), collegeFlag(String)
2020-03-20 18:29:48 -<==    Updates: 1
2020-03-20 18:29:48 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-20 18:29:48 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:48 -==> Parameters: cardFlag(String), 469(String)
2020-03-20 18:29:48 -<==      Total: 1
2020-03-20 18:29:48 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-20 18:29:48 -==> Parameters: 5(Integer), 5(Integer), 469(String), cardFlag(String)
2020-03-20 18:29:49 -<==    Updates: 1
2020-03-20 18:29:49 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-20 18:29:49 -==> Parameters: appImgFlag(String), 469(String)
2020-03-20 18:29:49 -<==      Total: 1
2020-03-20 18:29:49 -耗时 : 228
2020-03-20 18:29:49 -解密：
2020-03-20 18:29:49 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-20 18:29:49 -==>  Preparing: SELECT id, img_type, (case when ?='04' then concat('http://cdn.yhswl.com/',img_url) else img_url end) as img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-20 18:29:49 -==> Parameters: 01(String), 01(String)
2020-03-20 18:29:49 -<==      Total: 4
2020-03-20 18:29:49 -耗时 : 12
2020-03-20 18:29:56 -此处进行解密+验签+身份验证
2020-03-20 18:29:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:56 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-20 18:29:56 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-20 18:29:56 -==> Parameters: 469(String)
2020-03-20 18:29:56 -此处进行解密+验签+身份验证
2020-03-20 18:29:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:56 -<==      Total: 1
2020-03-20 18:29:56 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-20 18:29:56 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:56 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-20 18:29:56 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:56 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:56 -<==      Total: 1
2020-03-20 18:29:56 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-20 18:29:56 -==> Parameters: 469(String)
2020-03-20 18:29:56 -<==      Total: 0
2020-03-20 18:29:56 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:56 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:56 -<==      Total: 1
2020-03-20 18:29:56 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-20 18:29:56 -==> Parameters: 469(String)
2020-03-20 18:29:56 -<==      Total: 0
2020-03-20 18:29:56 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:56 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:56 -<==      Total: 1
2020-03-20 18:29:56 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-20 18:29:56 -==> Parameters: 469(String)
2020-03-20 18:29:56 -<==      Total: 0
2020-03-20 18:29:56 -耗时 : 44
2020-03-20 18:29:56 -<==      Total: 1
2020-03-20 18:29:56 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-20 18:29:56 -==> Parameters: 469(String), 469(String)
2020-03-20 18:29:56 -<==      Total: 1
2020-03-20 18:29:56 -耗时 : 244
2020-03-20 18:29:59 -此处进行解密+验签+身份验证
2020-03-20 18:29:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:29:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:29:59 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-20 18:29:59 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:59 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:59 -<==      Total: 1
2020-03-20 18:29:59 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-20 18:29:59 -==> Parameters: 469(String)
2020-03-20 18:29:59 -<==      Total: 0
2020-03-20 18:29:59 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:29:59 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:29:59 -此处进行解密+验签+身份验证
2020-03-20 18:29:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:30:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:30:00 -<==      Total: 1
2020-03-20 18:30:00 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-20 18:30:00 -==> Parameters: 469(String)
2020-03-20 18:30:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-20 18:30:00 -<==      Total: 0
2020-03-20 18:30:00 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:30:00 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:30:00 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-20 18:30:00 -==> Parameters: 469(String)
2020-03-20 18:30:00 -<==      Total: 1
2020-03-20 18:30:00 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-20 18:30:00 -==> Parameters: 469(String), 469(String)
2020-03-20 18:30:00 -<==      Total: 1
2020-03-20 18:30:00 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-20 18:30:00 -==> Parameters: 469(String)
2020-03-20 18:30:00 -<==      Total: 0
2020-03-20 18:30:00 -耗时 : 92
2020-03-20 18:30:00 -<==      Total: 1
2020-03-20 18:30:00 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-20 18:30:00 -==> Parameters: 469(String), 469(String)
2020-03-20 18:30:00 -<==      Total: 1
2020-03-20 18:30:00 -耗时 : 190
2020-03-20 18:30:03 -此处进行解密+验签+身份验证
2020-03-20 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:30:03 -此处进行解密+验签+身份验证
2020-03-20 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_469
2020-03-20 18:30:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-20 18:30:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_469 , return
2020-03-20 18:30:03 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-20 18:30:03 -==> Parameters: 469(String)
2020-03-20 18:30:03 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-20 18:30:03 -<==      Total: 1
2020-03-20 18:30:03 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-20 18:30:03 -==> Parameters: 469(String), 469(String)
2020-03-20 18:30:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type is null ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type is null) t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:30:03 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:30:03 -<==      Total: 1
2020-03-20 18:30:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-20 18:30:03 -==> Parameters: 469(String)
2020-03-20 18:30:03 -<==      Total: 0
2020-03-20 18:30:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:30:03 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:30:03 -<==      Total: 1
2020-03-20 18:30:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-20 18:30:03 -==> Parameters: 469(String)
2020-03-20 18:30:03 -<==      Total: 0
2020-03-20 18:30:03 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM (select * from t_summary_user_traditional_pos_benefit_all t where t.pos_type='epos' ) t LEFT JOIN (select * from t_summary_user_traditional_pos_benefit_month t where t.pos_type='epos') t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-20 18:30:03 -==> Parameters: 202003(String), 469(String)
2020-03-20 18:30:03 -<==      Total: 1
2020-03-20 18:30:03 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-20 18:30:03 -==> Parameters: 469(String)
2020-03-20 18:30:03 -<==      Total: 0
2020-03-20 18:30:03 -耗时 : 45
2020-03-20 18:30:03 -<==      Total: 1
2020-03-20 18:30:03 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-20 18:30:03 -==> Parameters: 469(String), 469(String)
2020-03-20 18:30:03 -<==      Total: 1
2020-03-20 18:30:03 -耗时 : 220
