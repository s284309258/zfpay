2020-03-13 09:32:03 -Starting LongEcologicalApplication on PC-201905161910 with PID 21020 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 09:32:03 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 09:32:03 -No active profile set, falling back to default profiles: default
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:32:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 09:32:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 09:32:04 -Finished Spring Data repository scanning in 98ms. Found 0 repository interfaces.
2020-03-13 09:32:04 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 09:32:04 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 09:32:05 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-13 09:32:05 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c31918e9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 09:32:05 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bd9cfd89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 09:32:06 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 09:32:06 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 09:32:06 -Starting service [Tomcat]
2020-03-13 09:32:06 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 09:32:06 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 09:32:06 -Initializing Spring embedded WebApplicationContext
2020-03-13 09:32:06 -Root WebApplicationContext: initialization completed in 2670 ms
2020-03-13 09:32:06 -Filter xssFilter was not registered (disabled)
2020-03-13 09:32:06 -HikariPool-1 - Starting...
2020-03-13 09:32:29 -HikariPool-1 - Exception during pool initialization.
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8$$FastClassBySpringCGLIB$$e834d7a0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 85 common frames omitted
2020-03-13 09:32:29 -Unable to determine jdbc url from datasource
org.springframework.jdbc.support.MetaDataAccessException: Could not get Connection for extracting meta-data; nested exception is org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:328)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8$$FastClassBySpringCGLIB$$e834d7a0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	... 62 common frames omitted
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	... 63 common frames omitted
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 85 common frames omitted
2020-03-13 09:32:29 -HikariPool-1 - Starting...
2020-03-13 09:32:51 -HikariPool-1 - Exception during pool initialization.
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:324)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:123)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:130)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:99)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:91)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:138)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8.CGLIB$entityManagerFactory$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8$$FastClassBySpringCGLIB$$e834d7a0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$dc73bff8.entityManagerFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 62 common frames omitted
2020-03-13 09:32:51 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 09:32:51 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 09:32:51 -HHH000206: hibernate.properties not found
2020-03-13 09:32:51 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 09:32:51 -HikariPool-1 - Starting...
2020-03-13 09:33:13 -HikariPool-1 - Exception during pool initialization.
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 58 common frames omitted
2020-03-13 09:33:13 -HHH000342: Could not obtain connection to query metadata : Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2020-03-13 09:33:13 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2020-03-13 09:33:13 -Stopping service [Tomcat]
2020-03-13 09:33:13 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-13 09:33:13 -Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1745)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:275)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:100)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:54)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:137)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 33 common frames omitted
2020-03-13 09:33:30 -Starting LongEcologicalApplication on PC-201905161910 with PID 10692 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 09:33:30 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 09:33:30 -No active profile set, falling back to default profiles: default
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 09:33:31 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 09:33:31 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 09:33:31 -Finished Spring Data repository scanning in 71ms. Found 0 repository interfaces.
2020-03-13 09:33:31 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 09:33:31 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 09:33:31 -Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2020-03-13 09:33:32 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$94cc84d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 09:33:32 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$3d0aced] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 09:33:32 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 09:33:32 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 09:33:32 -Starting service [Tomcat]
2020-03-13 09:33:32 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 09:33:32 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 09:33:32 -Initializing Spring embedded WebApplicationContext
2020-03-13 09:33:32 -Root WebApplicationContext: initialization completed in 1932 ms
2020-03-13 09:33:32 -Filter xssFilter was not registered (disabled)
2020-03-13 09:33:32 -HikariPool-1 - Starting...
2020-03-13 09:33:55 -HikariPool-1 - Exception during pool initialization.
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c$$FastClassBySpringCGLIB$$c5f89ea3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 85 common frames omitted
2020-03-13 09:33:55 -Unable to determine jdbc url from datasource
org.springframework.jdbc.support.MetaDataAccessException: Could not get Connection for extracting meta-data; nested exception is org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:328)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c$$FastClassBySpringCGLIB$$c5f89ea3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	... 62 common frames omitted
Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	... 63 common frames omitted
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 85 common frames omitted
2020-03-13 09:33:55 -HikariPool-1 - Starting...
2020-03-13 09:34:17 -HikariPool-1 - Exception during pool initialization.
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:324)
	at org.springframework.boot.jdbc.EmbeddedDatabaseConnection.isEmbedded(EmbeddedDatabaseConnection.java:123)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateDefaultDdlAutoProvider.getDefaultDdlAuto(HibernateDefaultDdlAutoProvider.java:42)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.lambda$getVendorProperties$1(HibernateJpaConfiguration.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateSettings.getDdlAuto(HibernateSettings.java:41)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineDdlAuto(HibernateProperties.java:130)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.getAdditionalProperties(HibernateProperties.java:99)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties.determineHibernateProperties(HibernateProperties.java:91)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration.getVendorProperties(HibernateJpaConfiguration.java:143)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.entityManagerFactory(JpaBaseConfiguration.java:138)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c.CGLIB$entityManagerFactory$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c$$FastClassBySpringCGLIB$$c5f89ea3.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$22a76f5c.entityManagerFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 62 common frames omitted
2020-03-13 09:34:17 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 09:34:17 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 09:34:17 -HHH000206: hibernate.properties not found
2020-03-13 09:34:17 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 09:34:17 -HikariPool-1 - Starting...
2020-03-13 09:34:39 -HikariPool-1 - Exception during pool initialization.
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1121)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:357)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2482)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2519)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2304)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:346)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: java.net.ConnectException: Connection timed out: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at java.net.Socket.connect(Socket.java:538)
	at java.net.Socket.<init>(Socket.java:434)
	at java.net.Socket.<init>(Socket.java:244)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:259)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:307)
	... 58 common frames omitted
2020-03-13 09:34:39 -HHH000342: Could not obtain connection to query metadata : Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
2020-03-13 09:34:39 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
2020-03-13 09:34:39 -Stopping service [Tomcat]
2020-03-13 09:34:39 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-13 09:34:39 -Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1745)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1083)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:853)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:275)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1741)
	... 16 common frames omitted
Caused by: org.hibernate.HibernateException: Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not set
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:100)
	at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:54)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:137)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 33 common frames omitted
2020-03-13 10:09:38 -Starting LongEcologicalApplication on PC-201905161910 with PID 5744 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 10:09:38 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 10:09:38 -No active profile set, falling back to default profiles: default
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:09:39 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 10:09:39 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 10:09:39 -Finished Spring Data repository scanning in 73ms. Found 0 repository interfaces.
2020-03-13 10:09:39 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 10:09:39 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 10:09:39 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-03-13 10:09:39 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$e30c2447] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 10:09:39 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$dd9008e7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 10:09:40 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 10:09:40 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 10:09:40 -Starting service [Tomcat]
2020-03-13 10:09:40 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 10:09:40 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 10:09:40 -Initializing Spring embedded WebApplicationContext
2020-03-13 10:09:40 -Root WebApplicationContext: initialization completed in 2062 ms
2020-03-13 10:09:40 -Filter xssFilter was not registered (disabled)
2020-03-13 10:09:40 -HikariPool-1 - Starting...
2020-03-13 10:09:41 -HikariPool-1 - Start completed.
2020-03-13 10:09:41 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 10:09:41 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 10:09:41 -HHH000206: hibernate.properties not found
2020-03-13 10:09:41 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 10:09:41 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 10:09:41 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 10:09:42 -Using default implementation for ThreadExecutor
2020-03-13 10:09:42 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 10:09:42 -Quartz Scheduler v.2.3.0 created.
2020-03-13 10:09:42 -RAMJobStore initialized.
2020-03-13 10:09:42 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 10:09:42 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 10:09:42 -Quartz scheduler version: 2.3.0
2020-03-13 10:09:42 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@a21c74
2020-03-13 10:09:42 -STAET TaskExecutorConfig
2020-03-13 10:09:42 -Initializing ExecutorService
2020-03-13 10:09:42 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 10:09:43 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 10:09:43 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 10:09:43 -Initializing ExecutorService 'taskScheduler'
2020-03-13 10:09:43 -Starting Quartz Scheduler now
2020-03-13 10:09:43 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 10:09:43 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 10:09:43 -Using a shared selector for servlet write/read
2020-03-13 10:09:43 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 10:09:43 -Started LongEcologicalApplication in 5.771 seconds (JVM running for 6.812)
2020-03-13 10:14:16 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 10:14:16 -Initializing Servlet 'dispatcherServlet'
2020-03-13 10:14:16 -Completed initialization in 16 ms
2020-03-13 10:14:17 -此处进行解密+验签+身份验证
2020-03-13 10:14:17 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 10:14:17 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-13 10:14:17 -Starting without optional epoll library
2020-03-13 10:14:17 -Starting without optional kqueue library
2020-03-13 10:14:17 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-13 10:14:17 -耗时 : 674
2020-03-13 10:14:17 -此处进行解密+验签+身份验证
2020-03-13 10:14:18 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"C70A448A468BDFD63DA077DC1F821725","version_no":"450000000145206","login_type":"token","token":"181|ZOEQN9P04T49EIPQ5ETHLM1SVJX2RS1K","sys_user_account":""}
2020-03-13 10:14:18 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 10:14:18 -token值=======181|ZOEQN9P04T49EIPQ5ETHLM1SVJX2RS1K
2020-03-13 10:14:18 -耗时 : 9
2020-03-13 10:14:47 -此处进行解密+验签+身份验证
2020-03-13 10:14:47 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 10:14:47 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-13 10:14:47 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-13 10:14:47 -耗时 : 9
2020-03-13 10:14:57 -此处进行解密+验签+身份验证
2020-03-13 10:14:57 -解密：{"sys_user_account":"13322990711","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"D8C941101DA33D1D3D1FE861A1D9D6A8","version_no":"450000000145206","login_type":"account"}
2020-03-13 10:14:57 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 10:14:57 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 10:14:57 -==> Parameters: 13322990711(String)
2020-03-13 10:14:57 -<==      Total: 1
2020-03-13 10:14:57 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 10:14:57 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200313(String), 101457(String), 181(Integer)
2020-03-13 10:14:57 -<==    Updates: 1
2020-03-13 10:14:57 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 10:14:57 -==> Parameters: 26(String)
2020-03-13 10:14:57 -<==      Total: 1
2020-03-13 10:14:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 10:14:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 10:14:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 10:14:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 10:14:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 10:14:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 10:14:57 -耗时 : 197
2020-03-13 10:14:57 -此处进行解密+验签+身份验证
2020-03-13 10:14:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:14:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:14:57 -==> Parameters: 181(String)
2020-03-13 10:14:57 -<==      Total: 1
2020-03-13 10:14:57 -耗时 : 12
2020-03-13 10:14:58 -此处进行解密+验签+身份验证
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:58 -此处进行解密+验签+身份验证
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:58 -此处进行解密+验签+身份验证
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:58 -此处进行解密+验签+身份验证
2020-03-13 10:14:58 -此处进行解密+验签+身份验证
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:58 -此处进行解密+验签+身份验证
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:14:58 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:58 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:14:58 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 10:14:58 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 10:14:58 -==> Parameters: 
2020-03-13 10:14:58 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 10:14:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 10:14:58 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:14:58 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:14:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:14:58 -==> Parameters: 181(String)
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 10:14:58 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:14:58 -耗时 : 19
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 10:14:58 -<==      Total: 3
2020-03-13 10:14:58 -耗时 : 18
2020-03-13 10:14:58 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 10:14:58 -==> Parameters: 181(String)
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -耗时 : 11
2020-03-13 10:14:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 10:14:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:14:58 -==> Parameters: 181(String), 181(String)
2020-03-13 10:14:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:14:58 -==> Parameters: 181(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 2
2020-03-13 10:14:58 -耗时 : 33
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-13 10:14:58 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:14:58 -==> Parameters: 181(String), 181(String)
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:14:58 -==> Parameters: 181(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: recallFlag(String), 181(String)
2020-03-13 10:14:58 -==> Parameters: recallFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-13 10:14:58 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:14:58 -==> Parameters: 
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:14:58 -==> Parameters: 
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: collegeFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: collegeFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:14:58 -==> Parameters: 181(String), 181(String)
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:14:58 -==> Parameters: 181(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: cardFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:14:58 -==> Parameters: cardFlag(String), 181(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-13 10:14:58 -<==      Total: 1
2020-03-13 10:14:58 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:14:58 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -耗时 : 143
2020-03-13 10:14:58 -<==    Updates: 1
2020-03-13 10:14:58 -耗时 : 142
2020-03-13 10:15:01 -此处进行解密+验签+身份验证
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:01 -此处进行解密+验签+身份验证
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:01 -此处进行解密+验签+身份验证
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:01 -此处进行解密+验签+身份验证
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 10:15:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 10:15:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:15:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:15:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 10:15:01 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-13 10:15:01 -==> Parameters: 26(String), 20200313(String)
2020-03-13 10:15:01 -<==      Total: 0
2020-03-13 10:15:01 -耗时 : 25
2020-03-13 10:15:02 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:15:02 -==> Parameters: 181(String)
2020-03-13 10:15:02 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-13 10:15:02 -==> Parameters: 26(String), 20200313(String)
2020-03-13 10:15:02 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:15:02 -==> Parameters: 181(String)
2020-03-13 10:15:02 -<==      Total: 0
2020-03-13 10:15:02 -耗时 : 39
2020-03-13 10:15:02 -<==      Total: 1
2020-03-13 10:15:02 -耗时 : 57
2020-03-13 10:15:02 -<==      Total: 1
2020-03-13 10:15:02 -耗时 : 61
2020-03-13 10:15:04 -此处进行解密+验签+身份验证
2020-03-13 10:15:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:04 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-13 10:15:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 10:15:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 10:15:04 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-13 10:15:04 -==> Parameters: 26(String), 20200313(String)
2020-03-13 10:15:04 -<==      Total: 1
2020-03-13 10:15:04 -耗时 : 20
2020-03-13 10:15:14 -此处进行解密+验签+身份验证
2020-03-13 10:15:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:15 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-13 10:15:15 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:15:15 -==> Parameters: 181(String)
2020-03-13 10:15:15 -<==      Total: 3
2020-03-13 10:15:15 -耗时 : 17
2020-03-13 10:15:25 -此处进行解密+验签+身份验证
2020-03-13 10:15:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:25 -此处进行解密+验签+身份验证
2020-03-13 10:15:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:25 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:15:25 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:15:25 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:15:25 -==> Parameters: 181(String)
2020-03-13 10:15:25 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:15:25 -==> Parameters: 181(String)
2020-03-13 10:15:25 -<==      Total: 1
2020-03-13 10:15:25 -耗时 : 9
2020-03-13 10:15:25 -<==      Total: 0
2020-03-13 10:15:25 -耗时 : 23
2020-03-13 10:15:26 -此处进行解密+验签+身份验证
2020-03-13 10:15:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:26 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-13 10:15:26 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:15:26 -==> Parameters: 181(String)
2020-03-13 10:15:26 -<==      Total: 3
2020-03-13 10:15:26 -耗时 : 12
2020-03-13 10:15:31 -此处进行解密+验签+身份验证
2020-03-13 10:15:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:31 -此处进行解密+验签+身份验证
2020-03-13 10:15:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:15:31 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:15:31 -==> Parameters: 181(String)
2020-03-13 10:15:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:15:31 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:15:31 -<==      Total: 0
2020-03-13 10:15:31 -==> Parameters: 181(String)
2020-03-13 10:15:31 -耗时 : 10
2020-03-13 10:15:31 -<==      Total: 1
2020-03-13 10:15:31 -耗时 : 11
2020-03-13 10:15:36 -此处进行解密+验签+身份验证
2020-03-13 10:15:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:15:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:15:36 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-13 10:15:36 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:15:36 -==> Parameters: 181(String)
2020-03-13 10:15:36 -<==      Total: 3
2020-03-13 10:15:36 -耗时 : 10
2020-03-13 10:16:02 -此处进行解密+验签+身份验证
2020-03-13 10:16:02 -此处进行解密+验签+身份验证
2020-03-13 10:16:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:16:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:16:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:16:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:16:02 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:16:02 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:16:02 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:16:02 -==> Parameters: 181(String)
2020-03-13 10:16:02 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:16:02 -==> Parameters: 181(String)
2020-03-13 10:16:02 -<==      Total: 0
2020-03-13 10:16:02 -耗时 : 12
2020-03-13 10:16:02 -<==      Total: 1
2020-03-13 10:16:02 -耗时 : 11
2020-03-13 10:16:14 -此处进行解密+验签+身份验证
2020-03-13 10:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:16:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:16:14 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosRewardRecordList
2020-03-13 10:16:14 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:16:14 -==> Parameters: 181(String)
2020-03-13 10:16:14 -<==      Total: 4
2020-03-13 10:16:14 -耗时 : 25
2020-03-13 10:23:01 -此处进行解密+验签+身份验证
2020-03-13 10:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:23:01 -此处进行解密+验签+身份验证
2020-03-13 10:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:23:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:23:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:23:01 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:23:01 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:23:01 -==> Parameters: 181(String)
2020-03-13 10:23:01 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:23:01 -==> Parameters: 181(String)
2020-03-13 10:23:01 -<==      Total: 1
2020-03-13 10:23:01 -耗时 : 13
2020-03-13 10:23:01 -<==      Total: 0
2020-03-13 10:23:01 -耗时 : 11
2020-03-13 10:23:08 -此处进行解密+验签+身份验证
2020-03-13 10:23:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:23:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:23:08 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposRewardRecordList
2020-03-13 10:23:08 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_reward_record t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:23:08 -==> Parameters: 181(String)
2020-03-13 10:23:08 -<==      Total: 3
2020-03-13 10:23:08 -耗时 : 11
2020-03-13 10:23:18 -此处进行解密+验签+身份验证
2020-03-13 10:23:18 -此处进行解密+验签+身份验证
2020-03-13 10:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:23:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:23:18 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:23:18 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:23:18 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:23:18 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:23:18 -==> Parameters: 181(String)
2020-03-13 10:23:18 -==> Parameters: 181(String)
2020-03-13 10:23:18 -<==      Total: 0
2020-03-13 10:23:18 -耗时 : 11
2020-03-13 10:23:18 -<==      Total: 1
2020-03-13 10:23:18 -耗时 : 23
2020-03-13 10:23:22 -此处进行解密+验签+身份验证
2020-03-13 10:23:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:23:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:23:22 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosRewardRecordList
2020-03-13 10:23:22 -==>  Preparing: SELECT cast(t.id as char) as record_id, t.order_id, t.sn, t.money, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:23:22 -==> Parameters: 181(String)
2020-03-13 10:23:22 -<==      Total: 4
2020-03-13 10:23:22 -耗时 : 25
2020-03-13 10:24:49 -此处进行解密+验签+身份验证
2020-03-13 10:24:49 -此处进行解密+验签+身份验证
2020-03-13 10:24:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:24:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 10:24:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:24:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 10:24:49 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:24:49 -耗时 : 0
2020-03-13 10:24:49 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:24:49 -耗时 : 0
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -解密：{"sys_user_account":"13501590237","login_password":"E19D5CD5AF0378DA05F63F891C7467AF","device_type":"android","device_no":"1.0.9","sign":"D8308C8C89840DAE2B7F300008287B3A","version_no":"450000000145206","login_type":"account"}
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@21ed55f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 10:27:20 -==> Parameters: 13501590237(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 10:27:20 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200313(String), 102720(String), 2420(Integer)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 10:27:20 -==> Parameters: 26(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 10:27:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 10:27:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 10:27:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 10:27:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 10:27:20 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 10:27:20 -耗时 : 90
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:27:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:27:20 -==> Parameters: 2420(String)
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -耗时 : 7
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7a7ec6b5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 10:27:20 -==> Parameters: 
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -此处进行解密+验签+身份验证
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:20 -<==      Total: 3
2020-03-13 10:27:20 -耗时 : 12
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@59e48b14 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 10:27:20 -==> Parameters: 2420(String)
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:27:20 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:27:20 -<==      Total: 2
2020-03-13 10:27:20 -耗时 : 12
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:27:20 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:27:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:27:20 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:27:20 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:27:20 -==> Parameters: 2420(String)
2020-03-13 10:27:20 -耗时 : 12
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@324bebc2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -耗时 : 8
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3bcda1f3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5ec3cf4f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:27:20 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2724e41 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@9680aed (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:27:20 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6410e5f9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:27:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:27:20 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:27:20 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:27:20 -==> Parameters: 
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:27:20 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:27:20 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -耗时 : 119
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:27:20 -==> Parameters: 
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:27:20 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:20 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:27:20 -<==      Total: 1
2020-03-13 10:27:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:20 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:27:20 -<==    Updates: 1
2020-03-13 10:27:20 -耗时 : 252
2020-03-13 10:27:26 -此处进行解密+验签+身份验证
2020-03-13 10:27:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:26 -此处进行解密+验签+身份验证
2020-03-13 10:27:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 10:27:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 10:27:26 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 10:27:26 -==> Parameters: 2420(String)
2020-03-13 10:27:26 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:27:26 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:26 -<==      Total: 0
2020-03-13 10:27:26 -耗时 : 50
2020-03-13 10:27:31 -此处进行解密+验签+身份验证
2020-03-13 10:27:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:27:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:27:31 -此处进行解密+验签+身份验证
2020-03-13 10:27:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:27:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:27:31 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:31 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:31 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:27:31 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:27:31 -==> Parameters: 2420(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:31 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -耗时 : 16
2020-03-13 10:27:31 -<==    Updates: 1
2020-03-13 10:27:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:27:31 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:31 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:31 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:27:31 -<==    Updates: 1
2020-03-13 10:27:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:27:31 -==> Parameters: 
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:31 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:31 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:27:31 -<==    Updates: 1
2020-03-13 10:27:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:27:31 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:27:31 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:27:31 -<==      Total: 1
2020-03-13 10:27:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:27:31 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:27:31 -<==    Updates: 1
2020-03-13 10:27:31 -耗时 : 106
2020-03-13 10:27:33 -此处进行解密+验签+身份验证
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:33 -此处进行解密+验签+身份验证
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:33 -此处进行解密+验签+身份验证
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:33 -此处进行解密+验签+身份验证
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposOnlineActivityList
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-13 10:27:33 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:27:33 -==> Parameters: 2420(String)
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:27:33 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getMposActivityApplyList
2020-03-13 10:27:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:27:33 -<==      Total: 0
2020-03-13 10:27:33 -耗时 : 12
2020-03-13 10:27:33 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_activity_apply_info t LEFT JOIN t_sys_mpos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_mpos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? order by t.id desc limit 0,10 
2020-03-13 10:27:33 -==> Parameters: 2420(String)
2020-03-13 10:27:33 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type is null and ? between start_date and end_date 
2020-03-13 10:27:33 -==> Parameters: 26(String), 20200313(String)
2020-03-13 10:27:33 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_mpos_activity_info where status = '09' and manager_id = ? and ? between start_date and end_date 
2020-03-13 10:27:33 -==> Parameters: 26(String), 20200313(String)
2020-03-13 10:27:33 -<==      Total: 1
2020-03-13 10:27:33 -<==      Total: 0
2020-03-13 10:27:33 -耗时 : 18
2020-03-13 10:27:33 -耗时 : 15
2020-03-13 10:27:33 -<==      Total: 0
2020-03-13 10:27:33 -耗时 : 34
2020-03-13 10:27:40 -<==      Total: 0
2020-03-13 10:27:40 -耗时 : 13983
2020-03-13 10:27:41 -此处进行解密+验签+身份验证
2020-03-13 10:27:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:27:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:27:41 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosOnlineActivityList
2020-03-13 10:27:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:27:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:27:41 -==>  Preparing: SELECT cast(id as char) as activity_id, activity_name, start_date, end_date, cover_url FROM t_sys_trapos_activity_info where status = '09' and manager_id = ? and pos_type='epos' and ? between start_date and end_date 
2020-03-13 10:27:41 -==> Parameters: 26(String), 20200313(String)
2020-03-13 10:27:41 -<==      Total: 1
2020-03-13 10:27:41 -耗时 : 30
2020-03-13 10:28:02 -此处进行解密+验签+身份验证
2020-03-13 10:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:02 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:28:02 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type='epos' order by t.id desc limit 0,10 
2020-03-13 10:28:02 -==> Parameters: 2420(String)
2020-03-13 10:28:02 -<==      Total: 0
2020-03-13 10:28:02 -耗时 : 13
2020-03-13 10:28:31 -此处进行解密+验签+身份验证
2020-03-13 10:28:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:31 -请求地址 : http://192.168.191.1:8080/api/sys/onlineactivity/getTraditionalPosActivityApplyList
2020-03-13 10:28:31 -==>  Preparing: SELECT cast(t.id as char) as apply_id, t.order_id, t.status, t1.activity_name, t1.start_date, t1.end_date, t2.pos_num, t2.reward_money, t2.expenditure, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_apply_info t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id LEFT JOIN t_sys_trapos_activity_reward_info t2 on t.activity_reward_id = t2.id WHERE t.user_id = ? and t1.pos_type is null order by t.id desc limit 0,10 
2020-03-13 10:28:31 -==> Parameters: 2420(String)
2020-03-13 10:28:31 -<==      Total: 0
2020-03-13 10:28:31 -耗时 : 11
2020-03-13 10:28:45 -此处进行解密+验签+身份验证
2020-03-13 10:28:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:45 -此处进行解密+验签+身份验证
2020-03-13 10:28:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:45 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:28:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:28:45 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:28:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:28:45 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:28:45 -==> Parameters: 2420(String)
2020-03-13 10:28:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:28:45 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:28:45 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -耗时 : 21
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:28:45 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:28:45 -<==    Updates: 1
2020-03-13 10:28:45 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:28:45 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:28:45 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:28:45 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:28:45 -<==    Updates: 1
2020-03-13 10:28:45 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:28:45 -==> Parameters: 
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:28:45 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:28:45 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:28:45 -<==    Updates: 1
2020-03-13 10:28:45 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:28:45 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:28:45 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:28:45 -<==      Total: 1
2020-03-13 10:28:45 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:28:45 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:28:45 -<==    Updates: 1
2020-03-13 10:28:45 -耗时 : 104
2020-03-13 10:28:47 -此处进行解密+验签+身份验证
2020-03-13 10:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:47 -此处进行解密+验签+身份验证
2020-03-13 10:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 10:28:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:47 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 10:28:47 -==> Parameters: 2420(String)
2020-03-13 10:28:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 10:28:47 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:28:47 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:28:47 -<==      Total: 0
2020-03-13 10:28:47 -耗时 : 14
2020-03-13 10:28:47 -<==      Total: 0
2020-03-13 10:28:47 -耗时 : 40
2020-03-13 10:28:54 -此处进行解密+验签+身份验证
2020-03-13 10:28:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:28:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:28:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 10:28:54 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 10:28:54 -==> Parameters: 2420(String)
2020-03-13 10:28:54 -<==      Total: 0
2020-03-13 10:28:54 -耗时 : 27
2020-03-13 10:29:07 -此处进行解密+验签+身份验证
2020-03-13 10:29:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:29:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:29:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 10:29:07 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-13 10:29:07 -==> Parameters: 2420(String)
2020-03-13 10:29:07 -<==      Total: 55
2020-03-13 10:29:07 -耗时 : 19
2020-03-13 10:29:10 -此处进行解密+验签+身份验证
2020-03-13 10:29:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:29:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:29:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 10:29:10 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-13 10:29:10 -==> Parameters: 2420(String)
2020-03-13 10:29:10 -<==      Total: 55
2020-03-13 10:29:10 -耗时 : 20
2020-03-13 10:29:46 -此处进行解密+验签+身份验证
2020-03-13 10:29:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:29:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:29:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 10:29:46 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-13 10:29:46 -==> Parameters: 2420(String)
2020-03-13 10:29:46 -<==      Total: 0
2020-03-13 10:29:46 -耗时 : 15
2020-03-13 10:30:01 -此处进行解密+验签+身份验证
2020-03-13 10:30:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:01 -解密异常：{end_number=, token=2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA, start_number=, sign=8733F8CDDE288C287FBA9011E71D9E12}
2020-03-13 10:30:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-13 10:30:01 -耗时 : 0
2020-03-13 10:30:01 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 10:30:01 -Reconnected to 120.25.164.176:10379
2020-03-13 10:30:10 -此处进行解密+验签+身份验证
2020-03-13 10:30:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:10 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 10:30:10 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:10 -<==      Total: 0
2020-03-13 10:30:10 -耗时 : 20
2020-03-13 10:30:26 -此处进行解密+验签+身份验证
2020-03-13 10:30:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:26 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:26 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:26 -<==      Total: 0
2020-03-13 10:30:26 -耗时 : 59
2020-03-13 10:30:30 -此处进行解密+验签+身份验证
2020-03-13 10:30:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:30 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:30 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:30 -<==      Total: 0
2020-03-13 10:30:30 -耗时 : 11
2020-03-13 10:30:39 -此处进行解密+验签+身份验证
2020-03-13 10:30:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:39 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:39 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:39 -<==      Total: 0
2020-03-13 10:30:39 -耗时 : 27
2020-03-13 10:30:42 -此处进行解密+验签+身份验证
2020-03-13 10:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:42 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:42 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:42 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:42 -<==      Total: 0
2020-03-13 10:30:42 -耗时 : 10
2020-03-13 10:30:49 -此处进行解密+验签+身份验证
2020-03-13 10:30:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:49 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:49 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:49 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:49 -<==      Total: 0
2020-03-13 10:30:49 -耗时 : 10
2020-03-13 10:30:51 -此处进行解密+验签+身份验证
2020-03-13 10:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:51 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:51 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:51 -<==      Total: 0
2020-03-13 10:30:51 -耗时 : 14
2020-03-13 10:30:52 -此处进行解密+验签+身份验证
2020-03-13 10:30:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:30:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:30:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:30:52 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:30:52 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:30:52 -<==      Total: 0
2020-03-13 10:30:52 -耗时 : 10
2020-03-13 10:31:01 -此处进行解密+验签+身份验证
2020-03-13 10:31:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:31:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:31:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 10:31:01 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-13 10:31:01 -==> Parameters: 2420(String)
2020-03-13 10:31:01 -<==      Total: 55
2020-03-13 10:31:01 -耗时 : 31
2020-03-13 10:31:13 -此处进行解密+验签+身份验证
2020-03-13 10:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:31:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:31:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 10:31:13 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-13 10:31:13 -==> Parameters: 2420(String)
2020-03-13 10:31:13 -<==      Total: 0
2020-03-13 10:31:13 -耗时 : 34
2020-03-13 10:31:30 -此处进行解密+验签+身份验证
2020-03-13 10:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:31:30 -此处进行解密+验签+身份验证
2020-03-13 10:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:31:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-13 10:31:30 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:31:30 -==> Parameters: 2420(String)
2020-03-13 10:31:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-13 10:31:30 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:31:30 -==> Parameters: 2420(String)
2020-03-13 10:31:30 -<==      Total: 0
2020-03-13 10:31:30 -耗时 : 9
2020-03-13 10:31:30 -<==      Total: 0
2020-03-13 10:31:30 -耗时 : 22
2020-03-13 10:31:56 -此处进行解密+验签+身份验证
2020-03-13 10:31:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:31:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:31:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-13 10:31:56 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:31:56 -==> Parameters: 2420(String)
2020-03-13 10:31:56 -<==      Total: 0
2020-03-13 10:31:56 -耗时 : 11
2020-03-13 10:32:21 -此处进行解密+验签+身份验证
2020-03-13 10:32:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:32:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:32:21 -此处进行解密+验签+身份验证
2020-03-13 10:32:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:32:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:32:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:32:21 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:32:21 -==> Parameters: 2420(String), MPOS(String)
2020-03-13 10:32:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:32:21 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:32:21 -==> Parameters: 2420(String), TraditionalPOS(String)
2020-03-13 10:32:21 -<==      Total: 0
2020-03-13 10:32:21 -耗时 : 11
2020-03-13 10:32:21 -<==      Total: 0
2020-03-13 10:32:21 -耗时 : 24
2020-03-13 10:33:03 -此处进行解密+验签+身份验证
2020-03-13 10:33:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:33:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:33:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:33:03 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:33:03 -==> Parameters: 2420(String), epos(String)
2020-03-13 10:33:03 -<==      Total: 0
2020-03-13 10:33:03 -耗时 : 15
2020-03-13 10:33:21 -此处进行解密+验签+身份验证
2020-03-13 10:33:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:33:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:33:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:33:21 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:33:21 -==> Parameters: 2420(String), TrafficCard(String)
2020-03-13 10:33:21 -<==      Total: 0
2020-03-13 10:33:21 -耗时 : 10
2020-03-13 10:34:21 -此处进行解密+验签+身份验证
2020-03-13 10:34:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:34:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:34:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:34:21 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:34:21 -==> Parameters: 2420(String), TraditionalPOS(String)
2020-03-13 10:34:21 -<==      Total: 0
2020-03-13 10:34:21 -耗时 : 11
2020-03-13 10:34:40 -此处进行解密+验签+身份验证
2020-03-13 10:34:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:34:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:34:40 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:34:40 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:34:40 -==> Parameters: 2420(String), epos(String)
2020-03-13 10:34:40 -<==      Total: 0
2020-03-13 10:34:40 -耗时 : 14
2020-03-13 10:35:13 -此处进行解密+验签+身份验证
2020-03-13 10:35:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:35:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:35:13 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 10:35:13 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 10:35:13 -==> Parameters: 2420(String), TrafficCard(String)
2020-03-13 10:35:13 -<==      Total: 0
2020-03-13 10:35:13 -耗时 : 12
2020-03-13 10:35:30 -此处进行解密+验签+身份验证
2020-03-13 10:35:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:35:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:35:30 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:35:30 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:35:30 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:35:30 -<==      Total: 0
2020-03-13 10:35:30 -耗时 : 22
2020-03-13 10:35:43 -此处进行解密+验签+身份验证
2020-03-13 10:35:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:35:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:35:43 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 10:35:43 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 10:35:43 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:35:43 -<==      Total: 0
2020-03-13 10:35:43 -耗时 : 9
2020-03-13 10:35:56 -此处进行解密+验签+身份验证
2020-03-13 10:35:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:35:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:35:56 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 10:35:56 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type='epos' 
2020-03-13 10:35:56 -==> Parameters: 2420(String)
2020-03-13 10:35:56 -<==      Total: 0
2020-03-13 10:35:56 -耗时 : 22
2020-03-13 10:36:06 -此处进行解密+验签+身份验证
2020-03-13 10:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:06 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 10:36:06 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-13 10:36:06 -==> Parameters: 2420(String)
2020-03-13 10:36:06 -<==      Total: 55
2020-03-13 10:36:06 -耗时 : 9
2020-03-13 10:36:09 -此处进行解密+验签+身份验证
2020-03-13 10:36:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:09 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:09 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 10:36:09 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-13 10:36:09 -==> Parameters: 2420(String)
2020-03-13 10:36:09 -<==      Total: 55
2020-03-13 10:36:09 -耗时 : 9
2020-03-13 10:36:20 -此处进行解密+验签+身份验证
2020-03-13 10:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:20 -此处进行解密+验签+身份验证
2020-03-13 10:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-13 10:36:20 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:36:20 -==> Parameters: 2420(String)
2020-03-13 10:36:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-13 10:36:20 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:36:20 -==> Parameters: 2420(String)
2020-03-13 10:36:20 -<==      Total: 0
2020-03-13 10:36:20 -耗时 : 16
2020-03-13 10:36:20 -<==      Total: 0
2020-03-13 10:36:20 -耗时 : 10
2020-03-13 10:36:27 -此处进行解密+验签+身份验证
2020-03-13 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:27 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposUnbindRecordList
2020-03-13 10:36:27 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_mpos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:36:27 -==> Parameters: 2420(String)
2020-03-13 10:36:27 -<==      Total: 0
2020-03-13 10:36:27 -耗时 : 10
2020-03-13 10:36:38 -此处进行解密+验签+身份验证
2020-03-13 10:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-13 10:36:38 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:36:38 -==> Parameters: 2420(String)
2020-03-13 10:36:38 -<==      Total: 0
2020-03-13 10:36:38 -耗时 : 14
2020-03-13 10:36:58 -此处进行解密+验签+身份验证
2020-03-13 10:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:36:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-13 10:36:58 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:36:58 -==> Parameters: 2420(String)
2020-03-13 10:36:58 -<==      Total: 0
2020-03-13 10:36:58 -耗时 : 10
2020-03-13 10:41:37 -此处进行解密+验签+身份验证
2020-03-13 10:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:41:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:41:37 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosUnbindRecordList
2020-03-13 10:41:37 -==>  Preparing: SELECT cast(id as char) as unbind_id, sn, status, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_unbind_record_info WHERE user_id = ? ORDER BY id desc limit 0,10 
2020-03-13 10:41:37 -==> Parameters: 2420(String)
2020-03-13 10:41:37 -<==      Total: 0
2020-03-13 10:41:37 -耗时 : 23
2020-03-13 10:42:10 -此处进行解密+验签+身份验证
2020-03-13 10:42:10 -此处进行解密+验签+身份验证
2020-03-13 10:42:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:10 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:42:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:42:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:42:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:42:10 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:42:10 -==> Parameters: 2420(String)
2020-03-13 10:42:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:42:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -耗时 : 22
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:42:10 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:42:10 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:42:10 -<==    Updates: 1
2020-03-13 10:42:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:42:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:42:10 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:42:10 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:42:10 -<==    Updates: 1
2020-03-13 10:42:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:42:10 -==> Parameters: 
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:42:10 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:42:10 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:42:10 -<==    Updates: 1
2020-03-13 10:42:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:42:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:42:10 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:42:10 -<==      Total: 1
2020-03-13 10:42:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:42:10 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:42:10 -<==    Updates: 1
2020-03-13 10:42:10 -耗时 : 131
2020-03-13 10:42:16 -此处进行解密+验签+身份验证
2020-03-13 10:42:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:16 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-13 10:42:16 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-13 10:42:16 -==> Parameters: 1(String), 2420(String), applyRateFlag(String)
2020-03-13 10:42:16 -<==    Updates: 1
2020-03-13 10:42:16 -耗时 : 16
2020-03-13 10:42:16 -此处进行解密+验签+身份验证
2020-03-13 10:42:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:16 -此处进行解密+验签+身份验证
2020-03-13 10:42:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:16 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-13 10:42:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:16 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposList
2020-03-13 10:42:16 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_mpos_info t INNER JOIN t_sys_mpos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_mpos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-13 10:42:16 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:16 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-13 10:42:16 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:16 -<==      Total: 0
2020-03-13 10:42:16 -耗时 : 38
2020-03-13 10:42:16 -<==      Total: 0
2020-03-13 10:42:16 -耗时 : 29
2020-03-13 10:42:43 -此处进行解密+验签+身份验证
2020-03-13 10:42:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:43 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-13 10:42:43 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@70029465 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:42:43 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-13 10:42:43 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:43 -<==      Total: 0
2020-03-13 10:42:43 -耗时 : 35
2020-03-13 10:42:58 -此处进行解密+验签+身份验证
2020-03-13 10:42:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:42:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:42:58 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosList
2020-03-13 10:42:58 -==>  Preparing: SELECT t1.sn, t1.credit_card_rate FROM t_user_traditional_pos_info t INNER JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn where t.user_id = ? and t.state_status = '1' and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_apply_cardrate_trapos_record_info t2 WHERE t2.user_id = ? AND t2.sn = t.sn AND t2.status = '00' ) order by t.id desc 
2020-03-13 10:42:58 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:42:58 -<==      Total: 0
2020-03-13 10:42:58 -耗时 : 21
2020-03-13 10:43:13 -此处进行解密+验签+身份验证
2020-03-13 10:43:13 -此处进行解密+验签+身份验证
2020-03-13 10:43:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:43:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:43:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:43:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:43:13 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateMposRecordList
2020-03-13 10:43:13 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-13 10:43:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@23def70e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:43:13 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_mpos_record_info where user_id = ? order by id desc limit 0,10 
2020-03-13 10:43:13 -==> Parameters: 2420(String)
2020-03-13 10:43:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1610f42f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:43:13 -<==      Total: 0
2020-03-13 10:43:13 -耗时 : 23
2020-03-13 10:43:13 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1cd69757 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:43:13 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type is null order by id desc limit 0,10 
2020-03-13 10:43:13 -==> Parameters: 2420(String)
2020-03-13 10:43:13 -<==      Total: 0
2020-03-13 10:43:13 -耗时 : 39
2020-03-13 10:43:20 -此处进行解密+验签+身份验证
2020-03-13 10:43:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:43:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:43:20 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-13 10:43:20 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type='epos' order by id desc limit 0,10 
2020-03-13 10:43:20 -==> Parameters: 2420(String)
2020-03-13 10:43:20 -<==      Total: 0
2020-03-13 10:43:20 -耗时 : 22
2020-03-13 10:43:40 -此处进行解密+验签+身份验证
2020-03-13 10:43:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:43:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:43:40 -请求地址 : http://192.168.191.1:8080/api/sys/creditcardratesapply/getApplyRateTraditionalPosRecordList
2020-03-13 10:43:40 -==>  Preparing: select cast(id as char) as apply_id, sn, credit_card_rate_old, credit_card_rate_new, status, remark, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_apply_cardrate_trapos_record_info where user_id = ? and pos_type='epos' order by id desc limit 0,10 
2020-03-13 10:43:40 -==> Parameters: 2420(String)
2020-03-13 10:43:40 -<==      Total: 0
2020-03-13 10:43:40 -耗时 : 22
2020-03-13 10:44:47 -此处进行解密+验签+身份验证
2020-03-13 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:47 -此处进行解密+验签+身份验证
2020-03-13 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:47 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:44:47 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:44:47 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:44:47 -==> Parameters: 2420(String)
2020-03-13 10:44:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:44:47 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@77237b49 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -耗时 : 22
2020-03-13 10:44:47 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4ce237b9 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:44:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:44:47 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:47 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:47 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:44:47 -<==    Updates: 1
2020-03-13 10:44:47 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:44:47 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:47 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:47 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:44:47 -<==    Updates: 1
2020-03-13 10:44:47 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:44:47 -==> Parameters: 
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:47 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:47 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:44:47 -<==    Updates: 1
2020-03-13 10:44:47 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:44:47 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:47 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:44:47 -<==      Total: 1
2020-03-13 10:44:47 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:47 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:44:47 -<==    Updates: 1
2020-03-13 10:44:47 -耗时 : 213
2020-03-13 10:44:49 -此处进行解密+验签+身份验证
2020-03-13 10:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:49 -此处进行解密+验签+身份验证
2020-03-13 10:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:49 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 10:44:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_03
2020-03-13 10:44:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_03 , return
2020-03-13 10:44:49 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 10:44:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-13 10:44:49 -耗时 : 12
2020-03-13 10:44:49 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-13 10:44:49 -耗时 : 10
2020-03-13 10:44:51 -此处进行解密+验签+身份验证
2020-03-13 10:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 10:44:51 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_04
2020-03-13 10:44:51 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_04 , return
2020-03-13 10:44:51 -耗时 : 8
2020-03-13 10:44:53 -此处进行解密+验签+身份验证
2020-03-13 10:44:53 -此处进行解密+验签+身份验证
2020-03-13 10:44:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:44:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:44:53 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 10:44:53 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 10:44:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 10:44:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 10:44:53 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 10:44:53 -==> Parameters: 2420(String)
2020-03-13 10:44:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7fd5edef (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -耗时 : 23
2020-03-13 10:44:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@65eb6657 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 10:44:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:44:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:53 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 10:44:53 -<==    Updates: 1
2020-03-13 10:44:53 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 10:44:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:53 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 10:44:53 -<==    Updates: 1
2020-03-13 10:44:53 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 10:44:53 -==> Parameters: 
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:53 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:53 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 10:44:53 -<==    Updates: 1
2020-03-13 10:44:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 10:44:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 10:44:53 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 10:44:53 -<==      Total: 1
2020-03-13 10:44:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 10:44:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 10:44:54 -<==    Updates: 1
2020-03-13 10:44:54 -耗时 : 211
2020-03-13 10:45:04 -此处进行解密+验签+身份验证
2020-03-13 10:45:04 -此处进行解密+验签+身份验证
2020-03-13 10:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:45:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:45:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-13 10:45:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-13 10:45:04 -==> Parameters: 2420(String)
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 10:45:04 -==> Parameters: 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 10:45:04 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-13 10:45:04 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:45:04 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:45:04 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:45:04 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 10:45:04 -==> Parameters: 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:45:04 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -耗时 : 113
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-13 10:45:04 -==> Parameters: 2420(String)
2020-03-13 10:45:04 -<==      Total: 1
2020-03-13 10:45:04 -耗时 : 150
2020-03-13 10:45:12 -此处进行解密+验签+身份验证
2020-03-13 10:45:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:45:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:45:12 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 10:45:12 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-13 10:45:12 -==> Parameters: 2420(String)
2020-03-13 10:45:12 -<==      Total: 1
2020-03-13 10:45:12 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-13 10:45:12 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:45:12 -<==      Total: 1
2020-03-13 10:45:12 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:45:12 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:45:12 -<==      Total: 1
2020-03-13 10:45:12 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:45:12 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:45:12 -<==      Total: 1
2020-03-13 10:45:12 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 10:45:12 -==> Parameters: 2420(String)
2020-03-13 10:45:12 -<==      Total: 1
2020-03-13 10:45:12 -耗时 : 92
2020-03-13 10:46:50 -此处进行解密+验签+身份验证
2020-03-13 10:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:46:50 -此处进行解密+验签+身份验证
2020-03-13 10:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:46:50 -解密异常：{token=2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA, sign=8733F8CDDE288C287FBA9011E71D9E12}
2020-03-13 10:46:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 10:46:50 -耗时 : 0
2020-03-13 10:46:50 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 10:46:50 -Reconnected to 120.25.164.176:10379
2020-03-13 10:46:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:46:50 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-13 10:46:50 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-13 10:46:50 -==> Parameters: 2420(String)
2020-03-13 10:46:50 -<==      Total: 1
2020-03-13 10:46:50 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-13 10:46:50 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:46:50 -<==      Total: 1
2020-03-13 10:46:50 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:46:50 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:46:50 -<==      Total: 1
2020-03-13 10:46:50 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:46:50 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:46:50 -<==      Total: 1
2020-03-13 10:46:50 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-13 10:46:50 -==> Parameters: 2420(String)
2020-03-13 10:46:50 -<==      Total: 1
2020-03-13 10:46:50 -耗时 : 79
2020-03-13 10:47:39 -此处进行解密+验签+身份验证
2020-03-13 10:47:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:47:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:47:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 10:47:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-13 10:47:39 -==> Parameters: 2420(String)
2020-03-13 10:47:39 -<==      Total: 1
2020-03-13 10:47:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-13 10:47:39 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:47:39 -<==      Total: 1
2020-03-13 10:47:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:47:39 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:47:39 -<==      Total: 1
2020-03-13 10:47:39 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:47:39 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:47:39 -<==      Total: 1
2020-03-13 10:47:39 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 10:47:39 -==> Parameters: 2420(String)
2020-03-13 10:47:39 -<==      Total: 1
2020-03-13 10:47:39 -耗时 : 85
2020-03-13 10:57:23 -Starting LongEcologicalApplication on PC-201905161910 with PID 2924 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 10:57:23 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 10:57:23 -No active profile set, falling back to default profiles: default
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:57:24 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 10:57:24 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 10:57:25 -Finished Spring Data repository scanning in 84ms. Found 0 repository interfaces.
2020-03-13 10:57:25 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 10:57:25 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 10:57:25 -Finished Spring Data repository scanning in 80ms. Found 0 repository interfaces.
2020-03-13 10:57:25 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$328e6ebb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 10:57:25 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$2d12535b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 10:57:26 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 10:57:26 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 10:57:26 -Starting service [Tomcat]
2020-03-13 10:57:26 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 10:57:26 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 10:57:26 -Initializing Spring embedded WebApplicationContext
2020-03-13 10:57:26 -Root WebApplicationContext: initialization completed in 2894 ms
2020-03-13 10:57:26 -Filter xssFilter was not registered (disabled)
2020-03-13 10:57:27 -HikariPool-1 - Starting...
2020-03-13 10:57:27 -HikariPool-1 - Start completed.
2020-03-13 10:57:27 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 10:57:27 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 10:57:27 -HHH000206: hibernate.properties not found
2020-03-13 10:57:27 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 10:57:28 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 10:57:28 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 10:57:28 -Using default implementation for ThreadExecutor
2020-03-13 10:57:28 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 10:57:28 -Quartz Scheduler v.2.3.0 created.
2020-03-13 10:57:28 -RAMJobStore initialized.
2020-03-13 10:57:28 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 10:57:28 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 10:57:28 -Quartz scheduler version: 2.3.0
2020-03-13 10:57:29 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7b10472e
2020-03-13 10:57:29 -STAET TaskExecutorConfig
2020-03-13 10:57:29 -Initializing ExecutorService
2020-03-13 10:57:29 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 10:57:30 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 10:57:30 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 10:57:30 -Initializing ExecutorService 'taskScheduler'
2020-03-13 10:57:30 -Starting Quartz Scheduler now
2020-03-13 10:57:30 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 10:57:30 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 10:57:31 -Using a shared selector for servlet write/read
2020-03-13 10:57:31 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 10:57:31 -Started LongEcologicalApplication in 8.377 seconds (JVM running for 10.676)
2020-03-13 10:57:50 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 10:57:50 -Initializing Servlet 'dispatcherServlet'
2020-03-13 10:57:50 -Completed initialization in 14 ms
2020-03-13 10:57:50 -此处进行解密+验签+身份验证
2020-03-13 10:57:50 -此处进行解密+验签+身份验证
2020-03-13 10:57:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:57:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 10:57:50 -Starting without optional epoll library
2020-03-13 10:57:50 -Starting without optional kqueue library
2020-03-13 10:57:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:57:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 10:57:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-13 10:57:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 10:57:51 -==> Parameters: 2420(String)
2020-03-13 10:57:51 -==> Parameters: 2420(String)
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-13 10:57:51 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:57:51 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 10:57:51 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:57:51 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:57:51 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 10:57:51 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-13 10:57:51 -==> Parameters: 2420(String)
2020-03-13 10:57:51 -MerchantManageServiceImpl -- getSummaryTraditionalPosList方法处理异常：nested exception is org.apache.ibatis.binding.BindingException: Parameter 'pos_type' not found. Available parameters are [map, param1]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getStandardMerchantTraditionalPosNum(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getSummaryTraditionalPosList(MerchantManageServiceImpl.java:68)
	at com.example.longecological.controller.merchant.MerchantManageController.getSummaryTraditionalPosList(MerchantManageController.java:35)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$17b4d47b.getSummaryTraditionalPosList(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 10:57:51 -耗时 : 130
2020-03-13 10:57:51 -<==      Total: 1
2020-03-13 10:57:51 -耗时 : 143
2020-03-13 10:59:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 10:59:21 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 10:59:21 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 10:59:21 -Shutting down Quartz Scheduler
2020-03-13 10:59:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 10:59:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 10:59:21 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 10:59:21 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 10:59:21 -HikariPool-1 - Shutdown initiated...
2020-03-13 10:59:21 -HikariPool-1 - Shutdown completed.
2020-03-13 10:59:39 -Starting LongEcologicalApplication on PC-201905161910 with PID 17760 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 10:59:39 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 10:59:39 -No active profile set, falling back to default profiles: default
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:40 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 10:59:41 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 10:59:41 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 10:59:41 -Finished Spring Data repository scanning in 90ms. Found 0 repository interfaces.
2020-03-13 10:59:41 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 10:59:41 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 10:59:41 -Finished Spring Data repository scanning in 75ms. Found 0 repository interfaces.
2020-03-13 10:59:41 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$87c54434] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 10:59:41 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$824928d4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 10:59:42 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 10:59:42 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 10:59:42 -Starting service [Tomcat]
2020-03-13 10:59:42 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 10:59:42 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 10:59:42 -Initializing Spring embedded WebApplicationContext
2020-03-13 10:59:42 -Root WebApplicationContext: initialization completed in 3198 ms
2020-03-13 10:59:42 -Filter xssFilter was not registered (disabled)
2020-03-13 10:59:43 -HikariPool-1 - Starting...
2020-03-13 10:59:43 -HikariPool-1 - Start completed.
2020-03-13 10:59:43 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 10:59:43 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 10:59:43 -HHH000206: hibernate.properties not found
2020-03-13 10:59:43 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 10:59:44 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 10:59:44 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 10:59:44 -Using default implementation for ThreadExecutor
2020-03-13 10:59:44 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 10:59:44 -Quartz Scheduler v.2.3.0 created.
2020-03-13 10:59:44 -RAMJobStore initialized.
2020-03-13 10:59:44 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 10:59:44 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 10:59:44 -Quartz scheduler version: 2.3.0
2020-03-13 10:59:44 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@185a0811
2020-03-13 10:59:45 -STAET TaskExecutorConfig
2020-03-13 10:59:45 -Initializing ExecutorService
2020-03-13 10:59:45 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 10:59:45 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 10:59:46 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 10:59:46 -Initializing ExecutorService 'taskScheduler'
2020-03-13 10:59:46 -Starting Quartz Scheduler now
2020-03-13 10:59:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 10:59:46 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 10:59:46 -Using a shared selector for servlet write/read
2020-03-13 10:59:46 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 10:59:46 -Started LongEcologicalApplication in 8.116 seconds (JVM running for 9.432)
2020-03-13 11:00:10 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 11:00:10 -Initializing Servlet 'dispatcherServlet'
2020-03-13 11:00:10 -Completed initialization in 16 ms
2020-03-13 11:00:11 -此处进行解密+验签+身份验证
2020-03-13 11:00:11 -此处进行解密+验签+身份验证
2020-03-13 11:00:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:00:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:00:11 -Starting without optional epoll library
2020-03-13 11:00:11 -Starting without optional kqueue library
2020-03-13 11:00:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:00:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:00:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 11:00:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 11:00:11 -==> Parameters: 2420(String)
2020-03-13 11:00:11 -==> Parameters: 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 11:00:11 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 11:00:11 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 11:00:11 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 11:00:11 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 11:00:11 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 11:00:11 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 11:00:11 -==> Parameters: 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-13 11:00:11 -==> Parameters: 2420(String)
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -耗时 : 121
2020-03-13 11:00:11 -<==      Total: 1
2020-03-13 11:00:11 -耗时 : 131
2020-03-13 11:00:17 -此处进行解密+验签+身份验证
2020-03-13 11:00:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:00:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:00:17 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 11:00:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-13 11:00:17 -==> Parameters: 2420(String)
2020-03-13 11:00:17 -<==      Total: 1
2020-03-13 11:00:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-13 11:00:17 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 11:00:17 -<==      Total: 1
2020-03-13 11:00:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 11:00:17 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 11:00:17 -<==      Total: 1
2020-03-13 11:00:17 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 11:00:17 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 11:00:17 -<==      Total: 1
2020-03-13 11:00:17 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-13 11:00:17 -==> Parameters: 2420(String)
2020-03-13 11:00:17 -<==      Total: 1
2020-03-13 11:00:17 -耗时 : 76
2020-03-13 11:00:44 -此处进行解密+验签+身份验证
2020-03-13 11:00:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:00:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:00:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 11:00:44 -此处进行解密+验签+身份验证
2020-03-13 11:00:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:00:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 11:00:44 -==> Parameters: 2420(String)
2020-03-13 11:00:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-13 11:00:44 -==> Parameters: 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 11:00:44 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-13 11:00:44 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 11:00:44 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 11:00:44 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 11:00:44 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 11:00:44 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-13 11:00:44 -==> Parameters: 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 11:00:44 -==> Parameters: 2420(String)
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -耗时 : 54
2020-03-13 11:00:44 -<==      Total: 1
2020-03-13 11:00:44 -耗时 : 76
2020-03-13 11:01:27 -此处进行解密+验签+身份验证
2020-03-13 11:01:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:27 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:27 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 11:01:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type='epos' 
2020-03-13 11:01:27 -==> Parameters: 2420(String)
2020-03-13 11:01:27 -<==      Total: 1
2020-03-13 11:01:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type='epos' 
2020-03-13 11:01:27 -==> Parameters: 2420(String), 2420(String), 202003(String)
2020-03-13 11:01:27 -<==      Total: 1
2020-03-13 11:01:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type='epos' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 11:01:27 -==> Parameters: 2420(String), 2420(String), 20200212(String), 20200313(String), 2420(String)
2020-03-13 11:01:27 -<==      Total: 1
2020-03-13 11:01:27 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type='epos' AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 11:01:27 -==> Parameters: 2420(String), 20200113(String), 2420(String), 20200113(String), 20200313(String), 2420(String)
2020-03-13 11:01:27 -<==      Total: 1
2020-03-13 11:01:27 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='03' 
2020-03-13 11:01:27 -==> Parameters: 2420(String)
2020-03-13 11:01:27 -<==      Total: 1
2020-03-13 11:01:27 -耗时 : 75
2020-03-13 11:01:40 -此处进行解密+验签+身份验证
2020-03-13 11:01:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:40 -此处进行解密+验签+身份验证
2020-03-13 11:01:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:40 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 11:01:40 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 11:01:40 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 11:01:40 -==> Parameters: 2420(String)
2020-03-13 11:01:40 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 11:01:40 -==> Parameters: 2420(String)
2020-03-13 11:01:40 -<==      Total: 1
2020-03-13 11:01:40 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 11:01:40 -==> Parameters: 2420(String)
2020-03-13 11:01:40 -<==      Total: 0
2020-03-13 11:01:40 -耗时 : 25
2020-03-13 11:01:40 -<==      Total: 1
2020-03-13 11:01:40 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 11:01:40 -==> Parameters: 2420(String)
2020-03-13 11:01:40 -<==      Total: 1
2020-03-13 11:01:40 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 11:01:40 -==> Parameters: 2420(String)
2020-03-13 11:01:40 -<==      Total: 1
2020-03-13 11:01:40 -耗时 : 54
2020-03-13 11:01:53 -此处进行解密+验签+身份验证
2020-03-13 11:01:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:53 -此处进行解密+验签+身份验证
2020-03-13 11:01:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:53 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 11:01:53 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 11:01:53 -==> Parameters: 2420(String)
2020-03-13 11:01:53 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 11:01:53 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 11:01:53 -==> Parameters: 2420(String)
2020-03-13 11:01:53 -<==      Total: 0
2020-03-13 11:01:53 -<==      Total: 1
2020-03-13 11:01:53 -耗时 : 13
2020-03-13 11:01:53 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 11:01:53 -==> Parameters: 2420(String)
2020-03-13 11:01:53 -<==      Total: 1
2020-03-13 11:01:53 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 11:01:53 -==> Parameters: 2420(String)
2020-03-13 11:01:53 -<==      Total: 1
2020-03-13 11:01:53 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 11:01:53 -==> Parameters: 2420(String)
2020-03-13 11:01:53 -<==      Total: 1
2020-03-13 11:01:53 -耗时 : 62
2020-03-13 11:01:59 -此处进行解密+验签+身份验证
2020-03-13 11:01:59 -此处进行解密+验签+身份验证
2020-03-13 11:01:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:01:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:01:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 11:01:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 11:01:59 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 11:01:59 -==> Parameters: 2420(String)
2020-03-13 11:01:59 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 11:01:59 -==> Parameters: 2420(String)
2020-03-13 11:01:59 -<==      Total: 1
2020-03-13 11:01:59 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 11:01:59 -==> Parameters: 2420(String)
2020-03-13 11:01:59 -<==      Total: 0
2020-03-13 11:01:59 -耗时 : 21
2020-03-13 11:01:59 -<==      Total: 1
2020-03-13 11:01:59 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 11:01:59 -==> Parameters: 2420(String)
2020-03-13 11:01:59 -<==      Total: 1
2020-03-13 11:01:59 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 11:01:59 -==> Parameters: 2420(String)
2020-03-13 11:01:59 -<==      Total: 1
2020-03-13 11:01:59 -耗时 : 45
2020-03-13 11:06:06 -此处进行解密+验签+身份验证
2020-03-13 11:06:06 -此处进行解密+验签+身份验证
2020-03-13 11:06:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:06:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:06:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:06:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:06:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 11:06:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 11:06:06 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 11:06:06 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 11:06:06 -==> Parameters: 2420(String)
2020-03-13 11:06:06 -==> Parameters: 2420(String)
2020-03-13 11:06:06 -<==      Total: 0
2020-03-13 11:06:06 -耗时 : 12
2020-03-13 11:06:06 -<==      Total: 1
2020-03-13 11:06:06 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 11:06:06 -==> Parameters: 2420(String)
2020-03-13 11:06:06 -<==      Total: 1
2020-03-13 11:06:06 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 11:06:06 -==> Parameters: 2420(String)
2020-03-13 11:06:06 -<==      Total: 1
2020-03-13 11:06:06 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 11:06:06 -==> Parameters: 2420(String)
2020-03-13 11:06:06 -<==      Total: 1
2020-03-13 11:06:06 -耗时 : 61
2020-03-13 11:06:30 -此处进行解密+验签+身份验证
2020-03-13 11:06:30 -此处进行解密+验签+身份验证
2020-03-13 11:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:06:30 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:06:30 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:06:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:06:30 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:06:30 -==> Parameters: 2420(String)
2020-03-13 11:06:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:06:30 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -耗时 : 18
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:06:30 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:06:30 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:06:30 -<==    Updates: 1
2020-03-13 11:06:30 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:06:30 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:06:30 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:06:30 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:06:30 -<==    Updates: 1
2020-03-13 11:06:30 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:06:30 -==> Parameters: 
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:06:30 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:06:30 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:06:30 -<==    Updates: 1
2020-03-13 11:06:30 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:06:30 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:06:30 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:06:30 -<==      Total: 1
2020-03-13 11:06:30 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:06:30 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:06:30 -<==    Updates: 1
2020-03-13 11:06:30 -耗时 : 192
2020-03-13 11:06:35 -此处进行解密+验签+身份验证
2020-03-13 11:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:06:35 -此处进行解密+验签+身份验证
2020-03-13 11:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:06:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:06:35 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-13 11:06:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 11:06:35 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null 
2020-03-13 11:06:35 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:06:35 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 11:06:35 -==> Parameters: 2420(String)
2020-03-13 11:06:35 -<==      Total: 2
2020-03-13 11:06:35 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy122.getHomePageInfoByTraditionalPos(Unknown Source)
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:45)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$836f3716.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 11:06:35 -耗时 : 19
2020-03-13 11:06:35 -<==      Total: 1
2020-03-13 11:06:35 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 11:06:35 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:06:35 -<==      Total: 1
2020-03-13 11:06:35 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 11:06:35 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:06:35 -<==      Total: 1
2020-03-13 11:06:35 -耗时 : 100
2020-03-13 11:15:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 11:15:46 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 11:15:46 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 11:15:46 -Shutting down Quartz Scheduler
2020-03-13 11:15:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 11:15:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 11:15:46 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 11:15:46 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 11:15:46 -HikariPool-1 - Shutdown initiated...
2020-03-13 11:15:46 -HikariPool-1 - Shutdown completed.
2020-03-13 11:16:01 -Starting LongEcologicalApplication on PC-201905161910 with PID 14984 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 11:16:01 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 11:16:01 -No active profile set, falling back to default profiles: default
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:16:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 11:16:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 11:16:02 -Finished Spring Data repository scanning in 74ms. Found 0 repository interfaces.
2020-03-13 11:16:02 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 11:16:02 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 11:16:02 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-03-13 11:16:02 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$ab06bf05] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 11:16:03 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a58aa3a5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 11:16:03 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 11:16:03 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 11:16:03 -Starting service [Tomcat]
2020-03-13 11:16:03 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 11:16:03 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 11:16:03 -Initializing Spring embedded WebApplicationContext
2020-03-13 11:16:03 -Root WebApplicationContext: initialization completed in 2591 ms
2020-03-13 11:16:03 -Filter xssFilter was not registered (disabled)
2020-03-13 11:16:04 -HikariPool-1 - Starting...
2020-03-13 11:16:04 -HikariPool-1 - Start completed.
2020-03-13 11:16:04 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 11:16:04 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 11:16:04 -HHH000206: hibernate.properties not found
2020-03-13 11:16:04 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 11:16:04 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 11:16:04 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 11:16:05 -Using default implementation for ThreadExecutor
2020-03-13 11:16:05 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 11:16:05 -Quartz Scheduler v.2.3.0 created.
2020-03-13 11:16:05 -RAMJobStore initialized.
2020-03-13 11:16:05 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 11:16:05 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 11:16:05 -Quartz scheduler version: 2.3.0
2020-03-13 11:16:05 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@7523d5a1
2020-03-13 11:16:05 -STAET TaskExecutorConfig
2020-03-13 11:16:05 -Initializing ExecutorService
2020-03-13 11:16:05 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 11:16:06 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 11:16:06 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 11:16:06 -Initializing ExecutorService 'taskScheduler'
2020-03-13 11:16:06 -Starting Quartz Scheduler now
2020-03-13 11:16:06 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 11:16:06 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 11:16:06 -Using a shared selector for servlet write/read
2020-03-13 11:16:06 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 11:16:06 -Started LongEcologicalApplication in 6.252 seconds (JVM running for 7.142)
2020-03-13 11:16:28 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 11:16:28 -Initializing Servlet 'dispatcherServlet'
2020-03-13 11:16:28 -Completed initialization in 11 ms
2020-03-13 11:16:28 -此处进行解密+验签+身份验证
2020-03-13 11:16:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:16:29 -Starting without optional epoll library
2020-03-13 11:16:29 -Starting without optional kqueue library
2020-03-13 11:16:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:16:29 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:16:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:16:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:16:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:16:29 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:16:29 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:16:29 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:16:29 -<==    Updates: 1
2020-03-13 11:16:29 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:16:29 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:16:29 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:16:29 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:16:29 -<==    Updates: 1
2020-03-13 11:16:29 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:16:29 -==> Parameters: 
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:16:29 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:16:29 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:16:29 -<==    Updates: 1
2020-03-13 11:16:29 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:16:29 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:16:29 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:16:29 -<==      Total: 1
2020-03-13 11:16:29 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:16:29 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:16:29 -<==    Updates: 1
2020-03-13 11:16:29 -耗时 : 259
2020-03-13 11:16:38 -此处进行解密+验签+身份验证
2020-03-13 11:16:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:16:38 -此处进行解密+验签+身份验证
2020-03-13 11:16:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:16:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:16:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:16:38 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-13 11:16:38 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 11:16:38 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 11:16:38 -==> Parameters: 2420(String)
2020-03-13 11:16:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-13 11:16:38 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:16:38 -<==      Total: 1
2020-03-13 11:16:38 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 11:16:38 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:16:38 -<==      Total: 1
2020-03-13 11:16:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-13 11:16:38 -==> Parameters: 2420(String)
2020-03-13 11:16:38 -<==      Total: 0
2020-03-13 11:16:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-13 11:16:38 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:16:38 -<==      Total: 1
2020-03-13 11:16:38 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-13 11:16:38 -==> Parameters: 2420(String)
2020-03-13 11:16:38 -<==      Total: 1
2020-03-13 11:16:38 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 11:16:38 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:16:38 -<==      Total: 0
2020-03-13 11:16:38 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' 
2020-03-13 11:16:38 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:16:38 -<==      Total: 1
2020-03-13 11:16:38 -耗时 : 82
2020-03-13 11:16:38 -<==      Total: 2
2020-03-13 11:16:38 -ReportFormsServiceImpl -- getHomePageInfo方法处理异常：nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 2
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy122.getHomePageInfoByEpos(Unknown Source)
	at com.example.longecological.service.reportforms.impl.ReportFormsServiceImpl.getHomePageInfo(ReportFormsServiceImpl.java:53)
	at com.example.longecological.controller.reportforms.ReportFormsController.getHomePageInfo(ReportFormsController.java:35)
	at com.example.longecological.controller.reportforms.ReportFormsController$$FastClassBySpringCGLIB$$c1aef99b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.reportforms.ReportFormsController$$EnhancerBySpringCGLIB$$430896ad.getHomePageInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 11:16:38 -耗时 : 95
2020-03-13 11:19:33 -Starting LongEcologicalApplication on PC-201905161910 with PID 1896 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 11:19:33 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 11:19:33 -No active profile set, falling back to default profiles: default
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 11:19:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 11:19:34 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 11:19:34 -Finished Spring Data repository scanning in 71ms. Found 0 repository interfaces.
2020-03-13 11:19:34 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 11:19:34 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 11:19:34 -Finished Spring Data repository scanning in 43ms. Found 0 repository interfaces.
2020-03-13 11:19:35 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$c4b32bbb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 11:19:35 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$bf37105b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 11:19:35 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 11:19:35 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 11:19:35 -Starting service [Tomcat]
2020-03-13 11:19:35 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 11:19:35 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 11:19:35 -Initializing Spring embedded WebApplicationContext
2020-03-13 11:19:35 -Root WebApplicationContext: initialization completed in 2115 ms
2020-03-13 11:19:35 -Filter xssFilter was not registered (disabled)
2020-03-13 11:19:36 -HikariPool-1 - Starting...
2020-03-13 11:19:36 -HikariPool-1 - Start completed.
2020-03-13 11:19:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 11:19:36 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 11:19:36 -HHH000206: hibernate.properties not found
2020-03-13 11:19:36 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 11:19:36 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 11:19:37 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 11:19:37 -Using default implementation for ThreadExecutor
2020-03-13 11:19:37 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 11:19:37 -Quartz Scheduler v.2.3.0 created.
2020-03-13 11:19:37 -RAMJobStore initialized.
2020-03-13 11:19:37 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 11:19:37 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 11:19:37 -Quartz scheduler version: 2.3.0
2020-03-13 11:19:37 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@48ccbb32
2020-03-13 11:19:37 -STAET TaskExecutorConfig
2020-03-13 11:19:37 -Initializing ExecutorService
2020-03-13 11:19:37 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 11:19:38 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 11:19:38 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 11:19:38 -Initializing ExecutorService 'taskScheduler'
2020-03-13 11:19:38 -Starting Quartz Scheduler now
2020-03-13 11:19:38 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 11:19:38 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 11:19:38 -Using a shared selector for servlet write/read
2020-03-13 11:19:38 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 11:19:38 -Started LongEcologicalApplication in 5.627 seconds (JVM running for 6.942)
2020-03-13 11:20:03 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 11:20:03 -Initializing Servlet 'dispatcherServlet'
2020-03-13 11:20:03 -Completed initialization in 14 ms
2020-03-13 11:20:03 -此处进行解密+验签+身份验证
2020-03-13 11:20:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:20:03 -Starting without optional epoll library
2020-03-13 11:20:03 -Starting without optional kqueue library
2020-03-13 11:20:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:20:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:20:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:20:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:20:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:20:04 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:20:04 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:20:04 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:20:04 -<==    Updates: 1
2020-03-13 11:20:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:20:04 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:20:04 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:20:04 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:20:04 -<==    Updates: 1
2020-03-13 11:20:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:20:04 -==> Parameters: 
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:20:04 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:20:04 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:20:04 -<==    Updates: 1
2020-03-13 11:20:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:20:04 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:20:04 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:20:04 -<==      Total: 1
2020-03-13 11:20:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:20:04 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:20:04 -<==    Updates: 1
2020-03-13 11:20:04 -耗时 : 294
2020-03-13 11:20:11 -此处进行解密+验签+身份验证
2020-03-13 11:20:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:20:11 -此处进行解密+验签+身份验证
2020-03-13 11:20:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:20:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:20:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:20:11 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-13 11:20:11 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 11:20:11 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-13 11:20:11 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:20:11 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 11:20:11 -==> Parameters: 2420(String)
2020-03-13 11:20:11 -<==      Total: 1
2020-03-13 11:20:11 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 11:20:11 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:20:11 -<==      Total: 1
2020-03-13 11:20:11 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-13 11:20:11 -==> Parameters: 2420(String)
2020-03-13 11:20:11 -<==      Total: 0
2020-03-13 11:20:11 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-13 11:20:11 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:20:11 -<==      Total: 1
2020-03-13 11:20:11 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-13 11:20:11 -==> Parameters: 2420(String)
2020-03-13 11:20:11 -<==      Total: 0
2020-03-13 11:20:11 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-13 11:20:11 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:20:11 -<==      Total: 1
2020-03-13 11:20:11 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 11:20:11 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:20:11 -<==      Total: 1
2020-03-13 11:20:11 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-13 11:20:11 -==> Parameters: 2420(String)
2020-03-13 11:20:11 -<==      Total: 1
2020-03-13 11:20:11 -耗时 : 93
2020-03-13 11:20:11 -<==      Total: 0
2020-03-13 11:20:11 -耗时 : 103
2020-03-13 11:22:22 -此处进行解密+验签+身份验证
2020-03-13 11:22:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:22 -此处进行解密+验签+身份验证
2020-03-13 11:22:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:22 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-13 11:22:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 11:22:22 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-13 11:22:22 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:22:22 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 11:22:22 -==> Parameters: 2420(String)
2020-03-13 11:22:22 -<==      Total: 1
2020-03-13 11:22:22 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-13 11:22:22 -==> Parameters: 2420(String)
2020-03-13 11:22:22 -<==      Total: 1
2020-03-13 11:22:22 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 11:22:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:22:22 -<==      Total: 0
2020-03-13 11:22:22 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-13 11:22:22 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:22:22 -<==      Total: 1
2020-03-13 11:22:22 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-13 11:22:22 -==> Parameters: 2420(String)
2020-03-13 11:22:22 -<==      Total: 0
2020-03-13 11:22:22 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-13 11:22:22 -==> Parameters: 202003(String), 2420(String)
2020-03-13 11:22:22 -<==      Total: 1
2020-03-13 11:22:22 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-13 11:22:22 -==> Parameters: 2420(String)
2020-03-13 11:22:22 -<==      Total: 1
2020-03-13 11:22:22 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 11:22:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:22:22 -<==      Total: 0
2020-03-13 11:22:22 -<==      Total: 1
2020-03-13 11:22:22 -耗时 : 91
2020-03-13 11:22:22 -耗时 : 88
2020-03-13 11:22:45 -此处进行解密+验签+身份验证
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:45 -此处进行解密+验签+身份验证
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:45 -此处进行解密+验签+身份验证
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosDetail
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:45 -此处进行解密+验签+身份验证
2020-03-13 11:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosDetail
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:45 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-13 11:22:45 -==> Parameters: 2420(String), 20200313(String)
2020-03-13 11:22:45 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-13 11:22:45 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:22:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosDetail
2020-03-13 11:22:45 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type is null 
2020-03-13 11:22:45 -==> Parameters: 2420(String), 20200313(String)
2020-03-13 11:22:45 -<==      Total: 0
2020-03-13 11:22:45 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosDetail
2020-03-13 11:22:45 -耗时 : 21
2020-03-13 11:22:45 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type is null 
2020-03-13 11:22:45 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:22:45 -<==      Total: 1
2020-03-13 11:22:45 -耗时 : 19
2020-03-13 11:22:45 -<==      Total: 0
2020-03-13 11:22:45 -耗时 : 11
2020-03-13 11:22:45 -<==      Total: 1
2020-03-13 11:22:45 -耗时 : 13
2020-03-13 11:22:59 -此处进行解密+验签+身份验证
2020-03-13 11:22:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:22:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:22:59 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosList
2020-03-13 11:22:59 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-13 11:22:59 -==> Parameters: 20200301(String), 2420(String)
2020-03-13 11:22:59 -<==      Total: 7
2020-03-13 11:22:59 -耗时 : 41
2020-03-13 11:23:11 -此处进行解密+验签+身份验证
2020-03-13 11:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:23:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:23:11 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosList
2020-03-13 11:23:11 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-13 11:23:11 -==> Parameters: 20200313(String), 2420(String)
2020-03-13 11:23:11 -<==      Total: 7
2020-03-13 11:23:11 -耗时 : 22
2020-03-13 11:23:29 -此处进行解密+验签+身份验证
2020-03-13 11:23:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:23:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:23:29 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosList
2020-03-13 11:23:29 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-13 11:23:29 -==> Parameters: 20200301(String), 2420(String)
2020-03-13 11:23:29 -<==      Total: 7
2020-03-13 11:23:29 -耗时 : 22
2020-03-13 11:23:41 -此处进行解密+验签+身份验证
2020-03-13 11:23:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:23:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:23:41 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosList
2020-03-13 11:23:41 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? and t2.pos_type is null order by t1.date 
2020-03-13 11:23:41 -==> Parameters: 20200313(String), 2420(String)
2020-03-13 11:23:41 -<==      Total: 7
2020-03-13 11:23:41 -耗时 : 24
2020-03-13 11:24:00 -此处进行解密+验签+身份验证
2020-03-13 11:24:00 -此处进行解密+验签+身份验证
2020-03-13 11:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:24:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:24:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:24:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:24:00 -==> Parameters: 2420(String)
2020-03-13 11:24:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:24:00 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -耗时 : 16
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:00 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:00 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:24:00 -<==    Updates: 1
2020-03-13 11:24:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:24:00 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:00 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:00 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:24:00 -<==    Updates: 1
2020-03-13 11:24:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:24:00 -==> Parameters: 
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:00 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:00 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:24:00 -<==    Updates: 1
2020-03-13 11:24:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:24:00 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:00 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:24:00 -<==      Total: 1
2020-03-13 11:24:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:00 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:24:00 -<==    Updates: 1
2020-03-13 11:24:00 -耗时 : 105
2020-03-13 11:24:06 -此处进行解密+验签+身份验证
2020-03-13 11:24:06 -此处进行解密+验签+身份验证
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:06 -此处进行解密+验签+身份验证
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:06 -此处进行解密+验签+身份验证
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyEposDetail
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyEposDetail
2020-03-13 11:24:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:06 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-13 11:24:06 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:24:06 -==>  Preparing: select cast(agency_performance as char) as performance, cast((under_num - refer_num) as char) as user_num, cast(agency_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-13 11:24:06 -==> Parameters: 2420(String), 20200313(String)
2020-03-13 11:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantEposDetail
2020-03-13 11:24:06 -<==      Total: 1
2020-03-13 11:24:06 -耗时 : 17
2020-03-13 11:24:06 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantEposDetail
2020-03-13 11:24:06 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_everyday where user_id = ? and cre_date = ? and pos_type='epos' 
2020-03-13 11:24:06 -==> Parameters: 2420(String), 20200313(String)
2020-03-13 11:24:06 -==>  Preparing: select cast(merchant_performance as char) as performance, cast(refer_num as char) as user_num, cast(merchant_trade_num as char) as act_num from t_summary_user_traditional_pos_benefit_month where user_id = ? and cre_month = ? and pos_type='epos' 
2020-03-13 11:24:06 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:24:06 -<==      Total: 0
2020-03-13 11:24:06 -耗时 : 20
2020-03-13 11:24:06 -<==      Total: 0
2020-03-13 11:24:06 -耗时 : 10
2020-03-13 11:24:06 -<==      Total: 1
2020-03-13 11:24:06 -耗时 : 12
2020-03-13 11:24:14 -此处进行解密+验签+身份验证
2020-03-13 11:24:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:14 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthAgencyTraditionalPosList
2020-03-13 11:24:14 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? and t2.pos_type='epos' order by t1.date 
2020-03-13 11:24:14 -==> Parameters: 20200301(String), 2420(String)
2020-03-13 11:24:14 -<==      Total: 7
2020-03-13 11:24:14 -耗时 : 20
2020-03-13 11:24:24 -此处进行解密+验签+身份验证
2020-03-13 11:24:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:24 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayAgencyTraditionalPosList
2020-03-13 11:24:24 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.agency_performance,0.00) as char) as performance, cast(IFNULL(t2.agency_act_num,0) as char) as act_num, cast(IFNULL((t2.under_num - t2.refer_num),0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? and t2.pos_type='epos' order by t1.date 
2020-03-13 11:24:24 -==> Parameters: 20200313(String), 2420(String)
2020-03-13 11:24:24 -<==      Total: 7
2020-03-13 11:24:24 -耗时 : 22
2020-03-13 11:24:36 -此处进行解密+验签+身份验证
2020-03-13 11:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:36 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getMonthMerchantTraditionalPosList
2020-03-13 11:24:36 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num MONTH), '%Y%m' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_month t2 on t1.date = t2.cre_month and t2.user_id = ? and t2.pos_type='epos' order by t1.date 
2020-03-13 11:24:36 -==> Parameters: 20200301(String), 2420(String)
2020-03-13 11:24:36 -<==      Total: 7
2020-03-13 11:24:36 -耗时 : 17
2020-03-13 11:24:44 -此处进行解密+验签+身份验证
2020-03-13 11:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:44 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getDayMerchantTraditionalPosList
2020-03-13 11:24:44 -==>  Preparing: SELECT t1.date, cast(IFNULL(t2.merchant_performance,0.00) as char) as performance, cast(IFNULL(t2.merchant_act_num,0) as char) as act_num, cast(IFNULL(t2.refer_num,0) as char) as user_num from ( SELECT @num :=@num - 1, date_format( adddate(str_to_date(?,'%Y%m%d'), INTERVAL @num DAY), '%Y%m%d' ) AS date FROM t_sys_assist_query, (SELECT @num := 1) t) t1 left join t_summary_user_traditional_pos_benefit_everyday t2 on t1.date = t2.cre_date and t2.user_id = ? and t2.pos_type='epos' order by t1.date 
2020-03-13 11:24:44 -==> Parameters: 20200313(String), 2420(String)
2020-03-13 11:24:44 -<==      Total: 7
2020-03-13 11:24:44 -耗时 : 21
2020-03-13 11:24:59 -此处进行解密+验签+身份验证
2020-03-13 11:24:59 -此处进行解密+验签+身份验证
2020-03-13 11:24:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:24:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:24:59 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:24:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:24:59 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:24:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:24:59 -==> Parameters: 2420(String)
2020-03-13 11:24:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -耗时 : 10
2020-03-13 11:24:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:24:59 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:59 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:59 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:24:59 -<==    Updates: 1
2020-03-13 11:24:59 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:24:59 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:59 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:59 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:24:59 -<==    Updates: 1
2020-03-13 11:24:59 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:24:59 -==> Parameters: 
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:59 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:59 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:24:59 -<==    Updates: 1
2020-03-13 11:24:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:24:59 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:24:59 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:24:59 -<==      Total: 1
2020-03-13 11:24:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:24:59 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:24:59 -<==    Updates: 1
2020-03-13 11:24:59 -耗时 : 162
2020-03-13 11:31:48 -此处进行解密+验签+身份验证
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:31:48 -此处进行解密+验签+身份验证
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:31:48 -此处进行解密+验签+身份验证
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:31:48 -此处进行解密+验签+身份验证
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getHeaderInformation
2020-03-13 11:31:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-13 11:31:48 -==>  Preparing: SELECT cast(today_benefit as char) as today_benefit, cast((money - today_benefit) as char) AS withdraw_money, cast(settle_money as char) as settle_money, cast(total_benefit as char) as total_benefit FROM t_user_info WHERE id = ? 
2020-03-13 11:31:48 -==> Parameters: 2420(String)
2020-03-13 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreTraditionalPosDetail
2020-03-13 11:31:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getBenefitCentreMposDetail
2020-03-13 11:31:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-13 11:31:48 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:31:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_traditional_pos_benefit_month WHERE user_id = ? and cre_month = ? and pos_type is null 
2020-03-13 11:31:48 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:31:48 -<==      Total: 1
2020-03-13 11:31:48 -耗时 : 10
2020-03-13 11:31:48 -==>  Preparing: SELECT cast(benefit as char) benefit, cast(merchant_benefit as char) as merchant_benefit, cast(agency_benefit as char) as agency_benefit, cast(( share_benefit + single_benefit ) as char) AS share_benefit, cast(return_benefit as char) as return_benefit, cast(activity_benefit as char) as activity_benefit, cast(deduct_money as char) as deduct_money FROM t_summary_user_mpos_benefit_month WHERE user_id = ? and cre_month = ? 
2020-03-13 11:31:48 -==> Parameters: 2420(String), 202003(String)
2020-03-13 11:31:48 -<==      Total: 1
2020-03-13 11:31:48 -耗时 : 26
2020-03-13 11:31:48 -<==      Total: 1
2020-03-13 11:31:48 -耗时 : 18
2020-03-13 11:31:48 -<==      Total: 0
2020-03-13 11:31:48 -耗时 : 23
2020-03-13 11:32:20 -此处进行解密+验签+身份验证
2020-03-13 11:32:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:20 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitEposList
2020-03-13 11:32:20 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-13 11:32:20 -==> Parameters: 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:32:20 -<==      Total: 0
2020-03-13 11:32:20 -耗时 : 105
2020-03-13 11:32:32 -此处进行解密+验签+身份验证
2020-03-13 11:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:32 -此处进行解密+验签+身份验证
2020-03-13 11:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:32 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:32:32 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:32:32 -==> Parameters: 2420(String)
2020-03-13 11:32:32 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:32:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -耗时 : 17
2020-03-13 11:32:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:32:32 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:32 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:32 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:32:32 -<==    Updates: 1
2020-03-13 11:32:32 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:32:32 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:32 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:32 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:32:32 -<==    Updates: 1
2020-03-13 11:32:32 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:32:32 -==> Parameters: 
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:32 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:32 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:32:32 -<==    Updates: 1
2020-03-13 11:32:32 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:32:32 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:32 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:32:32 -<==      Total: 1
2020-03-13 11:32:32 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:32 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:32:32 -<==    Updates: 1
2020-03-13 11:32:32 -耗时 : 180
2020-03-13 11:32:36 -此处进行解密+验签+身份验证
2020-03-13 11:32:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:36 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackEposList
2020-03-13 11:32:36 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and pos_type='03' and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-13 11:32:36 -==> Parameters: 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:32:36 -<==      Total: 0
2020-03-13 11:32:36 -耗时 : 20
2020-03-13 11:32:42 -此处进行解密+验签+身份验证
2020-03-13 11:32:42 -此处进行解密+验签+身份验证
2020-03-13 11:32:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:42 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:32:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:32:42 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:32:42 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:32:42 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:32:42 -==> Parameters: 2420(String)
2020-03-13 11:32:42 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:32:42 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:42 -<==      Total: 1
2020-03-13 11:32:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:42 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:32:42 -<==      Total: 1
2020-03-13 11:32:42 -耗时 : 17
2020-03-13 11:32:42 -<==      Total: 1
2020-03-13 11:32:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:42 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:32:42 -<==    Updates: 1
2020-03-13 11:32:42 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:32:42 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:42 -<==      Total: 1
2020-03-13 11:32:42 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:42 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:32:42 -<==      Total: 1
2020-03-13 11:32:42 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:42 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:32:42 -<==    Updates: 1
2020-03-13 11:32:42 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:32:42 -==> Parameters: 
2020-03-13 11:32:43 -<==      Total: 1
2020-03-13 11:32:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:43 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:32:43 -<==      Total: 1
2020-03-13 11:32:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:43 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:32:43 -<==    Updates: 1
2020-03-13 11:32:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:32:43 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:43 -<==      Total: 1
2020-03-13 11:32:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:43 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:32:43 -<==      Total: 1
2020-03-13 11:32:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:43 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:32:43 -<==    Updates: 1
2020-03-13 11:32:43 -耗时 : 96
2020-03-13 11:32:46 -此处进行解密+验签+身份验证
2020-03-13 11:32:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:46 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardEposList
2020-03-13 11:32:46 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type='epos' and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-13 11:32:46 -==> Parameters: 2420(String), 20200301(String), 20200331(String), 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:32:46 -<==      Total: 0
2020-03-13 11:32:46 -耗时 : 11
2020-03-13 11:32:53 -此处进行解密+验签+身份验证
2020-03-13 11:32:53 -此处进行解密+验签+身份验证
2020-03-13 11:32:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:53 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:32:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:32:53 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:32:53 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:32:53 -==> Parameters: 2420(String)
2020-03-13 11:32:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -耗时 : 8
2020-03-13 11:32:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:32:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:53 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:32:53 -<==    Updates: 1
2020-03-13 11:32:53 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:32:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:53 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:32:53 -<==    Updates: 1
2020-03-13 11:32:53 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:32:53 -==> Parameters: 
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:53 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:53 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:32:53 -<==    Updates: 1
2020-03-13 11:32:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:32:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:32:53 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:32:53 -<==      Total: 1
2020-03-13 11:32:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:32:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:32:53 -<==    Updates: 1
2020-03-13 11:32:53 -耗时 : 209
2020-03-13 11:32:59 -此处进行解密+验签+身份验证
2020-03-13 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:32:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:32:59 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getDeductEposList
2020-03-13 11:32:59 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.assess_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_deduct_record t INNER JOIN t_user_trapos_assess_info t1 on t.assess_id = t1.id WHERE t.user_id = ? and t.pos_type='03' and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date,t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_deduct_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id where t.user_id=? and t.pos_type='03' and t.cre_date between ? and ? ) tt,(SELECT @rownum:=0) r order by tt.order_id desc ) t limit 0,10 
2020-03-13 11:32:59 -==> Parameters: 2420(String), 20200301(String), 20200331(String), 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:32:59 -<==      Total: 0
2020-03-13 11:32:59 -耗时 : 20
2020-03-13 11:33:05 -此处进行解密+验签+身份验证
2020-03-13 11:33:05 -此处进行解密+验签+身份验证
2020-03-13 11:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:33:05 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:33:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:33:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:33:05 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:33:05 -==> Parameters: 2420(String)
2020-03-13 11:33:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:33:05 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -耗时 : 18
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:33:05 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:33:05 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:33:05 -<==    Updates: 1
2020-03-13 11:33:05 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:33:05 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:33:05 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:33:05 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:33:05 -<==    Updates: 1
2020-03-13 11:33:05 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:33:05 -==> Parameters: 
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:33:05 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:33:05 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:33:05 -<==    Updates: 1
2020-03-13 11:33:05 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:33:05 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:33:05 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:33:05 -<==      Total: 1
2020-03-13 11:33:05 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:33:05 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:33:05 -<==    Updates: 1
2020-03-13 11:33:05 -耗时 : 156
2020-03-13 11:33:11 -此处进行解密+验签+身份验证
2020-03-13 11:33:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:33:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:33:11 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getShareBenefitTraditionalPosList
2020-03-13 11:33:11 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, benefit_money, sn, trans_amount, trans_type, trans_product, card_type, benefit_type, state_type, single_amount, DATE_FORMAT(STR_TO_DATE(trans_time,'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS trans_datetime, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_share_benefit_record WHERE user_id = ? and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-13 11:33:11 -==> Parameters: 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:33:12 -<==      Total: 0
2020-03-13 11:33:12 -耗时 : 112
2020-03-13 11:36:43 -此处进行解密+验签+身份验证
2020-03-13 11:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:36:43 -此处进行解密+验签+身份验证
2020-03-13 11:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:36:43 -解密异常：{token=2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA, sign=8733F8CDDE288C287FBA9011E71D9E12}
2020-03-13 11:36:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:36:43 -耗时 : 0
2020-03-13 11:36:43 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 11:36:43 -Reconnected to 120.25.164.176:10379
2020-03-13 11:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:36:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:36:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:36:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:36:43 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:36:43 -<==      Total: 1
2020-03-13 11:36:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:36:43 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:36:43 -<==      Total: 1
2020-03-13 11:36:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:36:43 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:36:43 -<==    Updates: 1
2020-03-13 11:36:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:36:43 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:36:43 -<==      Total: 1
2020-03-13 11:36:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:36:43 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:36:43 -<==      Total: 1
2020-03-13 11:36:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:36:43 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:36:43 -<==    Updates: 1
2020-03-13 11:36:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:36:43 -==> Parameters: 
2020-03-13 11:36:44 -<==      Total: 1
2020-03-13 11:36:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:36:44 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:36:44 -<==      Total: 1
2020-03-13 11:36:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:36:44 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:36:44 -<==    Updates: 1
2020-03-13 11:36:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:36:44 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:36:44 -<==      Total: 1
2020-03-13 11:36:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:36:44 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:36:44 -<==      Total: 1
2020-03-13 11:36:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:36:44 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:36:44 -<==    Updates: 1
2020-03-13 11:36:44 -耗时 : 178
2020-03-13 11:36:47 -此处进行解密+验签+身份验证
2020-03-13 11:36:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:36:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:36:48 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getMachineBackTraditionalPosList
2020-03-13 11:36:48 -==>  Preparing: SELECT cast(id as char) as record_id, order_id, money, sn, frozen_time, return_amt, DATE_FORMAT(STR_TO_DATE(CONCAT(cre_date, cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_machine_back_record WHERE user_id = ? and pos_type is null and cre_date between ? and ? ORDER BY id desc limit 0,10 
2020-03-13 11:36:48 -==> Parameters: 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:36:48 -<==      Total: 0
2020-03-13 11:36:48 -耗时 : 10
2020-03-13 11:38:57 -此处进行解密+验签+身份验证
2020-03-13 11:38:57 -此处进行解密+验签+身份验证
2020-03-13 11:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:38:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:38:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:38:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:38:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:38:57 -==> Parameters: 2420(String)
2020-03-13 11:38:57 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4af492f2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:38:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:38:57 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -耗时 : 19
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:38:57 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:38:57 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:38:57 -<==    Updates: 1
2020-03-13 11:38:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:38:57 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:38:57 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:38:57 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:38:57 -<==    Updates: 1
2020-03-13 11:38:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:38:57 -==> Parameters: 
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:38:57 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:38:57 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:38:57 -<==    Updates: 1
2020-03-13 11:38:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:38:57 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:38:57 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:38:57 -<==      Total: 1
2020-03-13 11:38:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:38:57 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:38:57 -<==    Updates: 1
2020-03-13 11:38:57 -耗时 : 106
2020-03-13 11:39:02 -此处进行解密+验签+身份验证
2020-03-13 11:39:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:39:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:39:02 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-03-13 11:39:02 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-13 11:39:02 -==> Parameters: 2420(String), 20200301(String), 20200331(String), 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:39:02 -<==      Total: 0
2020-03-13 11:39:02 -耗时 : 19
2020-03-13 11:40:55 -此处进行解密+验签+身份验证
2020-03-13 11:40:55 -此处进行解密+验签+身份验证
2020-03-13 11:40:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:40:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:40:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:40:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:40:55 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:40:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:40:55 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:40:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:40:55 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:40:55 -==> Parameters: 2420(String)
2020-03-13 11:40:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:40:55 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:40:55 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -耗时 : 18
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:40:55 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:40:55 -<==    Updates: 1
2020-03-13 11:40:55 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:40:55 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:40:55 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:40:55 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:40:55 -<==    Updates: 1
2020-03-13 11:40:55 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:40:55 -==> Parameters: 
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:40:55 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:40:55 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:40:55 -<==    Updates: 1
2020-03-13 11:40:55 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:40:55 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:40:55 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:40:55 -<==      Total: 1
2020-03-13 11:40:55 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:40:55 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:40:55 -<==    Updates: 1
2020-03-13 11:40:55 -耗时 : 97
2020-03-13 11:41:01 -此处进行解密+验签+身份验证
2020-03-13 11:41:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:41:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:41:01 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getDeductTraditionalPosList
2020-03-13 11:41:01 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.assess_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_deduct_record t INNER JOIN t_user_trapos_assess_info t1 on t.assess_id = t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date,t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_deduct_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id where t.user_id=? and t.pos_type is null and t.cre_date between ? and ? ) tt,(SELECT @rownum:=0) r order by tt.order_id desc ) t limit 0,10 
2020-03-13 11:41:01 -==> Parameters: 2420(String), 20200301(String), 20200331(String), 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:41:01 -<==      Total: 0
2020-03-13 11:41:01 -耗时 : 10
2020-03-13 11:42:00 -此处进行解密+验签+身份验证
2020-03-13 11:42:00 -此处进行解密+验签+身份验证
2020-03-13 11:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:42:00 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:42:00 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:42:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:42:00 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:42:00 -==> Parameters: 2420(String)
2020-03-13 11:42:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:42:00 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:42:00 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -耗时 : 22
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:42:00 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:42:00 -<==    Updates: 1
2020-03-13 11:42:00 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:42:00 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:42:00 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:42:00 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:42:00 -<==    Updates: 1
2020-03-13 11:42:00 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:42:00 -==> Parameters: 
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:42:00 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:42:00 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:42:00 -<==    Updates: 1
2020-03-13 11:42:00 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:42:00 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:42:00 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:42:00 -<==      Total: 1
2020-03-13 11:42:00 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:42:00 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:42:00 -<==    Updates: 1
2020-03-13 11:42:00 -耗时 : 93
2020-03-13 11:42:05 -此处进行解密+验签+身份验证
2020-03-13 11:42:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:42:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:42:05 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getActivityRewardTraditionalPosList
2020-03-13 11:42:05 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.activity_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_activity_reward_record t LEFT JOIN t_sys_trapos_activity_info t1 on t.activity_id = t1.id WHERE t.user_id = ? and t1.pos_type is null and t.activity_id is not null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date, t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_activity_reward_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? )tt,(SELECT @rownum:=0) r ORDER BY tt.cre_datetime desc)t limit 0,10 
2020-03-13 11:42:05 -==> Parameters: 2420(String), 20200301(String), 20200331(String), 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:42:05 -<==      Total: 0
2020-03-13 11:42:05 -耗时 : 10
2020-03-13 11:43:53 -此处进行解密+验签+身份验证
2020-03-13 11:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:43:53 -此处进行解密+验签+身份验证
2020-03-13 11:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:43:53 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:43:53 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:43:53 -==> Parameters: 2420(String)
2020-03-13 11:43:53 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -耗时 : 9
2020-03-13 11:43:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:43:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:43:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:43:53 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:43:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:43:53 -<==    Updates: 1
2020-03-13 11:43:53 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:43:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:43:53 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:43:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:43:53 -<==    Updates: 1
2020-03-13 11:43:53 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:43:53 -==> Parameters: 
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:43:53 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:43:53 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:43:53 -<==    Updates: 1
2020-03-13 11:43:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:43:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:43:53 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:43:53 -<==      Total: 1
2020-03-13 11:43:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:43:53 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:43:53 -<==    Updates: 1
2020-03-13 11:43:53 -耗时 : 177
2020-03-13 11:44:15 -此处进行解密+验签+身份验证
2020-03-13 11:44:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:44:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:44:15 -请求地址 : http://192.168.191.1:8080/api/sys/benefitcentre/getDeductTraditionalPosList
2020-03-13 11:44:15 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS record_id,tt.* from ( SELECT t.order_id, t.money, t.sn, t1.assess_name, t1.start_date, t1.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime FROM t_user_trapos_deduct_record t INNER JOIN t_user_trapos_assess_info t1 on t.assess_id = t1.id WHERE t.user_id = ? and t.pos_type is null and t.cre_date between ? and ? union select t.order_id, t.money, t.sn, t1.policy_name, t.begin_date,t.end_date, DATE_FORMAT(STR_TO_DATE(CONCAT(t.cre_date, t.cre_time),'%Y%m%d%H%i%s'),'%Y-%m-%d %H:%i:%s') AS cre_datetime from t_user_trapos_deduct_record t INNER JOIN t_sys_pos_policy_define t1 on t.policy_id=t1.id where t.user_id=? and t.pos_type is null and t.cre_date between ? and ? ) tt,(SELECT @rownum:=0) r order by tt.order_id desc ) t limit 0,10 
2020-03-13 11:44:15 -==> Parameters: 2420(String), 20200301(String), 20200331(String), 2420(String), 20200301(String), 20200331(String)
2020-03-13 11:44:15 -<==      Total: 0
2020-03-13 11:44:15 -耗时 : 9
2020-03-13 11:47:12 -此处进行解密+验签+身份验证
2020-03-13 11:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:47:12 -此处进行解密+验签+身份验证
2020-03-13 11:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:47:12 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:47:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:47:12 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:47:12 -==> Parameters: 2420(String)
2020-03-13 11:47:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:47:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:47:12 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -耗时 : 19
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:47:12 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:47:12 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:47:12 -<==    Updates: 1
2020-03-13 11:47:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:47:12 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:47:12 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:47:12 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:47:12 -<==    Updates: 1
2020-03-13 11:47:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:47:12 -==> Parameters: 
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:47:12 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:47:12 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:47:12 -<==    Updates: 1
2020-03-13 11:47:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:47:12 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:47:12 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:47:12 -<==      Total: 1
2020-03-13 11:47:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:47:12 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:47:12 -<==    Updates: 1
2020-03-13 11:47:12 -耗时 : 91
2020-03-13 11:47:52 -此处进行解密+验签+身份验证
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:47:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/updateNewsReadFlag
2020-03-13 11:47:52 -==>  Preparing: update t_news_read_state set unread_num=0,read_flag=? where user_id=? and news_type=? 
2020-03-13 11:47:52 -==> Parameters: 1(String), 2420(String), recallFlag(String)
2020-03-13 11:47:52 -此处进行解密+验签+身份验证
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:47:52 -此处进行解密+验签+身份验证
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:47:52 -<==    Updates: 1
2020-03-13 11:47:52 -耗时 : 11
2020-03-13 11:47:52 -此处进行解密+验签+身份验证
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:47:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:47:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-13 11:47:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-13 11:47:52 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:47:52 -==> Parameters: 2420(String), 09(String)
2020-03-13 11:47:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-13 11:47:52 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:47:52 -<==      Total: 0
2020-03-13 11:47:52 -==> Parameters: 2420(String), 00(String)
2020-03-13 11:47:52 -耗时 : 7
2020-03-13 11:47:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3832653f (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:47:52 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:47:52 -==> Parameters: 2420(String), 08(String)
2020-03-13 11:47:52 -<==      Total: 0
2020-03-13 11:47:52 -耗时 : 13
2020-03-13 11:47:52 -<==      Total: 0
2020-03-13 11:47:52 -耗时 : 28
2020-03-13 11:48:01 -此处进行解密+验签+身份验证
2020-03-13 11:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:48:01 -此处进行解密+验签+身份验证
2020-03-13 11:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:48:01 -此处进行解密+验签+身份验证
2020-03-13 11:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:48:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:48:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-13 11:48:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-13 11:48:01 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-13 11:48:01 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:48:01 -==> Parameters: 2420(String), 08(String)
2020-03-13 11:48:01 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:48:01 -==> Parameters: 2420(String), 09(String)
2020-03-13 11:48:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@24608bef (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:48:01 -<==      Total: 0
2020-03-13 11:48:01 -耗时 : 10
2020-03-13 11:48:01 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@40ac9fc2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:48:01 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:48:01 -==> Parameters: 2420(String), 00(String)
2020-03-13 11:48:01 -<==      Total: 0
2020-03-13 11:48:01 -耗时 : 20
2020-03-13 11:48:01 -<==      Total: 0
2020-03-13 11:48:01 -耗时 : 19
2020-03-13 11:48:52 -此处进行解密+验签+身份验证
2020-03-13 11:48:52 -此处进行解密+验签+身份验证
2020-03-13 11:48:52 -此处进行解密+验签+身份验证
2020-03-13 11:48:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:48:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:48:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:48:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:48:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:48:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:48:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-13 11:48:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-13 11:48:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallTraditionalPosList
2020-03-13 11:48:52 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:48:52 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:48:52 -==> Parameters: 2420(String), 09(String)
2020-03-13 11:48:52 -==> Parameters: 2420(String), 00(String)
2020-03-13 11:48:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@a60b280 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:48:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@454c4c27 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:48:52 -<==      Total: 0
2020-03-13 11:48:52 -耗时 : 11
2020-03-13 11:48:52 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@ec7f93e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 11:48:52 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type is null AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:48:52 -==> Parameters: 2420(String), 08(String)
2020-03-13 11:48:52 -<==      Total: 0
2020-03-13 11:48:52 -耗时 : 21
2020-03-13 11:48:52 -<==      Total: 0
2020-03-13 11:48:52 -耗时 : 22
2020-03-13 11:50:39 -此处进行解密+验签+身份验证
2020-03-13 11:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:50:39 -此处进行解密+验签+身份验证
2020-03-13 11:50:39 -此处进行解密+验签+身份验证
2020-03-13 11:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:50:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-13 11:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-13 11:50:39 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:50:39 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRecallEposList
2020-03-13 11:50:39 -==> Parameters: 2420(String), 00(String)
2020-03-13 11:50:40 -<==      Total: 0
2020-03-13 11:50:40 -耗时 : 11
2020-03-13 11:50:40 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:50:40 -==> Parameters: 2420(String), 09(String)
2020-03-13 11:50:40 -==>  Preparing: SELECT cast(id as char) as recall_id, sn, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_datetime FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? and pos_type='epos' AND status = ? ORDER BY id desc limit 0,10 
2020-03-13 11:50:40 -==> Parameters: 2420(String), 08(String)
2020-03-13 11:50:40 -<==      Total: 0
2020-03-13 11:50:40 -耗时 : 21
2020-03-13 11:50:40 -<==      Total: 0
2020-03-13 11:50:40 -耗时 : 22
2020-03-13 11:51:07 -此处进行解密+验签+身份验证
2020-03-13 11:51:07 -此处进行解密+验签+身份验证
2020-03-13 11:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:07 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 11:51:07 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:51:07 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 11:51:07 -==> Parameters: 2420(String)
2020-03-13 11:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:51:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -耗时 : 11
2020-03-13 11:51:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:51:07 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:07 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:07 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:51:07 -<==    Updates: 1
2020-03-13 11:51:07 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:51:07 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:07 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:07 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:51:07 -<==    Updates: 1
2020-03-13 11:51:07 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:51:07 -==> Parameters: 
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:07 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:07 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:51:07 -<==    Updates: 1
2020-03-13 11:51:07 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:51:07 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:07 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:51:07 -<==      Total: 1
2020-03-13 11:51:07 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:07 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:51:07 -<==    Updates: 1
2020-03-13 11:51:07 -耗时 : 90
2020-03-13 11:51:10 -此处进行解密+验签+身份验证
2020-03-13 11:51:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:10 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:51:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 11:51:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 11:51:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:51:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:10 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:10 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 11:51:10 -<==    Updates: 1
2020-03-13 11:51:10 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:51:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:10 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:10 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 11:51:10 -<==    Updates: 1
2020-03-13 11:51:10 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:51:10 -==> Parameters: 
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:10 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:10 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 11:51:10 -<==    Updates: 1
2020-03-13 11:51:10 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:51:10 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:51:10 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 11:51:10 -<==      Total: 1
2020-03-13 11:51:10 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:51:10 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 11:51:10 -<==    Updates: 1
2020-03-13 11:51:10 -耗时 : 93
2020-03-13 11:51:14 -此处进行解密+验签+身份验证
2020-03-13 11:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:14 -此处进行解密+验签+身份验证
2020-03-13 11:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 11:51:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 11:51:14 -==> Parameters: 2420(String)
2020-03-13 11:51:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 11:51:14 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 11:51:14 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:14 -<==      Total: 0
2020-03-13 11:51:14 -耗时 : 30
2020-03-13 11:51:15 -此处进行解密+验签+身份验证
2020-03-13 11:51:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindMpos
2020-03-13 11:51:15 -==>  Preparing: SELECT sn FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_mpos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') 
2020-03-13 11:51:15 -==> Parameters: 2420(String)
2020-03-13 11:51:15 -<==      Total: 0
2020-03-13 11:51:15 -耗时 : 27
2020-03-13 11:51:16 -此处进行解密+验签+身份验证
2020-03-13 11:51:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:16 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 11:51:17 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 11:51:17 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:28 -<==      Total: 0
2020-03-13 11:51:28 -耗时 : 14272
2020-03-13 11:51:31 -<==      Total: 0
2020-03-13 11:51:31 -耗时 : 14273
2020-03-13 11:51:36 -此处进行解密+验签+身份验证
2020-03-13 11:51:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:36 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:36 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 11:51:36 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 11:51:36 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:36 -<==      Total: 0
2020-03-13 11:51:36 -耗时 : 56
2020-03-13 11:51:37 -此处进行解密+验签+身份验证
2020-03-13 11:51:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 11:51:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 11:51:37 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 11:51:37 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 11:51:37 -==> Parameters: 2420(String), 2420(String)
2020-03-13 11:51:37 -<==      Total: 0
2020-03-13 11:51:37 -耗时 : 19
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 11:53:05 -耗时 : 0
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 11:53:05 -耗时 : 2
2020-03-13 11:53:05 -耗时 : 2
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 11:53:05 -耗时 : 0
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:53:05 -耗时 : 0
2020-03-13 11:53:05 -此处进行解密+验签+身份验证
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 11:53:05 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 11:53:05 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 11:53:05 -耗时 : 13
2020-03-13 11:53:05 -解密：{
  "login_type" : "token",
  "device_type" : "iOS",
  "sign" : "D2E8F8F392531B9AB681702CFA101CDA",
  "version_no" : "1.1.1",
  "token" : "181|DWW036S6G9B9O0QT5DLKRK0AYAS5RJ0Q",
  "device_no" : "iOS11.4.1"
}
2020-03-13 11:53:05 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 11:53:05 -token值=======181|DWW036S6G9B9O0QT5DLKRK0AYAS5RJ0Q
2020-03-13 11:53:05 -耗时 : 11
2020-03-13 11:53:11 -此处进行解密+验签+身份验证
2020-03-13 11:53:11 -解密：{
  "sign" : "7D201C0BD06AA06376D89E3302887B58",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|DWW036S6G9B9O0QT5DLKRK0AYAS5RJ0Q",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-13 11:53:11 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 11:53:11 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 11:53:11 -==> Parameters: 13322990711(String)
2020-03-13 11:53:11 -<==      Total: 1
2020-03-13 11:53:11 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 11:53:11 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200313(String), 115311(String), 181(Integer)
2020-03-13 11:53:11 -<==    Updates: 1
2020-03-13 11:53:11 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 11:53:11 -==> Parameters: 26(String)
2020-03-13 11:53:11 -<==      Total: 1
2020-03-13 11:53:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 11:53:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 11:53:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 11:53:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 11:53:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 11:53:11 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 11:53:11 -耗时 : 97
2020-03-13 11:53:12 -此处进行解密+验签+身份验证
2020-03-13 11:53:12 -此处进行解密+验签+身份验证
2020-03-13 11:53:12 -此处进行解密+验签+身份验证
2020-03-13 11:53:12 -此处进行解密+验签+身份验证
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:12 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 11:53:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 11:53:12 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 11:53:12 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 11:53:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 11:53:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-13 11:53:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 11:53:12 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 11:53:12 -==> Parameters: 
2020-03-13 11:53:12 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-13 11:53:12 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 11:53:12 -==> Parameters: 181(String)
2020-03-13 11:53:12 -<==      Total: 3
2020-03-13 11:53:12 -耗时 : 11
2020-03-13 11:53:12 -耗时 : 15
2020-03-13 11:53:12 -耗时 : 13
2020-03-13 11:53:12 -此处进行解密+验签+身份验证
2020-03-13 11:53:12 -<==      Total: 2
2020-03-13 11:53:12 -耗时 : 18
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:12 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 11:53:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 11:53:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:53:12 -==> Parameters: 181(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:53:12 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:53:12 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-13 11:53:12 -<==    Updates: 1
2020-03-13 11:53:12 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 11:53:12 -==> Parameters: 181(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:53:12 -==> Parameters: recallFlag(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:53:12 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-13 11:53:12 -<==    Updates: 1
2020-03-13 11:53:12 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 11:53:12 -==> Parameters: 
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:53:12 -==> Parameters: collegeFlag(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:53:12 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-13 11:53:12 -<==    Updates: 1
2020-03-13 11:53:12 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 11:53:12 -==> Parameters: 181(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 11:53:12 -==> Parameters: cardFlag(String), 181(String)
2020-03-13 11:53:12 -<==      Total: 1
2020-03-13 11:53:12 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 11:53:12 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-13 11:53:12 -<==    Updates: 1
2020-03-13 11:53:12 -耗时 : 92
2020-03-13 11:53:14 -此处进行解密+验签+身份验证
2020-03-13 11:53:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:14 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 11:53:14 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 11:53:14 -==> Parameters: 181(String)
2020-03-13 11:53:14 -<==      Total: 1004
2020-03-13 11:53:14 -耗时 : 49
2020-03-13 11:53:20 -此处进行解密+验签+身份验证
2020-03-13 11:53:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:20 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 11:53:20 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 11:53:20 -==> Parameters: 181(String), 181(String)
2020-03-13 11:53:20 -<==      Total: 283
2020-03-13 11:53:20 -耗时 : 65
2020-03-13 11:53:31 -此处进行解密+验签+身份验证
2020-03-13 11:53:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 11:53:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 11:53:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/recallTraditionalPos
2020-03-13 11:53:31 -==>  Preparing: select count(*) from t_sys_pos_policy_info where sn in ( ? ) and iscomplete='0' and isuse=1 
2020-03-13 11:53:31 -==> Parameters: 000003021Q1NL14954056(String)
2020-03-13 11:53:31 -<==      Total: 1
2020-03-13 11:53:31 -==>  Preparing: INSERT INTO t_user_trapos_recall_record_info ( send_user_id, acce_user_id, sn, cre_date, cre_time, pos_type ) SELECT ?, user_id, sn, ?, ?, pos_type FROM t_user_traditional_pos_info WHERE state_status = '1' AND del='0' AND FIND_IN_SET(sn, ?) AND user_id in (select id from t_user_info where referer_id = ?) 
2020-03-13 11:53:31 -==> Parameters: 181(String), 20200313(String), 115331(String), 000003021Q1NL14954056(String), 181(String)
2020-03-13 11:53:31 -MachinesManageServiceImpl -- recallTraditionalPos方法处理异常：
### Error updating database.  Cause: java.sql.SQLException: Data truncated for column 'sn' at row 1
### The error may involve com.example.longecological.mapper.machines.MachinesManageMapper.addRecallTraditionalPos-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO t_user_trapos_recall_record_info (      send_user_id,      acce_user_id,      sn,      cre_date,      cre_time,      pos_type      ) SELECT        ?,        user_id,        sn,        ?,        ?,        pos_type         FROM        t_user_traditional_pos_info        WHERE        state_status = '1'       AND del='0'       AND FIND_IN_SET(sn, ?)       AND user_id in (select id from t_user_info where referer_id = ?)
### Cause: java.sql.SQLException: Data truncated for column 'sn' at row 1
; Data truncated for column 'sn' at row 1; nested exception is java.sql.SQLException: Data truncated for column 'sn' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:278)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:58)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.addRecallTraditionalPos(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.recallTraditionalPos(MachinesManageServiceImpl.java:683)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$6350c254.recallTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.recallTraditionalPos(MachinesManageController.java:203)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor98.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$767b750.recallTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 11:53:31 -耗时 : 117
2020-03-13 12:00:54 -此处进行解密+验签+身份验证
2020-03-13 12:00:54 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 12:00:54 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 12:00:54 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 12:00:54 -耗时 : 8
2020-03-13 12:01:00 -此处进行解密+验签+身份验证
2020-03-13 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:01:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/recallTraditionalPos
2020-03-13 12:01:00 -==>  Preparing: select count(*) from t_sys_pos_policy_info where sn in ( ? ) and iscomplete='0' and isuse=1 
2020-03-13 12:01:00 -==> Parameters: 000003021Q1NL14954056(String)
2020-03-13 12:01:00 -<==      Total: 1
2020-03-13 12:01:00 -==>  Preparing: INSERT INTO t_user_trapos_recall_record_info ( send_user_id, acce_user_id, sn, cre_date, cre_time, pos_type ) SELECT ?, user_id, sn, ?, ?, pos_type FROM t_user_traditional_pos_info WHERE state_status = '1' AND del='0' AND FIND_IN_SET(sn, ?) AND user_id in (select id from t_user_info where referer_id = ?) 
2020-03-13 12:01:00 -==> Parameters: 181(String), 20200313(String), 120100(String), 000003021Q1NL14954056(String), 181(String)
2020-03-13 12:01:00 -<==    Updates: 1
2020-03-13 12:01:00 -==>  Preparing: select * from t_user_traditional_pos_info where sn in ( ? ) and state_status='1' 
2020-03-13 12:01:00 -==> Parameters: 000003021Q1NL14954056(String)
2020-03-13 12:01:00 -<==      Total: 1
2020-03-13 12:01:00 -==>  Preparing: update t_news_read_state set read_flag=? where user_id in ( ? ) and news_type=? 
2020-03-13 12:01:00 -==> Parameters: 0(String), 1269(Integer), recallFlag(String)
2020-03-13 12:01:00 -<==    Updates: 0
2020-03-13 12:01:00 -耗时 : 89
2020-03-13 12:01:00 -此处进行解密+验签+身份验证
2020-03-13 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:01:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:01:00 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosRecallList
2020-03-13 12:01:00 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_traditional_pos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM t_user_trapos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 12:01:00 -==> Parameters: 181(String), 181(String)
2020-03-13 12:01:00 -<==      Total: 282
2020-03-13 12:01:00 -耗时 : 71
2020-03-13 12:01:52 -此处进行解密+验签+身份验证
2020-03-13 12:01:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:01:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:01:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 12:01:52 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-13 12:01:52 -==> Parameters: 181(String)
2020-03-13 12:01:52 -<==      Total: 2
2020-03-13 12:01:52 -耗时 : 104
2020-03-13 12:01:52 -此处进行解密+验签+身份验证
2020-03-13 12:01:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:01:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:01:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 12:01:52 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-13 12:01:52 -==> Parameters: 181(String)
2020-03-13 12:01:52 -<==      Total: 2
2020-03-13 12:01:52 -耗时 : 18
2020-03-13 12:02:04 -此处进行解密+验签+身份验证
2020-03-13 12:02:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:02:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:02:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/unbindTraditionalPos
2020-03-13 12:02:04 -==>  Preparing: INSERT INTO t_user_trapos_unbind_record_info ( user_id, sn, cre_date, cre_time ) values (?,?,?,?) 
2020-03-13 12:02:04 -==> Parameters: 181(String), T20191206009(String), 20200313(String), 120204(String)
2020-03-13 12:02:04 -<==    Updates: 1
2020-03-13 12:02:04 -耗时 : 22
2020-03-13 12:02:04 -此处进行解密+验签+身份验证
2020-03-13 12:02:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:02:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:02:04 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectUnbindTraditionalPos
2020-03-13 12:02:04 -==>  Preparing: SELECT sn FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND t.del = '0' AND NOT EXISTS(SELECT 1 FROM t_user_trapos_unbind_record_info tt WHERE tt.SN=t.sn AND tt.status='00') and t.pos_type is null 
2020-03-13 12:02:04 -==> Parameters: 181(String)
2020-03-13 12:02:04 -<==      Total: 1
2020-03-13 12:02:04 -耗时 : 111
2020-03-13 12:02:31 -此处进行解密+验签+身份验证
2020-03-13 12:02:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 12:02:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 12:02:31 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 12:02:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 12:02:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 12:02:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 12:02:31 -==> Parameters: 181(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:02:31 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:02:31 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-13 12:02:31 -<==    Updates: 1
2020-03-13 12:02:31 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 12:02:31 -==> Parameters: 181(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:02:31 -==> Parameters: recallFlag(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:02:31 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-13 12:02:31 -<==    Updates: 1
2020-03-13 12:02:31 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 12:02:31 -==> Parameters: 
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:02:31 -==> Parameters: collegeFlag(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:02:31 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-13 12:02:31 -<==    Updates: 1
2020-03-13 12:02:31 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 12:02:31 -==> Parameters: 181(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:02:31 -==> Parameters: cardFlag(String), 181(String)
2020-03-13 12:02:31 -<==      Total: 1
2020-03-13 12:02:31 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:02:31 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-13 12:02:31 -<==    Updates: 1
2020-03-13 12:02:31 -耗时 : 102
2020-03-13 12:05:04 -此处进行解密+验签+身份验证
2020-03-13 12:05:04 -此处进行解密+验签+身份验证
2020-03-13 12:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 12:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 12:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 12:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 12:05:04 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 12:05:04 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 12:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 12:05:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 12:05:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@73688d8d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 12:05:04 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 12:05:04 -==> Parameters: 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -耗时 : 17
2020-03-13 12:05:04 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@662e965e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 12:05:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 12:05:04 -==> Parameters: 2420(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:05:04 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:05:04 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 12:05:04 -<==    Updates: 1
2020-03-13 12:05:04 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 12:05:04 -==> Parameters: 2420(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:05:04 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:05:04 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 12:05:04 -<==    Updates: 1
2020-03-13 12:05:04 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 12:05:04 -==> Parameters: 
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:05:04 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:05:04 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 12:05:04 -<==    Updates: 1
2020-03-13 12:05:04 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 12:05:04 -==> Parameters: 2420(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 12:05:04 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 12:05:04 -<==      Total: 1
2020-03-13 12:05:04 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 12:05:04 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 12:05:04 -<==    Updates: 1
2020-03-13 12:05:04 -耗时 : 112
2020-03-13 14:09:41 -此处进行解密+验签+身份验证
2020-03-13 14:09:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:41 -解密异常：{token=2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA, sign=8733F8CDDE288C287FBA9011E71D9E12}
2020-03-13 14:09:41 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:09:41 -耗时 : 0
2020-03-13 14:09:41 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 14:09:41 -Reconnected to 120.25.164.176:10379
2020-03-13 14:09:53 -此处进行解密+验签+身份验证
2020-03-13 14:09:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:09:53 -此处进行解密+验签+身份验证
2020-03-13 14:09:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 14:09:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@8358a86 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@68fefefa (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@69a9c742 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@747f28a8 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@1cf999db (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@4dec114b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3ba9ac7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:09:53 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 14:09:53 -==> Parameters: 2420(String)
2020-03-13 14:09:53 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 14:09:53 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:09:53 -<==      Total: 0
2020-03-13 14:09:53 -耗时 : 64
2020-03-13 14:09:56 -此处进行解密+验签+身份验证
2020-03-13 14:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:56 -此处进行解密+验签+身份验证
2020-03-13 14:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:09:56 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 14:09:56 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 14:09:56 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 14:09:56 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 14:09:56 -==> Parameters: 2420(String)
2020-03-13 14:09:56 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:09:56 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -耗时 : 20
2020-03-13 14:09:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:09:56 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:09:56 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 14:09:56 -<==    Updates: 1
2020-03-13 14:09:56 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:09:56 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:09:56 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:09:56 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 14:09:56 -<==    Updates: 1
2020-03-13 14:09:56 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:09:56 -==> Parameters: 
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:09:56 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:09:56 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 14:09:56 -<==    Updates: 1
2020-03-13 14:09:56 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:09:56 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:09:56 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 14:09:56 -<==      Total: 1
2020-03-13 14:09:56 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:09:56 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 14:09:56 -<==    Updates: 1
2020-03-13 14:09:56 -耗时 : 96
2020-03-13 14:09:58 -此处进行解密+验签+身份验证
2020-03-13 14:09:58 -此处进行解密+验签+身份验证
2020-03-13 14:09:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:09:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:09:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:09:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:09:58 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:09:58 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:09:58 -==> Parameters: 2420(String)
2020-03-13 14:09:58 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:09:58 -==> Parameters: 2420(String)
2020-03-13 14:09:58 -<==      Total: 0
2020-03-13 14:09:58 -耗时 : 17
2020-03-13 14:09:58 -<==      Total: 1
2020-03-13 14:09:58 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:09:58 -==> Parameters: 2420(String)
2020-03-13 14:09:58 -<==      Total: 1
2020-03-13 14:09:58 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:09:58 -==> Parameters: 2420(String)
2020-03-13 14:09:58 -<==      Total: 1
2020-03-13 14:09:58 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:09:58 -==> Parameters: 2420(String)
2020-03-13 14:09:58 -<==      Total: 1
2020-03-13 14:09:58 -耗时 : 58
2020-03-13 14:10:00 -此处进行解密+验签+身份验证
2020-03-13 14:10:00 -此处进行解密+验签+身份验证
2020-03-13 14:10:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:10:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:10:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:10:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:10:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:10:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:10:00 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:10:00 -==> Parameters: 2420(String)
2020-03-13 14:10:00 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:10:00 -==> Parameters: 2420(String)
2020-03-13 14:10:00 -<==      Total: 1
2020-03-13 14:10:00 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:10:00 -==> Parameters: 2420(String)
2020-03-13 14:10:00 -<==      Total: 1
2020-03-13 14:10:00 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:10:00 -<==      Total: 0
2020-03-13 14:10:00 -==> Parameters: 2420(String)
2020-03-13 14:10:00 -耗时 : 20
2020-03-13 14:10:00 -<==      Total: 1
2020-03-13 14:10:00 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:10:00 -==> Parameters: 2420(String)
2020-03-13 14:10:00 -<==      Total: 1
2020-03-13 14:10:00 -耗时 : 29
2020-03-13 14:10:07 -<==      Total: 0
2020-03-13 14:10:07 -耗时 : 13983
2020-03-13 14:10:37 -此处进行解密+验签+身份验证
2020-03-13 14:10:37 -此处进行解密+验签+身份验证
2020-03-13 14:10:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:10:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:10:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:10:37 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:10:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:10:37 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:10:37 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:10:37 -==> Parameters: 2420(String)
2020-03-13 14:10:37 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:10:37 -==> Parameters: 2420(String)
2020-03-13 14:10:37 -<==      Total: 1
2020-03-13 14:10:37 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:10:37 -==> Parameters: 2420(String)
2020-03-13 14:10:37 -<==      Total: 0
2020-03-13 14:10:37 -耗时 : 19
2020-03-13 14:10:37 -<==      Total: 1
2020-03-13 14:10:37 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:10:37 -==> Parameters: 2420(String)
2020-03-13 14:10:37 -<==      Total: 1
2020-03-13 14:10:37 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:10:37 -==> Parameters: 2420(String)
2020-03-13 14:10:37 -<==      Total: 1
2020-03-13 14:10:37 -耗时 : 32
2020-03-13 14:10:45 -此处进行解密+验签+身份验证
2020-03-13 14:10:45 -此处进行解密+验签+身份验证
2020-03-13 14:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:10:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:10:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:10:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:10:45 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:10:45 -==> Parameters: 2420(String)
2020-03-13 14:10:45 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:10:45 -==> Parameters: 2420(String)
2020-03-13 14:10:45 -<==      Total: 1
2020-03-13 14:10:45 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:10:45 -==> Parameters: 2420(String)
2020-03-13 14:10:45 -<==      Total: 0
2020-03-13 14:10:45 -耗时 : 19
2020-03-13 14:10:45 -<==      Total: 1
2020-03-13 14:10:45 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:10:45 -==> Parameters: 2420(String)
2020-03-13 14:10:45 -<==      Total: 1
2020-03-13 14:10:45 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:10:45 -==> Parameters: 2420(String)
2020-03-13 14:10:45 -<==      Total: 1
2020-03-13 14:10:45 -耗时 : 33
2020-03-13 14:16:42 -Starting LongEcologicalApplication on PC-201905161910 with PID 13052 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 14:16:42 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 14:16:42 -No active profile set, falling back to default profiles: default
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:16:44 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 14:16:44 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 14:16:44 -Finished Spring Data repository scanning in 121ms. Found 0 repository interfaces.
2020-03-13 14:16:44 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 14:16:44 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 14:16:45 -Finished Spring Data repository scanning in 59ms. Found 0 repository interfaces.
2020-03-13 14:16:45 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$ed24d588] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 14:16:45 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$e7a8ba28] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 14:16:46 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 14:16:46 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 14:16:46 -Starting service [Tomcat]
2020-03-13 14:16:46 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 14:16:46 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 14:16:46 -Initializing Spring embedded WebApplicationContext
2020-03-13 14:16:46 -Root WebApplicationContext: initialization completed in 3647 ms
2020-03-13 14:16:46 -Filter xssFilter was not registered (disabled)
2020-03-13 14:16:47 -HikariPool-1 - Starting...
2020-03-13 14:16:47 -HikariPool-1 - Start completed.
2020-03-13 14:16:47 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 14:16:47 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 14:16:47 -HHH000206: hibernate.properties not found
2020-03-13 14:16:47 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 14:16:47 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 14:16:48 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 14:16:48 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'paramEncryptRequestBodyAdvice': Unsatisfied dependency expressed through field 'userInfoCacheService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
2020-03-13 14:16:48 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 14:16:48 -HikariPool-1 - Shutdown initiated...
2020-03-13 14:16:48 -HikariPool-1 - Shutdown completed.
2020-03-13 14:16:48 -Stopping service [Tomcat]
2020-03-13 14:16:48 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-13 14:16:48 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'paramEncryptRequestBodyAdvice': Unsatisfied dependency expressed through field 'userInfoCacheService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1378)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:846)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1378)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1362)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1467)
	... 43 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 56 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:523)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:380)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:547)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:153)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$1a7d0b58.CGLIB$sqlSessionFactory$0(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$1a7d0b58$$FastClassBySpringCGLIB$$1fb44160.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$1a7d0b58.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 57 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.getSqlSourceFromAnnotations(MapperAnnotationBuilder.java:472)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:289)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:134)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:741)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.bindMapperForNamespace(XMLMapperBuilder.java:413)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:521)
	... 70 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:259)
	at org.apache.ibatis.parsing.XPathParser.<init>(XPathParser.java:115)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:51)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:482)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.getSqlSourceFromAnnotations(MapperAnnotationBuilder.java:465)
	... 77 common frames omitted
Caused by: org.xml.sax.SAXParseException: Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLScanner.reportFatalError(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:257)
	... 81 common frames omitted
2020-03-13 14:17:44 -Starting LongEcologicalApplication on PC-201905161910 with PID 7688 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 14:17:44 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 14:17:44 -No active profile set, falling back to default profiles: default
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:45 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:17:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 14:17:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 14:17:46 -Finished Spring Data repository scanning in 86ms. Found 0 repository interfaces.
2020-03-13 14:17:46 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 14:17:46 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 14:17:46 -Finished Spring Data repository scanning in 46ms. Found 0 repository interfaces.
2020-03-13 14:17:46 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$64f654ae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 14:17:46 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5f7a394e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 14:17:47 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 14:17:47 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 14:17:47 -Starting service [Tomcat]
2020-03-13 14:17:47 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 14:17:47 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 14:17:47 -Initializing Spring embedded WebApplicationContext
2020-03-13 14:17:47 -Root WebApplicationContext: initialization completed in 2773 ms
2020-03-13 14:17:47 -Filter xssFilter was not registered (disabled)
2020-03-13 14:17:47 -HikariPool-1 - Starting...
2020-03-13 14:17:47 -HikariPool-1 - Start completed.
2020-03-13 14:17:48 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 14:17:48 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 14:17:48 -HHH000206: hibernate.properties not found
2020-03-13 14:17:48 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 14:17:48 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 14:17:48 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 14:17:49 -Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'paramEncryptRequestBodyAdvice': Unsatisfied dependency expressed through field 'userInfoCacheService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
2020-03-13 14:17:49 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 14:17:49 -HikariPool-1 - Shutdown initiated...
2020-03-13 14:17:49 -HikariPool-1 - Shutdown completed.
2020-03-13 14:17:49 -Stopping service [Tomcat]
2020-03-13 14:17:49 -

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-03-13 14:17:49 -Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'paramEncryptRequestBodyAdvice': Unsatisfied dependency expressed through field 'userInfoCacheService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1378)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:846)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.example.longecological.LongEcologicalApplication.main(LongEcologicalApplication.java:23)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoCacheServiceImpl': Unsatisfied dependency expressed through field 'userInfoMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:596)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:374)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1378)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userInfoMapper' defined in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\com\example\longecological\mapper\user\UserInfoMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1482)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1362)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:575)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:593)
	... 32 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:627)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:607)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1288)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:538)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:273)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1237)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1164)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1467)
	... 43 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	... 56 common frames omitted
Caused by: org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:523)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:380)
	at org.mybatis.spring.SqlSessionFactoryBean.getObject(SqlSessionFactoryBean.java:547)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration.sqlSessionFactory(MybatisAutoConfiguration.java:153)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$924e8a7e.CGLIB$sqlSessionFactory$1(<generated>)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$924e8a7e$$FastClassBySpringCGLIB$$a36bf4af.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration$$EnhancerBySpringCGLIB$$924e8a7e.sqlSessionFactory(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 57 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Could not find value method on SQL annotation.  Cause: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.getSqlSourceFromAnnotations(MapperAnnotationBuilder.java:472)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:289)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:134)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:741)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.bindMapperForNamespace(XMLMapperBuilder.java:413)
	at org.apache.ibatis.builder.xml.XMLMapperBuilder.parse(XMLMapperBuilder.java:94)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:521)
	... 70 common frames omitted
Caused by: org.apache.ibatis.builder.BuilderException: Error creating document instance.  Cause: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 184; Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:259)
	at org.apache.ibatis.parsing.XPathParser.<init>(XPathParser.java:115)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:51)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:482)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.getSqlSourceFromAnnotations(MapperAnnotationBuilder.java:465)
	... 77 common frames omitted
Caused by: org.xml.sax.SAXParseException: Element type "when" must be followed by either attribute specifications, ">" or "/>".
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLScanner.reportFatalError(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanStartElement(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)
	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)
	at org.apache.ibatis.parsing.XPathParser.createDocument(XPathParser.java:257)
	... 81 common frames omitted
2020-03-13 14:18:24 -Starting LongEcologicalApplication on PC-201905161910 with PID 18080 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 14:18:24 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 14:18:24 -No active profile set, falling back to default profiles: default
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:25 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 14:18:26 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 14:18:26 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 14:18:26 -Finished Spring Data repository scanning in 101ms. Found 0 repository interfaces.
2020-03-13 14:18:26 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 14:18:26 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 14:18:26 -Finished Spring Data repository scanning in 48ms. Found 0 repository interfaces.
2020-03-13 14:18:26 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$72ee7640] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 14:18:26 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$6d725ae0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 14:18:27 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 14:18:27 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 14:18:27 -Starting service [Tomcat]
2020-03-13 14:18:27 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 14:18:27 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 14:18:27 -Initializing Spring embedded WebApplicationContext
2020-03-13 14:18:27 -Root WebApplicationContext: initialization completed in 2838 ms
2020-03-13 14:18:27 -Filter xssFilter was not registered (disabled)
2020-03-13 14:18:27 -HikariPool-1 - Starting...
2020-03-13 14:18:27 -HikariPool-1 - Start completed.
2020-03-13 14:18:28 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 14:18:28 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 14:18:28 -HHH000206: hibernate.properties not found
2020-03-13 14:18:28 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 14:18:28 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 14:18:28 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 14:18:29 -Using default implementation for ThreadExecutor
2020-03-13 14:18:29 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 14:18:29 -Quartz Scheduler v.2.3.0 created.
2020-03-13 14:18:29 -RAMJobStore initialized.
2020-03-13 14:18:29 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 14:18:29 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 14:18:29 -Quartz scheduler version: 2.3.0
2020-03-13 14:18:29 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@611c3eae
2020-03-13 14:18:29 -STAET TaskExecutorConfig
2020-03-13 14:18:29 -Initializing ExecutorService
2020-03-13 14:18:29 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 14:18:30 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 14:18:30 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 14:18:30 -Initializing ExecutorService 'taskScheduler'
2020-03-13 14:18:30 -Starting Quartz Scheduler now
2020-03-13 14:18:30 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 14:18:30 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 14:18:30 -Using a shared selector for servlet write/read
2020-03-13 14:18:30 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 14:18:30 -Started LongEcologicalApplication in 6.778 seconds (JVM running for 7.979)
2020-03-13 14:18:58 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 14:18:58 -Initializing Servlet 'dispatcherServlet'
2020-03-13 14:18:58 -Completed initialization in 10 ms
2020-03-13 14:18:58 -此处进行解密+验签+身份验证
2020-03-13 14:18:58 -此处进行解密+验签+身份验证
2020-03-13 14:18:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:18:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:18:58 -Starting without optional epoll library
2020-03-13 14:18:58 -Starting without optional kqueue library
2020-03-13 14:18:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:18:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:18:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:18:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:18:59 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:18:59 -==> Parameters: 2420(String)
2020-03-13 14:18:59 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:18:59 -==> Parameters: 2420(String)
2020-03-13 14:18:59 -<==      Total: 1
2020-03-13 14:18:59 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:18:59 -==> Parameters: 2420(String)
2020-03-13 14:18:59 -<==      Total: 0
2020-03-13 14:18:59 -耗时 : 61
2020-03-13 14:18:59 -<==      Total: 1
2020-03-13 14:18:59 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:18:59 -==> Parameters: 2420(String)
2020-03-13 14:18:59 -<==      Total: 1
2020-03-13 14:18:59 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:18:59 -==> Parameters: 2420(String)
2020-03-13 14:18:59 -<==      Total: 1
2020-03-13 14:18:59 -耗时 : 82
2020-03-13 14:19:31 -此处进行解密+验签+身份验证
2020-03-13 14:19:31 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 14:19:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 14:19:31 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 14:19:31 -耗时 : 18
2020-03-13 14:19:33 -此处进行解密+验签+身份验证
2020-03-13 14:19:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:33 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 14:19:33 -耗时 : 4
2020-03-13 14:19:37 -此处进行解密+验签+身份验证
2020-03-13 14:19:38 -解密：{
  "sign" : "88DB54C3C542E9B6ECD7C42B7C02379E",
  "login_type" : "account",
  "sys_user_account" : "13322990711",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|O30FADFGN3RTQKPXL93W0XULW0D3PFIE",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-13 14:19:38 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 14:19:38 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 14:19:38 -==> Parameters: 13322990711(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 14:19:38 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200313(String), 141938(String), 181(Integer)
2020-03-13 14:19:38 -<==    Updates: 1
2020-03-13 14:19:38 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 14:19:38 -==> Parameters: 26(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:19:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:19:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:19:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:19:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:19:38 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:19:38 -耗时 : 137
2020-03-13 14:19:38 -此处进行解密+验签+身份验证
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:38 -此处进行解密+验签+身份验证
2020-03-13 14:19:38 -此处进行解密+验签+身份验证
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:38 -此处进行解密+验签+身份验证
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 14:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 14:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 14:19:38 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 14:19:38 -==> Parameters: 181(String)
2020-03-13 14:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 14:19:38 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-13 14:19:38 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 14:19:38 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-13 14:19:38 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 14:19:38 -==> Parameters: 
2020-03-13 14:19:38 -<==      Total: 2
2020-03-13 14:19:38 -耗时 : 16
2020-03-13 14:19:38 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 14:19:38 -耗时 : 18
2020-03-13 14:19:38 -此处进行解密+验签+身份验证
2020-03-13 14:19:38 -耗时 : 15
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:38 -<==      Total: 3
2020-03-13 14:19:38 -耗时 : 27
2020-03-13 14:19:38 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_181
2020-03-13 14:19:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_181 , return
2020-03-13 14:19:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:19:38 -==> Parameters: 181(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:19:38 -==> Parameters: applyRateFlag(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:19:38 -==> Parameters: 13(Integer), 13(Integer), 181(String), applyRateFlag(String)
2020-03-13 14:19:38 -<==    Updates: 1
2020-03-13 14:19:38 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:19:38 -==> Parameters: 181(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:19:38 -==> Parameters: recallFlag(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:19:38 -==> Parameters: 0(Integer), 0(Integer), 181(String), recallFlag(String)
2020-03-13 14:19:38 -<==    Updates: 1
2020-03-13 14:19:38 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:19:38 -==> Parameters: 
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:19:38 -==> Parameters: collegeFlag(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:19:38 -==> Parameters: 15(Integer), 15(Integer), 181(String), collegeFlag(String)
2020-03-13 14:19:38 -<==    Updates: 1
2020-03-13 14:19:38 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:19:38 -==> Parameters: 181(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:19:38 -==> Parameters: cardFlag(String), 181(String)
2020-03-13 14:19:38 -<==      Total: 1
2020-03-13 14:19:38 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:19:38 -==> Parameters: 13(Integer), 13(Integer), 181(String), cardFlag(String)
2020-03-13 14:19:38 -<==    Updates: 1
2020-03-13 14:19:38 -耗时 : 155
2020-03-13 14:19:45 -此处进行解密+验签+身份验证
2020-03-13 14:19:45 -此处进行解密+验签+身份验证
2020-03-13 14:19:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:19:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:19:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:19:45 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:19:45 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:19:45 -==> Parameters: 181(String)
2020-03-13 14:19:45 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:19:45 -==> Parameters: 181(String)
2020-03-13 14:19:45 -<==      Total: 1
2020-03-13 14:19:45 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:19:45 -==> Parameters: 181(String)
2020-03-13 14:19:45 -<==      Total: 1
2020-03-13 14:19:45 -<==      Total: 10
2020-03-13 14:19:45 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:19:45 -耗时 : 23
2020-03-13 14:19:45 -==> Parameters: 181(String)
2020-03-13 14:19:45 -<==      Total: 1
2020-03-13 14:19:45 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:19:45 -==> Parameters: 181(String)
2020-03-13 14:19:45 -<==      Total: 0
2020-03-13 14:19:45 -耗时 : 36
2020-03-13 14:20:41 -此处进行解密+验签+身份验证
2020-03-13 14:20:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:20:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:20:41 -此处进行解密+验签+身份验证
2020-03-13 14:20:41 -此处进行解密+验签+身份验证
2020-03-13 14:20:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:20:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_181
2020-03-13 14:20:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:20:41 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_181 , return
2020-03-13 14:20:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 14:20:41 -耗时 : 0
2020-03-13 14:20:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 14:20:41 -耗时 : 0
2020-03-13 14:20:41 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 14:20:41 -耗时 : 0
2020-03-13 14:21:04 -此处进行解密+验签+身份验证
2020-03-13 14:21:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:21:04 -此处进行解密+验签+身份验证
2020-03-13 14:21:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:21:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:21:04 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:21:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:21:04 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:21:04 -==> Parameters: 2420(String)
2020-03-13 14:21:04 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:21:04 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:21:04 -==> Parameters: 2420(String)
2020-03-13 14:21:04 -<==      Total: 0
2020-03-13 14:21:04 -耗时 : 13
2020-03-13 14:21:04 -<==      Total: 1
2020-03-13 14:21:04 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:21:04 -==> Parameters: 2420(String)
2020-03-13 14:21:04 -<==      Total: 1
2020-03-13 14:21:04 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:21:04 -==> Parameters: 2420(String)
2020-03-13 14:21:04 -<==      Total: 1
2020-03-13 14:21:04 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:21:04 -==> Parameters: 2420(String)
2020-03-13 14:21:04 -<==      Total: 1
2020-03-13 14:21:04 -耗时 : 74
2020-03-13 14:22:13 -此处进行解密+验签+身份验证
2020-03-13 14:22:13 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 14:22:13 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 14:22:13 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 14:22:13 -耗时 : 10
2020-03-13 14:25:34 -此处进行解密+验签+身份验证
2020-03-13 14:25:34 -此处进行解密+验签+身份验证
2020-03-13 14:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:25:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:25:34 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:25:34 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:25:34 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:25:34 -==> Parameters: 2420(String)
2020-03-13 14:25:34 -==> Parameters: 2420(String)
2020-03-13 14:25:34 -<==      Total: 1
2020-03-13 14:25:34 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:25:34 -==> Parameters: 2420(String)
2020-03-13 14:25:34 -<==      Total: 1
2020-03-13 14:25:34 -<==      Total: 0
2020-03-13 14:25:34 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:25:34 -耗时 : 24
2020-03-13 14:25:34 -==> Parameters: 2420(String)
2020-03-13 14:25:34 -<==      Total: 1
2020-03-13 14:25:34 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:25:34 -==> Parameters: 2420(String)
2020-03-13 14:25:34 -<==      Total: 1
2020-03-13 14:25:34 -耗时 : 37
2020-03-13 14:26:34 -此处进行解密+验签+身份验证
2020-03-13 14:26:34 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 14:26:34 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 14:26:34 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 14:26:34 -耗时 : 10
2020-03-13 14:34:17 -此处进行解密+验签+身份验证
2020-03-13 14:34:17 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 14:34:17 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-13 14:34:17 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$29ce3e89.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$97e8d485.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 14:34:17 -耗时 : 12
2020-03-13 14:34:17 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 14:34:17 -Reconnected to 120.25.164.176:10379
2020-03-13 14:34:17 -此处进行解密+验签+身份验证
2020-03-13 14:34:17 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"BD97CEE3429ABE7203E82E92550DDEC0","version_no":"450000000145206","login_type":"token","token":"2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA","sys_user_account":""}
2020-03-13 14:34:17 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 14:34:17 -token值=======2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5714ec00 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@23de4b22 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@535ad7b5 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@29217e5e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@41e9d37a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@10bf073e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@155d8de3 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@372cc298 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3851b504 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@50bfc3c7 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 14:34:17 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:34:17 -==> Parameters: 2420(String)
2020-03-13 14:34:17 -<==      Total: 1
2020-03-13 14:34:17 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 14:34:17 -==> Parameters: 26(String)
2020-03-13 14:34:17 -<==      Total: 1
2020-03-13 14:34:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:34:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:34:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:34:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:34:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:34:17 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:34:17 -耗时 : 141
2020-03-13 14:34:21 -此处进行解密+验签+身份验证
2020-03-13 14:34:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 14:34:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 14:34:21 -==> Parameters: 2420(String)
2020-03-13 14:34:21 -<==      Total: 1
2020-03-13 14:34:21 -耗时 : 14
2020-03-13 14:34:22 -此处进行解密+验签+身份验证
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:22 -此处进行解密+验签+身份验证
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:22 -此处进行解密+验签+身份验证
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:22 -此处进行解密+验签+身份验证
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:22 -此处进行解密+验签+身份验证
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:22 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 14:34:22 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 14:34:22 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 14:34:22 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 14:34:22 -==> Parameters: 
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:22 -此处进行解密+验签+身份验证
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_2420
2020-03-13 14:34:22 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_2420 , return
2020-03-13 14:34:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 14:34:22 -<==      Total: 3
2020-03-13 14:34:22 -耗时 : 10
2020-03-13 14:34:22 -耗时 : 15
2020-03-13 14:34:22 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 14:34:22 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 14:34:22 -==> Parameters: 2420(String)
2020-03-13 14:34:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_2420
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 14:34:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_2420 , return
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -耗时 : 9
2020-03-13 14:34:22 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 14:34:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:34:22 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 14:34:22 -==> Parameters: 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 14:34:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 2
2020-03-13 14:34:22 -耗时 : 14
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: applyRateFlag(String), 2420(String)
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:34:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), applyRateFlag(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:34:22 -==> Parameters: 
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:34:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 14:34:22 -==> Parameters: recallFlag(String), 2420(String)
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), recallFlag(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:34:22 -==> Parameters: 
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -耗时 : 122
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: collegeFlag(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 15(Integer), 15(Integer), 2420(String), collegeFlag(String)
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:22 -==> Parameters: 2420(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:22 -==> Parameters: cardFlag(String), 2420(String)
2020-03-13 14:34:22 -<==      Total: 1
2020-03-13 14:34:22 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:22 -==> Parameters: 0(Integer), 0(Integer), 2420(String), cardFlag(String)
2020-03-13 14:34:22 -<==    Updates: 1
2020-03-13 14:34:22 -耗时 : 205
2020-03-13 14:34:31 -此处进行解密+验签+身份验证
2020-03-13 14:34:31 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogOut
2020-03-13 14:34:31 -token值=======2420|6TXUI9FFDX0N4TS271LJE2TQHFUIHUHA
2020-03-13 14:34:31 -耗时 : 19
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -解密：{"sys_user_account":"18824580319","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"A18B0875347A4623B2F9B8962541E23D","version_no":"450000000145206","login_type":"account"}
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 14:34:43 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 14:34:43 -==> Parameters: 18824580319(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 14:34:43 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200313(String), 143443(String), 571(Integer)
2020-03-13 14:34:43 -<==    Updates: 1
2020-03-13 14:34:43 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 14:34:43 -==> Parameters: 25(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:34:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:34:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:34:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:34:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 14:34:43 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 14:34:43 -耗时 : 72
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -==>  Preparing: select * from t_user_frozen where user_id = ? 
2020-03-13 14:34:43 -==> Parameters: 571(String)
2020-03-13 14:34:43 -<==      Total: 0
2020-03-13 14:34:43 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) proceed,save result to cache,redisKey:zfpay_user_freeze_571,save content:null
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 14:34:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 14:34:43 -==> Parameters: 571(String)
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -耗时 : 9
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 14:34:43 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 14:34:43 -==> Parameters: 
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:34:43 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 14:34:43 -==> Parameters: 571(String)
2020-03-13 14:34:43 -此处进行解密+验签+身份验证
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:34:43 -<==      Total: 3
2020-03-13 14:34:43 -耗时 : 8
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -耗时 : 12
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 14:34:43 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 14:34:43 -==> Parameters: 571(String)
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:34:43 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 14:34:43 -==> Parameters: 571(String)
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 14:34:43 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -耗时 : 6
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 14:34:43 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 14:34:43 -耗时 : 13
2020-03-13 14:34:43 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_571,save content:{referer_id=null, parent_chain=null, user_tel=18824580319, id_card=510224197906075230, real_name=曹宇拓, algebra=1, cre_date=20181214, cre_time=093303, login_password=d628bdd29d251467511a5d471d1c0613, manager_id=25, pay_password=d628bdd29d251467511a5d471d1c0613, id=571, auth_status=09, status=0}
2020-03-13 14:34:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:43 -==> Parameters: 571(String), 571(String)
2020-03-13 14:34:43 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 14:34:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:43 -==> Parameters: 571(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==> Parameters: 571(String), 571(String)
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:34:43 -==> Parameters: 
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:34:43 -==> Parameters: 571(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:43 -==> Parameters: 571(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:34:43 -==> Parameters: 
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -耗时 : 138
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:34:43 -==> Parameters: 571(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 1
2020-03-13 14:34:43 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:34:43 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 14:34:43 -<==      Total: 2
2020-03-13 14:34:43 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:34:43 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 14:34:43 -<==    Updates: 2
2020-03-13 14:34:43 -耗时 : 208
2020-03-13 14:36:53 -此处进行解密+验签+身份验证
2020-03-13 14:36:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:36:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:36:53 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:36:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 14:36:53 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 14:36:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:36:53 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 1
2020-03-13 14:36:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:53 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 2
2020-03-13 14:36:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:53 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 14:36:53 -<==    Updates: 2
2020-03-13 14:36:53 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:36:53 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 1
2020-03-13 14:36:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:53 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 2
2020-03-13 14:36:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:53 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 14:36:53 -<==    Updates: 2
2020-03-13 14:36:53 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:36:53 -==> Parameters: 
2020-03-13 14:36:53 -<==      Total: 1
2020-03-13 14:36:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:53 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 2
2020-03-13 14:36:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:53 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 14:36:53 -<==    Updates: 2
2020-03-13 14:36:53 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:36:53 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 1
2020-03-13 14:36:53 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:53 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 14:36:53 -<==      Total: 2
2020-03-13 14:36:53 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:53 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 14:36:53 -<==    Updates: 2
2020-03-13 14:36:53 -耗时 : 102
2020-03-13 14:36:57 -此处进行解密+验签+身份验证
2020-03-13 14:36:57 -此处进行解密+验签+身份验证
2020-03-13 14:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:36:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:36:57 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-13 14:36:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 14:36:57 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-13 14:36:57 -==> Parameters: 202003(String), 571(String)
2020-03-13 14:36:57 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 14:36:57 -==> Parameters: 571(String)
2020-03-13 14:36:57 -<==      Total: 1
2020-03-13 14:36:57 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-13 14:36:57 -<==      Total: 1
2020-03-13 14:36:57 -==> Parameters: 571(String)
2020-03-13 14:36:57 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 14:36:57 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:57 -<==      Total: 0
2020-03-13 14:36:57 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-13 14:36:57 -==> Parameters: 202003(String), 571(String)
2020-03-13 14:36:57 -<==      Total: 1
2020-03-13 14:36:57 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-13 14:36:57 -==> Parameters: 571(String)
2020-03-13 14:36:57 -<==      Total: 0
2020-03-13 14:36:57 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-13 14:36:57 -==> Parameters: 202003(String), 571(String)
2020-03-13 14:36:57 -<==      Total: 0
2020-03-13 14:36:57 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-13 14:36:57 -==> Parameters: 571(String)
2020-03-13 14:36:57 -<==      Total: 0
2020-03-13 14:36:57 -耗时 : 59
2020-03-13 14:36:57 -<==      Total: 1
2020-03-13 14:36:57 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 14:36:57 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:57 -<==      Total: 1
2020-03-13 14:36:57 -耗时 : 87
2020-03-13 14:36:59 -此处进行解密+验签+身份验证
2020-03-13 14:36:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:36:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:36:59 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 14:36:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 14:36:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 14:36:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:36:59 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 1
2020-03-13 14:36:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:59 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 2
2020-03-13 14:36:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:59 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 14:36:59 -<==    Updates: 2
2020-03-13 14:36:59 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 14:36:59 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 1
2020-03-13 14:36:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:59 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 2
2020-03-13 14:36:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:59 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 14:36:59 -<==    Updates: 2
2020-03-13 14:36:59 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 14:36:59 -==> Parameters: 
2020-03-13 14:36:59 -<==      Total: 1
2020-03-13 14:36:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:59 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 2
2020-03-13 14:36:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:59 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 14:36:59 -<==    Updates: 2
2020-03-13 14:36:59 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 14:36:59 -==> Parameters: 571(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 1
2020-03-13 14:36:59 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 14:36:59 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 14:36:59 -<==      Total: 2
2020-03-13 14:36:59 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 14:36:59 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 14:36:59 -<==    Updates: 2
2020-03-13 14:36:59 -耗时 : 196
2020-03-13 14:37:05 -此处进行解密+验签+身份验证
2020-03-13 14:37:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:05 -此处进行解密+验签+身份验证
2020-03-13 14:37:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 14:37:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 14:37:05 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 14:37:05 -==> Parameters: 571(String)
2020-03-13 14:37:05 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 14:37:05 -==> Parameters: 571(String)
2020-03-13 14:37:05 -<==      Total: 10
2020-03-13 14:37:05 -耗时 : 13
2020-03-13 14:37:05 -<==      Total: 1
2020-03-13 14:37:05 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:37:05 -==> Parameters: 571(String)
2020-03-13 14:37:05 -<==      Total: 1
2020-03-13 14:37:05 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:37:05 -==> Parameters: 571(String)
2020-03-13 14:37:05 -<==      Total: 1
2020-03-13 14:37:05 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 14:37:05 -==> Parameters: 571(String)
2020-03-13 14:37:05 -<==      Total: 0
2020-03-13 14:37:05 -耗时 : 32
2020-03-13 14:37:07 -此处进行解密+验签+身份验证
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:07 -此处进行解密+验签+身份验证
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:07 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 14:37:07 -==> Parameters: 1963(String)
2020-03-13 14:37:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 14:37:07 -<==      Total: 1
2020-03-13 14:37:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1963 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1963 and cre_month=202003 and pos_type is null 
2020-03-13 14:37:07 -==> Parameters: 
2020-03-13 14:37:07 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1963,save content:{referer_id=571, parent_chain=571, user_tel=18934318443, id_card=440781198507263817, real_name=徐振洪, algebra=2, cre_date=20191107, cre_time=134845, login_password=7491c3de221278f1dcb5ff766c5d6bba, manager_id=25, pay_password=6f1b8ba47f3f729df8e1fe072366d210, id=1963, auth_status=09, status=0}
2020-03-13 14:37:07 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 14:37:07 -==> Parameters: 1963(String)
2020-03-13 14:37:07 -<==      Total: 1
2020-03-13 14:37:07 -<==      Total: 1
2020-03-13 14:37:07 -耗时 : 17
2020-03-13 14:37:07 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 14:37:07 -==> Parameters: 1963(String)
2020-03-13 14:37:07 -此处进行解密+验签+身份验证
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:07 -<==      Total: 1
2020-03-13 14:37:07 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1963 and pos_type='epos' 
2020-03-13 14:37:07 -==> Parameters: 
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:07 -此处进行解密+验签+身份验证
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:07 -此处进行解密+验签+身份验证
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:07 -<==      Total: 1
2020-03-13 14:37:07 -耗时 : 48
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:07 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 14:37:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:07 -==> Parameters: 1963(String), 1963(String)
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:07 -==> Parameters: 1963(String), 1963(String), 1(String)
2020-03-13 14:37:07 -<==      Total: 0
2020-03-13 14:37:07 -耗时 : 26
2020-03-13 14:37:07 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:07 -==> Parameters: 1963(String), 1963(String), 0(String)
2020-03-13 14:37:07 -<==      Total: 0
2020-03-13 14:37:07 -耗时 : 22
2020-03-13 14:37:07 -<==      Total: 0
2020-03-13 14:37:07 -耗时 : 26
2020-03-13 14:37:24 -此处进行解密+验签+身份验证
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:24 -此处进行解密+验签+身份验证
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:24 -此处进行解密+验签+身份验证
2020-03-13 14:37:24 -此处进行解密+验签+身份验证
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:24 -此处进行解密+验签+身份验证
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:24 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1963 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1963 and cre_month=202003 
2020-03-13 14:37:24 -==> Parameters: 
2020-03-13 14:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-13 14:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:24 -<==      Total: 1
2020-03-13 14:37:24 -耗时 : 24
2020-03-13 14:37:24 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:24 -==> Parameters: 1963(String), 1963(String)
2020-03-13 14:37:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 14:37:24 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:24 -==> Parameters: 1963(String), 1963(String), 1(String)
2020-03-13 14:37:24 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-13 14:37:24 -==> Parameters: 1963(String)
2020-03-13 14:37:24 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:24 -==> Parameters: 1963(String), 1963(String), 0(String)
2020-03-13 14:37:24 -<==      Total: 1
2020-03-13 14:37:24 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 14:37:24 -==> Parameters: 1963(String)
2020-03-13 14:37:24 -<==      Total: 0
2020-03-13 14:37:24 -<==      Total: 0
2020-03-13 14:37:24 -耗时 : 45
2020-03-13 14:37:24 -耗时 : 41
2020-03-13 14:37:24 -<==      Total: 0
2020-03-13 14:37:24 -耗时 : 48
2020-03-13 14:37:24 -<==      Total: 1
2020-03-13 14:37:24 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1963 
2020-03-13 14:37:24 -==> Parameters: 
2020-03-13 14:37:24 -<==      Total: 1
2020-03-13 14:37:24 -耗时 : 77
2020-03-13 14:37:30 -此处进行解密+验签+身份验证
2020-03-13 14:37:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:30 -此处进行解密+验签+身份验证
2020-03-13 14:37:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 14:37:30 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 14:37:30 -==> Parameters: 571(String)
2020-03-13 14:37:30 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryMposList
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND del='0' 
2020-03-13 14:37:30 -==> Parameters: 571(String)
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 14:37:30 -==> Parameters: 571(String), 571(String), 202003(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 14:37:30 -==> Parameters: 571(String), 571(String), 20200212(String), 20200313(String), 571(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_mpos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) 
2020-03-13 14:37:30 -==> Parameters: 571(String), 571(String), 202003(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 14:37:30 -==> Parameters: 571(String), 20200113(String), 571(String), 20200113(String), 20200313(String), 571(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 14:37:30 -==> Parameters: 571(String), 571(String), 20200212(String), 20200313(String), 571(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 14:37:30 -==> Parameters: 571(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -耗时 : 80
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: SELECT count(*) FROM t_user_mpos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_mpos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 14:37:30 -==> Parameters: 571(String), 20200113(String), 571(String), 20200113(String), 20200313(String), 571(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='02' 
2020-03-13 14:37:30 -==> Parameters: 571(String)
2020-03-13 14:37:30 -<==      Total: 1
2020-03-13 14:37:30 -耗时 : 164
2020-03-13 14:37:31 -此处进行解密+验签+身份验证
2020-03-13 14:37:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-13 14:37:31 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 14:37:31 -==> Parameters: 571(String)
2020-03-13 14:37:31 -<==      Total: 10
2020-03-13 14:37:31 -耗时 : 11
2020-03-13 14:37:39 -此处进行解密+验签+身份验证
2020-03-13 14:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 14:37:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 14:37:39 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getTraditionalPosDetail
2020-03-13 14:37:39 -==>  Preparing: select t.sn, t.card_settle_price_vip, t.card_settle_price, t.weixin_settle_price, t.zhifubao_settle_price, t.cloud_settle_price, t.single_profit_rate, t.cash_back_rate, t.mer_cap_fee, t1.mer_name, t1.mer_id, t1.name, t1.tel, t1.credit_card_rate, t1.cloud_flash_rate, t1.weixin_rate, t1.zhifubao_rate, t1.act_status, t1.cash_back_status from t_user_traditional_pos_info t left join t_sys_traditional_pos_info t1 on t1.sn = t.sn where t.user_id = ? and t.sn = ? 
2020-03-13 14:37:39 -==> Parameters: 571(String), 00000302J8NL10321671(String)
2020-03-13 14:37:39 -<==      Total: 1
2020-03-13 14:37:39 -==>  Preparing: select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info where sn=? and isuse=1 and module_type=1 
2020-03-13 14:37:39 -==> Parameters: 00000302J8NL10321671(String)
2020-03-13 14:37:39 -<==      Total: 0
2020-03-13 14:37:39 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn=? 
2020-03-13 14:37:39 -==> Parameters: 00000302J8NL10321671(String)
2020-03-13 14:37:39 -<==      Total: 1
2020-03-13 14:37:39 -==>  Preparing: select cast(performance as char) as performance,cast(num as char) as num FROM t_summary_traditional_pos_trans_all where 1=1 and pos_type is null and sn=? and user_id=? 
2020-03-13 14:37:39 -==> Parameters: 00000302J8NL10321671(String), 571(String)
2020-03-13 14:37:39 -<==      Total: 1
2020-03-13 14:37:39 -耗时 : 44
2020-03-13 15:06:21 -此处进行解密+验签+身份验证
2020-03-13 15:06:21 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 15:06:21 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 15:06:21 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$29ce3e89.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$97e8d485.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 15:06:21 -耗时 : 9
2020-03-13 15:06:21 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 15:06:21 -Reconnected to 120.25.164.176:10379
2020-03-13 15:06:54 -此处进行解密+验签+身份验证
2020-03-13 15:06:54 -解密：{
  "sign" : "45B372038D5D38501ECFCB8C10DAB20E",
  "login_type" : "account",
  "sys_user_account" : "18824580319",
  "device_no" : "iOS11.4.1",
  "login_password" : "8A6F2805B4515AC12058E79E66539BE9",
  "token" : "181|17NSU09206S7OEK1GSYJDYXASOXFR1L1",
  "device_type" : "iOS",
  "version_no" : "1.1.1"
}
2020-03-13 15:06:54 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 15:06:54 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 15:06:54 -==> Parameters: 18824580319(String)
2020-03-13 15:06:54 -<==      Total: 1
2020-03-13 15:06:54 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 15:06:54 -==> Parameters: iOS(String), iOS11.4.1(String), 1.1.1(String), 192.168.191.2(String), 20200313(String), 150654(String), 571(Integer)
2020-03-13 15:06:54 -<==    Updates: 1
2020-03-13 15:06:54 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 15:06:54 -==> Parameters: 25(String)
2020-03-13 15:06:54 -<==      Total: 1
2020-03-13 15:06:54 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 15:06:54 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 15:06:54 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 15:06:54 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 15:06:54 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 15:06:54 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 15:06:54 -耗时 : 121
2020-03-13 15:06:54 -此处进行解密+验签+身份验证
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:06:54 -此处进行解密+验签+身份验证
2020-03-13 15:06:54 -此处进行解密+验签+身份验证
2020-03-13 15:06:54 -此处进行解密+验签+身份验证
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 15:06:54 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 15:06:54 -==> Parameters: 571(String)
2020-03-13 15:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 15:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 15:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 15:06:54 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_02
2020-03-13 15:06:54 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 15:06:54 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 15:06:54 -==> Parameters: 
2020-03-13 15:06:54 -<==      Total: 2
2020-03-13 15:06:54 -耗时 : 12
2020-03-13 15:06:54 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_02 , return
2020-03-13 15:06:54 -<==      Total: 3
2020-03-13 15:06:54 -耗时 : 11
2020-03-13 15:06:54 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 15:06:54 -此处进行解密+验签+身份验证
2020-03-13 15:06:54 -耗时 : 22
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:06:54 -耗时 : 28
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:06:54 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:06:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:06:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:06:54 -==> Parameters: 571(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 1
2020-03-13 15:06:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:06:54 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 2
2020-03-13 15:06:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:06:54 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 15:06:54 -<==    Updates: 2
2020-03-13 15:06:54 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 15:06:54 -==> Parameters: 571(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 1
2020-03-13 15:06:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:06:54 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 2
2020-03-13 15:06:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:06:54 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 15:06:54 -<==    Updates: 2
2020-03-13 15:06:54 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 15:06:54 -==> Parameters: 
2020-03-13 15:06:54 -<==      Total: 1
2020-03-13 15:06:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:06:54 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 2
2020-03-13 15:06:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:06:54 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 15:06:54 -<==    Updates: 2
2020-03-13 15:06:54 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:06:54 -==> Parameters: 571(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 1
2020-03-13 15:06:54 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:06:54 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 15:06:54 -<==      Total: 2
2020-03-13 15:06:54 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:06:54 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 15:06:55 -<==    Updates: 2
2020-03-13 15:06:55 -耗时 : 159
2020-03-13 15:07:08 -此处进行解密+验签+身份验证
2020-03-13 15:07:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:07:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:07:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 15:07:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 15:07:08 -==> Parameters: 571(String)
2020-03-13 15:07:08 -<==      Total: 1
2020-03-13 15:07:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 15:07:08 -==> Parameters: 571(String), 571(String), 202003(String)
2020-03-13 15:07:08 -<==      Total: 1
2020-03-13 15:07:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 15:07:08 -==> Parameters: 571(String), 571(String), 20200212(String), 20200313(String), 571(String)
2020-03-13 15:07:08 -<==      Total: 1
2020-03-13 15:07:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 15:07:08 -==> Parameters: 571(String), 20200113(String), 571(String), 20200113(String), 20200313(String), 571(String)
2020-03-13 15:07:08 -<==      Total: 1
2020-03-13 15:07:08 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 15:07:08 -==> Parameters: 571(String)
2020-03-13 15:07:08 -<==      Total: 1
2020-03-13 15:07:08 -耗时 : 98
2020-03-13 15:07:10 -此处进行解密+验签+身份验证
2020-03-13 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:07:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:07:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-13 15:07:10 -==>  Preparing: SELECT cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, t1.name, t1.tel FROM t_user_traditional_pos_info t LEFT JOIN t_sys_traditional_pos_info t1 on t.sn = t1.sn WHERE t.user_id = ? AND t.state_status = '1' AND t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 15:07:10 -==> Parameters: 571(String)
2020-03-13 15:07:10 -<==      Total: 10
2020-03-13 15:07:10 -耗时 : 18
2020-03-13 15:07:11 -此处进行解密+验签+身份验证
2020-03-13 15:07:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:07:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:07:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-03-13 15:07:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:07:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:07:11 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-03-13 15:07:11 -==> Parameters: 571(String), 01(String)
2020-03-13 15:07:12 -<==      Total: 0
2020-03-13 15:07:12 -耗时 : 45
2020-03-13 15:07:17 -此处进行解密+验签+身份验证
2020-03-13 15:07:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:07:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:07:17 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-03-13 15:07:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:07:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:07:17 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-03-13 15:07:17 -==> Parameters: 571(String), 01(String)
2020-03-13 15:07:17 -<==      Total: 0
2020-03-13 15:07:17 -耗时 : 33
2020-03-13 15:08:11 -此处进行解密+验签+身份验证
2020-03-13 15:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:08:11 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-03-13 15:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:08:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:08:11 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-03-13 15:08:11 -==> Parameters: 571(String), 01(String)
2020-03-13 15:08:11 -<==      Total: 0
2020-03-13 15:08:11 -耗时 : 32
2020-03-13 15:08:24 -此处进行解密+验签+身份验证
2020-03-13 15:08:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:08:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:08:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPolicy3Record
2020-03-13 15:08:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:08:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:08:24 -==>  Preparing: select sn,mer_id,mer_name,max(trade_amount) as trade_amount,(case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(end_date,'%Y%m%d')) else 0 end) as expire_day, max(begin_date) as begin_date,max(end_date) as end_date,max(choose) as choose,GROUP_CONCAT(policy_id) as policy_id from t_sys_pos_policy3_record where user_id=? and pos_type=? group by sn,mer_id,mer_name,begin_date,end_date,choose order by choose 
2020-03-13 15:08:24 -==> Parameters: 571(String), 01(String)
2020-03-13 15:08:24 -<==      Total: 0
2020-03-13 15:08:24 -耗时 : 33
2020-03-13 15:15:44 -此处进行解密+验签+身份验证
2020-03-13 15:15:44 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 15:15:44 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 15:15:44 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 15:15:44 -耗时 : 15
2020-03-13 15:15:52 -此处进行解密+验签+身份验证
2020-03-13 15:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:15:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:15:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getSummaryTraditionalPosList
2020-03-13 15:15:52 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND del = '0' and pos_type is null 
2020-03-13 15:15:52 -==> Parameters: 571(String)
2020-03-13 15:15:52 -<==      Total: 1
2020-03-13 15:15:52 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND EXISTS ( SELECT 1 FROM t_summary_traditional_pos_trans_month t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance >= 50000 AND t1.cre_month = ? ) and t.pos_type is null 
2020-03-13 15:15:52 -==> Parameters: 571(String), 571(String), 202003(String)
2020-03-13 15:15:52 -<==      Total: 1
2020-03-13 15:15:52 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' and t.pos_type is null AND EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_performance) as merchant_performance, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_performance>=10 AND t1.merchant_num>=2) 
2020-03-13 15:15:52 -==> Parameters: 571(String), 571(String), 20200212(String), 20200313(String), 571(String)
2020-03-13 15:15:52 -<==      Total: 1
2020-03-13 15:15:52 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.state_status = '1' AND t.cre_date <= ? and t.pos_type is null AND NOT EXISTS ( SELECT 1 FROM ( SELECT user_id, sn, sum(merchant_num) as merchant_num FROM t_summary_traditional_pos_trans_everyday WHERE user_id = ? AND cre_date BETWEEN ? AND ? GROUP BY user_id, sn) t1 WHERE t1.user_id = ? AND t1.sn = t.sn AND t1.merchant_num>0) 
2020-03-13 15:15:52 -==> Parameters: 571(String), 20200113(String), 571(String), 20200113(String), 20200313(String), 571(String)
2020-03-13 15:15:52 -<==      Total: 1
2020-03-13 15:15:52 -==>  Preparing: select count(distinct mer_id) as cnt from t_sys_pos_policy3_record where user_id=? and pos_type='01' 
2020-03-13 15:15:52 -==> Parameters: 571(String)
2020-03-13 15:15:52 -<==      Total: 1
2020-03-13 15:15:52 -耗时 : 61
2020-03-13 15:28:05 -此处进行解密+验签+身份验证
2020-03-13 15:28:05 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 15:28:05 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 15:28:05 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$29ce3e89.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$97e8d485.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 15:28:05 -耗时 : 16
2020-03-13 15:28:05 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 15:28:05 -Reconnected to 120.25.164.176:10379
2020-03-13 15:28:11 -此处进行解密+验签+身份验证
2020-03-13 15:28:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:11 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 15:28:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:28:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5b53263e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@59b4ca2a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3e4703e2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7c67a0c2 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2fa5d4ab (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@16c0ba68 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@3b25b689 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@62e58f53 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7c9feb24 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@6f1f0d25 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 15:28:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:11 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 1
2020-03-13 15:28:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:11 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 2
2020-03-13 15:28:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:11 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 15:28:11 -<==    Updates: 2
2020-03-13 15:28:11 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 15:28:11 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 1
2020-03-13 15:28:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:11 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 2
2020-03-13 15:28:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:11 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 15:28:11 -<==    Updates: 2
2020-03-13 15:28:11 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 15:28:11 -==> Parameters: 
2020-03-13 15:28:11 -<==      Total: 1
2020-03-13 15:28:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:11 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 2
2020-03-13 15:28:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:11 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 15:28:11 -<==    Updates: 2
2020-03-13 15:28:11 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:11 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 1
2020-03-13 15:28:11 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:11 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 15:28:11 -<==      Total: 2
2020-03-13 15:28:11 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:11 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 15:28:11 -<==    Updates: 2
2020-03-13 15:28:11 -耗时 : 264
2020-03-13 15:28:13 -此处进行解密+验签+身份验证
2020-03-13 15:28:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:13 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:13 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 15:28:13 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 15:28:13 -==> Parameters: 571(String)
2020-03-13 15:28:13 -<==      Total: 1
2020-03-13 15:28:13 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 15:28:13 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:13 -<==      Total: 1
2020-03-13 15:28:13 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 15:28:13 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:13 -<==      Total: 1
2020-03-13 15:28:13 -耗时 : 107
2020-03-13 15:28:20 -此处进行解密+验签+身份验证
2020-03-13 15:28:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:20 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 15:28:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:28:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:28:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:20 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:20 -<==      Total: 1
2020-03-13 15:28:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:20 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 15:28:20 -<==      Total: 2
2020-03-13 15:28:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:20 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 15:28:20 -<==    Updates: 2
2020-03-13 15:28:20 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 15:28:20 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:20 -<==      Total: 1
2020-03-13 15:28:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:20 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 15:28:20 -<==      Total: 2
2020-03-13 15:28:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:20 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 15:28:20 -<==    Updates: 2
2020-03-13 15:28:20 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 15:28:20 -==> Parameters: 
2020-03-13 15:28:20 -<==      Total: 1
2020-03-13 15:28:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:20 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 15:28:20 -<==      Total: 2
2020-03-13 15:28:20 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:20 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 15:28:20 -<==    Updates: 2
2020-03-13 15:28:20 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:20 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:20 -<==      Total: 1
2020-03-13 15:28:20 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:20 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 15:28:21 -<==      Total: 2
2020-03-13 15:28:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 15:28:21 -<==    Updates: 2
2020-03-13 15:28:21 -耗时 : 182
2020-03-13 15:28:22 -此处进行解密+验签+身份验证
2020-03-13 15:28:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:22 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:22 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 15:28:22 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 15:28:22 -==> Parameters: 571(String)
2020-03-13 15:28:22 -<==      Total: 92
2020-03-13 15:28:22 -耗时 : 47
2020-03-13 15:28:52 -此处进行解密+验签+身份验证
2020-03-13 15:28:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getAllMerchantTraditionalPosList
2020-03-13 15:28:52 -耗时 : 0
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -解密：{"sys_user_account":"18824580319","login_password":"8A6F2805B4515AC12058E79E66539BE9","device_type":"android","device_no":"1.0.9","sign":"A18B0875347A4623B2F9B8962541E23D","version_no":"450000000145206","login_type":"account"}
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 15:28:57 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, card_photo, real_name, auth_status, money, settle_money, deduct_money, login_password, pay_password, head_photo, referer_id, status, algebra, parent_chain, cre_date, cre_time FROM t_user_info where user_tel=? 
2020-03-13 15:28:57 -==> Parameters: 18824580319(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: update t_user_info set device_type=?,device_no=?,version_no=?, last_login_ip=?,last_login_date=?,last_login_time=? where id=? 
2020-03-13 15:28:57 -==> Parameters: android(String), 1.0.9(String), 450000000145206(String), 192.168.191.1(String), 20200313(String), 152857(String), 571(Integer)
2020-03-13 15:28:57 -<==    Updates: 1
2020-03-13 15:28:57 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 15:28:57 -==> Parameters: 25(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 15:28:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 15:28:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 15:28:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 15:28:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 15:28:57 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 15:28:57 -耗时 : 83
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 15:28:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 15:28:57 -==> Parameters: 571(String)
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,cacheKey:zfpay_sys_app_img_01
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -List com.example.longecological.service.system.impl.SysAppImgCacheServiceImpl.getAppImgList(Map) enable cache service,has cacheKey:zfpay_sys_app_img_01 , return
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -耗时 : 13
2020-03-13 15:28:57 -耗时 : 7
2020-03-13 15:28:57 -此处进行解密+验签+身份验证
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 15:28:57 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 15:28:57 -==> Parameters: 
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 15:28:57 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 15:28:57 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 15:28:57 -==> Parameters: 571(String)
2020-03-13 15:28:57 -<==      Total: 3
2020-03-13 15:28:57 -耗时 : 14
2020-03-13 15:28:57 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 15:28:57 -==> Parameters: 571(String)
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 15:28:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -耗时 : 14
2020-03-13 15:28:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -耗时 : 16
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 15:28:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 15:28:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 15:28:57 -==> Parameters: 
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 15:28:57 -==> Parameters: 
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 15:28:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 15:28:57 -<==      Total: 1
2020-03-13 15:28:57 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 15:28:57 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 15:28:57 -<==      Total: 2
2020-03-13 15:28:57 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 15:28:57 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -耗时 : 176
2020-03-13 15:28:57 -<==    Updates: 2
2020-03-13 15:28:57 -耗时 : 184
2020-03-13 15:29:02 -此处进行解密+验签+身份验证
2020-03-13 15:29:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:02 -此处进行解密+验签+身份验证
2020-03-13 15:29:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 15:29:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:02 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 15:29:02 -==> Parameters: 571(String)
2020-03-13 15:29:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 15:29:02 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 15:29:02 -==> Parameters: 571(String), 571(String)
2020-03-13 15:29:02 -<==      Total: 92
2020-03-13 15:29:02 -耗时 : 42
2020-03-13 15:29:03 -此处进行解密+验签+身份验证
2020-03-13 15:29:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:03 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 15:29:03 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-13 15:29:03 -==> Parameters: 571(String)
2020-03-13 15:29:03 -<==      Total: 10
2020-03-13 15:29:03 -耗时 : 24
2020-03-13 15:29:16 -<==      Total: 546
2020-03-13 15:29:16 -耗时 : 14008
2020-03-13 15:29:34 -此处进行解密+验签+身份验证
2020-03-13 15:29:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:34 -此处进行解密+验签+身份验证
2020-03-13 15:29:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 15:29:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:34 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 15:29:34 -==> Parameters: 571(String)
2020-03-13 15:29:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 15:29:34 -<==      Total: 37
2020-03-13 15:29:34 -耗时 : 22
2020-03-13 15:29:34 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 15:29:34 -==> Parameters: 571(String), EPOS20200113091(String)
2020-03-13 15:29:34 -<==      Total: 1
2020-03-13 15:29:34 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 15:29:34 -==> Parameters: 
2020-03-13 15:29:34 -<==      Total: 94
2020-03-13 15:29:34 -耗时 : 34
2020-03-13 15:29:57 -此处进行解密+验签+身份验证
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 15:29:57 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 15:29:57 -==> Parameters: 596(String)
2020-03-13 15:29:57 -<==      Total: 1
2020-03-13 15:29:57 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_596,save content:{referer_id=571, parent_chain=571, user_tel=13316222686, id_card=350321198011236452, real_name=陈的美, algebra=2, cre_date=20181217, cre_time=110527, login_password=c492a30b8a8cb8bc07fb774fd5e4b317, manager_id=25, pay_password=11283077a1ddf06aac4e952218253904, id=596, auth_status=09, status=0}
2020-03-13 15:29:57 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 15:29:57 -==> Parameters: 571(String), EPOS20200113091,EPOS20200113092,EPOS20200113093(String), 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 15:29:57 -<==      Total: 1
2020-03-13 15:29:57 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-13 15:29:57 -==> Parameters: 596(String), 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 152957(String), 0.48(String), 571(String), EPOS20200113091,EPOS20200113092,EPOS20200113093(String), 596(String)
2020-03-13 15:29:57 -<==    Updates: 3
2020-03-13 15:29:57 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-13 15:29:57 -==> Parameters: 0.48(String), 0.25(String), 0.25(String), 0.25(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 152957(String), 596(String), EPOS20200113091,EPOS20200113092,EPOS20200113093(String)
2020-03-13 15:29:57 -<==    Updates: 0
2020-03-13 15:29:57 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-13 15:29:57 -==> Parameters: 20200313(String), 152957(String), 571(String), EPOS20200113091,EPOS20200113092,EPOS20200113093(String)
2020-03-13 15:29:57 -<==    Updates: 3
2020-03-13 15:29:57 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) , (?,?,?,?,?,?) , (?,?,?,?,?,?) 
2020-03-13 15:29:57 -==> Parameters: 571_20200313152957(String), EPOS20200113091(String), 596(String), TraditionalPOS(String), 2020-03-13 15:29:57(String), 571(String), 571_20200313152957(String), EPOS20200113092(String), 596(String), TraditionalPOS(String), 2020-03-13 15:29:57(String), 571(String), 571_20200313152957(String), EPOS20200113093(String), 596(String), TraditionalPOS(String), 2020-03-13 15:29:57(String), 571(String)
2020-03-13 15:29:57 -<==    Updates: 3
2020-03-13 15:29:57 -耗时 : 217
2020-03-13 15:29:57 -此处进行解密+验签+身份验证
2020-03-13 15:29:57 -此处进行解密+验签+身份验证
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 15:29:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 15:29:57 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 15:29:57 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type='epos' order by sn 
2020-03-13 15:29:57 -==> Parameters: 571(String)
2020-03-13 15:29:57 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 15:29:57 -==> Parameters: 571(String), 571(String)
2020-03-13 15:29:57 -<==      Total: 7
2020-03-13 15:29:57 -耗时 : 24
2020-03-13 15:29:57 -<==      Total: 546
2020-03-13 15:29:57 -耗时 : 23
2020-03-13 16:15:04 -此处进行解密+验签+身份验证
2020-03-13 16:15:04 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 16:15:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 16:15:04 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.GeneratedMethodAccessor94.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$29ce3e89.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$97e8d485.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 16:15:04 -耗时 : 17
2020-03-13 16:15:04 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 16:15:04 -Reconnected to 120.25.164.176:10379
2020-03-13 17:59:30 -Starting LongEcologicalApplication on PC-201905161910 with PID 8660 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 17:59:30 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 17:59:30 -No active profile set, falling back to default profiles: default
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:31 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 17:59:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 17:59:32 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 17:59:32 -Finished Spring Data repository scanning in 119ms. Found 0 repository interfaces.
2020-03-13 17:59:32 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 17:59:32 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 17:59:32 -Finished Spring Data repository scanning in 145ms. Found 0 repository interfaces.
2020-03-13 17:59:33 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$b2e6ca94] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 17:59:33 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ad6aaf34] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 17:59:34 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 17:59:34 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 17:59:34 -Starting service [Tomcat]
2020-03-13 17:59:34 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 17:59:34 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 17:59:35 -Initializing Spring embedded WebApplicationContext
2020-03-13 17:59:35 -Root WebApplicationContext: initialization completed in 4132 ms
2020-03-13 17:59:35 -Filter xssFilter was not registered (disabled)
2020-03-13 17:59:35 -HikariPool-1 - Starting...
2020-03-13 17:59:35 -HikariPool-1 - Start completed.
2020-03-13 17:59:36 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 17:59:36 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 17:59:36 -HHH000206: hibernate.properties not found
2020-03-13 17:59:36 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 17:59:36 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 17:59:36 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 17:59:37 -Using default implementation for ThreadExecutor
2020-03-13 17:59:37 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 17:59:37 -Quartz Scheduler v.2.3.0 created.
2020-03-13 17:59:37 -RAMJobStore initialized.
2020-03-13 17:59:37 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 17:59:37 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 17:59:37 -Quartz scheduler version: 2.3.0
2020-03-13 17:59:37 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@af04f09
2020-03-13 17:59:38 -STAET TaskExecutorConfig
2020-03-13 17:59:38 -Initializing ExecutorService
2020-03-13 17:59:38 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 17:59:38 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 17:59:38 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 17:59:39 -Initializing ExecutorService 'taskScheduler'
2020-03-13 17:59:39 -Starting Quartz Scheduler now
2020-03-13 17:59:39 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 17:59:39 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 17:59:39 -Using a shared selector for servlet write/read
2020-03-13 17:59:39 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 17:59:39 -Started LongEcologicalApplication in 9.993 seconds (JVM running for 12.349)
2020-03-13 17:59:51 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 17:59:51 -Initializing Servlet 'dispatcherServlet'
2020-03-13 17:59:51 -Completed initialization in 18 ms
2020-03-13 17:59:51 -此处进行解密+验签+身份验证
2020-03-13 17:59:51 -此处进行解密+验签+身份验证
2020-03-13 17:59:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 17:59:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 17:59:51 -Starting without optional epoll library
2020-03-13 17:59:51 -Starting without optional kqueue library
2020-03-13 17:59:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 17:59:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 17:59:52 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 17:59:52 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 17:59:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 17:59:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 17:59:52 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 17:59:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 17:59:52 -==> Parameters: 571(String)
2020-03-13 17:59:52 -==> Parameters: 571(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 1
2020-03-13 17:59:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 17:59:52 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 1
2020-03-13 17:59:52 -耗时 : 66
2020-03-13 17:59:52 -<==      Total: 2
2020-03-13 17:59:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 17:59:52 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 17:59:52 -<==    Updates: 2
2020-03-13 17:59:52 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 17:59:52 -==> Parameters: 571(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 1
2020-03-13 17:59:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 17:59:52 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 2
2020-03-13 17:59:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 17:59:52 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 17:59:52 -<==    Updates: 2
2020-03-13 17:59:52 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 17:59:52 -==> Parameters: 
2020-03-13 17:59:52 -<==      Total: 1
2020-03-13 17:59:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 17:59:52 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 2
2020-03-13 17:59:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 17:59:52 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 17:59:52 -<==    Updates: 2
2020-03-13 17:59:52 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 17:59:52 -==> Parameters: 571(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 1
2020-03-13 17:59:52 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 17:59:52 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 17:59:52 -<==      Total: 2
2020-03-13 17:59:52 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 17:59:52 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 17:59:52 -<==    Updates: 2
2020-03-13 17:59:52 -耗时 : 179
2020-03-13 17:59:55 -此处进行解密+验签+身份验证
2020-03-13 17:59:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 17:59:55 -此处进行解密+验签+身份验证
2020-03-13 17:59:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 17:59:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 17:59:55 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 17:59:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 17:59:55 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 17:59:55 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 17:59:55 -==> Parameters: 571(String)
2020-03-13 17:59:55 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 17:59:55 -==> Parameters: 571(String), 571(String)
2020-03-13 17:59:55 -<==      Total: 92
2020-03-13 17:59:55 -耗时 : 80
2020-03-13 18:00:07 -此处进行解密+验签+身份验证
2020-03-13 18:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:00:07 -此处进行解密+验签+身份验证
2020-03-13 18:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:00:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:00:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 18:00:07 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 18:00:07 -==> Parameters: 571(String)
2020-03-13 18:00:07 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-13 18:00:07 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-13 18:00:07 -==> Parameters: 571(String), M351846119951(String)
2020-03-13 18:00:07 -<==      Total: 37
2020-03-13 18:00:07 -耗时 : 17
2020-03-13 18:00:07 -<==      Total: 1
2020-03-13 18:00:07 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:00:07 -==> Parameters: 
2020-03-13 18:00:07 -<==      Total: 94
2020-03-13 18:00:07 -耗时 : 64
2020-03-13 18:00:09 -<==      Total: 546
2020-03-13 18:00:09 -耗时 : 14065
2020-03-13 18:00:12 -此处进行解密+验签+身份验证
2020-03-13 18:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:00:12 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:00:12 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 18:00:12 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-13 18:00:12 -==> Parameters: 571(String)
2020-03-13 18:00:12 -<==      Total: 41
2020-03-13 18:00:12 -耗时 : 29
2020-03-13 18:00:15 -此处进行解密+验签+身份验证
2020-03-13 18:00:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:00:15 -此处进行解密+验签+身份验证
2020-03-13 18:00:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:00:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:00:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:00:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 18:00:15 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 18:00:15 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:00:15 -==> Parameters: 571(String), 00000302J8NL10321680(String)
2020-03-13 18:00:15 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 18:00:15 -==> Parameters: 571(String)
2020-03-13 18:00:15 -<==      Total: 37
2020-03-13 18:00:15 -耗时 : 14
2020-03-13 18:00:15 -<==      Total: 1
2020-03-13 18:00:15 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:00:15 -==> Parameters: 
2020-03-13 18:00:15 -<==      Total: 94
2020-03-13 18:00:15 -耗时 : 48
2020-03-13 18:00:32 -此处进行解密+验签+身份验证
2020-03-13 18:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:00:32 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:00:32 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:00:32 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:00:32 -==> Parameters: 571(String), 00000302J8NL10321680(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:00:32 -<==      Total: 1
2020-03-13 18:00:41 -MachinesManageServiceImpl -- allocationTraditionalPos方法处理异常：nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.NullPointerException: target is null for method split
### Cause: java.lang.NullPointerException: target is null for method split
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkIsReward(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationTraditionalPos(MachinesManageServiceImpl.java:361)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$b5ea0b82.allocationTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationTraditionalPos(MachinesManageController.java:192)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$f7848498.allocationTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:00:41 -耗时 : 9829
2020-03-13 18:01:08 -此处进行解密+验签+身份验证
2020-03-13 18:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:08 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:01:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:01:08 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:01:08 -==> Parameters: 571(String), 00000302J8NL10321680(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:01:08 -<==      Total: 1
2020-03-13 18:01:35 -HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=55s330ms98µs156ns).
2020-03-13 18:01:35 -MachinesManageServiceImpl -- allocationTraditionalPos方法处理异常：nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.NullPointerException: target is null for method split
### Cause: java.lang.NullPointerException: target is null for method split
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkIsReward(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationTraditionalPos(MachinesManageServiceImpl.java:361)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$b5ea0b82.allocationTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationTraditionalPos(MachinesManageController.java:192)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$f7848498.allocationTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -耗时 : 26857
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -此处进行解密+验签+身份验证
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:01:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:01:35 -==> Parameters: 571(String)
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 18:01:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 18:01:35 -==> Parameters: 
2020-03-13 18:01:35 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 18:01:35 -==> Parameters: 
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:01:35 -<==      Total: 3
2020-03-13 18:01:35 -耗时 : 18
2020-03-13 18:01:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 18:01:35 -<==      Total: 3
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -耗时 : 13
2020-03-13 18:01:35 -耗时 : 19
2020-03-13 18:01:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 18:01:35 -==> Parameters: 571(String)
2020-03-13 18:01:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:01:35 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:01:35 -==> Parameters: 571(String)
2020-03-13 18:01:35 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:01:35 -==> Parameters: 571(String)
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:01:35 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 18:01:35 -==> Parameters: 571(String)
2020-03-13 18:01:35 -==> Parameters: 571(String)
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:01:35 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:01:35 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-13 18:01:35 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -耗时 : 15
2020-03-13 18:01:35 -==> Parameters: 01(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -耗时 : 18
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -耗时 : 19
2020-03-13 18:01:35 -==> Parameters: 01(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -耗时 : 23
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -耗时 : 22
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 6
2020-03-13 18:01:35 -耗时 : 25
2020-03-13 18:01:35 -<==      Total: 6
2020-03-13 18:01:35 -耗时 : 30
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:01:35 -==> Parameters: 
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:01:35 -==> Parameters: 
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:01:35 -==> Parameters: 
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:01:35 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:01:35 -==> Parameters: 
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -耗时 : 129
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -耗时 : 135
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -耗时 : 139
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:01:35 -==> Parameters: 571(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 1
2020-03-13 18:01:35 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:01:35 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:01:35 -<==      Total: 2
2020-03-13 18:01:35 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:01:35 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:01:35 -<==    Updates: 2
2020-03-13 18:01:35 -耗时 : 215
2020-03-13 18:04:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:04:32 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 18:04:32 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 18:04:32 -Shutting down Quartz Scheduler
2020-03-13 18:04:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 18:04:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:04:32 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 18:04:32 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:04:32 -HikariPool-1 - Shutdown initiated...
2020-03-13 18:04:32 -HikariPool-1 - Shutdown completed.
2020-03-13 18:05:03 -Starting LongEcologicalApplication on PC-201905161910 with PID 19136 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 18:05:03 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 18:05:03 -No active profile set, falling back to default profiles: default
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:05:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:05:05 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:05:05 -Finished Spring Data repository scanning in 112ms. Found 0 repository interfaces.
2020-03-13 18:05:05 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:05:05 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:05:05 -Finished Spring Data repository scanning in 56ms. Found 0 repository interfaces.
2020-03-13 18:05:06 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$2d552e48] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:05:06 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$27d912e8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:05:07 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 18:05:07 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 18:05:07 -Starting service [Tomcat]
2020-03-13 18:05:07 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 18:05:07 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 18:05:07 -Initializing Spring embedded WebApplicationContext
2020-03-13 18:05:07 -Root WebApplicationContext: initialization completed in 3556 ms
2020-03-13 18:05:07 -Filter xssFilter was not registered (disabled)
2020-03-13 18:05:07 -HikariPool-1 - Starting...
2020-03-13 18:05:08 -HikariPool-1 - Start completed.
2020-03-13 18:05:08 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 18:05:08 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 18:05:08 -HHH000206: hibernate.properties not found
2020-03-13 18:05:08 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 18:05:08 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 18:05:09 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:05:09 -Using default implementation for ThreadExecutor
2020-03-13 18:05:09 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 18:05:09 -Quartz Scheduler v.2.3.0 created.
2020-03-13 18:05:09 -RAMJobStore initialized.
2020-03-13 18:05:09 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 18:05:09 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 18:05:09 -Quartz scheduler version: 2.3.0
2020-03-13 18:05:09 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@71f056a
2020-03-13 18:05:10 -STAET TaskExecutorConfig
2020-03-13 18:05:10 -Initializing ExecutorService
2020-03-13 18:05:10 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 18:05:10 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 18:05:11 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 18:05:11 -Initializing ExecutorService 'taskScheduler'
2020-03-13 18:05:11 -Starting Quartz Scheduler now
2020-03-13 18:05:11 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 18:05:11 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 18:05:11 -Using a shared selector for servlet write/read
2020-03-13 18:05:11 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 18:05:11 -Started LongEcologicalApplication in 9.14 seconds (JVM running for 10.681)
2020-03-13 18:05:28 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 18:05:28 -Initializing Servlet 'dispatcherServlet'
2020-03-13 18:05:28 -Completed initialization in 17 ms
2020-03-13 18:05:28 -此处进行解密+验签+身份验证
2020-03-13 18:05:28 -此处进行解密+验签+身份验证
2020-03-13 18:05:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:05:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:05:28 -Starting without optional epoll library
2020-03-13 18:05:28 -Starting without optional kqueue library
2020-03-13 18:05:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:05:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:05:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 18:05:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 18:05:29 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 18:05:29 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 18:05:29 -==> Parameters: 571(String)
2020-03-13 18:05:29 -==> Parameters: 571(String), 571(String)
2020-03-13 18:05:29 -<==      Total: 546
2020-03-13 18:05:29 -耗时 : 103
2020-03-13 18:05:29 -<==      Total: 92
2020-03-13 18:05:29 -耗时 : 103
2020-03-13 18:05:31 -此处进行解密+验签+身份验证
2020-03-13 18:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:05:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:05:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 18:05:31 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-13 18:05:31 -==> Parameters: 571(String)
2020-03-13 18:05:31 -<==      Total: 41
2020-03-13 18:05:31 -耗时 : 22
2020-03-13 18:06:31 -此处进行解密+验签+身份验证
2020-03-13 18:06:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:06:31 -此处进行解密+验签+身份验证
2020-03-13 18:06:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:06:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:06:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:06:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 18:06:31 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 18:06:31 -==> Parameters: 571(String)
2020-03-13 18:06:31 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 18:06:31 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:06:31 -==> Parameters: 571(String), 00000302J8NL10321680(String)
2020-03-13 18:06:31 -<==      Total: 37
2020-03-13 18:06:31 -耗时 : 13
2020-03-13 18:06:31 -<==      Total: 1
2020-03-13 18:06:31 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:06:31 -==> Parameters: 
2020-03-13 18:06:31 -<==      Total: 94
2020-03-13 18:06:31 -耗时 : 27
2020-03-13 18:06:51 -此处进行解密+验签+身份验证
2020-03-13 18:06:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:06:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:06:51 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:06:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:06:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:06:51 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:06:51 -==> Parameters: 571(String), 00000302J8NL10321680(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:06:51 -<==      Total: 1
2020-03-13 18:06:59 -MachinesManageServiceImpl -- allocationTraditionalPos方法处理异常：nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.NullPointerException: target is null for method split
### Cause: java.lang.NullPointerException: target is null for method split
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkIsReward(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationTraditionalPos(MachinesManageServiceImpl.java:361)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$4d522924.allocationTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationTraditionalPos(MachinesManageController.java:192)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$b917bc5f.allocationTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:06:59 -耗时 : 7923
2020-03-13 18:08:18 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:08:18 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 18:08:18 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 18:08:18 -Shutting down Quartz Scheduler
2020-03-13 18:08:18 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 18:08:18 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:08:18 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 18:08:18 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:08:18 -HikariPool-1 - Shutdown initiated...
2020-03-13 18:08:18 -HikariPool-1 - Shutdown completed.
2020-03-13 18:08:40 -Starting LongEcologicalApplication on PC-201905161910 with PID 1124 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 18:08:40 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 18:08:40 -No active profile set, falling back to default profiles: default
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:08:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:08:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:08:42 -Finished Spring Data repository scanning in 102ms. Found 0 repository interfaces.
2020-03-13 18:08:42 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:08:42 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:08:42 -Finished Spring Data repository scanning in 53ms. Found 0 repository interfaces.
2020-03-13 18:08:42 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$5232cf63] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:08:42 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$4cb6b403] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:08:43 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 18:08:43 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 18:08:43 -Starting service [Tomcat]
2020-03-13 18:08:43 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 18:08:43 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 18:08:43 -Initializing Spring embedded WebApplicationContext
2020-03-13 18:08:43 -Root WebApplicationContext: initialization completed in 2791 ms
2020-03-13 18:08:43 -Filter xssFilter was not registered (disabled)
2020-03-13 18:08:44 -HikariPool-1 - Starting...
2020-03-13 18:08:44 -HikariPool-1 - Start completed.
2020-03-13 18:08:44 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 18:08:44 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 18:08:44 -HHH000206: hibernate.properties not found
2020-03-13 18:08:44 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 18:08:45 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 18:08:45 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:08:46 -Using default implementation for ThreadExecutor
2020-03-13 18:08:46 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 18:08:46 -Quartz Scheduler v.2.3.0 created.
2020-03-13 18:08:46 -RAMJobStore initialized.
2020-03-13 18:08:46 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 18:08:46 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 18:08:46 -Quartz scheduler version: 2.3.0
2020-03-13 18:08:46 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1324e70a
2020-03-13 18:08:46 -STAET TaskExecutorConfig
2020-03-13 18:08:46 -Initializing ExecutorService
2020-03-13 18:08:46 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 18:08:47 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 18:08:47 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 18:08:47 -Initializing ExecutorService 'taskScheduler'
2020-03-13 18:08:48 -Starting Quartz Scheduler now
2020-03-13 18:08:48 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 18:08:48 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 18:08:48 -Using a shared selector for servlet write/read
2020-03-13 18:08:48 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 18:08:48 -Started LongEcologicalApplication in 8.997 seconds (JVM running for 11.776)
2020-03-13 18:09:01 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 18:09:01 -Initializing Servlet 'dispatcherServlet'
2020-03-13 18:09:01 -Completed initialization in 15 ms
2020-03-13 18:09:01 -此处进行解密+验签+身份验证
2020-03-13 18:09:01 -此处进行解密+验签+身份验证
2020-03-13 18:09:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:09:01 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:09:01 -Starting without optional epoll library
2020-03-13 18:09:01 -Starting without optional kqueue library
2020-03-13 18:09:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:09:02 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:09:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 18:09:02 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 18:09:02 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:09:02 -==> Parameters: 571(String), 00000302J8NL10321680(String)
2020-03-13 18:09:02 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 18:09:02 -==> Parameters: 571(String)
2020-03-13 18:09:02 -<==      Total: 1
2020-03-13 18:09:02 -<==      Total: 37
2020-03-13 18:09:02 -耗时 : 74
2020-03-13 18:09:02 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:09:02 -==> Parameters: 
2020-03-13 18:09:02 -<==      Total: 94
2020-03-13 18:09:02 -耗时 : 88
2020-03-13 18:09:23 -此处进行解密+验签+身份验证
2020-03-13 18:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:09:23 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:09:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:09:23 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:09:23 -==> Parameters: 571(String), 00000302J8NL10321680(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:09:23 -<==      Total: 1
2020-03-13 18:09:30 -MachinesManageServiceImpl -- allocationTraditionalPos方法处理异常：nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.NullPointerException: target is null for method split
### Cause: java.lang.NullPointerException: target is null for method split
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkIsReward(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationTraditionalPos(MachinesManageServiceImpl.java:361)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$dee2508.allocationTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationTraditionalPos(MachinesManageController.java:192)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$1e37a850.allocationTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:09:30 -耗时 : 6579
2020-03-13 18:09:48 -此处进行解密+验签+身份验证
2020-03-13 18:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:09:48 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:09:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:09:48 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:09:48 -==> Parameters: 571(String), 00000302J8NL10321680(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:09:48 -<==      Total: 1
2020-03-13 18:09:55 -MachinesManageServiceImpl -- allocationTraditionalPos方法处理异常：nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: java.lang.NullPointerException: target is null for method split
### Cause: java.lang.NullPointerException: target is null for method split
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:77)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:166)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:83)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy113.checkIsReward(Unknown Source)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl.allocationTraditionalPos(MachinesManageServiceImpl.java:361)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$FastClassBySpringCGLIB$$aa86b96.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:294)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.machines.impl.MachinesManageServiceImpl$$EnhancerBySpringCGLIB$$dee2508.allocationTraditionalPos(<generated>)
	at com.example.longecological.controller.machines.MachinesManageController.allocationTraditionalPos(MachinesManageController.java:192)
	at com.example.longecological.controller.machines.MachinesManageController$$FastClassBySpringCGLIB$$9eb54566.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.machines.MachinesManageController$$EnhancerBySpringCGLIB$$1e37a850.allocationTraditionalPos(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:09:55 -耗时 : 7359
2020-03-13 18:10:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:10:57 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 18:10:57 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 18:10:57 -Shutting down Quartz Scheduler
2020-03-13 18:10:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 18:10:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:10:57 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 18:10:57 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:10:57 -HikariPool-1 - Shutdown initiated...
2020-03-13 18:10:57 -HikariPool-1 - Shutdown completed.
2020-03-13 18:11:26 -Starting LongEcologicalApplication on PC-201905161910 with PID 14708 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 18:11:26 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 18:11:26 -No active profile set, falling back to default profiles: default
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:11:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:11:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:11:27 -Finished Spring Data repository scanning in 79ms. Found 0 repository interfaces.
2020-03-13 18:11:27 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:11:27 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:11:27 -Finished Spring Data repository scanning in 57ms. Found 0 repository interfaces.
2020-03-13 18:11:28 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$e26e194d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:11:28 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$dcf1fded] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:11:29 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 18:11:29 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 18:11:29 -Starting service [Tomcat]
2020-03-13 18:11:29 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 18:11:29 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 18:11:30 -Initializing Spring embedded WebApplicationContext
2020-03-13 18:11:30 -Root WebApplicationContext: initialization completed in 3860 ms
2020-03-13 18:11:30 -Filter xssFilter was not registered (disabled)
2020-03-13 18:11:30 -HikariPool-1 - Starting...
2020-03-13 18:11:30 -HikariPool-1 - Start completed.
2020-03-13 18:11:31 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 18:11:31 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 18:11:31 -HHH000206: hibernate.properties not found
2020-03-13 18:11:31 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 18:11:31 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 18:11:31 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:11:32 -Using default implementation for ThreadExecutor
2020-03-13 18:11:32 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 18:11:32 -Quartz Scheduler v.2.3.0 created.
2020-03-13 18:11:32 -RAMJobStore initialized.
2020-03-13 18:11:32 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 18:11:32 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 18:11:32 -Quartz scheduler version: 2.3.0
2020-03-13 18:11:32 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@335896bd
2020-03-13 18:11:33 -STAET TaskExecutorConfig
2020-03-13 18:11:33 -Initializing ExecutorService
2020-03-13 18:11:33 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 18:11:33 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 18:11:33 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 18:11:34 -Initializing ExecutorService 'taskScheduler'
2020-03-13 18:11:34 -Starting Quartz Scheduler now
2020-03-13 18:11:34 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 18:11:34 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 18:11:34 -Using a shared selector for servlet write/read
2020-03-13 18:11:34 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 18:11:34 -Started LongEcologicalApplication in 9.379 seconds (JVM running for 11.402)
2020-03-13 18:11:44 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 18:11:44 -Initializing Servlet 'dispatcherServlet'
2020-03-13 18:11:44 -Completed initialization in 15 ms
2020-03-13 18:11:44 -此处进行解密+验签+身份验证
2020-03-13 18:11:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:11:44 -Starting without optional epoll library
2020-03-13 18:11:44 -Starting without optional kqueue library
2020-03-13 18:11:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:11:45 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:11:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:11:45 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:11:45 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:11:45 -==> Parameters: 571(String), 00000302J8NL10321680(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:11:45 -<==      Total: 1
2020-03-13 18:11:49 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type=? and sn in ( ? ) GROUP BY is_reward having count(1)>1 
2020-03-13 18:11:49 -==> Parameters: 571(String), null, 00000302J8NL10321680(String)
2020-03-13 18:11:49 -<==      Total: 0
2020-03-13 18:12:21 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -==> Parameters: 596(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 181221(String), 0.485(String), 571(String), 00000302J8NL10321680(String), 596(String)
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -<==    Updates: 1
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-13 18:12:21 -==> Parameters: 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 181221(String), 596(String), 00000302J8NL10321680(String)
2020-03-13 18:12:21 -此处进行解密+验签+身份验证
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -<==    Updates: 0
2020-03-13 18:12:21 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-13 18:12:21 -==> Parameters: 20200313(String), 181221(String), 571(String), 00000302J8NL10321680(String)
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:12:21 -<==    Updates: 1
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:12:21 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-13 18:12:21 -==> Parameters: 571_20200313181221(String), 00000302J8NL10321680(String), 596(String), null, 2020-03-13 18:12:21(String), 571(String)
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 18:12:21 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 18:12:21 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:12:21 -==> Parameters: 571(String)
2020-03-13 18:12:21 -<==    Updates: 1
2020-03-13 18:12:21 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 18:12:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:12:21 -==> Parameters: 571(String)
2020-03-13 18:12:21 -==> Parameters: 571(String)
2020-03-13 18:12:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:12:21 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 18:12:21 -==> Parameters: 571(String)
2020-03-13 18:12:21 -==> Parameters: 
2020-03-13 18:12:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:12:21 -==> Parameters: 571(String)
2020-03-13 18:12:21 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:12:21 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:12:21 -==> Parameters: 
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:12:21 -==> Parameters: 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -耗时 : 19
2020-03-13 18:12:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-13 18:12:21 -==> Parameters: 01(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -耗时 : 21
2020-03-13 18:12:21 -耗时 : 36267
2020-03-13 18:12:21 -耗时 : 30
2020-03-13 18:12:21 -<==      Total: 3
2020-03-13 18:12:21 -耗时 : 23
2020-03-13 18:12:21 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -耗时 : 29
2020-03-13 18:12:21 -耗时 : 13
2020-03-13 18:12:21 -==> Parameters: 01(String)
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -<==      Total: 3
2020-03-13 18:12:21 -耗时 : 32
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -耗时 : 36
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 6
2020-03-13 18:12:21 -耗时 : 39
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -<==      Total: 6
2020-03-13 18:12:21 -耗时 : 43
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:12:21 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:12:21 -==> Parameters: 
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:12:21 -==> Parameters: 
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:12:21 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:12:21 -==> Parameters: 
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:12:21 -==> Parameters: 
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -耗时 : 128
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -耗时 : 138
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -耗时 : 150
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:12:21 -==> Parameters: 571(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 1
2020-03-13 18:12:21 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:12:21 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:12:21 -<==      Total: 2
2020-03-13 18:12:21 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:12:21 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:12:21 -<==    Updates: 2
2020-03-13 18:12:21 -耗时 : 209
2020-03-13 18:13:18 -此处进行解密+验签+身份验证
2020-03-13 18:13:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:13:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:13:18 -此处进行解密+验签+身份验证
2020-03-13 18:13:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:13:18 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:13:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 18:13:18 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 18:13:18 -==> Parameters: 571(String)
2020-03-13 18:13:18 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 18:13:18 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 18:13:18 -==> Parameters: 571(String), 571(String)
2020-03-13 18:13:18 -<==      Total: 546
2020-03-13 18:13:18 -耗时 : 21
2020-03-13 18:13:18 -<==      Total: 92
2020-03-13 18:13:18 -耗时 : 41
2020-03-13 18:13:19 -此处进行解密+验签+身份验证
2020-03-13 18:13:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:13:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:13:19 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 18:13:19 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-13 18:13:19 -==> Parameters: 571(String)
2020-03-13 18:13:19 -<==      Total: 40
2020-03-13 18:13:19 -耗时 : 19
2020-03-13 18:13:21 -此处进行解密+验签+身份验证
2020-03-13 18:13:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:13:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:13:21 -此处进行解密+验签+身份验证
2020-03-13 18:13:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:13:21 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:13:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 18:13:21 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 18:13:21 -==> Parameters: 571(String)
2020-03-13 18:13:21 -<==      Total: 37
2020-03-13 18:13:21 -耗时 : 15
2020-03-13 18:13:21 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 18:13:21 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:13:21 -==> Parameters: 571(String), 00000302J8NL10321693(String)
2020-03-13 18:13:21 -<==      Total: 1
2020-03-13 18:13:21 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:13:21 -==> Parameters: 
2020-03-13 18:13:21 -<==      Total: 94
2020-03-13 18:13:21 -耗时 : 33
2020-03-13 18:13:52 -此处进行解密+验签+身份验证
2020-03-13 18:13:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:13:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:13:52 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:13:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:13:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:13:52 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:13:52 -==> Parameters: 571(String), 00000302J8NL10321693(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:13:52 -<==      Total: 1
2020-03-13 18:14:04 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type=? and sn in ( ? ) GROUP BY is_reward having count(1)>1 
2020-03-13 18:14:04 -==> Parameters: 571(String), null, 00000302J8NL10321693(String)
2020-03-13 18:14:04 -<==      Total: 0
2020-03-13 18:14:17 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-13 18:14:17 -==> Parameters: 596(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 181417(String), 0.485(String), 571(String), 00000302J8NL10321693(String), 596(String)
2020-03-13 18:14:17 -<==    Updates: 1
2020-03-13 18:14:17 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-13 18:14:17 -==> Parameters: 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 181417(String), 596(String), 00000302J8NL10321693(String)
2020-03-13 18:14:17 -<==    Updates: 0
2020-03-13 18:14:17 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-13 18:14:17 -==> Parameters: 20200313(String), 181417(String), 571(String), 00000302J8NL10321693(String)
2020-03-13 18:14:17 -<==    Updates: 1
2020-03-13 18:14:17 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-13 18:14:17 -==> Parameters: 571_20200313181417(String), 00000302J8NL10321693(String), 596(String), null, 2020-03-13 18:14:17(String), 571(String)
2020-03-13 18:14:17 -<==    Updates: 1
2020-03-13 18:14:17 -耗时 : 24616
2020-03-13 18:16:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:16:50 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 18:16:50 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 18:16:50 -Shutting down Quartz Scheduler
2020-03-13 18:16:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 18:16:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:16:50 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 18:16:50 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:16:50 -HikariPool-1 - Shutdown initiated...
2020-03-13 18:16:50 -HikariPool-1 - Shutdown completed.
2020-03-13 18:17:06 -Starting LongEcologicalApplication on PC-201905161910 with PID 20364 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 18:17:06 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 18:17:06 -No active profile set, falling back to default profiles: default
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:17:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:17:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:17:08 -Finished Spring Data repository scanning in 104ms. Found 0 repository interfaces.
2020-03-13 18:17:08 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:17:08 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:17:08 -Finished Spring Data repository scanning in 58ms. Found 0 repository interfaces.
2020-03-13 18:17:09 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$4c0c3103] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:17:09 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$469015a3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:17:09 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 18:17:09 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 18:17:09 -Starting service [Tomcat]
2020-03-13 18:17:09 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 18:17:09 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 18:17:10 -Initializing Spring embedded WebApplicationContext
2020-03-13 18:17:10 -Root WebApplicationContext: initialization completed in 3029 ms
2020-03-13 18:17:10 -Filter xssFilter was not registered (disabled)
2020-03-13 18:17:10 -HikariPool-1 - Starting...
2020-03-13 18:17:10 -HikariPool-1 - Start completed.
2020-03-13 18:17:11 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 18:17:11 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 18:17:11 -HHH000206: hibernate.properties not found
2020-03-13 18:17:11 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 18:17:11 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 18:17:11 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:17:12 -Using default implementation for ThreadExecutor
2020-03-13 18:17:12 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 18:17:12 -Quartz Scheduler v.2.3.0 created.
2020-03-13 18:17:12 -RAMJobStore initialized.
2020-03-13 18:17:12 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 18:17:12 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 18:17:12 -Quartz scheduler version: 2.3.0
2020-03-13 18:17:12 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@185a7dd0
2020-03-13 18:17:13 -STAET TaskExecutorConfig
2020-03-13 18:17:13 -Initializing ExecutorService
2020-03-13 18:17:13 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 18:17:13 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 18:17:13 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 18:17:14 -Initializing ExecutorService 'taskScheduler'
2020-03-13 18:17:14 -Starting Quartz Scheduler now
2020-03-13 18:17:14 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 18:17:14 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 18:17:14 -Using a shared selector for servlet write/read
2020-03-13 18:17:15 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 18:17:15 -Started LongEcologicalApplication in 9.008 seconds (JVM running for 10.715)
2020-03-13 18:17:23 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 18:17:23 -Initializing Servlet 'dispatcherServlet'
2020-03-13 18:17:23 -Completed initialization in 14 ms
2020-03-13 18:17:23 -此处进行解密+验签+身份验证
2020-03-13 18:17:23 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:17:23 -Starting without optional epoll library
2020-03-13 18:17:23 -Starting without optional kqueue library
2020-03-13 18:17:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:17:24 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosAllocationList
2020-03-13 18:17:24 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(weixin_settle_price, '无') AS weixin_settle_price, IFNULL(zhifubao_settle_price,'无') AS zhifubao_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(card_settle_price_vip, '无') AS card_settle_price_vip, IFNULL(weixin_settle_price_vip, '无') AS weixin_settle_price_vip, IFNULL(zhifubao_settle_price_vip,'无') AS zhifubao_settle_price_vip, IFNULL(cloud_settle_price_vip, '无') AS cloud_settle_price_vip, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_traditional_pos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND pos_type is null order by sn 
2020-03-13 18:17:24 -==> Parameters: 571(String)
2020-03-13 18:17:24 -<==      Total: 39
2020-03-13 18:17:24 -耗时 : 111
2020-03-13 18:17:26 -此处进行解密+验签+身份验证
2020-03-13 18:17:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:17:26 -此处进行解密+验签+身份验证
2020-03-13 18:17:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:17:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:17:26 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:17:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getRefererAgency
2020-03-13 18:17:26 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 18:17:26 -==>  Preparing: SELECT cast(id as char) as user_id, user_tel, real_name, head_photo FROM t_user_info WHERE referer_id = ? and auth_status = '09' 
2020-03-13 18:17:26 -==> Parameters: 571(String)
2020-03-13 18:17:26 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:17:26 -==> Parameters: 571(String), 00000302J8NL10321698(String)
2020-03-13 18:17:26 -<==      Total: 37
2020-03-13 18:17:26 -耗时 : 22
2020-03-13 18:17:26 -<==      Total: 1
2020-03-13 18:17:26 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:17:26 -==> Parameters: 
2020-03-13 18:17:26 -<==      Total: 94
2020-03-13 18:17:26 -耗时 : 55
2020-03-13 18:17:47 -此处进行解密+验签+身份验证
2020-03-13 18:17:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:17:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:17:47 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/allocationTraditionalPos
2020-03-13 18:17:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_596
2020-03-13 18:17:47 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_596 , return
2020-03-13 18:17:47 -==>  Preparing: SELECT count(*) FROM t_user_traditional_pos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' AND find_in_set(sn, ?) AND cast(card_settle_price as decimal) <= cast(? as decimal) AND cast(weixin_settle_price as decimal) <= cast(? as decimal) AND cast(zhifubao_settle_price as decimal) <= cast(? as decimal) AND cast(cloud_settle_price as decimal) <= cast(? as decimal) AND cast(single_profit_rate as decimal) >= cast(? as decimal) AND cast(cash_back_rate as decimal) >= cast(? as decimal) AND cast(mer_cap_fee as decimal) <= cast(? as decimal) 
2020-03-13 18:17:47 -==> Parameters: 571(String), 00000302J8NL10321698(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String)
2020-03-13 18:17:47 -<==      Total: 1
2020-03-13 18:17:53 -==>  Preparing: select count(*) as cnt from t_user_traditional_pos_info where user_id=? and pos_type is null and sn in ( ? ) GROUP BY is_reward having count(1)>1 
2020-03-13 18:17:53 -==> Parameters: 571(String), 00000302J8NL10321698(String)
2020-03-13 18:17:53 -<==      Total: 0
2020-03-13 18:18:18 -==>  Preparing: INSERT INTO t_user_traditional_pos_info ( user_id, sn, card_settle_price, weixin_settle_price, zhifubao_settle_price, cloud_settle_price, single_profit_rate, cash_back_rate, mer_cap_fee, cre_date, cre_time, card_settle_price_vip, pos_type ) SELECT ?, t.sn, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, t.pos_type FROM t_user_traditional_pos_info t WHERE t.user_id = ? AND t.activity_status = '0' AND t.state_status = '1' AND FIND_IN_SET(t.sn, ?) AND NOT EXISTS ( SELECT 1 FROM t_user_traditional_pos_info t1 WHERE t1.user_id = ? AND t1.sn = t.sn ) 
2020-03-13 18:18:18 -==> Parameters: 596(String), 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 181818(String), 0.485(String), 571(String), 00000302J8NL10321698(String), 596(String)
2020-03-13 18:18:18 -<==    Updates: 1
2020-03-13 18:18:18 -==>  Preparing: UPDATE t_user_traditional_pos_info SET card_settle_price = ?, weixin_settle_price = ?, zhifubao_settle_price = ?, cloud_settle_price = ?, single_profit_rate = ?, cash_back_rate = ?, mer_cap_fee = ?, state_status = '1', del = '0', up_date = ?, up_time = ? WHERE del = '1' AND user_id = ? AND FIND_IN_SET(sn, ?) 
2020-03-13 18:18:18 -==> Parameters: 0.485(String), 0.28(String), 0.28(String), 0.28(String), 0.00(String), 0.000(String), 18(String), 20200313(String), 181818(String), 596(String), 00000302J8NL10321698(String)
2020-03-13 18:18:18 -<==    Updates: 0
2020-03-13 18:18:18 -==>  Preparing: UPDATE t_user_traditional_pos_info SET state_status = '0', up_date = ?, up_time = ? WHERE user_id = ? AND activity_status = '0' AND state_status = '1' AND FIND_IN_SET(sn, ?) 
2020-03-13 18:18:18 -==> Parameters: 20200313(String), 181818(String), 571(String), 00000302J8NL10321698(String)
2020-03-13 18:18:18 -<==    Updates: 1
2020-03-13 18:18:18 -==>  Preparing: insert into t_user_pos_batch_allocate(batch_no,sn,user_id,pos_type,allocate_date,allocate_by) values (?,?,?,?,?,?) 
2020-03-13 18:18:18 -==> Parameters: 571_20200313181818(String), 00000302J8NL10321698(String), 596(String), null, 2020-03-13 18:18:18(String), 571(String)
2020-03-13 18:18:18 -<==    Updates: 1
2020-03-13 18:18:18 -耗时 : 31684
2020-03-13 18:33:03 -此处进行解密+验签+身份验证
2020-03-13 18:33:03 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 18:33:03 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 18:33:03 -SysVersionServiceImpl -- getNewVersion方法处理异常：Redis exception; nested exception is io.lettuce.core.RedisException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:74)
	at org.springframework.data.redis.connection.lettuce.LettuceExceptionConverter.convert(LettuceExceptionConverter.java:41)
	at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:44)
	at org.springframework.data.redis.FallbackExceptionTranslationStrategy.translate(FallbackExceptionTranslationStrategy.java:42)
	at org.springframework.data.redis.connection.lettuce.LettuceConnection.convertLettuceAccessException(LettuceConnection.java:268)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.convertLettuceAccessException(LettuceKeyCommands.java:817)
	at org.springframework.data.redis.connection.lettuce.LettuceKeyCommands.exists(LettuceKeyCommands.java:80)
	at org.springframework.data.redis.connection.DefaultedRedisConnection.exists(DefaultedRedisConnection.java:55)
	at org.springframework.data.redis.core.RedisTemplate.lambda$hasKey$6(RedisTemplate.java:769)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
	at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
	at org.springframework.data.redis.core.RedisTemplate.hasKey(RedisTemplate.java:769)
	at com.example.longecological.annotations.impl.CacheServiceAspect.processQuery(CacheServiceAspect.java:67)
	at com.example.longecological.annotations.impl.CacheServiceAspect.dealCacheService(CacheServiceAspect.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.service.system.impl.SysVersionCacheServiceImpl$$EnhancerBySpringCGLIB$$ede9a66f.getNewVersion(<generated>)
	at com.example.longecological.service.system.impl.SysVersionServiceImpl.getNewVersion(SysVersionServiceImpl.java:55)
	at com.example.longecological.controller.system.SysVersionController.getNewVersion(SysVersionController.java:38)
	at com.example.longecological.controller.system.SysVersionController$$FastClassBySpringCGLIB$$18e1599d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.system.SysVersionController$$EnhancerBySpringCGLIB$$50a91ab8.getNewVersion(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:33:03 -耗时 : 28
2020-03-13 18:33:03 -Reconnecting, last destination was /120.25.164.176:10379
2020-03-13 18:33:03 -Reconnected to 120.25.164.176:10379
2020-03-13 18:33:04 -此处进行解密+验签+身份验证
2020-03-13 18:33:04 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 18:33:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_iOS
2020-03-13 18:33:04 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_iOS , return
2020-03-13 18:33:04 -耗时 : 12
2020-03-13 18:33:17 -此处进行解密+验签+身份验证
2020-03-13 18:33:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:17 -此处进行解密+验签+身份验证
2020-03-13 18:33:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:17 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:33:17 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:33:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:33:17 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@24a3b44e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@665c3db1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@866be3a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@5fe4f4f0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@d30305d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@2602f9b6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@66590787 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7bfa725d (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@52568270 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -HikariPool-1 - Failed to validate connection com.mysql.jdbc.JDBC4Connection@7ccc7926 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
2020-03-13 18:33:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:33:17 -==> Parameters: 571(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 1
2020-03-13 18:33:17 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:33:17 -==> Parameters: 571(String)
2020-03-13 18:33:17 -<==      Total: 1
2020-03-13 18:33:17 -耗时 : 81
2020-03-13 18:33:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:33:17 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 2
2020-03-13 18:33:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:33:17 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:33:17 -<==    Updates: 2
2020-03-13 18:33:17 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:33:17 -==> Parameters: 571(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 1
2020-03-13 18:33:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:33:17 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 2
2020-03-13 18:33:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:33:17 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:33:17 -<==    Updates: 2
2020-03-13 18:33:17 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:33:17 -==> Parameters: 
2020-03-13 18:33:17 -<==      Total: 1
2020-03-13 18:33:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:33:17 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 2
2020-03-13 18:33:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:33:17 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:33:17 -<==    Updates: 2
2020-03-13 18:33:17 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:33:17 -==> Parameters: 571(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 1
2020-03-13 18:33:17 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:33:17 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:33:17 -<==      Total: 2
2020-03-13 18:33:17 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:33:17 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:33:17 -<==    Updates: 2
2020-03-13 18:33:17 -耗时 : 186
2020-03-13 18:33:19 -此处进行解密+验签+身份验证
2020-03-13 18:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:19 -此处进行解密+验签+身份验证
2020-03-13 18:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:19 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:19 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserAuthStatus
2020-03-13 18:33:19 -==>  Preparing: select auth_status,id_card, card_photo, real_name, auth_remark from t_user_info where id = ? 
2020-03-13 18:33:19 -==> Parameters: 571(String)
2020-03-13 18:33:19 -请求地址 : http://192.168.191.1:8080/api/sys/reportforms/getHomePageInfo
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_everyday where user_id=? and cre_date=CURRENT_DATE union select sum(performance) as amount from t_summary_mpos_trans_everyday where user_id=? and cre_date=CURRENT_DATE ) t 
2020-03-13 18:33:19 -==> Parameters: 571(String), 571(String)
2020-03-13 18:33:19 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type is null and t.pos_type is null 
2020-03-13 18:33:19 -==> Parameters: 202003(String), 571(String)
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type is null and cre_date=CURRENT_DATE 
2020-03-13 18:33:19 -==> Parameters: 571(String)
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_mpos_benefit_all t LEFT JOIN t_summary_user_mpos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? 
2020-03-13 18:33:19 -==> Parameters: 202003(String), 571(String)
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -==>  Preparing: select IFNULL(cast(sum(amount) as char),'0') as amount from ( select sum(performance) as amount from t_summary_traditional_pos_trans_all where user_id=? union select sum(performance) as amount from t_summary_mpos_trans_all where user_id=? ) t 
2020-03-13 18:33:19 -==> Parameters: 571(String), 571(String)
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_mpos_benefit_everyday where user_id=? and cre_date=CURRENT_DATE 
2020-03-13 18:33:19 -==> Parameters: 571(String)
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -耗时 : 84
2020-03-13 18:33:19 -<==      Total: 0
2020-03-13 18:33:19 -==>  Preparing: SELECT cast(IFNULL(truncate((t1.performance/t.trade_num),2),0) as char) as pos_avg, cast(t.trade_num as char) as pos_num, cast(IFNULL(t1.performance,0.00) as char) as performance, cast(IFNULL(t1.merchant_trade_num+t1.agency_trade_num,0) as char) as act_num FROM t_summary_user_traditional_pos_benefit_all t LEFT JOIN t_summary_user_traditional_pos_benefit_month t1 ON t.user_id = t1.user_id AND t1.cre_month = ? WHERE t.user_id = ? and t1.pos_type='epos' and t.pos_type='epos' 
2020-03-13 18:33:19 -==> Parameters: 202003(String), 571(String)
2020-03-13 18:33:19 -<==      Total: 0
2020-03-13 18:33:19 -==>  Preparing: select IFNULL(cast(merchant_trade_num+agency_trade_num as char),'0') as act_num_day from t_summary_user_traditional_pos_benefit_everyday where user_id=? and pos_type='epos' and cre_date=CURRENT_DATE 
2020-03-13 18:33:19 -==> Parameters: 571(String)
2020-03-13 18:33:19 -<==      Total: 1
2020-03-13 18:33:19 -耗时 : 113
2020-03-13 18:33:28 -此处进行解密+验签+身份验证
2020-03-13 18:33:28 -此处进行解密+验签+身份验证
2020-03-13 18:33:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:28 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 18:33:28 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 18:33:28 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 18:33:28 -==> Parameters: 571(String)
2020-03-13 18:33:28 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 18:33:28 -==> Parameters: 571(String)
2020-03-13 18:33:28 -<==      Total: 10
2020-03-13 18:33:28 -耗时 : 15
2020-03-13 18:33:28 -<==      Total: 1
2020-03-13 18:33:28 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:33:28 -==> Parameters: 571(String)
2020-03-13 18:33:28 -<==      Total: 1
2020-03-13 18:33:28 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:33:28 -==> Parameters: 571(String)
2020-03-13 18:33:28 -<==      Total: 1
2020-03-13 18:33:28 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 18:33:28 -==> Parameters: 571(String)
2020-03-13 18:33:28 -<==      Total: 0
2020-03-13 18:33:28 -耗时 : 67
2020-03-13 18:33:44 -此处进行解密+验签+身份验证
2020-03-13 18:33:44 -此处进行解密+验签+身份验证
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:33:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-13 18:33:44 -==> Parameters: 
2020-03-13 18:33:44 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 18:33:44 -==> Parameters: 1968(String)
2020-03-13 18:33:44 -<==      Total: 1
2020-03-13 18:33:44 -耗时 : 17
2020-03-13 18:33:44 -此处进行解密+验签+身份验证
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:44 -此处进行解密+验签+身份验证
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:44 -<==      Total: 1
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:44 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1968,save content:{referer_id=571, parent_chain=571, user_tel=18738862777, id_card=411082199209260632, real_name=杨占营, algebra=2, cre_date=20191108, cre_time=140435, login_password=017f0f12be380449381bc6ccc62e1d9b, manager_id=25, pay_password=a1c2d712cb115e41d66a2faa1ed28b3f, id=1968, auth_status=09, status=0}
2020-03-13 18:33:44 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:33:44 -==> Parameters: 1968(String)
2020-03-13 18:33:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:33:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:44 -此处进行解密+验签+身份验证
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:44 -<==      Total: 1
2020-03-13 18:33:44 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:33:44 -==> Parameters: 1968(String)
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:33:44 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:33:44 -<==      Total: 1
2020-03-13 18:33:44 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-13 18:33:44 -==> Parameters: 
2020-03-13 18:33:44 -<==      Total: 0
2020-03-13 18:33:44 -耗时 : 29
2020-03-13 18:33:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:33:44 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:33:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:44 -<==      Total: 1
2020-03-13 18:33:44 -耗时 : 99
2020-03-13 18:33:44 -<==      Total: 0
2020-03-13 18:33:44 -耗时 : 48
2020-03-13 18:33:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:44 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:33:44 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:33:44 -<==      Total: 0
2020-03-13 18:33:44 -耗时 : 26
2020-03-13 18:33:57 -此处进行解密+验签+身份验证
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:57 -此处进行解密+验签+身份验证
2020-03-13 18:33:57 -此处进行解密+验签+身份验证
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:57 -此处进行解密+验签+身份验证
2020-03-13 18:33:57 -此处进行解密+验签+身份验证
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:33:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-13 18:33:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:57 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1968 and cre_month=202003 
2020-03-13 18:33:57 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-13 18:33:57 -==> Parameters: 1968(String)
2020-03-13 18:33:57 -==> Parameters: 
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:57 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:33:57 -<==      Total: 1
2020-03-13 18:33:57 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:33:57 -==> Parameters: 1968(String)
2020-03-13 18:33:57 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:33:57 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:33:57 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 18:33:57 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:33:57 -<==      Total: 1
2020-03-13 18:33:57 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1968 
2020-03-13 18:33:57 -==> Parameters: 
2020-03-13 18:33:57 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:33:57 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:33:57 -<==      Total: 1
2020-03-13 18:33:57 -耗时 : 36
2020-03-13 18:33:57 -<==      Total: 1
2020-03-13 18:33:57 -耗时 : 57
2020-03-13 18:33:57 -<==      Total: 0
2020-03-13 18:33:57 -耗时 : 45
2020-03-13 18:33:57 -<==      Total: 0
2020-03-13 18:33:57 -耗时 : 48
2020-03-13 18:33:57 -<==      Total: 0
2020-03-13 18:33:57 -耗时 : 64
2020-03-13 18:34:05 -此处进行解密+验签+身份验证
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:05 -此处进行解密+验签+身份验证
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:05 -此处进行解密+验签+身份验证
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:05 -此处进行解密+验签+身份验证
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:05 -此处进行解密+验签+身份验证
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:34:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:05 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:34:05 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:34:05 -==> Parameters: 1968(String)
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-13 18:34:05 -==> Parameters: 
2020-03-13 18:34:05 -<==      Total: 1
2020-03-13 18:34:05 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:34:05 -==> Parameters: 1968(String)
2020-03-13 18:34:05 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:34:05 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:34:05 -<==      Total: 1
2020-03-13 18:34:05 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-13 18:34:05 -==> Parameters: 
2020-03-13 18:34:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:34:05 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:34:05 -<==      Total: 0
2020-03-13 18:34:05 -耗时 : 25
2020-03-13 18:34:05 -<==      Total: 1
2020-03-13 18:34:05 -耗时 : 24
2020-03-13 18:34:05 -<==      Total: 1
2020-03-13 18:34:05 -耗时 : 37
2020-03-13 18:34:05 -<==      Total: 0
2020-03-13 18:34:05 -耗时 : 25
2020-03-13 18:34:05 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:34:05 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:34:05 -<==      Total: 0
2020-03-13 18:34:05 -耗时 : 37
2020-03-13 18:34:11 -此处进行解密+验签+身份验证
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:11 -此处进行解密+验签+身份验证
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:11 -此处进行解密+验签+身份验证
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:11 -此处进行解密+验签+身份验证
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:11 -此处进行解密+验签+身份验证
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:34:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:34:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:11 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1968 and cre_month=202003 
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:11 -==> Parameters: 
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:11 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:11 -<==      Total: 1
2020-03-13 18:34:11 -耗时 : 12
2020-03-13 18:34:11 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:34:11 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 18:34:11 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:34:11 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-13 18:34:11 -==> Parameters: 1968(String)
2020-03-13 18:34:11 -<==      Total: 0
2020-03-13 18:34:11 -耗时 : 24
2020-03-13 18:34:11 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:34:11 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:34:11 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:34:11 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:34:11 -<==      Total: 0
2020-03-13 18:34:11 -耗时 : 23
2020-03-13 18:34:11 -<==      Total: 1
2020-03-13 18:34:11 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:34:11 -==> Parameters: 1968(String)
2020-03-13 18:34:11 -<==      Total: 0
2020-03-13 18:34:11 -耗时 : 34
2020-03-13 18:34:11 -<==      Total: 1
2020-03-13 18:34:11 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1968 
2020-03-13 18:34:11 -==> Parameters: 
2020-03-13 18:34:11 -<==      Total: 1
2020-03-13 18:34:11 -耗时 : 67
2020-03-13 18:34:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:34:28 -Shutting down ExecutorService 'taskScheduler'
2020-03-13 18:34:28 -Shutting down ExecutorService 'getAsyncExecutor'
2020-03-13 18:34:28 -Shutting down Quartz Scheduler
2020-03-13 18:34:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutting down.
2020-03-13 18:34:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED paused.
2020-03-13 18:34:28 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED shutdown complete.
2020-03-13 18:34:28 -Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:34:28 -HikariPool-1 - Shutdown initiated...
2020-03-13 18:34:28 -HikariPool-1 - Shutdown completed.
2020-03-13 18:36:32 -Starting LongEcologicalApplication on PC-201905161910 with PID 15768 (D:\javaSVN\zf2_qh\zfPayOver\target\classes started by Administrator in D:\javaSVN\zf2_qh\zfPayOver)
2020-03-13 18:36:32 -Running with Spring Boot v2.1.1.RELEASE, Spring v5.1.3.RELEASE
2020-03-13 18:36:32 -No active profile set, falling back to default profiles: default
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'onlineActivityMapper' and 'com.example.longecological.mapper.activity.OnlineActivityMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'benefitCentreMapper' and 'com.example.longecological.mapper.benefitcentre.BenefitCentreMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysParamMapper' and 'com.example.longecological.mapper.common.SysParamMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysParamRateMapper' and 'com.example.longecological.mapper.common.SysParamRateMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'verifyRecordMapper' and 'com.example.longecological.mapper.common.VerifyRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'machinesManageMapper' and 'com.example.longecological.mapper.machines.MachinesManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'merchantManageMapper' and 'com.example.longecological.mapper.merchant.MerchantManageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'messageMapper' and 'com.example.longecological.mapper.message.MessageMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'moneyLockerCollegeMapper' and 'com.example.longecological.mapper.moneylocker.MoneyLockerCollegeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'mposMapper' and 'com.example.longecological.mapper.mpos.MposMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'scheduleJobMapper' and 'com.example.longecological.mapper.quartz.ScheduleJobMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'creditCardRatesApplyMapper' and 'com.example.longecological.mapper.ratesmanage.CreditCardRatesApplyMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'reportFormsMapper' and 'com.example.longecological.mapper.reportforms.ReportFormsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysAppImgMapper' and 'com.example.longecological.mapper.system.SysAppImgMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysBankInfoMapper' and 'com.example.longecological.mapper.system.SysBankInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysExchangeUrlMapper' and 'com.example.longecological.mapper.system.SysExchangeUrlMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysNewsMapper' and 'com.example.longecological.mapper.system.SysNewsMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysNoticeMapper' and 'com.example.longecological.mapper.system.SysNoticeMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'sysVersionMapper' and 'com.example.longecological.mapper.system.SysVersionMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'test' and 'com.example.longecological.mapper.test.Test' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'traditionalPosMapper' and 'com.example.longecological.mapper.traditionalpos.TraditionalPosMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'userCardInfoMapper' and 'com.example.longecological.mapper.user.UserCardInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'userCashRecordMapper' and 'com.example.longecological.mapper.user.UserCashRecordMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'userFeedBackMapper' and 'com.example.longecological.mapper.user.UserFeedBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'userInfoMapper' and 'com.example.longecological.mapper.user.UserInfoMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Skipping MapperFactoryBean with name 'zhongFuBackMapper' and 'com.example.longecological.mapper.zfback.ZhongFuBackMapper' mapperInterface. Bean already defined with the same name!
2020-03-13 18:36:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:36:33 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:36:33 -Finished Spring Data repository scanning in 95ms. Found 0 repository interfaces.
2020-03-13 18:36:33 -Multiple Spring Data modules found, entering strict repository configuration mode!
2020-03-13 18:36:33 -Bootstrapping Spring Data repositories in DEFAULT mode.
2020-03-13 18:36:33 -Finished Spring Data repository scanning in 44ms. Found 0 repository interfaces.
2020-03-13 18:36:34 -Bean 'taskExecutorConfig' of type [com.example.longecological.config.thread.TaskExecutorConfig$$EnhancerBySpringCGLIB$$6d5142ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:36:34 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$67d5274b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-13 18:36:34 -Tomcat initialized with port(s): 8080 (http)
2020-03-13 18:36:34 -Initializing ProtocolHandler ["http-nio-8080"]
2020-03-13 18:36:34 -Starting service [Tomcat]
2020-03-13 18:36:34 -Starting Servlet Engine: Apache Tomcat/9.0.13
2020-03-13 18:36:34 -The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_181\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\NetSarang\Xshell 6\;C:\Python27\;C:\Python27\Scripts;C:\Program Files (x86)\NetSarang\Xftp 6\;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\MySQL\MySQL Utilities 1.6\;C:\Program Files\TortoiseSVN\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\Program Files\Geth;D:\360Downloads\web3j-3.6.0\bin;C:\Program Files\nodejs\;C:\Program Files\Microsoft SQL Server\120\DTS\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\120\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\120\DTS\Binn\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Program Files\Microsoft VS Code\bin;D:\360Downloads\web3j-3.6.0\bin;C:\Users\Administrator\AppData\Roaming\npm;C:\Program Files\Java\jdk1.8.0_181;;.]
2020-03-13 18:36:34 -Initializing Spring embedded WebApplicationContext
2020-03-13 18:36:34 -Root WebApplicationContext: initialization completed in 2580 ms
2020-03-13 18:36:34 -Filter xssFilter was not registered (disabled)
2020-03-13 18:36:35 -HikariPool-1 - Starting...
2020-03-13 18:36:35 -HikariPool-1 - Start completed.
2020-03-13 18:36:35 -HHH000204: Processing PersistenceUnitInfo [
	name: default
	...]
2020-03-13 18:36:35 -HHH000412: Hibernate Core {5.3.7.Final}
2020-03-13 18:36:35 -HHH000206: hibernate.properties not found
2020-03-13 18:36:35 -HCANN000001: Hibernate Commons Annotations {5.0.4.Final}
2020-03-13 18:36:36 -HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2020-03-13 18:36:36 -Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-13 18:36:36 -Using default implementation for ThreadExecutor
2020-03-13 18:36:36 -Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2020-03-13 18:36:36 -Quartz Scheduler v.2.3.0 created.
2020-03-13 18:36:36 -RAMJobStore initialized.
2020-03-13 18:36:36 -Scheduler meta-data: Quartz Scheduler (v2.3.0) 'schedulerFactoryBean' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2020-03-13 18:36:36 -Quartz scheduler 'schedulerFactoryBean' initialized from an externally provided properties instance.
2020-03-13 18:36:36 -Quartz scheduler version: 2.3.0
2020-03-13 18:36:36 -JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@34d9df9f
2020-03-13 18:36:37 -STAET TaskExecutorConfig
2020-03-13 18:36:37 -Initializing ExecutorService
2020-03-13 18:36:37 -Initializing ExecutorService 'getAsyncExecutor'
2020-03-13 18:36:37 -spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2020-03-13 18:36:37 -Cannot find template location: classpath:/templates/ (please add some templates or check your Thymeleaf configuration)
2020-03-13 18:36:38 -Initializing ExecutorService 'taskScheduler'
2020-03-13 18:36:38 -Starting Quartz Scheduler now
2020-03-13 18:36:38 -Scheduler schedulerFactoryBean_$_NON_CLUSTERED started.
2020-03-13 18:36:38 -Starting ProtocolHandler ["http-nio-8080"]
2020-03-13 18:36:38 -Using a shared selector for servlet write/read
2020-03-13 18:36:38 -Tomcat started on port(s): 8080 (http) with context path ''
2020-03-13 18:36:38 -Started LongEcologicalApplication in 6.793 seconds (JVM running for 8.006)
2020-03-13 18:36:49 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-13 18:36:49 -Initializing Servlet 'dispatcherServlet'
2020-03-13 18:36:49 -Completed initialization in 13 ms
2020-03-13 18:36:49 -此处进行解密+验签+身份验证
2020-03-13 18:36:49 -此处进行解密+验签+身份验证
2020-03-13 18:36:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:36:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:36:49 -Starting without optional epoll library
2020-03-13 18:36:49 -Starting without optional kqueue library
2020-03-13 18:36:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:36:50 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:36:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 18:36:50 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 18:36:50 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 18:36:50 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 18:36:50 -==> Parameters: 571(String), TraditionalPOS(String)
2020-03-13 18:36:50 -==> Parameters: 571(String), MPOS(String)
2020-03-13 18:36:50 -<==      Total: 4
2020-03-13 18:36:50 -<==      Total: 8
2020-03-13 18:36:50 -耗时 : 82
2020-03-13 18:36:50 -耗时 : 82
2020-03-13 18:36:54 -此处进行解密+验签+身份验证
2020-03-13 18:36:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:36:54 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:36:54 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 18:36:54 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 18:36:54 -==> Parameters: 571(String), epos(String)
2020-03-13 18:36:54 -<==      Total: 1
2020-03-13 18:36:54 -耗时 : 14
2020-03-13 18:36:58 -此处进行解密+验签+身份验证
2020-03-13 18:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:36:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-13 18:36:58 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:36:58 -==> Parameters: 1719(String), 000006027281629091(String)
2020-03-13 18:36:58 -<==      Total: 1
2020-03-13 18:36:58 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-13 18:36:58 -==> Parameters: 571_20191108150502(String)
2020-03-13 18:36:58 -<==      Total: 1
2020-03-13 18:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1719
2020-03-13 18:36:58 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 18:36:58 -==> Parameters: 1719(String)
2020-03-13 18:36:58 -<==      Total: 1
2020-03-13 18:36:58 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1719,save content:{referer_id=571, parent_chain=571, user_tel=18007989238, id_card=362329199003312813, real_name=章鸿兼, algebra=2, cre_date=20190925, cre_time=132359, login_password=1b564c7bb89b7035250d986ea5aa279c, manager_id=25, pay_password=c23a4c8aec86a6d7badd5d8057c4a683, id=1719, auth_status=09, status=0}
2020-03-13 18:36:58 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-13 18:36:58 -==> Parameters: 571_20191108150502(String)
2020-03-13 18:36:58 -<==      Total: 1
2020-03-13 18:36:58 -耗时 : 70
2020-03-13 18:36:58 -此处进行解密+验签+身份验证
2020-03-13 18:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:36:58 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:36:58 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getTraditionalPosSysParamRateList
2020-03-13 18:36:58 -==>  Preparing: select * from t_user_traditional_pos_info where user_id=? and sn=? 
2020-03-13 18:36:58 -==> Parameters: 571(String), 000006027281629091(String)
2020-03-13 18:36:58 -<==      Total: 1
2020-03-13 18:36:58 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:36:58 -==> Parameters: 
2020-03-13 18:36:58 -<==      Total: 94
2020-03-13 18:36:58 -耗时 : 32
2020-03-13 18:37:15 -此处进行解密+验签+身份验证
2020-03-13 18:37:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:15 -此处进行解密+验签+身份验证
2020-03-13 18:37:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:15 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:37:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:15 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:37:15 -==> Parameters: 571(String)
2020-03-13 18:37:15 -<==      Total: 1
2020-03-13 18:37:15 -耗时 : 15
2020-03-13 18:37:15 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:37:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:37:15 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:37:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:37:15 -==> Parameters: 571(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 1
2020-03-13 18:37:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:37:15 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 2
2020-03-13 18:37:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:37:15 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:37:15 -<==    Updates: 2
2020-03-13 18:37:15 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:37:15 -==> Parameters: 571(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 1
2020-03-13 18:37:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:37:15 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 2
2020-03-13 18:37:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:37:15 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:37:15 -<==    Updates: 2
2020-03-13 18:37:15 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:37:15 -==> Parameters: 
2020-03-13 18:37:15 -<==      Total: 1
2020-03-13 18:37:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:37:15 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 2
2020-03-13 18:37:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:37:15 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:37:15 -<==    Updates: 2
2020-03-13 18:37:15 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:37:15 -==> Parameters: 571(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 1
2020-03-13 18:37:15 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:37:15 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:37:15 -<==      Total: 2
2020-03-13 18:37:15 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:37:15 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:37:15 -<==    Updates: 2
2020-03-13 18:37:15 -耗时 : 131
2020-03-13 18:37:29 -此处进行解密+验签+身份验证
2020-03-13 18:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:29 -此处进行解密+验签+身份验证
2020-03-13 18:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:29 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposAllocationList
2020-03-13 18:37:29 -==>  Preparing: SELECT sn, IFNULL(card_settle_price, '无') AS card_settle_price, IFNULL(cloud_settle_price, '无') AS cloud_settle_price, IFNULL(single_profit_rate, '无') AS single_profit_rate, IFNULL(cash_back_rate, '无') AS cash_back_rate, (select GROUP_CONCAT(policy_name) from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn) as policy_name, cast((select (case when TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d'))>=0 then TIMESTAMPDIFF(day,CURRENT_DATE,str_to_date(module1_end_date,'%Y%m%d')) else 0 end) as expire_day from t_sys_pos_policy_info tt where tt.sn=t_user_mpos_info.sn and tt.module_type=1) as char) as expire_day FROM t_user_mpos_info WHERE user_id = ? AND state_status = '1' AND activity_status = '0' AND trade_status = '0' AND del = '0' order by sn 
2020-03-13 18:37:29 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposRecallList
2020-03-13 18:37:29 -==> Parameters: 571(String)
2020-03-13 18:37:29 -==>  Preparing: SELECT t.sn, t.user_id FROM t_user_mpos_info t WHERE t.state_status = '1' AND t.activity_status = '0' AND t.trade_status = '0' AND del = '0' AND t.user_id in (select id from t_user_info where referer_id = ?) AND NOT EXISTS ( SELECT 1 FROM t_user_mpos_recall_record_info t1 WHERE t1.send_user_id = ? AND t1.sn = t.sn AND t1.status = '00') order by t.sn 
2020-03-13 18:37:29 -==> Parameters: 571(String), 571(String)
2020-03-13 18:37:29 -<==      Total: 546
2020-03-13 18:37:29 -耗时 : 30
2020-03-13 18:37:29 -<==      Total: 92
2020-03-13 18:37:29 -耗时 : 35
2020-03-13 18:37:34 -此处进行解密+验签+身份验证
2020-03-13 18:37:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:34 -此处进行解密+验签+身份验证
2020-03-13 18:37:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:34 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 18:37:34 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 18:37:34 -==> Parameters: 571(String), MPOS(String)
2020-03-13 18:37:34 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosBatchAllocate
2020-03-13 18:37:34 -==>  Preparing: select * from ( select cast(@rownum:=@rownum+1 as char) AS id,tt.* from ( select cast(count(*) as char) as cnt,cast(min(sn) as char) as min_sn,cast(max(sn) as char) as max_sn,allocate_date,(select real_name from t_user_info where id=user_id) as real_name, cast(user_id as char) as user_id,batch_no,cast(allocate_by as char) as allocate_by from t_user_pos_batch_allocate where allocate_by=? and pos_type=? group by allocate_date,user_id,batch_no,allocate_by order by allocate_date desc ) tt,(SELECT @rownum:=0) r) t where 1=1 order by t.allocate_date desc limit 0,10 
2020-03-13 18:37:34 -==> Parameters: 571(String), TraditionalPOS(String)
2020-03-13 18:37:34 -<==      Total: 4
2020-03-13 18:37:34 -耗时 : 13
2020-03-13 18:37:34 -<==      Total: 8
2020-03-13 18:37:34 -耗时 : 23
2020-03-13 18:37:38 -此处进行解密+验签+身份验证
2020-03-13 18:37:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-13 18:37:38 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-13 18:37:38 -==> Parameters: 1625(String), M351846124583(String)
2020-03-13 18:37:38 -<==      Total: 1
2020-03-13 18:37:38 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-13 18:37:38 -==> Parameters: 571_20191108092358(String)
2020-03-13 18:37:38 -<==      Total: 1
2020-03-13 18:37:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1625
2020-03-13 18:37:38 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 18:37:38 -==> Parameters: 1625(String)
2020-03-13 18:37:38 -<==      Total: 1
2020-03-13 18:37:38 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1625,save content:{referer_id=571, parent_chain=571, user_tel=19924916169, id_card=430626199701051415, real_name=毛毅, algebra=2, cre_date=20190726, cre_time=192306, login_password=8927f8b0a1026d04b7129779cb0b1360, manager_id=25, pay_password=ce9198d47a9a1ec5e49007ab22c8af87, id=1625, auth_status=09, status=0}
2020-03-13 18:37:38 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-13 18:37:38 -==> Parameters: 571_20191108092358(String)
2020-03-13 18:37:38 -<==      Total: 1
2020-03-13 18:37:38 -耗时 : 78
2020-03-13 18:37:38 -此处进行解密+验签+身份验证
2020-03-13 18:37:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:37:38 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:37:38 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-13 18:37:38 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-13 18:37:38 -==> Parameters: 571(String), M351846124583(String)
2020-03-13 18:37:38 -<==      Total: 1
2020-03-13 18:37:38 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:37:38 -==> Parameters: 
2020-03-13 18:37:38 -<==      Total: 94
2020-03-13 18:37:38 -耗时 : 50
2020-03-13 18:38:46 -此处进行解密+验签+身份验证
2020-03-13 18:38:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:38:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:38:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/selectPosSettlePriceBySN
2020-03-13 18:38:46 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-13 18:38:46 -==> Parameters: 1625(String), M351846124583(String)
2020-03-13 18:38:46 -<==      Total: 1
2020-03-13 18:38:46 -==>  Preparing: select GROUP_CONCAT(sn) as sns from t_user_pos_batch_allocate where batch_no=? 
2020-03-13 18:38:46 -==> Parameters: 571_20191108092358(String)
2020-03-13 18:38:46 -<==      Total: 1
2020-03-13 18:38:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1625
2020-03-13 18:38:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1625 , return
2020-03-13 18:38:46 -==>  Preparing: select GROUP_CONCAT(policy_name) as policy_name from t_sys_pos_policy_info where sn in(select sn from t_user_pos_batch_allocate where batch_no=?) 
2020-03-13 18:38:46 -==> Parameters: 571_20191108092358(String)
2020-03-13 18:38:46 -<==      Total: 1
2020-03-13 18:38:46 -耗时 : 44
2020-03-13 18:38:46 -此处进行解密+验签+身份验证
2020-03-13 18:38:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:38:46 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:38:46 -请求地址 : http://192.168.191.1:8080/api/sys/machinesmanage/getMposSysParamRateList
2020-03-13 18:38:46 -==>  Preparing: select * from t_user_mpos_info where user_id=? and sn=? 
2020-03-13 18:38:46 -==> Parameters: 571(String), M351846124583(String)
2020-03-13 18:38:46 -<==      Total: 1
2020-03-13 18:38:46 -==>  Preparing: select rate, type from t_sys_param_rate order by type, cast(rate as decimal(20,2)) 
2020-03-13 18:38:46 -==> Parameters: 
2020-03-13 18:38:46 -<==      Total: 94
2020-03-13 18:38:46 -耗时 : 19
2020-03-13 18:44:03 -此处进行解密+验签+身份验证
2020-03-13 18:44:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:03 -此处进行解密+验签+身份验证
2020-03-13 18:44:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:03 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:44:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:44:03 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:44:03 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:44:03 -==> Parameters: 571(String)
2020-03-13 18:44:03 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:44:03 -<==      Total: 1
2020-03-13 18:44:03 -耗时 : 15
2020-03-13 18:44:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:44:03 -==> Parameters: 571(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 1
2020-03-13 18:44:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:44:03 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 2
2020-03-13 18:44:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:44:03 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:44:03 -<==    Updates: 2
2020-03-13 18:44:03 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:44:03 -==> Parameters: 571(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 1
2020-03-13 18:44:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:44:03 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 2
2020-03-13 18:44:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:44:03 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:44:03 -<==    Updates: 2
2020-03-13 18:44:03 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:44:03 -==> Parameters: 
2020-03-13 18:44:03 -<==      Total: 1
2020-03-13 18:44:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:44:03 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 2
2020-03-13 18:44:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:44:03 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:44:03 -<==    Updates: 2
2020-03-13 18:44:03 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:44:03 -==> Parameters: 571(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 1
2020-03-13 18:44:03 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:44:03 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:44:03 -<==      Total: 2
2020-03-13 18:44:03 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:44:03 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:44:03 -<==    Updates: 2
2020-03-13 18:44:03 -耗时 : 215
2020-03-13 18:44:06 -此处进行解密+验签+身份验证
2020-03-13 18:44:06 -此处进行解密+验签+身份验证
2020-03-13 18:44:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:06 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 18:44:06 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 18:44:06 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 18:44:06 -==> Parameters: 571(String)
2020-03-13 18:44:06 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 18:44:06 -==> Parameters: 571(String)
2020-03-13 18:44:06 -<==      Total: 10
2020-03-13 18:44:06 -耗时 : 16
2020-03-13 18:44:06 -<==      Total: 1
2020-03-13 18:44:06 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:44:06 -==> Parameters: 571(String)
2020-03-13 18:44:06 -<==      Total: 1
2020-03-13 18:44:06 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:44:06 -==> Parameters: 571(String)
2020-03-13 18:44:06 -<==      Total: 1
2020-03-13 18:44:06 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 18:44:06 -==> Parameters: 571(String)
2020-03-13 18:44:06 -<==      Total: 0
2020-03-13 18:44:06 -耗时 : 70
2020-03-13 18:44:07 -此处进行解密+验签+身份验证
2020-03-13 18:44:07 -此处进行解密+验签+身份验证
2020-03-13 18:44:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:07 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:44:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-13 18:44:08 -==> Parameters: 
2020-03-13 18:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:08 -此处进行解密+验签+身份验证
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:08 -<==      Total: 1
2020-03-13 18:44:08 -耗时 : 14
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:08 -此处进行解密+验签+身份验证
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:08 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:44:08 -==> Parameters: 1968(String)
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:08 -此处进行解密+验签+身份验证
2020-03-13 18:44:08 -<==      Total: 1
2020-03-13 18:44:08 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:44:08 -==> Parameters: 1968(String)
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:08 -<==      Total: 1
2020-03-13 18:44:08 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-13 18:44:08 -==> Parameters: 
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:08 -<==      Total: 1
2020-03-13 18:44:08 -耗时 : 45
2020-03-13 18:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:08 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:08 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:08 -<==      Total: 0
2020-03-13 18:44:08 -耗时 : 28
2020-03-13 18:44:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:08 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:44:08 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:08 -<==      Total: 0
2020-03-13 18:44:08 -耗时 : 26
2020-03-13 18:44:08 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:08 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:44:08 -<==      Total: 0
2020-03-13 18:44:08 -耗时 : 26
2020-03-13 18:44:31 -此处进行解密+验签+身份验证
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:31 -此处进行解密+验签+身份验证
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:31 -此处进行解密+验签+身份验证
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:31 -此处进行解密+验签+身份验证
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:31 -此处进行解密+验签+身份验证
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:31 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1968 and cre_month=202003 
2020-03-13 18:44:31 -==> Parameters: 
2020-03-13 18:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:31 -<==      Total: 1
2020-03-13 18:44:31 -耗时 : 12
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:31 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:31 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:31 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:44:31 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:31 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:31 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:44:31 -<==      Total: 0
2020-03-13 18:44:31 -耗时 : 28
2020-03-13 18:44:31 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-13 18:44:31 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:31 -==> Parameters: 1968(String)
2020-03-13 18:44:31 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:44:31 -<==      Total: 1
2020-03-13 18:44:31 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:44:31 -==> Parameters: 1968(String)
2020-03-13 18:44:31 -<==      Total: 0
2020-03-13 18:44:31 -耗时 : 41
2020-03-13 18:44:31 -<==      Total: 0
2020-03-13 18:44:31 -耗时 : 40
2020-03-13 18:44:31 -<==      Total: 1
2020-03-13 18:44:31 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1968 
2020-03-13 18:44:31 -==> Parameters: 
2020-03-13 18:44:31 -<==      Total: 1
2020-03-13 18:44:31 -耗时 : 41
2020-03-13 18:44:33 -此处进行解密+验签+身份验证
2020-03-13 18:44:33 -此处进行解密+验签+身份验证
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:33 -此处进行解密+验签+身份验证
2020-03-13 18:44:33 -此处进行解密+验签+身份验证
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:33 -此处进行解密+验签+身份验证
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:44:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:33 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:44:33 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-13 18:44:33 -==> Parameters: 
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:33 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:44:33 -<==      Total: 1
2020-03-13 18:44:33 -耗时 : 13
2020-03-13 18:44:33 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:33 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:44:33 -<==      Total: 0
2020-03-13 18:44:33 -耗时 : 30
2020-03-13 18:44:33 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:33 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:33 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:44:33 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:44:33 -==> Parameters: 1968(String)
2020-03-13 18:44:33 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:44:33 -<==      Total: 0
2020-03-13 18:44:33 -耗时 : 40
2020-03-13 18:44:33 -<==      Total: 0
2020-03-13 18:44:33 -耗时 : 39
2020-03-13 18:44:33 -<==      Total: 1
2020-03-13 18:44:33 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:44:33 -==> Parameters: 1968(String)
2020-03-13 18:44:33 -<==      Total: 1
2020-03-13 18:44:33 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-13 18:44:33 -==> Parameters: 
2020-03-13 18:44:33 -<==      Total: 1
2020-03-13 18:44:33 -耗时 : 74
2020-03-13 18:44:44 -此处进行解密+验签+身份验证
2020-03-13 18:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:44 -此处进行解密+验签+身份验证
2020-03-13 18:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 18:44:44 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 18:44:44 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 18:44:44 -==> Parameters: 571(String)
2020-03-13 18:44:44 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 18:44:44 -==> Parameters: 571(String)
2020-03-13 18:44:44 -<==      Total: 10
2020-03-13 18:44:44 -耗时 : 12
2020-03-13 18:44:44 -<==      Total: 1
2020-03-13 18:44:44 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:44:44 -==> Parameters: 571(String)
2020-03-13 18:44:44 -<==      Total: 1
2020-03-13 18:44:44 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:44:44 -==> Parameters: 571(String)
2020-03-13 18:44:44 -<==      Total: 1
2020-03-13 18:44:44 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 18:44:44 -==> Parameters: 571(String)
2020-03-13 18:44:44 -<==      Total: 0
2020-03-13 18:44:44 -耗时 : 65
2020-03-13 18:44:48 -此处进行解密+验签+身份验证
2020-03-13 18:44:48 -此处进行解密+验签+身份验证
2020-03-13 18:44:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:48 -此处进行解密+验签+身份验证
2020-03-13 18:44:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:48 -此处进行解密+验签+身份验证
2020-03-13 18:44:48 -此处进行解密+验签+身份验证
2020-03-13 18:44:48 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:44:48 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:49 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1963 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1963 and cre_month=202003 and pos_type is null 
2020-03-13 18:44:49 -==> Parameters: 
2020-03-13 18:44:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:49 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:44:49 -==> Parameters: 1963(String)
2020-03-13 18:44:49 -<==      Total: 1
2020-03-13 18:44:49 -耗时 : 24
2020-03-13 18:44:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:49 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:49 -<==      Total: 1
2020-03-13 18:44:49 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:44:49 -==> Parameters: 1963(String)
2020-03-13 18:44:49 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:49 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:49 -==> Parameters: 1963(String), 1963(String), 1(String)
2020-03-13 18:44:49 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:49 -==> Parameters: 1963(String), 1963(String)
2020-03-13 18:44:49 -<==      Total: 1
2020-03-13 18:44:49 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1963 and pos_type='epos' 
2020-03-13 18:44:49 -==> Parameters: 
2020-03-13 18:44:49 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:49 -==> Parameters: 1963(String), 1963(String), 0(String)
2020-03-13 18:44:49 -<==      Total: 0
2020-03-13 18:44:49 -耗时 : 40
2020-03-13 18:44:49 -<==      Total: 0
2020-03-13 18:44:49 -耗时 : 36
2020-03-13 18:44:49 -<==      Total: 1
2020-03-13 18:44:49 -耗时 : 74
2020-03-13 18:44:49 -<==      Total: 0
2020-03-13 18:44:49 -耗时 : 44
2020-03-13 18:44:51 -此处进行解密+验签+身份验证
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:51 -此处进行解密+验签+身份验证
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:51 -此处进行解密+验签+身份验证
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:51 -此处进行解密+验签+身份验证
2020-03-13 18:44:51 -此处进行解密+验签+身份验证
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMPosTradeAmountAvg
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_mpos_benefit_all where user_id=1963 ),2) as char),'0') as avg_performance from t_summary_mpos_trans_month where user_id=1963 and cre_month=202003 
2020-03-13 18:44:51 -==> Parameters: 
2020-03-13 18:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadMposInfo
2020-03-13 18:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:44:51 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyMposList
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:51 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:51 -<==      Total: 1
2020-03-13 18:44:51 -耗时 : 32
2020-03-13 18:44:51 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:51 -==> Parameters: 1963(String), 1963(String), 1(String)
2020-03-13 18:44:51 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_mpos_benefit_all where user_id = ? 
2020-03-13 18:44:51 -==> Parameters: 1963(String)
2020-03-13 18:44:51 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:51 -==> Parameters: 1963(String), 1963(String), 0(String)
2020-03-13 18:44:51 -==>  Preparing: select cast(t.id as char) as mpos_id, t.sn, t1.name, cast(t2.performance as char) performance,t.state_status from t_user_mpos_info t inner join t_sys_mpos_info t1 on t1.sn = t.sn inner join t_summary_mpos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:51 -==> Parameters: 1963(String), 1963(String)
2020-03-13 18:44:51 -<==      Total: 1
2020-03-13 18:44:51 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:44:51 -==> Parameters: 1963(String)
2020-03-13 18:44:51 -<==      Total: 1
2020-03-13 18:44:51 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_mpos_trans_all where user_id=1963 
2020-03-13 18:44:51 -==> Parameters: 
2020-03-13 18:44:51 -<==      Total: 0
2020-03-13 18:44:51 -<==      Total: 0
2020-03-13 18:44:51 -耗时 : 53
2020-03-13 18:44:51 -耗时 : 53
2020-03-13 18:44:51 -<==      Total: 0
2020-03-13 18:44:51 -耗时 : 63
2020-03-13 18:44:51 -<==      Total: 1
2020-03-13 18:44:51 -耗时 : 82
2020-03-13 18:44:52 -此处进行解密+验签+身份验证
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:52 -此处进行解密+验签+身份验证
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:52 -此处进行解密+验签+身份验证
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:52 -此处进行解密+验签+身份验证
2020-03-13 18:44:52 -此处进行解密+验签+身份验证
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:44:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:52 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1963
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:52 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:44:52 -==> Parameters: 1963(String)
2020-03-13 18:44:52 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1963 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1963 and cre_month=202003 and pos_type is null 
2020-03-13 18:44:52 -==> Parameters: 
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:52 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1963 , return
2020-03-13 18:44:52 -<==      Total: 1
2020-03-13 18:44:52 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:44:52 -==> Parameters: 1963(String)
2020-03-13 18:44:52 -<==      Total: 1
2020-03-13 18:44:52 -<==      Total: 1
2020-03-13 18:44:52 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1963 and pos_type='epos' 
2020-03-13 18:44:52 -耗时 : 21
2020-03-13 18:44:52 -==> Parameters: 
2020-03-13 18:44:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:52 -==> Parameters: 1963(String), 1963(String), 0(String)
2020-03-13 18:44:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:52 -==> Parameters: 1963(String), 1963(String), 1(String)
2020-03-13 18:44:52 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:44:52 -<==      Total: 1
2020-03-13 18:44:52 -耗时 : 49
2020-03-13 18:44:52 -==> Parameters: 1963(String), 1963(String)
2020-03-13 18:44:52 -<==      Total: 0
2020-03-13 18:44:52 -耗时 : 43
2020-03-13 18:44:52 -<==      Total: 0
2020-03-13 18:44:52 -耗时 : 38
2020-03-13 18:44:52 -<==      Total: 0
2020-03-13 18:44:52 -耗时 : 40
2020-03-13 18:45:39 -此处进行解密+验签+身份验证
2020-03-13 18:45:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:39 -此处进行解密+验签+身份验证
2020-03-13 18:45:39 -请求地址 : http://192.168.191.1:8080/api/sys/version/getNewVersion
2020-03-13 18:45:39 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,cacheKey:zfpay_sys_version_info_new_android
2020-03-13 18:45:39 -Map com.example.longecological.service.system.impl.SysVersionCacheServiceImpl.getNewVersion(Map) enable cache service,has cacheKey:zfpay_sys_version_info_new_android , return
2020-03-13 18:45:39 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 18:45:39 -耗时 : 26
2020-03-13 18:45:39 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-13 18:45:39 -==> Parameters: 04(String)
2020-03-13 18:45:39 -<==      Total: 1
2020-03-13 18:45:39 -耗时 : 21
2020-03-13 18:45:39 -此处进行解密+验签+身份验证
2020-03-13 18:45:39 -解密：{"login_password":"","device_type":"android","device_no":"1.0.9","sign":"966FE9809C450384DCE11B211B5B9665","version_no":"450000000145206","login_type":"token","token":"571|E864GP4A3OXKET45YA41KKCBPD26PRET","sys_user_account":""}
2020-03-13 18:45:39 -请求地址 : http://192.168.191.1:8080/api/user/login/userLogin
2020-03-13 18:45:39 -token值=======571|E864GP4A3OXKET45YA41KKCBPD26PRET
2020-03-13 18:45:39 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 18:45:39 -==> Parameters: 571(String)
2020-03-13 18:45:39 -<==      Total: 1
2020-03-13 18:45:39 -==>  Preparing: SELECT user_id AS manager_id, auth_isaudit, card_isaudit, app_id FROM sys_user WHERE user_id = ? AND del_flag='0' AND status='0' 
2020-03-13 18:45:39 -==> Parameters: 25(String)
2020-03-13 18:45:39 -<==      Total: 1
2020-03-13 18:45:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 18:45:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 18:45:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 18:45:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 18:45:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,cacheKey:zfpay_sys_param_openThreeTierDistribution
2020-03-13 18:45:39 -String com.example.longecological.service.common.impl.SysParamServiceImpl.getParamByCode(String) enable cache service,has cacheKey:zfpay_sys_param_openThreeTierDistribution , return
2020-03-13 18:45:39 -耗时 : 93
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:45:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:45:44 -==> Parameters: 571(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -耗时 : 19
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -此处进行解密+验签+身份验证
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getNewNotice
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/sys/appImg/getAppImgList
2020-03-13 18:45:44 -==>  Preparing: SELECT id, img_type, img_url FROM t_sys_app_img where img_type=? ORDER BY order_num 
2020-03-13 18:45:44 -==> Parameters: 01(String)
2020-03-13 18:45:44 -==>  Preparing: SELECT cast(t.id as char) as notice_id, t.notice_title, cast((select count(*) from t_user_read_notice_info where user_id = ? and notice_id = t.id) as char) as is_read, DATE_FORMAT( STR_TO_DATE( CONCAT(t.cre_date, t.cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_notice_info t where t.status=0 order by t.id desc limit 0,2 
2020-03-13 18:45:44 -==> Parameters: 571(String)
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/sys/news/getNewNews
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/user/info/getUserNewInfo
2020-03-13 18:45:44 -请求地址 : http://192.168.191.1:8080/api/sys/notice/getUnReadNews
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_571
2020-03-13 18:45:44 -<==      Total: 6
2020-03-13 18:45:44 -耗时 : 13
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -耗时 : 19
2020-03-13 18:45:44 -==>  Preparing: SELECT money, settle_money, deduct_money, today_benefit, total_benefit, settle_single_feet_money, single_rate_feet_money FROM t_user_info WHERE id = ? 
2020-03-13 18:45:44 -==> Parameters: 571(String)
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:45:44 -==>  Preparing: SELECT cast(id as char) as news_id, news_title, news_cover, cast(browse_num as char) as browse_num, DATE_FORMAT( STR_TO_DATE( CONCAT(cre_date, cre_time), '%Y%m%d%H%i%s' ), '%Y-%m-%d %H:%i:%s' ) AS cre_date FROM t_sys_news_info where status=0 order by id desc limit 0,3 
2020-03-13 18:45:44 -==> Parameters: 
2020-03-13 18:45:44 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_571 , return
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -耗时 : 13
2020-03-13 18:45:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:45:44 -==> Parameters: 571(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 3
2020-03-13 18:45:44 -耗时 : 23
2020-03-13 18:45:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:45:44 -==> Parameters: 571(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: applyRateFlag(String), 571(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==> Parameters: 571(String), 571(String)
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 0(Integer), 0(Integer), 571(String), applyRateFlag(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -==>  Preparing: select sum(cnt) from (SELECT count(*) as cnt FROM t_user_trapos_recall_record_info WHERE acce_user_id = ? AND status = '00' union SELECT count(*) as cnt FROM t_user_mpos_recall_record_info WHERE acce_user_id = ? AND status = '00') t 
2020-03-13 18:45:44 -==> Parameters: 571(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: recallFlag(String), 571(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:45:44 -==> Parameters: 
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 0(Integer), 0(Integer), 571(String), recallFlag(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -==>  Preparing: select count(*) as cnt from t_sys_money_locker_college_info 
2020-03-13 18:45:44 -==> Parameters: 
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: collegeFlag(String), 571(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:45:44 -==> Parameters: 571(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 15(Integer), 15(Integer), 571(String), collegeFlag(String)
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -==>  Preparing: select sum(cnt) from (select count(*) as cnt from t_user_apply_cardrate_trapos_record_info where user_id = ? and status in('08','09') union select count(*) as cnt from t_user_apply_cardrate_mpos_record_info where user_id = ? and status in('08','09')) t 
2020-03-13 18:45:44 -==> Parameters: 571(String), 571(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -耗时 : 170
2020-03-13 18:45:44 -<==      Total: 1
2020-03-13 18:45:44 -==>  Preparing: select * from t_news_read_state where news_type=? and user_id=? 
2020-03-13 18:45:44 -==> Parameters: cardFlag(String), 571(String)
2020-03-13 18:45:44 -<==      Total: 2
2020-03-13 18:45:44 -==>  Preparing: update t_news_read_state set pre_unread_num=?,unread_num=? where user_id=? and news_type=? 
2020-03-13 18:45:44 -==> Parameters: 0(Integer), 0(Integer), 571(String), cardFlag(String)
2020-03-13 18:45:44 -<==    Updates: 2
2020-03-13 18:45:44 -耗时 : 209
2020-03-13 18:45:59 -此处进行解密+验签+身份验证
2020-03-13 18:45:59 -此处进行解密+验签+身份验证
2020-03-13 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:59 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyNum
2020-03-13 18:45:59 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyList
2020-03-13 18:45:59 -==>  Preparing: SELECT * FROM t_user_info where id = ? 
2020-03-13 18:45:59 -==> Parameters: 571(String)
2020-03-13 18:45:59 -==>  Preparing: select cast(id as char) as user_id, head_photo, real_name, user_tel from t_user_info where referer_id = ? ORDER BY id desc limit 0,10 
2020-03-13 18:45:59 -==> Parameters: 571(String)
2020-03-13 18:45:59 -<==      Total: 1
2020-03-13 18:45:59 -==>  Preparing: select cast(pos_num as char) as m_pos_num,cast(act_num as char) as m_act_num,cast((pos_num-act_num) as char) as m_inact_num from t_summary_user_mpos_benefit_all where user_id=? 
2020-03-13 18:45:59 -==> Parameters: 571(String)
2020-03-13 18:45:59 -<==      Total: 10
2020-03-13 18:45:59 -耗时 : 21
2020-03-13 18:45:59 -<==      Total: 1
2020-03-13 18:45:59 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:45:59 -==> Parameters: 571(String)
2020-03-13 18:45:59 -<==      Total: 1
2020-03-13 18:45:59 -==>  Preparing: select cast(pos_num as char) as e_pos_num,cast(act_num as char) as epos_act_num,cast((pos_num-act_num) as char) as epos_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type='epos' 
2020-03-13 18:45:59 -==> Parameters: 571(String)
2020-03-13 18:45:59 -<==      Total: 0
2020-03-13 18:45:59 -耗时 : 65
2020-03-13 18:46:00 -此处进行解密+验签+身份验证
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:00 -此处进行解密+验签+身份验证
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:46:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:46:00 -此处进行解密+验签+身份验证
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:00 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1968 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1968 and cre_month=202003 and pos_type is null 
2020-03-13 18:46:00 -==> Parameters: 
2020-03-13 18:46:00 -此处进行解密+验签+身份验证
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:00 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:46:00 -==> Parameters: 1968(String)
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:00 -此处进行解密+验签+身份验证
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:00 -<==      Total: 1
2020-03-13 18:46:00 -<==      Total: 1
2020-03-13 18:46:00 -耗时 : 18
2020-03-13 18:46:00 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:46:00 -==> Parameters: 1968(String)
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:00 -<==      Total: 1
2020-03-13 18:46:00 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1968 and pos_type='epos' 
2020-03-13 18:46:00 -==> Parameters: 
2020-03-13 18:46:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:46:00 -<==      Total: 1
2020-03-13 18:46:00 -耗时 : 48
2020-03-13 18:46:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:46:00 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1968
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:46:00 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1968 , return
2020-03-13 18:46:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:00 -==> Parameters: 1968(String), 1968(String)
2020-03-13 18:46:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:00 -==> Parameters: 1968(String), 1968(String), 1(String)
2020-03-13 18:46:00 -<==      Total: 0
2020-03-13 18:46:00 -耗时 : 29
2020-03-13 18:46:00 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:00 -==> Parameters: 1968(String), 1968(String), 0(String)
2020-03-13 18:46:00 -<==      Total: 0
2020-03-13 18:46:00 -耗时 : 38
2020-03-13 18:46:00 -<==      Total: 0
2020-03-13 18:46:00 -耗时 : 41
2020-03-13 18:46:10 -此处进行解密+验签+身份验证
2020-03-13 18:46:10 -此处进行解密+验签+身份验证
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:10 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1957 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1957 and cre_month=202003 and pos_type is null 
2020-03-13 18:46:10 -==> Parameters: 
2020-03-13 18:46:10 -此处进行解密+验签+身份验证
2020-03-13 18:46:10 -此处进行解密+验签+身份验证
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:10 -此处进行解密+验签+身份验证
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:10 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 18:46:10 -==> Parameters: 1957(String)
2020-03-13 18:46:10 -<==      Total: 1
2020-03-13 18:46:10 -耗时 : 23
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:10 -<==      Total: 1
2020-03-13 18:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:10 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1957,save content:{referer_id=571, parent_chain=571, user_tel=13591705488, id_card=210281199302165310, real_name=董兴龙, algebra=2, cre_date=20191106, cre_time=113244, login_password=4ab71760c7b15f4520c9d08262fb2092, manager_id=25, pay_password=aebd057c0d662c83744c0b62382c6796, id=1957, auth_status=09, status=0}
2020-03-13 18:46:10 -==>  Preparing: SELECT id, manager_id, user_tel, real_name, id_card, status, auth_status, login_password, pay_password, referer_id, algebra, parent_chain, cre_date, cre_time FROM t_user_info where id = ? 
2020-03-13 18:46:10 -==> Parameters: 1957(String)
2020-03-13 18:46:10 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:46:10 -==> Parameters: 1957(String)
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:10 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:10 -<==      Total: 1
2020-03-13 18:46:10 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:46:10 -==> Parameters: 1957(String)
2020-03-13 18:46:10 -<==      Total: 1
2020-03-13 18:46:10 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:10 -<==      Total: 1
2020-03-13 18:46:10 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:10 -==> Parameters: 1957(String), 1957(String), 1(String)
2020-03-13 18:46:10 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1957 and pos_type='epos' 
2020-03-13 18:46:10 -==> Parameters: 
2020-03-13 18:46:10 -after Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) proceed,save result to cache,redisKey:zfpay_user_info_id_1957,save content:{referer_id=571, parent_chain=571, user_tel=13591705488, id_card=210281199302165310, real_name=董兴龙, algebra=2, cre_date=20191106, cre_time=113244, login_password=4ab71760c7b15f4520c9d08262fb2092, manager_id=25, pay_password=aebd057c0d662c83744c0b62382c6796, id=1957, auth_status=09, status=0}
2020-03-13 18:46:10 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:10 -==> Parameters: 1957(String), 1957(String)
2020-03-13 18:46:10 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:10 -==> Parameters: 1957(String), 1957(String), 0(String)
2020-03-13 18:46:10 -<==      Total: 1
2020-03-13 18:46:10 -耗时 : 67
2020-03-13 18:46:10 -<==      Total: 0
2020-03-13 18:46:10 -耗时 : 43
2020-03-13 18:46:10 -<==      Total: 0
2020-03-13 18:46:10 -耗时 : 50
2020-03-13 18:46:10 -<==      Total: 0
2020-03-13 18:46:10 -耗时 : 37
2020-03-13 18:46:14 -此处进行解密+验签+身份验证
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:14 -此处进行解密+验签+身份验证
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:14 -此处进行解密+验签+身份验证
2020-03-13 18:46:14 -此处进行解密+验签+身份验证
2020-03-13 18:46:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:14 -此处进行解密+验签+身份验证
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:14 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-13 18:46:14 -==> Parameters: 1957(String)
2020-03-13 18:46:14 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_typ='epos' ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:14 -==> Parameters: 1957(String), 1957(String)
2020-03-13 18:46:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:14 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:14 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1957 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1957 and cre_month=202003 and pos_type='epos' 
2020-03-13 18:46:14 -==> Parameters: 
2020-03-13 18:46:14 -<==      Total: 0
2020-03-13 18:46:14 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:46:14 -==> Parameters: 1957(String)
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:14 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:14 -<==      Total: 1
2020-03-13 18:46:14 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:14 -耗时 : 52
2020-03-13 18:46:14 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_typ='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:14 -==> Parameters: 1957(String), 1957(String), 1(String)
2020-03-13 18:46:14 -<==      Total: 1
2020-03-13 18:46:14 -耗时 : 26
2020-03-13 18:46:14 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_typ='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:14 -==> Parameters: 1957(String), 1957(String), 0(String)
2020-03-13 18:46:14 -MerchantManageServiceImpl -- getReferAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]
### The error may involve com.example.longecological.mapper.merchant.MerchantManageMapper.getReferAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: select     cast(t.id as char) as trapos_id,    t.sn,    t1.mer_name,    t1.mer_id,    cast(t2.performance as char) performance,t.state_status   from    t_user_traditional_pos_info t   inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn   inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn   where    t.user_id = ? and t.del = '0'           and t1.pos_typ='epos'                      AND t.trade_status = ?                  and t2.performance=0                             ORDER BY t.id desc   limit 0,10
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getReferAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyTraditionalPosList(MerchantManageServiceImpl.java:624)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyTraditionalPosList(MerchantManageController.java:279)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyTraditionalPosList(<generated>)
	at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:14 -耗时 : 52
2020-03-13 18:46:14 -MerchantManageServiceImpl -- getReferAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]
### The error may involve com.example.longecological.mapper.merchant.MerchantManageMapper.getReferAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: select     cast(t.id as char) as trapos_id,    t.sn,    t1.mer_name,    t1.mer_id,    cast(t2.performance as char) performance,t.state_status   from    t_user_traditional_pos_info t   inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn   inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn   where    t.user_id = ? and t.del = '0'           and t1.pos_typ='epos'                      AND t.trade_status = ?                                   ORDER BY t.id desc   limit 0,10
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getReferAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyTraditionalPosList(MerchantManageServiceImpl.java:624)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyTraditionalPosList(MerchantManageController.java:279)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyTraditionalPosList(<generated>)
	at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:14 -耗时 : 50
2020-03-13 18:46:14 -MerchantManageServiceImpl -- getReferAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]
### The error may involve com.example.longecological.mapper.merchant.MerchantManageMapper.getReferAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: select     cast(t.id as char) as trapos_id,    t.sn,    t1.mer_name,    t1.mer_id,    cast(t2.performance as char) performance,t.state_status   from    t_user_traditional_pos_info t   inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn   inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn   where    t.user_id = ? and t.del = '0'           and t1.pos_typ='epos'                        ORDER BY t.id desc   limit 0,10
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getReferAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyTraditionalPosList(MerchantManageServiceImpl.java:624)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyTraditionalPosList(MerchantManageController.java:279)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyTraditionalPosList(<generated>)
	at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:14 -耗时 : 81
2020-03-13 18:46:20 -此处进行解密+验签+身份验证
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:20 -此处进行解密+验签+身份验证
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:20 -此处进行解密+验签+身份验证
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:20 -此处进行解密+验签+身份验证
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:20 -此处进行解密+验签+身份验证
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:20 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1957 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1957 and cre_month=202003 and pos_type is null 
2020-03-13 18:46:20 -==> Parameters: 
2020-03-13 18:46:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:20 -<==      Total: 1
2020-03-13 18:46:20 -耗时 : 18
2020-03-13 18:46:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:20 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:20 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:20 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type is null 
2020-03-13 18:46:20 -==> Parameters: 1957(String)
2020-03-13 18:46:20 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:20 -==> Parameters: 1957(String), 1957(String), 0(String)
2020-03-13 18:46:20 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:20 -==> Parameters: 1957(String), 1957(String)
2020-03-13 18:46:20 -<==      Total: 1
2020-03-13 18:46:20 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_type is null AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:20 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:46:20 -==> Parameters: 1957(String), 1957(String), 1(String)
2020-03-13 18:46:20 -==> Parameters: 1957(String)
2020-03-13 18:46:20 -<==      Total: 1
2020-03-13 18:46:20 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as amount from t_summary_traditional_pos_trans_all where user_id=1957 and pos_type='epos' 
2020-03-13 18:46:20 -==> Parameters: 
2020-03-13 18:46:20 -<==      Total: 0
2020-03-13 18:46:20 -耗时 : 32
2020-03-13 18:46:20 -<==      Total: 0
2020-03-13 18:46:20 -耗时 : 39
2020-03-13 18:46:20 -<==      Total: 1
2020-03-13 18:46:20 -耗时 : 47
2020-03-13 18:46:20 -<==      Total: 0
2020-03-13 18:46:20 -耗时 : 42
2020-03-13 18:46:24 -此处进行解密+验签+身份验证
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:24 -此处进行解密+验签+身份验证
2020-03-13 18:46:24 -此处进行解密+验签+身份验证
2020-03-13 18:46:24 -此处进行解密+验签+身份验证
2020-03-13 18:46:24 -此处进行解密+验签+身份验证
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,cacheKey:zfpay_user_freeze_571
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserFreezeCacheById(String) enable cache service,has cacheKey:zfpay_user_freeze_571 , return
2020-03-13 18:46:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosTradeAmountAvg
2020-03-13 18:46:24 -==>  Preparing: select IFNULL(cast(sum(performance) as char),'0') as merchant_performance,IFNULL(cast(TRUNCATE(sum(performance)/(select trade_num from t_summary_user_traditional_pos_benefit_all where user_id=1957 ),2) as char),'0') as avg_performance from t_summary_traditional_pos_trans_month where user_id=1957 and cre_month=202003 and pos_type='epos' 
2020-03-13 18:46:24 -==> Parameters: 
2020-03-13 18:46:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyTraditionalPosList
2020-03-13 18:46:24 -请求地址 : http://192.168.191.1:8080/api/sys/merchant/getReferAgencyHeadTraditionalPosInfo
2020-03-13 18:46:24 -<==      Total: 1
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:24 -耗时 : 17
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,cacheKey:zfpay_user_info_id_1957
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:24 -Map com.example.longecological.service.user.impl.UserInfoCacheServiceImpl.getUserInfoCacheById(String) enable cache service,has cacheKey:zfpay_user_info_id_1957 , return
2020-03-13 18:46:24 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_typ='epos' AND t.trade_status = ? and t2.performance=0 ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:24 -==> Parameters: 1957(String), 1957(String), 0(String)
2020-03-13 18:46:24 -==>  Preparing: select cast(performance as char) as performance, cast(pos_num as char) as pos_num, cast(trade_num as char) as trade_num from t_summary_user_traditional_pos_benefit_all where user_id = ? and pos_type='epos' 
2020-03-13 18:46:24 -==> Parameters: 1957(String)
2020-03-13 18:46:24 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_typ='epos' AND t.trade_status = ? ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:24 -==> Parameters: 1957(String), 1957(String), 1(String)
2020-03-13 18:46:24 -==>  Preparing: select cast(t.id as char) as trapos_id, t.sn, t1.mer_name, t1.mer_id, cast(t2.performance as char) performance,t.state_status from t_user_traditional_pos_info t inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn where t.user_id = ? and t.del = '0' and t1.pos_typ='epos' ORDER BY t.id desc limit 0,10 
2020-03-13 18:46:24 -==> Parameters: 1957(String), 1957(String)
2020-03-13 18:46:24 -<==      Total: 0
2020-03-13 18:46:24 -==>  Preparing: select cast(pos_num as char) as tra_pos_num,cast(act_num as char) as tra_act_num,cast((pos_num-act_num) as char) as tra_inact_num from t_summary_user_traditional_pos_benefit_all where user_id=? and pos_type is null 
2020-03-13 18:46:24 -==> Parameters: 1957(String)
2020-03-13 18:46:24 -MerchantManageServiceImpl -- getReferAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]
### The error may involve com.example.longecological.mapper.merchant.MerchantManageMapper.getReferAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: select     cast(t.id as char) as trapos_id,    t.sn,    t1.mer_name,    t1.mer_id,    cast(t2.performance as char) performance,t.state_status   from    t_user_traditional_pos_info t   inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn   inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn   where    t.user_id = ? and t.del = '0'           and t1.pos_typ='epos'                      AND t.trade_status = ?                  and t2.performance=0                             ORDER BY t.id desc   limit 0,10
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getReferAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyTraditionalPosList(MerchantManageServiceImpl.java:624)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyTraditionalPosList(MerchantManageController.java:279)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyTraditionalPosList(<generated>)
	at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:24 -耗时 : 44
2020-03-13 18:46:24 -<==      Total: 1
2020-03-13 18:46:24 -MerchantManageServiceImpl -- getReferAgencyHeadTraditionalPosInfo方法处理异常：null
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyHeadTraditionalPosInfo(MerchantManageServiceImpl.java:591)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyHeadTraditionalPosInfo(MerchantManageController.java:235)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyHeadTraditionalPosInfo(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:24 -MerchantManageServiceImpl -- getReferAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]
### The error may involve com.example.longecological.mapper.merchant.MerchantManageMapper.getReferAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: select     cast(t.id as char) as trapos_id,    t.sn,    t1.mer_name,    t1.mer_id,    cast(t2.performance as char) performance,t.state_status   from    t_user_traditional_pos_info t   inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn   inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn   where    t.user_id = ? and t.del = '0'           and t1.pos_typ='epos'                        ORDER BY t.id desc   limit 0,10
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getReferAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyTraditionalPosList(MerchantManageServiceImpl.java:624)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyTraditionalPosList(MerchantManageController.java:279)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyTraditionalPosList(<generated>)
	at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:24 -耗时 : 41
2020-03-13 18:46:24 -MerchantManageServiceImpl -- getReferAgencyTraditionalPosList方法处理异常：
### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
### The error may exist in file [D:\javaSVN\zf2_qh\zfPayOver\target\classes\mapper\merchant\MerchantManageMapper.xml]
### The error may involve com.example.longecological.mapper.merchant.MerchantManageMapper.getReferAgencyTraditionalPosList-Inline
### The error occurred while setting parameters
### SQL: select     cast(t.id as char) as trapos_id,    t.sn,    t1.mer_name,    t1.mer_id,    cast(t2.performance as char) performance,t.state_status   from    t_user_traditional_pos_info t   inner join t_sys_traditional_pos_info t1 on t1.sn = t.sn   inner join t_summary_traditional_pos_trans_all t2 on t2.user_id = ? and t2.sn = t.sn   where    t.user_id = ? and t.del = '0'           and t1.pos_typ='epos'                      AND t.trade_status = ?                                   ORDER BY t.id desc   limit 0,10
### Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
; bad SQL grammar []; nested exception is com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Unknown column 't1.pos_typ' in 'where clause'
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:234)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:73)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:446)
	at com.sun.proxy.$Proxy102.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:230)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy118.getReferAgencyTraditionalPosList(Unknown Source)
	at com.example.longecological.service.merchant.impl.MerchantManageServiceImpl.getReferAgencyTraditionalPosList(MerchantManageServiceImpl.java:624)
	at com.example.longecological.controller.merchant.MerchantManageController.getReferAgencyTraditionalPosList(MerchantManageController.java:279)
	at com.example.longecological.controller.merchant.MerchantManageController$$FastClassBySpringCGLIB$$43a1d8e6.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:88)
	at com.example.longecological.aspect.WebLogAspect.doAround(WebLogAspect.java:53)
	at sun.reflect.GeneratedMethodAccessor99.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:633)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:55)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.example.longecological.controller.merchant.MerchantManageController$$EnhancerBySpringCGLIB$$cf516531.getReferAgencyTraditionalPosList(<generated>)
	at sun.reflect.GeneratedMethodAccessor109.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:189)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:791)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1417)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-13 18:46:24 -耗时 : 49
2020-03-13 18:46:24 -耗时 : 49
